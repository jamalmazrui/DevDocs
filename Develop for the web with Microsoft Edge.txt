Contents
 Microsoft Edge Developer documentation
 Develop for the web with Microsoft Edge
 Microsoft Edge DevTools
 Microsoft Edge DevTools documentation
 Overview of DevTools
 What's new
 What's new in Microsoft Edge DevTools
 Microsoft Edge 102
 Microsoft Edge 101
 Microsoft Edge 100
 Microsoft Edge 99
 Microsoft Edge 98
 Microsoft Edge 97
 Microsoft Edge 96
 Microsoft Edge 95
 Microsoft Edge 94
 Microsoft Edge 93
 Microsoft Edge 92
 Microsoft Edge 91
 Microsoft Edge 90
 Microsoft Edge 89
 Microsoft Edge 88
 Microsoft Edge 87
 Microsoft Edge 86
 Microsoft Edge 85
 Microsoft Edge 84
 Microsoft Edge 83
 Microsoft Edge 81
 Microsoft Edge 80
 Experimental features
 Experimental features
 Simplify DevTools using Focus Mode
 Tools
 About the list of tools
 Inspect tool
 Analyze pages using the Inspect tool
 Device Emulation
 Emulate mobile devices (Device Emulation)
 Emulate dual-screen and foldable devices
 Emulate and test other browsers
 Elements tool, for CSS, HTML, and the DOM
 Inspect, edit, and debug HTML and CSS with the Elements tool
 CSS features reference
 Get started with CSS
 Get started viewing and changing CSS
 Inspect CSS Grid
 Edit CSS font styles and settings in the Styles pane
 Style editing for CSS-in-JS frameworks  Get started with HTML and the DOM
 Get started viewing and changing the DOM
 Console tool
 Console overview
 Console features reference
 Log messages in the Console tool
 Run JavaScript in the Console
 Console object API Reference
 Console tool utility functions and selectors
 Monitor changes in JavaScript using Live Expressions  Fix JavaScript errors that are reported in the Console
 Interact with the DOM using the Console
 Filter Console messages
 Sources tool, for editing files and debugging JavaScript
 Sources tool overview
 Get started debugging JavaScript
 Pause code with breakpoints
 JavaScript debugging features
 Run snippets of JavaScript on any webpage
 Edit files with Workspaces (Filesystem tab)
 Override webpage resources with local copies (Overrides tab)
 Mark content scripts as Library Code
 Disable JavaScript
 Map the processed code to your original source code, for debugging
  Securely debug original code by publishing source maps to the Azure Artifacts symbol server
  Securely debug original code by using Azure Artifacts symbol server source maps
 3D View tool
 Navigate webpage layers, z-index, and DOM using the 3D View tool
 Animations tool
 Inspect and modify CSS animation effects
 Application tool, for storage
 Application tool, to manage storage
 View, edit, and delete cookies
 View and edit local storage
 View and change IndexedDB data
 View and edit session storage
 View Web SQL data
 View Cache data
 Debug Progressive Web Apps (PWAs)
 Debug background services
 Changes tool
 Track changes to files using the Changes tool
 Coverage tool
 Find unused JavaScript and CSS code with the Coverage tool
 CSS Overview tool
 Identify potential CSS improvements
 Detached Elements tool
 Debug DOM memory leaks with the Detached Elements tool
 Developer Resources tool
 Developer Resources tool
 Issues tool
 Find and fix problems using the Issues tool
 JavaScript Profiler tool
 JavaScript Profiler tool
 Lighthouse tool
 Lighthouse tool
 Media tool
 View and debug media players information
 Memory tool
 Fix memory problems
 Memory terminology
 Record heap snapshots using the Memory tool
 Use Allocation instrumentation on timeline
 Speed up JavaScript runtime
 Memory Inspector tool
 Inspect a JavaScript ArrayBuffer with the Memory Inspector tool
 Network tool
 Inspect network activity
 Network features reference
 Network issues guide
 View page resources
 Service Worker improvements
 Network conditions tool
 Network conditions tool
 Override the user agent string
 Network Console tool
Compose and send web API requests using the Network Console tool
 Network request blocking tool  Block network requests
 Performance tool
 Get started analyzing runtime performance
 Analyze runtime performance
 Optimize website speed using Lighthouse
 Performance features reference
 Timeline event reference
 Display original function names in performance profiles
 Performance monitor tool
 Measure runtime performance of a page using the Performance monitor tool
 Quick source tool
 Display or edit source files using the Quick source tool
 Rendering tool
  Rendering tool, to see what a webpage looks like with different display options or vision deficiencies
 Emulate dark or light schemes in the rendered page  Force print preview mode
 Search tool
 Find source files for a page using the Search tool
 Security tool
 Understand security issues using the Security tool
 Sensors tool
 Override geolocation with the Sensors tool
 Simulate device orientation with the Sensors tool
 Source Maps Monitor tool
 Source Maps Monitor tool
 WebAudio tool
 WebAudio tool
 WebAuthn tool
 Emulate authenticators and debug WebAuthn
 Welcome tool
Welcome tool
 Command Menu and keyboard shortcuts
 Run commands in the Command Menu
 Keyboard shortcuts
 Settings and customization UI
 Customize DevTools
 Apply a color theme to DevTools
 Change DevTools placement (Undock, Dock to bottom, Dock to left)
 Change DevTools language settings
 Customize keyboard shortcuts
 Remote debugging
 Remotely debug Android devices
 Access local servers
 Remotely debug Android WebViews
 Remotely debug Surface Duo emulators
 Remotely debug Windows devices
 Accessibility
 Accessibility-testing features
 Overview of accessibility testing using DevTools
 Use the Inspect tool to detect accessibility issues by hovering over the webpage
 Test accessibility using Lighthouse
 Navigate DevTools with assistive technology
 Track which element has focus
 Alt-text for images
 Automatically test a webpage for accessibility issues
 Keyboard support
 Check for keyboard support by using the Tab and Enter keys
 Analyze the lack of indication of keyboard focus in a sidebar menu
 Analyze keyboard support on forms
 Test keyboard support using the Source Order Viewer
 Text contrast
 Test text-color contrast using the Color Picker
Check text-color contrast in the default state using the Inspect tool
 Verify accessibility of all states of elements
 Check for contrast issues with dark theme and light theme
 Screen reader support
 Test accessibility using the Accessibility tab
 Check the Accessibility Tree for keyboard and screen reader support
 Vision deficiencies (Rendering tool)
 Emulate vision deficiencies
 Verify that a page is usable by people with color blindness
 Verify that a page is usable with blurred vision
 Simulate reduced motion
 Verify that a page is usable with UI animation turned off
 Usable when narrow (Device Emulation)
 Verify that the webpage layout is usable when narrow
 Sample code for DevTools
 Use DevTools in Internet Explorer mode (IE mode)
 Microsoft Edge DevTools Protocol
 Contact the Microsoft Edge DevTools team
 Microsoft Edge extensions
 Overview of Microsoft Edge extensions
 What's new
 Released features for Microsoft Edge Add-ons
 Microsoft Edge Add-ons roadmap
 Getting started
 Extension concepts and architecture
 Create an extension tutorial, part 1
 Create an extension tutorial, part 2
 Sideload an extension
 Developer Guide
 API support
 Declare permissions
 Port a Chrome extension to Microsoft Edge
 Alternate methods of distributing extensions
 Native messaging
 Manifest
 Overview and timelines for migrating to Manifest V3
 Migrate an extension from Manifest V2 to V3
 Manifest file format for extensions
 Publish to the Add-ons website
 Register as an extension developer
 Verify your company account information
 Publish extensions using a GitHub account
 Add users to the Microsoft Edge program
 Publish an extension
 Update an extension
 Submission states
 View extensions analytics dashboard
 Reply to user reviews
 Manage account settings
 Contact extensions support
 Policies for Microsoft Edge Add-ons
 Content security policy
 Microsoft Edge developer ADA addendum
 Developer policies
 Microsoft Edge Add-ons API
 Using the Microsoft Edge Add-ons API
 Microsoft Edge Add-ons API Reference
 Extensions for enterprise
 Match patterns
 Hosting and updating
 Auto-update
 Progressive Web Apps
 Overview of Progressive Web Apps (PWAs)
 The user experience of PWAs
 How to
 Get started with PWAs
 Web app manifest
 Service Workers
 Offline scenarios
 Publish PWAs to the Microsoft Store
 Experimental features and origin trials
 Integrate PWAs on desktop
 Define icons and a theme color
 Re-engage users with badges, notifications, and push messages
 Handle files
 Handle URLs
 Handle protocols
 Display content in the title bar
 Share content with other apps
 Define app shortcuts
 Synchronize and update in the background
 What's new
 Sample PWAs
 WebView2
 Introduction to Microsoft Edge WebView2
 Setup and sample code
 Set up your Dev environment
 Sample Code
 WebView2 control and API samples
 WinUI 2 (UWP) browser app
 Win32 C++ app
 Win32 C++ app with Visual Composition
 WinForms browser app
 WPF .NET browser app
 Chrome DevTools Protocol extension in a WPF app
 Deployment samples
 WebView2 Deployment Visual Studio installer
 WiX Burn Bundle to deploy the Runtime
 WiX Custom Action to deploy the Runtime
 Tutorial: Create a WebView2 app
 Get started with WebView2
 Win32
 WinForms
 WinUI 2 (UWP, public preview)
 WinUI 3 (Windows App SDK)
 WPF
 Fundamentals
 Differences between Microsoft Edge and WebView2
 Navigation events
 Basic authentication
 Custom management of network requests
 Web and native interop
 Interop of native-side and web-side code
 Call web-side code from native-side code
 Call native-side code from web-side code
 Call native-side WinRT code from web-side code
 Understand the different WebView2 SDK versions
 Test upcoming APIs and features
 Distribute your app and the WebView2 Runtime
 Debug WebView2 apps
 Debug WebView2 apps
 Microsoft Edge DevTools
 Microsoft Visual Studio Code
 Microsoft Visual Studio
 Architecture
 Process model
 Threading model
 User data and history
 Manage user data folders
 Clear browsing data from the user data folder
 Advanced Topics and Best Practices
 Development best practices
 Develop secure WebView2 apps
 Customize context menus
 Use the Chrome DevTools Protocol
 Automate and test with Microsoft Edge WebDriver
 Deployment and distribution
 Deployment and distribution
 Enterprise management of WebView2 Runtimes
 Distribute an app as a single executable file
 Publish a UWP WebView2 app to the Microsoft Store
 Release Notes for the WebView2 SDK
 WebView2 Roadmap
 WebView2 Reference
 WebView2 API Reference
 Win32 C++
 Win32 C++ WebView2 API conventions
 Win32 C++ API Reference
 .NET
 Microsoft.Web.WebView2.Core
 Microsoft.Web.WebView2.Wpf
 Microsoft.Web.WebView2.WinForms
 WinRT
 Microsoft.Web.WebView2.Core
 COM Interop
 Contact the WebView2 Team
 Test and automation
 Test and automation in Microsoft Edge
 DevTools Protocol
 Use Origin Trials in Microsoft Edge
 Use Playwright to automate and test in Microsoft Edge
 Puppeteer overview
 WebDriver
 Use WebDriver to automate Microsoft Edge
 Use Internet Explorer Driver to automate IE mode in Microsoft Edge
 Capabilities and EdgeOptions
  Contact the Microsoft Edge WebDriver team  webhint extension for Visual Studio Code
 Web platform
 Web platform overview
 Site compatibility-impacting changes coming to Microsoft Edge
 Move users to Microsoft Edge from Internet Explorer
 Tracking prevention in Microsoft Edge
 Detect Microsoft Edge from your website
 Detect Windows 11 using User-Agent Client Hints
 Customize the password reveal button
 Microsoft Edge IDE integration
 Microsoft Edge IDE integration
 Visual Studio Code
 Visual Studio Code for web development
 Microsoft Edge DevTools extension
 Open source files in Visual Studio Code
 Debugger for Edge
 Visual Studio for web development
 Accessibility in Microsoft Edge
 Accessibility in Microsoft Edge
 Design accessible websites
 Build accessible websites  ARIA and UI automation
 Accessibility testing
 Videos about web development with Microsoft Edge
 Privacy whitepaper
 The Web We Want initiative



 
 Develop for the web with Microsoft Edge
 	6/21/2022 • 4 minutes to read • Edit OnlineDevelop for the web with Microsoft Edge by using Microsoft Edge DevTools, Microsoft Edge extensions, Progressive Web Apps, WebDriver automation, WebView2, and more.
 Microsoft Edge DevTools
The Microsoft Edge browser comes with built-in web development tools, called Microsoft Edge DevTools. DevTools is a set of web development tools that appears next to a rendered webpage in the browser. DevTools provides a powerful way to inspect and debug webpages and web apps. You can even edit source files and create website projects, all within the DevTools environment.
With DevTools, you can do the following:
 Inspect, tweak, and change the styles of elements in the webpage using live tools with a visual interface.
.html, .css, .js.pngInspect where the browser stored content to construct the webpage, including , and  file formats.
 Emulate how your webpage behaves on different devices and simulate a mobile environment, complete with different network conditions. Inspect the network traffic and see the location of the problems.
 Debug your JavaScript using breakpoint debugging and with the live console. Find memory problems and rendering issues with your web apps.
 Find accessibility, performance, compatibility, and security issues in your products, and use DevTools to fix the accessibility issues that are found.
 Use a development environment to sync changes in DevTools with the file system and from the web.
See Overview of DevTools.
 Microsoft Edge extensions
Create an extension for Microsoft Edge, to add to or modify the browser's features. Extensions improve the browser experience, to provide a specialized function that's important to a target audience.
You can create a Microsoft Edge extension if you have an idea or product that is based upon either a specific web browser, or improvements to features of specific webpages. Examples of companion experiences include ad blockers and password managers.
A Microsoft Edge extension is structured similarly to a regular web app, and usually includes:
An app manifest JSON file that contains basic platform information.
A JavaScript file that defines the behavior of the browser extension. HTML and CSS files that define the user interface.
See Overview of Microsoft Edge extensions.
 Progressive Web Apps
Progressive Web Apps use open web technologies to provide cross-platform interoperability. They work like native apps on supporting platforms, and like regular websites on other browsers.
Progressive Web Apps combine the best of the web and compiled apps, to provide users an app-like experience, customized for their devices. A Progressive Web App is a website that's progressively enhanced to function like installed, native apps on supporting platforms, while functioning like regular websites on other browsers.
Progressive Web Apps have a much lower cross-platform development cost than compiled apps that require a specific codebase for each platform, such as a separate codebase for Android, for iOS, and for each desktop operating system.
See Overview of Progressive Web Apps (PWAs).
 WebView2
The WebView2 control is powered by Microsoft Edge, and enables you to embed web technologies (HTML, CSS, and JavaScript) in your native applications. Combine the ubiquity of the web platform, with the full capabilities of native platforms.

The following diagram shows the spectrum of apps, from maximum reach, to maximum power:

Hybrid apps, in the middle of this spectrum, allow you to enjoy the best of both worlds: the ubiquity and strength of the web platform, combined with the power and full capabilities of the native platform.
See Introduction to Microsoft Edge WebView2.
 Test and automation
The following are tools to automate testing in Microsoft Edge:
DevTools Protocol is used to instrument, inspect, debug, and profile browsers. Use Origin Trials to try experimental APIs.
Playwright provides cross-browser automation through a single API.
Puppeteer's API controls Microsoft Edge via DevTools Protocol.
WebDriver simulates user interaction with Microsoft Edge. webhint linting checks code for errors and best practices.
See Test and automation in Microsoft Edge.
 Web platform
Considerations for developing websites and products for the web platform include the following:
Testing for coming changes that could impact compatibility of your website with Microsoft Edge.
Moving users to Microsoft Edge from Internet Explorer.
Configuring tracking prevention in Microsoft Edge.
Detecting Microsoft Edge from your website.
Customizing the Password Reveal button.
Detecting Windows 11 by using User-Agent Client Hints.
See Web platform.
 Microsoft Edge IDE integration
Various features of Microsoft tools provide integration of development using Microsoft Edge, Visual Studio Code, and Visual Studio, to develop your products, webpages, and web apps that use and work with full integration in Microsoft Edge.
See Microsoft Edge IDE integration.
 Accessibility in Microsoft Edge
Development of your webpages, web apps, and web-enabled products is robustly supported through the extensive Accessibility features in Microsoft Edge and its tooling ecosystem.
See Accessibility in Microsoft Edge.
 How to use this documentation
These are tips for using the documentation UI at docs.microsoft.com.
 Zoom an image in the docs
To see details of a screenshot or diagram:
1. Right-click the image, and then select Open image in new tab.
2. Close the image tab to return to the article.
 Look up key words and terms in "Filter by title" text box
The multi-purpose Filter by title text box supports:
Navigating the table of contents (TOC).
Index term lookup of key words. Full-text searching the docs.
In the Filter by title box in the upper left, enter a term or key word to find:

If the desired article isn't found, select Search for "search-term" in all Microsoft Edge documentation:

The full-text search page initially searches all Microsoft Edge docs. Or, click the View all results on Microsoft Docs link for a broader search:

 Provide feedback or report issues in the Microsoft Edge Developer docs
To provide feedback or enter issues:
Contact the Microsoft Edge DevTools team
Contact Microsoft Edge extensions support Contact the WebView2 team
To submit and view feedback for a specific page of the documentation, at the bottom of the page, click the This page button.



 
 Overview of DevTools
 	6/21/2022 • 15 minutes to read • Edit OnlineThe Microsoft Edge browser comes with built-in web development tools, called Microsoft Edge DevTools. DevTools is a set of web development tools that appears next to a rendered webpage in the browser. DevTools provides a powerful way to inspect and debug webpages and web apps. You can even edit source files and create website projects, all within the DevTools environment.
With DevTools, you can do the following:
 Inspect, tweak, and change the styles of elements in the webpage using live tools with a visual interface.
.html, .css, .js.pngInspect where the browser stored content to construct the webpage, including , and  file formats.
 Emulate how your website behaves on different devices and simulate a mobile environment, complete with different network conditions. Inspect the network traffic and see the location of the problems.
 Debug your JavaScript using breakpoint debugging and with the live console. Find memory problems and rendering issues with your web apps.
 Find accessibility, performance, compatibility, and security issues in your products, and use DevTools to fix the accessibility issues that are found.
 Use a development environment to sync changes in DevTools with the file system and from the web.
 Open DevTools
In Microsoft Edge, you can open DevTools by using the mouse or keyboard, in any of the following ways. Which tool is opened depends on how you open DevTools.
Main ways:
ACTIONRESULTING TOOLRight-click any item on a webpage, and then select Inspect.The Elements tool, with the DOM tree expanded to show the right-clicked page element.Shift+I (Windows, Linux) or CommandPress Ctrl ++
Option + I (macOS).The previously used tool, or the Welcome tool.F12Press .The previously used tool, or the Welcome tool.Additional ways:
ACTIONRESULTING TOOLOn the Microsoft Edge toolbar, select Settings and more ( ) > More tools > Developer tools.The previously used tool, or the Welcome tool.Shift+J (Windows, Linux) or CommandPress Ctrl ++
Option + J (macOS).The Console tool.ACTIONRESULTING TOOLShift+C (Windows, Linux) or CommandPress Ctrl ++
Option + C (macOS).<body>The Elements tool, with the DOM tree expanded to show the  element.Shift+F10Up Arrow and then EnterPress  to open the right-click menu. To select the Inspect command, press .<html>The Elements tool, with the DOM tree expanded to show the  element.TabUp ArrowEnterPress  and Shift + Tab to put focus on a page element. Then press Shift + F10 to open the right-click menu. To select the Inspect command, press and then .The Elements tool, with the DOM tree expanded to show the focused page element.	 Open DevTools by right 	-clicking an item in a webpage
A good way to open DevTools is to right-click an item on a webpage, and then select Inspect:

DevTools opens, with the right-clicked element highlighted in the DOM tree in the Elements tool:

 Open DevTools by using the Microsoft Edge toolbar 
...On the Microsoft Edge toolbar, you can select Settings and more () > More tools > Developer tools:


 Have DevTools automatically open when you open a new tab 
To have DevTools automatically open whenever you open a new tab in the browser:
--auto-open-devtools-for-tabs1. At the command line, open Microsoft Edge, passing in the  flag, as follows:
Windows command prompt:
start msedge --auto-open-devtools-for-tabs
Windows PowerShell:
Start-Process -FilePath "msedge" -ArgumentList "--auto-open-devtools-for-tabs"
bash shell on macOS:
/Applications/Microsoft\ Edge\ Beta.app/Contents/MacOS/Microsoft\ Edge\ Beta --auto-open-devtoolsfor-tabs
bash shell on Linux:
microsoft-edge-dev --auto-open-devtools-for-tabs
 Turning off the F12 keyboard shortcut 
F12To prevent pressing  from opening DevTools:
edge://settings/system1. In Microsoft Edge, go to .
2. In the Developer Tools section, turn off the Open the DevTools when the F12 key is pressed toggle.

 Keyboard support
You can interact with DevTools using the mouse or keyboard. Keyboard shortcuts provide a quick way to access functionality, and are needed for accessibility. Various tools are increasingly accessible through the keyboard and assistive technologies such as screen readers.
See Keyboard shortcuts and Navigate DevTools with assistive technology.
 Change where DevTools is docked in the browser
You can dock DevTools in the right, left, or bottom of the browser, or undock it into a separate window. See Change DevTools placement (Undock, Dock to bottom, Dock to left).
 Zoom DevTools in or out
The DevTools UI is implemented using HTML and CSS, like web pages, so you can zoom in and out by using the standard keyboard shortcuts. The zoom levels for DevTools and the rendered page are independent.
To zoom the DevTools portion of the browser:
1. If focus isn't already on DevTools, click somewhere in DevTools.
Ctrl++ or Ctrl+- (Windows or Linux). Or, press Command++ or Command+-2. Press  (macOS).

To zoom the rendered page, click the page, and then use the same keyboard shortcuts as above.
To restore zoom to 100%:
1. Make sure focus is on the desired part of the browser, either DevTools or the rendered page.
Ctrl+0 or Ctrl+NumPad0 (Windows or Linux), or Command+02. Press  (macOS).
To zoom DevTools Settings:
1. In DevTools Settings, click Close (x) in the upper right.
2. Change the zoom level of DevTools, as described above.
3. Click the Settings () button.
To zoom DevTools by using the Command Menu:
1. Click the Customize and control DevTools () menu button, and then select Run command.
2. In the Command Menu, start typing zoom, and then select a zoom command:
Reset zoom level
Zoom in
Zoom out
 Display DevTools Tooltips
The DevTools Tooltips feature helps you learn about all the different tools and panes. Hover over each outlined region of DevTools to learn more about how to use the tool. To turn on Tooltips, do one of the following:
...Ctrl+Shift+H (Windows, Linux) or Cmd+Shift+HtooltipsSelect Customize and control DevTools () > Help > Toggle the DevTools Tooltips.
Press  (macOS).
Open the Command Menu and then type .
Then hover over each outlined region of DevTools:

EscTo turn off Tooltips, press .
 Features of the main toolbar
DevTools gives you an amazing amount of power to inspect, debug, and change the website currently displayed in the browser. Most of the tools display the changes live. Live updates make the tools incredibly useful to refine the appearance and navigation or functionality of a web project without the need to refresh or build it.
 Tabbed tool panels containing tabs and pages 
Other than a couple of icon tools (the Inspect tool and Device Emulation), DevTools is divided into and a set of tabbed tools, such as the Elements tool, the Console tool, and the Sources tool. Within the Command Menu, tools are referred to as panels. A tool's tab contains a panel which contains the tool's UI.
Higher-level tabs:
Tools are organized into a set of tabs on the main toolbar and on the drawer toolbar. Most tools are also called panels. A panel is the inner UI of a tool. A tool has a tab that can be present on the main toolbar and Drawer toolbar.
Lower-level tabs:
Within the panel of some tools, there are one or more sets of tabs (tabbed panes). For example, the Elements tool contains a set of tabs that includes Styles, Event Listeners, and Accessibility tabs. For other tools, the tool's panel has pages listed along the left side.
 The main toolbar and the Drawer toolbar 
There are two toolbars: the main toolbar at the top of DevTools, and the Drawer at the bottom when you press 
Esc.
The main toolbar contains the following features:
Icon tools:
Inspect tool () toggle button.

 Inspect tool 
When you click the Inspect tool () button, you can select an element on the current webpage. While the Inspect tool is active, you can move your mouse over different parts of the webpage to get detailed information about page elements, along with a multi-color overlay that shows the layout dimensions, padding, and margin of the page element.

 Device Emulation 
Click the Device Emulation () button to display the current website in an emulated device mode. The Device Emulation tool allows you to run and test how your product reacts when you resize the browser. It also gives you an estimation of the layout and behavior on a mobile device.

See Emulate mobile devices (Device Emulation).
 Welcome tool 
Includes information about the new features of DevTools, how to contact the team, and provides information about certain features.
 Elements tool 
Allows you to inspect, edit, and debug your HTML and CSS. You can edit in the tool while displaying the changes live in the browser.
The Elements tool is always present on the main toolbar.
  
Console tool
In the Console tool, you can:
View and filter logged messages from network requests or from JavaScript log statements.
Enter JavaScript statements to evaluate in realtime. Expressions are evaluated in the current context, such as when the JavaScript debugger in the Sources tool is paused at a breakpoint.
The Console tool is always present on the main toolbar and on the Drawer toolbar.
See Console.
 Sources tool 
The Sources tool is a code editor and JavaScript debugger. You can edit projects, maintain snippets, and debug your current project.
The Sources tool is always present on the main toolbar.
 Network tool 
The Network tool allows you to monitor and inspect requests or responses from the network and browser cache. You can filter requests and responses to fit your needs and simulate different network conditions.
See Inspect network activity.
 Performance tool 
See Get started analyzing runtime performance.
 Memory tool 
See Fix memory problems.
 Application tool 
See View, edit, and delete cookies.
 Security tool 
See Understand security issues using the Security tool.
 Lighthouse tool 
See Lighthouse tool.
 CSS Overview tool 
Identify potential CSS improvements.
See CSS Overview tool.
 More tabs button 
To display a tool that's open but hidden because the window is too narrow, click the More tabs () button.
 More Tools button 
To add a tool to the toolbar, click the More Tools () button.
 JavaScript errors counter 
The JavaScript errors counter () button displays the following:
X A red circle containing an 	, followed by the number of JavaScript errors that were automatically detected on the current webpage.
 A yellow triangle containing an exclamation mark, followed by the number of JavaScript warnings that were automatically detected on the current webpage.
The tooltip for the JavaScript counter button is Open Console to view # errors, # warnings.
Click the JavaScript errors counter to open the Console and learn about the error.
 Issues counter 
The Issues counter () button shows the number of HTML or CSS issues that are automatically found on the current webpage.
The tooltip for the Issues counter is Open Issues to view # issues. The button's icon is a blue speech bubble icon followed by the number of HTML or CSS issues.
Click the Issues counter to open the Issues tool.
 Settings button 
To open the DevTools Settings webpage, click the Settings () button. The Settings page contains the following sub-pages:
Preferences
Workspace
Experiments
Library Code
Devices
Throttling
Locations
Shortcuts
Symbol Server
See Settings in Customize DevTools.
 Send Feedback button 
To open the Send Feedback dialog, click the Send Feedback () button. The Send Feedback dialog opens. Enter information to describe what happened and automatically includes a screenshot. Use Send Feedback to connect with DevTools team to report problems, issues, or suggest ideas.
See Contact the Microsoft Edge DevTools team.
 Customize and control DevTools menu 
The Customize and control DevTools () button opens a dropdown menu that enables you to define where to dock DevTools, search, open different tools, and more.
 Close DevTools button 
Click the Close DevTools () button in the upper right corner of DevTools to close DevTools and use the entire window to display the current webpage.
 Overview of all tools
For a summary of each tool, see Overview of all tools in About the list of tools.
 Tool, tab, or panel
Often the words "tool", "tab", or "panel" are used interchangeably. In the Command Menu, the tools are called panels; for example, the Elements tool is called the Elements panel. To switch to the Elements tool, you select the Elements tab. There's a More Tools (+) button and list, and there's a More tabs button on the toolbar, both of which are used to select tools, which are also called panels.
You can customize each of the tools, and the content of a tool can change based on the context.
 About Panel and Drawer tools
The tools that are listed in the More Tools (+) can be displayed either as a Panel tool (on the main toolbar) or a Drawer tool (on the Drawer toolbar). In the Command Menu, each of these tools is labelled as either a Panel tool or as a Drawer tool. But you can add them to either the main toolbar or the Drawer toolbar, and you can use any of the following methods to open them or move them between the two toolbars.
Use the More Tools (+) menu to select any of the Panel tools or Drawer tools. A More Tools menu appears in multiple places:
 In the upper right of DevTools, on the main toolbar, click the Customize and control DevTools () button, hover over the More tools command, and then select a tool.
On the main toolbar at the top of DevTools (where Panel tools usually go).
On the Drawer toolbar (where Drawer tools usually go).
TASKSTEPSOpen a tool on the main toolbar at the top of DevToolsOn the main toolbar at the top of DevTools, click More Tools (+) and then select a tool.Open a tool on the Drawer toolbarWhen DevTools has focus, press Esc to show the Drawer. On the Drawer toolbar, click More Tools (+) and then select a tool.Move a tool from the Drawer toolbar to the main ToolbarWhen DevTools has focus, press Esc to show the Drawer. On the Drawer toolbar, right-click the tool's tab, and then select Move to top.Move a tool from the main toolbar to the drawer ToolbarOn the main toolbar, right-click the tool's tab, and then select Move to bottom.Open a tool in its default toolbarShift+P (Windows, Linux) or CommandWhen DevTools has focus, open the Command Menu by pressing Ctrl +
+ Shift + P (macOS). Type the name of the tool, and then select the tool.In addition to Panel tools and Drawer tools, DevTools includes the following tools:
The Inspect tool. See Use the Inspect tool to detect accessibility issues by hovering over the webpage.
The Device Emulation tool. See Emulate mobile devices (Device Emulation).
The Command Menu. See Run commands with the Microsoft Edge DevTools Command Menu.
 See also 
 About the list of tools
 Power tip: Use the Command Menu
DevTools provides lots of features and functionality to use with your website. You can access the different parts of DevTools in many ways, but often a fast way is to use the Command Menu.

In the Command Menu, the tools are called "panels"; for example, the Elements tool is called the Elements panel. To switch to the Elements tool, you select the Elements tab.
To open the Command Menu, do either of the following:
Ctrl+Shift+P (Windows, Linux) or Command+Shift+PClick the Customize and control DevTools () button, and then select Run command.
Press  (macOS).
The Command Menu allows you to type commands to display, hide, or run features in DevTools. With the Command Menu open, enter the word changes, and then select Drawer: Show Changes.
.jsThe Changes tool opens, which is useful when you edit CSS. In this case, the Command Menu provides a fast alternative to selecting More Tools (...) and then selecting Changes, or editing a  file in the Sources tool, then right-clicking and selecting Local modifications.
After you type cha, the Command Menu displays the options:

EnterPress , and then the Changes tool opens:

See also Run commands with the Microsoft Edge DevTools Command menu.
 Customizing DevTools
F1You can customize DevTools to meet your needs for the way you work. To change settings, click Settings (the gear icon on the top right), or press .
In the Settings > Preferences page, you can change several parts of DevTools. For example, you can use the
Match the browser language setting to use the same language in DevTools that is used in your browser. For another example, use the Theme setting to change the color theme of DevTools.

You can also change the settings of advanced features, such as:
Add local files to a Workspace.
Filter library code with the Ignore List.
Define the Devices you want to include in the device simulation and test mode. For more information, see Emulate mobile devices (Device Emulation).
Select a network Throttling profile.
Define simulated Locations.
Customize keyboard Shortcuts. For example, to use the same shortcuts in DevTools as in Visual Studio Code, select Match shortcuts from preset > Visual Studio Code.

 Trying experimental features
The DevTools team provides new features as experiments in DevTools. You can turn each of the experiments on or off. To see the full list of Experimental features, in DevTools, select Settings (the gear icon), and then select Experiments.
To preview the latest features coming to DevTools, download Microsoft Edge Canary, which builds nightly.
 See also
About the list of tools
Get started with HTML and the DOM
Inspect and change the current webpage
Emulate how your product behaves on different devices
Inspect, tweak, and change the styles of elements
Debug your JavaScript
Live console
Accessibility, performance, compatibility, and security issues
Inspect the network traffic
Inspect where the browser stored content
Evaluate the performance
Memory problems
Rendering issues
Use a development environment
Sync changes in DevTools with the file system
Override files from the web
 
 What's new in Microsoft Edge DevTools
 	6/21/2022 • 2 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
What's New in DevTools (Microsoft Edge 102)
What's New in DevTools (Microsoft Edge 101)
What's New in DevTools (Microsoft Edge 100)
What's New in DevTools (Microsoft Edge 99)
What's New in DevTools (Microsoft Edge 98)
What's New in DevTools (Microsoft Edge 97)
What's New in DevTools (Microsoft Edge 96)
What's New in DevTools (Microsoft Edge 95)
What's New in DevTools (Microsoft Edge 94)
What's New in DevTools (Microsoft Edge 93)
What's New in DevTools (Microsoft Edge 92)
What's New in DevTools (Microsoft Edge 91)
What's New in DevTools (Microsoft Edge 90)
What's New in DevTools (Microsoft Edge 89)
What's New in DevTools (Microsoft Edge 88)
What's New in DevTools (Microsoft Edge 87)
What's New in DevTools (Microsoft Edge 86)
What's New in DevTools (Microsoft Edge 85)
What's New in DevTools (Microsoft Edge 84)
What's New in DevTools (Microsoft Edge 83)
What's New in DevTools (Microsoft Edge 81)
What's New in DevTools (Microsoft Edge 80)
 
 What's New in DevTools (Microsoft Edge 102)
 	6/21/2022 • 5 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
TIP
The Microsoft Build 2022 conference was on May 24-26. Learn more about new features for memory, performance, and production debugging in DevTools and new capabilities in the web platform for PWAs in the following videos:
Tips for debugging memory, performance, & production issues
Microsoft Edge | Build 2022: Enriching desktop experiences with the power and reach of the web DevTools extension: New browser with device and mode emulation and sourcemap support
The Microsoft Edge DevTools extension for Visual Studio Code now has a browser preview that allows you to emulate different devices. Click the new Emulate CSS media features () button, to preview the current project in different modes, such as Dark, Light, Print, and High Contrast:
Click the new Emulate vision deficiencies ( webpage looks like with blurred vision or color vision deficiencies.
Other new features include a simpler way to toggle CSS mirroring, which now also supports sourcemaps. This means that you can debug and modify CSS created by Sass, React, and other abstractions live in the browser and see the changes in the source files.
See also:
Device and state emulation in Microsoft Edge DevTools extension for Visual Studio Code. Map the processed code to your original source code, for debugging CSS Mirror Editing with Sourcemaps: Known Issues and Feedback.
 Save all strings from a heap snapshot to JSON
(string)In Microsoft Edge 102, when taking a heap snapshot in the Memory tool, you can now export all string objects from the snapshot to a JSON file. In the Memory tool, in the Constructor section, click the new Save all to file button next to the  entry.

The Memory tool exports a JSON file that contains all of the string objects from the heap snapshot:

See also:
 Save and export strings from a heap snapshot to JSON in Record heap snapshots using the Memory tool.
 New filters for retainers in the Memory tool
In previous versions of Microsoft Edge, cycles and internal nodes were displayed in the Retainers section of a heap snapshot. To help simplify the retainer path, in Microsoft Edge 102, the Retainers section in the Memory tool now has new filters to hide cycles and to hide internal nodes in the retainer path.
In the Retainers section, a cycled node is indicated by being grayed out.
In the following image, in the Filter edges dropdown menu, Hide cycled is not selected, so a cycled node (grayed out) is displayed:

In the following image, in the Filter edges dropdown menu, Hide cycled is selected, so the cycled node is not displayed:

Cycles are nodes that appear at least twice in a retainer path. One appearance of a node is earlier in the retainer path, and other appearances of that node are later in the retainer path. To free up memory, it's most important to remove the occurrence of the node which appears first in the retainer path. The second and potentially subsequent appearances of the node are still displayed in the Retainers section.
Internal nodes are objects that are specific to V8 (the JavaScript engine in Microsoft Edge). Internal nodes are also displayed in the Retainers section.
See also:
 Cycles in Memory terminology.
 The Inspect element tooltip can now be persisted until you dismiss it
Previously, in the Elements tool, the overlay for the node that you selected only displayed on hover when you used the Inspect tool (). The previous design was difficult to use with a screen magnifier or other assistive technologies.
In Microsoft Edge 102, when using the Inspect tool and moving around the rendered webpage, you can keep
Ctrl+Alt (Windows, Linux) or Ctrl+Optionthe current Inspect overlay displayed. Press and hold  (macOS)
while you move around in the rendered webpage. The existing tooltip and grid color overlay for the Inspect tool remains displayed while you hover over different parts of the rendered webpage:

CtrlAlso, you can now press  to hide the Inspect tool's overlay while you move the mouse pointer over the rendered webpage.
For the history of this feature in the Chromium open-source project, see Issue 1316208.
See also:
Persisting the Inspect tool's tooltip and grid color overlay in Analyze pages using the Inspect tool.
Persisting the Inspect tool's tooltip and grid color overlay in Navigate DevTools with assistive technology.
 Improved rendering of dropdown menus, buttons, and icons in highcontrast mode
In previous versions of Microsoft Edge, the following items didn't render correctly in high-contrast mode:
Dropdown menus in the Issues tool.
Buttons in the Detached Elements tool. The Activity Bar in Focus Mode.
In Microsoft Edge 102, these issues have been fixed.
The Issues tool's menus are displayed correctly in high-contrast mode:

The Detached Elements tool's UI is displayed correctly in high-contrast mode:

The Activity Bar and Quick View (of Focus Mode) are displayed correctly in high-contrast mode:

See also:
Navigate DevTools with assistive technology
Windows high contrast mode
Simplify DevTools using Focus Mode
 Learn about experiments in DevTools from Settings
In the Settings > Experiments page, each experiment now has a Help () button:

To get more information about an experimental feature, click the corresponding Help () button. The Help button displays the relevant section of the Experimental features article.
 Better layout of Network settings when narrow
In previous versions of Microsoft Edge, opening Network settings with the gear icon in the Network tool would overlap when the DevTools were very narrow:

In Microsoft Edge 102, this issue has been fixed. The individual settings now display better in narrow layouts:

See also:
 Capture screenshots during page load in Network features reference, about configurable settings of the Network tool.
 Announcements from the Chromium project
Microsoft Edge 102 also includes the following updates from the Chromium project:
New shortcuts to emulate light and dark themes
Improved security on the Network Preview tab
Improved reloading at breakpoint
Console updates
Handle script execution errors in the Console
Commit live expression with Enter
Display inherited highlight pseudo-elements in the Styles pane
[Experimental] Copy CSS changes
[Experimental] Picking color outside of browser
 
 What's New in DevTools (Microsoft Edge 101)
 	6/21/2022 • 3 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 The Console tool is now available in Visual Studio Code
The Console is one of the most popular tools in DevTools. You can now access the Console tool in the Microsoft Edge Developer Tools extension for Visual Studio Code. This integrated DevTools Console allows you to see your log messages right next to your code. Using the Console, you can also:
ConsoleTry out some JavaScript statements.
Access the window object.
Call the methods of the  object, as described in Console object API Reference.
Use the Console utilities to access the DOM, as described in Console tool utility functions and selectors.
You can use the Console as the main tool, or use it together with the Elements and Network tools.
The Console tool in the main toolbar of the Microsoft Edge DevTools extension for Visual Studio Code:

The Console tool in the Drawer of the Microsoft Edge DevTools extension for Visual Studio Code:

For more information, see Microsoft Edge DevTools extension for Visual Studio Code > Console integration.
 Source maps are now cached with IndexedDB
In previous versions of Microsoft Edge, if you were hosting large source map files on your server or in Azure Artifacts symbol server, DevTools would fetch these source maps every time the page refreshed. Fetching these source maps repeatedly created more network requests for DevTools, and slowed down debugging.
In Microsoft Edge 101, DevTools caches source maps by using IndexedDB. When you refresh the page, source maps are now served from the IndexedDB cache, instead of being requested again from your server or the Azure Artifacts symbol server. Use the Load status column in the Source Maps Monitor tool to verify that source maps are being loaded from the cache. To clear the IndexedDB cache and force DevTools to reload source maps, run the Clear source maps cache command in the Command Menu.
When you first load the webpage, the Source Maps Monitor tool shows that the source maps aren't cached yet:

When you reload the webpage, the Source Maps Monitor tool shows that the cached source maps are used:

 Tracking pending network requests when exporting HAR files
In Microsoft Edge 101, the new Status text column has been added to the Network tool. The Status text column provides human-readable equivalent messages for the HTTP status codes that are reported in the Status column.
In addition, a new setting has been added to the Network tool: Include pending requests in HAR file. If you need to record Pending network requests when exporting a HAR file in the Network tool, turn on the Include pending requests in HAR file setting. The Status text column will now include the (pending) state for any pending network requests.

To learn more about the available columns in the request log, see Network features reference > Add or remove columns.
 Updated UI and camera controls in 3D View
In Microsoft Edge 101, the 3D View tool has two new buttons: Pan view () and Rotate view (). Use these buttons to switch between panning around the canvas or rotating the canvas. Click the Pan view or Rotate view button, and then drag in the desired direction with your mouse, or use the arrow keys.
The UI now provides a more uniform and intuitive experience. The panes are organized more clearly, and accessibility issues have been fixed.

See Navigate webpage layers, z-index, and DOM using the 3D View tool.
 Switching themes no longer requires reloading DevTools
In previous versions of Microsoft Edge, switching themes in DevTools required reloading DevTools to apply the new theme. In Microsoft Edge 101, you can quickly try different themes without having to reload DevTools.

For more information about using themes from Visual Studio Code in DevTools, see Apply a color theme to DevTools.
 Announcements from the Chromium project
Microsoft Edge 101 also includes the following updates from the Chromium project:
View cascade layers in the Styles pane
Support for the hwb() color function
Improved the display of private properties

 
 What's New in DevTools (Microsoft Edge 100)
 	6/21/2022 • 4 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Join the Microsoft Edge DevTools community at GitHub
We're excited to announce the new MicrosoftEdge > DevTools repo at GitHub! This new repo is a place for our community of developers to send us ideas, feedback, suggestions, and tips to improve DevTools. We're eager to discuss with you how DevTools can better serve your needs and meet the challenges you face every day in building great web experiences.


Head to our DevTools repo at GitHub to become a part of the Edge DevTools community.
 Filter heap snapshots summary by node type
When looking at all the objects in a heap snapshot in the Memory tool, it can be difficult to focus on specific objects or retaining paths. Now in Microsoft Edge 100, you can use the new Node Types filter when looking at a heap snapshot, to focus on only specific types of nodes. For example, to see only the arrays and string objects that are in the heap, select the Array and String entries in the Node Types filter:

See also:
 Record heap snapshots using the Memory tool - taking a heap snapshot and analyzing the heap.
 Use DevTools in Czech and Vietnamese
Customizing and simplifying the developer experience includes making our tools available to everyone, regardless of their preferred language. We've added two new languages, Czech and Vietnamese, to our list of supported languages, and will keep adding more. If your preferred language isn't supported in DevTools, let us know!

See also:
 Change DevTools language settings
 The Network tool now displays how a request was fulfilled
HARIn Microsoft Edge 100, the Network tool supports a new Fulfilled by column in the request log. If the request was fulfilled by your service worker or from the cache, that information is now tracked in the Fulfilled by column. When exporting or importing the request log as a  file, the information in the Fulfilled by column is also included.

See also:
Filter requests by properties in Network features reference. Service Worker improvements.
For the history of this feature, see Issue #16.
 Filter messages in the Issues tool by severity and browser target
In the Issues tool, the new Severity and Browser dropdown lists allow you to filter messages by severity and browser target, to help you focus on the most relevant feedback. You can select or clear the options in each dropdown list.
To see all relevant messages, you might need to refresh the page. If prompted, in the Issues tool, click the Regenerate issues button.
By default, the Severity filter is set to show only warnings and errors:

The Browser filter only applies to browser compatibility feedback, which is shown in the Compatibility section of the Issues list. By default, the Browser filter shows messages for the top browsers, as defined by Browserslist:

In the following example, messages about Firefox and Firefox for Android are filtered out:

See also:
 Filter issues in Find and fix problems using the Issues tool.
 When importing a performance profile, links now map to your original code
When recording a performance profile, the flame chart in the Performance tool displays links from each event on the main thread to the corresponding JavaScript function in the Sources tool. However, these links are broken when you export and import a performance profile.
In Microsoft Edge 100, the links from an imported performance profile now use source maps from Azure Artifacts symbol server to map back to your familiar, original source code. The performance profile must have been exported in Microsoft Edge 100 (or greater), so that the profile includes the information that's needed to resolve source maps in the exported performance trace.

See also:
Map the processed code to your original source code, for debugging
Securely debug original code by publishing source maps to the Azure Artifacts symbol server
Securely debug original code by using Azure Artifacts symbol server source maps
 Fix: The Waterfall view in the Network tool now matches Visual Studio Code themes
In previous versions of Microsoft Edge, the Waterfall view of requests in the Network tool didn't match the themes from Visual Studio Code that apply to the rest of DevTools. In Microsoft Edge 100, this issue has been fixed.
Before Microsoft Edge 100, the selected theme wasn't applied in the Waterfall view:

Now in Microsoft Edge 100, the selected theme is applied to the Waterfall view of requests in the Network tool:

See also:
 Apply a color theme to DevTools - using themes from Visual Studio Code in DevTools.
 Display the timing relationship of requests in Network features reference - the Waterfall view for requests in the Network tool.
 Announcements from the Chromium project
Microsoft Edge version 100 also includes the following updates from the Chromium project:
View and edit @supports at rules in the Styles pane
Preview class/function properties on hover
Partially presented frames in the Performance panel

 
 What's New in DevTools (Microsoft Edge 99)
 	6/21/2022 • 5 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Securely debug your production code with source maps from Azure Artifacts Symbol Server
Azure Artifacts Symbol Server now supports storing the source maps that your build process produces when compiling, minifying, and bundling your code. Instead of hosting source maps on your public server, you can now publish your source maps to the secure Azure Artifacts Symbol Server. Then, connect DevTools to Symbol Server to have DevTools automatically fetch your source maps.
By using source maps, you can see and debug your original source code in DevTools, rather than having to work with the compiled, minified, and bundled production code that's returned by your server. Hosting your source maps on the Azure Artifacts Symbol Server allows you to see and work with your source code securely and privately, instead of placing your source maps on your server and revealing your original code publicly.
To try this feature:
1. Publish your source maps to the Azure Artifacts symbol server.
2. Open DevTools > Settings > Symbol Server and connect DevTools to Azure Artifacts Symbol Server, by entering your Azure DevOps organization and personal access token.

See also:
Map the processed code to your original source code, for debugging
Securely debug original code by publishing source maps to the Azure Artifacts symbol server
Securely debug original code by using Azure Artifacts symbol server source maps
 Microsoft Edge DevTools extension for Visual Studio
Following up on the success of the Visual Studio Code integration, you can now also embed the Microsoft Edge Developer Tools in Microsoft Visual Studio to debug your ASP.NET projects live. Download the Microsoft Edge Developer Tools for Visual Studio and try it out.
To try this feature:
1. Make sure Visual Studio 2022 and the ASP.NET workload are installed.
2. Set up Web Live Preview as the default Web Forms Designer, as described at Microsoft Edge Developer Tools for Visual Studio.
3. In an ASP.NET project, open a webpage of the project in the Design window.
4. In the upper left of the Design window, click the Open Edge DevTools () button:

Edge DevTools for Visual Studio opens, with the Elements tool selected:

The Network tool is also available by default:

The Inspect tool ( ) and Toggle screencast ( ) are available, and the More Tools ( ) menu offers the Issues, Network conditions, and Network request blocking tools.
See also:
Edge Developer Tools for Visual Studio (Preview), at Visual Studio DevBlogs. Edge DevTools extension for Visual Studio.
 Layers in 3D View
Since Microsoft Edge 88, the 3D View tool has provided an improved version of the Layers tool. Now, in Microsoft Edge 99, the functionality in the Layers tool has been removed, and the Layers tool instead contains a link that redirects you to the Composited Layers view within the 3D View tool. You can find all the features that were previously in the Layers tool, and more, in the 3D View tool.
Update: the Layers tool has now been removed.

See also:
 Navigate webpage layers, z-index, and DOM using the 3D View tool
 Use your source maps to display original function names in performance profiles
Recording a performance profile in the Performance tool produces a minified flame chart. In previous versions of Microsoft Edge, the flame chart didn't use source maps to display your original function names, even if you hosted the source maps on your server.
Starting in Microsoft Edge version 99, you can display your original function names in a performance profile, as follows:
1. Record a profile, in the Performance tool.
2. Click the new Unminify () button to create and download the unminified performance profile.
3. Load (import) () the unminified performance profile into the Performance tool.
The Unminify button will use source maps, provided that they are hosted side-by-side with your production code, to unminify function names in the flame chart in the Performance tool.
The flame chart in the Performance tool initially shows function names as b, O, Xt, and bn, taken from the minified production code returned by the web server:

After clicking Unminify ( ) and then Load profile ( ), the flame chart in the Performance tool now shows those functions labeled with meaningful names: invokeFunc (b), executeAction (O), endBatch (Xt), and runReactions (bn), retrieved from your source maps:

See also:
Unminifying function names in DevTools performance profiles at the Microsoft Edge Blog. Display original function names in performance profiles.
 Improved accessibility for Network Console and 3D View
In previous versions of Microsoft Edge, assistive technology announced incorrect information when providing a custom bearer token in the Network Console tool. In Microsoft Edge version 99, this issue has been fixed. When selecting the text box for providing a custom bearer token, assistive technology now announces "Token edit text Request View group".

In previous versions of Microsoft Edge, assistive technology would only announce the radio button text in the 3D View tool, without announcing the group name that the button belongs to. In Microsoft Edge version 99, this has been fixed. For example, when focus is on the Use screen texture radio button, assistive technology will now announce: "Color type radio group, Use screen texture, radio button, selected".

See also:
 Navigate DevTools with assistive technology
 Improved source folder tree in the Sources panel
../ and ./In the Page tab of the Sources tool, the tree of source folders is now improved, with less clutter in the naming and outline of folders. Unneeded path prefixes such as  have been removed. The tree structure has been simplified by merging equivalent duplicate folders.

For the history of this feature in the Chromium open-source project, see Issue 1284737.
See also:
 Using the Page tab to explore resources that construct the current webpage in Sources tool overview.
 Announcements from the Chromium project
Microsoft Edge version 99 also includes the following updates from the Chromium project:
Throttling WebSocket requests
New Reporting API pane in the Application panel
Better console styling, formatting and filtering
Properly style log messages with ANSI escape code
Properly support %s, %d, %i and %f format specifiers
Sourcemaps improvements
Debug extensions with sourcemap files
Display worker source files in the Sources panel
Touch-friendly color-picker and split pane
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page for announcements from the Chromium project is What's New in DevTools (Chrome 99) and is authored by Jecelyn Yeen (Developer advocate working on Chrome DevTools at Google).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 What's New in DevTools (Microsoft Edge 98)
 	6/21/2022 • 4 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Catch up on the latest and greatest features in Microsoft Edge
In 2021, developer tooling for Microsoft Edge has taken a massive leap forward. Visual Studio Code, DevTools, and the browser now provide several integrated workflows for JavaScript debugging, mirroring CSS changes, and screencasting from the browser. Between Focus Mode, support for Visual Studio Code themes, and further customization options, the Microsoft Edge team is working to make the DevTools easier and simpler to use.
Catch up on all of this news and more in our year-in-review blog post, Looking back at Microsoft Edge for developers in 2021.

 Automate IE mode with Internet Explorer Driver
Starting June 15, 2022, Internet Explorer 11 will no longer be supported on certain versions of Windows 10. IE mode is a feature of Microsoft Edge for organizations that still need Internet Explorer 11 for compatibility with legacy websites or apps. To support testing of those legacy websites and apps, you can now automate IE mode with Selenium 4 and Internet Explorer Driver.
See also:
 Use Internet Explorer Driver to automate IE mode in Microsoft Edge
 Emulate forced-colors mode
In addition to emulating dark, light, and print mode for the current webpage, now you can also see what your webpage looks like for users who have forced-colors mode enabled. Forced-colors mode is an accessibility feature of the operating system. It forces colors on the webpage to be reduced to a limited color palette, such as Windows High Contrast mode. Emulation of forced-colors mode allows you to do a spot check without having to change your own system's settings.
To turn on forced-colors emulation, in DevTools, open the Rendering tool, and then in the Emulate CSS media feature forced-colors dropdown list, select forced-colors: active.
Without forced-colors emulation turned on, the following webpage has several different colors of text against different background colors:

With forced-colors emulation turned on in the Rendering tool, the webpage changes to black text on a white background:

See also:
 Rendering tool, to see what a webpage looks like with different display options or vision deficiencies
 Activity icons in the Event Log of the Performance tool now have tooltips
In previous versions of Microsoft Edge, the Event Log tab in the Performance tool displays color-coded icons representing the type of activity for each event. However, the Event Log doesn't display information about what type of activity is represented by each color. In Microsoft Edge 98, tooltips have been added to the activity events in the Event Log tab, indicating Scripting, Rendering, Painting, System, and Idle time, for each event.

See also:
 Record runtime performance
 Shallow sizes in the Memory tool are now represented as decimal values
In previous versions of Microsoft Edge, the shallow size in a heap snapshot in the Memory tool is commonly reported as 0%, because the shallow size is so small, relative to the total size of the heap. In Microsoft Edge 98, shallow size is now reported as a decimal value, if the size is between 0% and 1% of the heap.

See also:
 Record heap snapshots
 Fix: The Search text box in the Network tool can now be resized
In previous versions of Microsoft Edge, in the Network tool, the Search text box doesn't resize when you change the width of the pane. When the pane is narrow, the Refresh and Clear buttons aren't displayed. In Microsoft Edge 98, this issue has been fixed.

See also:
 Search network headers and responses in Inspect network activity.
 Fix: Icons for service workers and script tags in the Elements tool are now aligned
In previous versions of Microsoft Edge, the Expand () icons in the Service Workers section of the
Application tool were not aligned. The version number in the Update Cycle table was cutting off the Expand icons. In Microsoft Edge 98, this issue has been fixed:

<script>Also, in the Elements tool, the Expand () icon for 	 tags was misaligned. In Microsoft Edge 98, this issue has been fixed:

See also:
<script>Service workers in Debug Progressive Web Apps (PWAs) - debugging service workers in DevTools. Get started with HTML and the DOM -  tags in the Elements tool.
 Announcements from the Chromium project
Microsoft Edge version 98 also includes the following updates from the Chromium project:
Preview feature: Full-page accessibility tree
More precise changes in the Changes tab
Ensure your pages are cacheable with the Back/forward cache tab
New Properties pane filter
Show rulers on hover command
Support row-reverse and column-reverse in the Flexbox editor
New keyboard shortcuts to replay XHR and expand all search results
Keyboard shortcuts to replay XHR in the Network panel
Keyboard shortcut to expand all search results
 
 What's New in DevTools (Microsoft Edge 97)
 	6/21/2022 • 3 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Introducing the Detached Elements tool
A DOM node is considered detached when it's no longer attached to any element of the DOM, but is still being retained in memory by Microsoft Edge. The browser cannot garbage-collect the detached element, because some JavaScript object is still referencing the element, even though the element is no longer on the page or is no longer a part of the DOM.
The new Detached Elements tool finds all of the detached elements on your page and displays them. You can expand and collapse a detached element to see the parent and child nodes that are also being retained. You can trigger the browser's garbage collection by clicking the Collect garbage icon, and then confirm that you have a memory leak when a detached element cannot be garbage-collected. To jump into the JavaScript code that's referencing the detached element, click the Analyze button to take a heap snapshot.
The Detached Elements tool was initially available as an experiment in Microsoft Edge version 93. The tool is now available by default in Microsoft Edge version 97.

See also:
Debug DOM memory leaks with the Detached Elements tool
Debug memory leaks with the Microsoft Edge Detached Elements tool - YouTube
 Microsoft Edge DevTools extension for Visual Studio Code
For general information about this extension, see Microsoft Edge DevTools extension for Visual Studio Code.
 Screencast enhancements, deprecation warnings, and new launch options for Microsoft Edge 
The current version of the Microsoft Edge DevTools extension for Visual Studio Code fixes several issues that were reported by the community:
 The list of emulated devices in the screencast is now the same as the list of emulated devices in the browser.
Device emulation now adds the correct user agent string, to trigger the correct display.
You now get a warning when you use a deprecated launch version of Microsoft Edge, indicating that you'd miss out on features.

 Improvements and bug fixes for Focus Mode
Thanks to your early feedback, we've continued to make improvements and bug fixes on the new Focus Mode interface for Microsoft Edge DevTools. Focus Mode is a new UI option that allows you to dock tools at the top or side of the DevTools window, and removes clutter from the toolbar:

When using Focus Mode, all the same tools and custom themes are available as in the existing DevTools UI. Try Focus Mode for yourself by enabling the Focus Mode experiment in DevTools Settings > Experiments.
See also:
Focus Mode in Experimental features
Simplify DevTools using Focus Mode
Apply a color theme to DevTools
 3D View tool supports changing color themes in DevTools
In previous versions of Microsoft Edge, changing the theme in DevTools and then opening the 3D View tool resulted in a blank panel. This issue has now been fixed, in Microsoft Edge 97:

See also:
Apply a color theme to DevTools
Navigate webpage layers, z-index, and DOM using the 3D View tool
 Announcements from the Chromium project
Microsoft Edge version 97 also includes the following updates from the Chromium project:
Refresh device list in Device Mode
Autocomplete with Edit as HTML
Improved code debugging experience
 
 What's New in DevTools (Microsoft Edge 96)
 	6/21/2022 • 5 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 New DevTools UI available (in preview)
The Microsoft Edge DevTools team is experimenting with a new DevTools UI: Focus Mode. Focus Mode reduces distractions and clutter with a more modern and simplified layout. The new Activity Bar allows you to pin your favorite tools in a horizontal or vertical toolbar to use screen space more efficiently.
To give this new UI a try in Microsoft Edge version 96, select Settings () > Experiments > Focus Mode.
Starting with Microsoft Edge version 96, the experiment's checkbox is labeled Focus Mode rather than Focus Mode and DevTools Tooltips.
This UI is still in development and may change in future versions of Microsoft Edge. We're eager to hear your feedback about this new DevTools UI. Send us your feedback by tweeting @EdgeDevTools. Or, with the Focus Mode experiment turned on, at the bottom of the Activity Bar, select Help () > Feedback, to show the Send feedback window.

See also:
MSEdgeExplainersSimplify DevTools using Focus Mode.
DevTools: Focus Mode UI in the  repo.
 Console can once again appear in the top and bottom panels
Since Microsoft Edge version 87, you've been able to move any tool between the top and bottom panels, including the Console tool. However, we heard from developers that moving the Console tool repeatedly was cumbersome. As of Microsoft Edge version 96, the default experience for the Console tool has been restored, allowing you to quickly switch between a full-screen view of the Console (in the top panel) and a split-screen view (with the Console displayed in the bottom panel), without moving the Console tool.
The Console can be opened in the bottom panel (the Drawer) while another tool is open:

When Console is selected in the top panel, the bottom panel is automatically minimized, if the bottom panel was displaying the Console:

If you want to only allow the Console tool to open in a single place, you can configure the behavior of the Console:
1. In the main toolbar or the Drawer toolbar, right-click the Console tab, and then select Configure console. The Settings > Preferences page is displayed.
2. In the Console section, clear the checkbox Show Console tab in main panel and drawer, then click Close (x).
See also:
Panel tools vs. Drawer tools in About the list of tools.
Move tools between top and bottom panels in What's New in DevTools (Microsoft Edge 87).
 Microsoft Edge DevTools Visual Studio Code extension
For general information about this extension, see Microsoft Edge DevTools extension for Visual Studio Code.
 Display your web project inside the editor, and simulate different devices 
The Microsoft Edge DevTools for Visual Studio Code extension now features a dockable screencast and device emulation:

You can see your web project in a dedicated tab inside of Visual Studio Code, and also simulate various devices:

For details about device emulation, see Device and state emulation.
 Live, inline issue reporting 
The extension also now features live, inline issue reporting. Instead of finding out about issues in a separate tool, Visual Studio Code highlights the issues in your source code and reports them live while you enter your code:

For details, see Inline and live issue analysis.
 Sources tool now notifies you when sourcemaps can't be loaded
In Microsoft Edge version 96, the Sources tool now provides several indications in the UI when DevTools cannot load your sourcemaps. In the Page tab in the Navigator pane in the Sources tool, files that DevTools can't load sourcemaps for have a warning icon in place of the file icon.
Selecting a file with the warning icon opens the file in the Sources tool with an infobar indicating that DevTools either couldn't fetch the sourcemap correctly from the server or couldn't parse the sourcemap correctly:

From the infobar, you can learn more about the issue by selecting the Open in Issues button. The Issues tool then opens in the Drawer and provides information about how to resolve the issue and get your sourcemap loaded correctly in DevTools:

To prevent the infobar about sourcemaps from cluttering the Sources tool, select the Don't show again button. To prevent issues related to sourcemaps from cluttering the Issues tool, clear the Include third-party
issues checkbox in the Issues tool.
See also:
 Map the processed code to your original source code, for debugging
 Opening source files in Visual Studio Code now integrates better with the Sources tool
In previous versions of Microsoft Edge, turning on the Open source files in Visual Studio Code experiment had unexpected behavior when you had already been using the Sources tool in DevTools. Setting breakpoints would direct you to Visual Studio Code or to documentation to configure the experiment correctly.
In Microsoft Edge version 96, the Open source files in Visual Studio Code experiment now integrates better with the Sources tool.
 If the Sources tool is open and you then turn on the Open source files in Visual Studio Code experiment, setting breakpoints or opening files now opens the Sources tool, rather than directing you to Visual Studio Code or to documentation to configure the experiment correctly.
As with earlier versions of Microsoft Edge, if the Sources tool isn't open in DevTools and you then turn on the Open source files in Visual Studio Code experiment, setting breakpoints or opening files from tools other than the Sources tool opens the file in Visual Studio Code.
See also:
 Opening source files in Visual Studio Code - how DevTools integrates with Visual Studio Code.
 Selecting the dropdown triangle icon in the DevTools UI now opens the menu
In earlier versions of Microsoft Edge DevTools, selecting the triangle icon next to a dropdown menu didn't display the dropdown menu. To open the dropdown menu, you had to click the currently selected menu item to the left of the triangle icon, such as No throttling:

In Microsoft Edge version 96, this issue has been fixed. Selecting the triangle icon for any dropdown menu in DevTools now opens the dropdown menu:

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page for announcements from the Chromium project is What's New in DevTools (Chrome 96) and is authored by Jecelyn Yeen (Developer advocate working on Chrome DevTools at Google).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 What's New in DevTools (Microsoft Edge 95)
 	6/21/2022 • 5 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Sync live changes from the Styles tool in the Visual Studio Code extension
The Microsoft Edge DevTools extension for Visual Studio Code now features an experiment called CSS Mirror Editing. Using this feature, you can use the Styles tool to adjust your CSS, and the changes you apply are automatically added to the CSS source files in the Visual Studio Code editor. You can toggle this functionality on and off.
For more information, see Syncing live changes from the Styles tool by using CSS Mirror Editing.
To provide feedback, in Visual Studio Code, in the Activity Bar, click Microsoft Edge Tools, and then in the CSS Mirror Editing section, click the leaving feedback here link.

 All error and warning messages in the Console now have a Search
Web icon
The Search for this message on the Web icon is now available for all errors and warnings in the Console. Previously, this icon only appeared for some of the common errors and warnings. Now the icon has been added on the remaining errors and warnings. Click the Search for this message on the Web icon to search the web using the relevant error or warning string.
For more information, see Search for Console errors on the web.

See also:
 Search the web for a Console error message string in Console overview.
 Improved keyboard access for defining User-Agent Client Hints
Starting with Microsoft Edge version 92, you can specify User-Agent Client Hints. You can specify User-Agent Client Hints in either of two places:
When defining the user agent string in the Network conditions tool. When adding a custom device to emulate in Settings.
In Microsoft Edge prior to version 95, when adding a custom device to emulate from the Devices section of Settings, selecting the User agent client hints button with the keyboard caused the incorrect UI item to be activated. Instead of expanding the User agent client hints section for you to fill it in, it selected the Add button. The device you were starting to define was immediately added, using empty fields in the User agent
client hints section.
In Microsoft Edge version 95, this issue has been fixed. Selecting the User agent client hints button by using the keyboard now expands a form, in which you can specify client hints for the custom device.
To learn more about User-Agent Client Hints, see Detecting Microsoft Edge from your website.

To view the history of this feature in the Chromium open-source project, see Issue 1243827: User agent client hints form accessibility.
 Console filters now display grouped messages if the filter matches the group title
console.group()You can use  to label a group of messages and provide some organization for Console
messages. In earlier versions of Microsoft Edge, there were several problems when trying to filter grouped messages in the Console. When filtering to a group label, the Console wouldn't display individual messages inside the group. Also, filtering wouldn't hide group labels, even if the label didn't match the filter.
In Microsoft Edge version 95, these problems have been fixed. Filtering to a label now displays the group label and the individual messages inside of the group. When the filter doesn't match the group label, the entire group is hidden.
When the filter string matches a group label, the group and its members are displayed:

When the filter string doesn't match a group label, neither the group nor its members are displayed:

See also:
 group in Console object API Reference.
To view the history of this feature in the Chromium open-source project, see Issue 363796: ☂ Console filter inappropriately hides grouped content and doesn't hide group titles.
 Announcements from the Chromium project
The following are some of the additional features that are available in Microsoft Edge version 95 that were contributed to the open-source Chromium project.
 Improved the display of properties
DevTools improves the display of properties by:
Always bolding and sorting own properties first, in the Console, in the Sources tool, and in the Properties tab in the Elements tool. (An own property is a property that's defined directly on the object.) Flattening the properties display in the Properties pane.
link with two own properties: user and accesssearchFor example, the snippet below creates an URL object , and then updates the value of an inherited property, :
const link = new URL('https://blogs.windows.com/msedgedev/'); link.user = { id: 1, name: 'Amelie Garner' }; link.access = 'admin'; link.search = `?access=${link.access}`;
linkURLAfter entering the above code in the Console, try logging . Own properties are now bold and are first in the sort order. These changes make it easier to spot custom properties, especially for Web APIs (such as ) that have many inherited properties:

In the Properties pane of the Elements tool, the list of properties is now flattened for a better experience when debugging DOM properties, especially for Web components:

See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
For the history of this feature, see Chromium issues 1076820 and 1119900.
 Snippets are now sorted in the Sources panel
In the Snippets tab of the Sources tool, previously, the snippets weren't sorted. Snippets are now sorted alphabetically:

See also:
Run snippets of JavaScript on any webpage
Chrome 85 - What's New in DevTools - video.
For the history of this feature, see Chromium issue: 1243976.
 Improved UI for DevTools command menu
Ctrl+PCommand+PThe Command Menu has been enhanced to make it easier to search for a file. When you press  in Windows and Linux or  in macOS, the Command Menu now displays filenames in bold, along with an icon indicating the file type:

See also:
 Command Menu
For the history of this feature, see Chromium issue 1201997.
NOTE
The "Announcements from the Chromium project" section of this page is a modification based on work that is created and shared by Google per Site Policies, and is used according to terms described in the Creative Commons Attribution 4.0 International License. The original page for the Announcements from the Chromium project is What's New in DevTools (Chrome 95), authored by Jecelyn Yeen, a Developer advocate working on Chrome DevTools at Google.
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 What's New in DevTools (Microsoft Edge 94)
 	6/21/2022 • 2 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Search for Console errors on the web
Search the web for your Console errors, from within DevTools. In the Console, many errors now have a Search for this message on the Web button, shown as a magnifying glass. When you select the Search for this message on the Web button, a new tab opens in the browser and shows search results for the error:

See Search the web for a Console error message string.
 DevTools extension for Visual Studio Code includes the latest tools, theme support, and helpful links
In the latest version of the Microsoft Edge DevTools extension for Visual Studio Code, we released the following updates or new features:
 Shares the same codebase that's used for the browser-based DevTools.
XSupports themes that ship with Visual Studio Code.
Adds a Helpful Links section in the Microsoft Edge Tools sidebar, with buttons for Documentation, Report a Bug, and Request a Feature.
Adds a Close instance () button in the Microsoft Edge Tools > Targets pane, to close the browser that was opened by the extension.
Adds support for JavaScript Debugger connections to remote workspaces.
The extension running inside Visual Studio Code, matching the dark theme of Visual Studio Code, and a new Helpful Links sidebar:

Light themes from Visual Studio Code are also supported:

See also:
 Microsoft Edge DevTools extension for Visual Studio Code
 Breakpoint icons are now displayed when using Visual Studio Code themes
In Microsoft Edge version 93, you can apply themes used in Visual Studio Code to the DevTools extension. For more information on this feature, see Apply color themes to DevTools.
Previously, when using a theme from Visual Studio Code in DevTools, breakpoint icons on the left margin of the code in the Sources tool weren't displayed. Starting in Microsoft Edge 94, breakpoint icons are now displayed as expected:

See also:
 Pause your code with breakpoints
 Navigate to the More Tools button with the keyboard
+Previously, you couldn't navigate to the More Tools () button in DevTools using the arrow keys on the keyboard when the toolbar had focus. When using the arrow keys, after reaching the last tool in the toolbar, the focus looped back to the first tool, or the More tabs menu was displayed.
>>Starting with Microsoft Edge version 93, the More tabs () button and the More Tools button can be selected by using the arrow keys, when focus is on the toolbar:

See also:
 Keyboard shortcuts
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 What's New in DevTools (Microsoft Edge 93)
 	6/21/2022 • 6 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Apply themes from Visual Studio Code to DevTools
In addition to the existing light and dark themes, Microsoft Edge DevTools now supports some of the most popular color themes from Visual Studio Code. To select a color theme, click the DevTools Settings () button, and then select a theme from the Theme dropdown list.

The supported Visual Studio Code themes are:
Light themes:
Solarized Light Quiet Light
Dark themes:
Abyss
Kimbie Dark
Monokai
Monokai Dimmed
Solarized Dark
Red
Tomorrow Night Blue
See Apply color themes to DevTools.
 Debug DOM node memory leaks with the new Detached Elements tool
A DOM node is considered "detached" when it is no longer attached to any element of the DOM but is still being retained in memory by Microsoft Edge. The browser cannot garbage-collect the element, because some JavaScript is still referencing the element even though it's no longer on the page or a part of the DOM.
The new Detached Elements tool finds all of the detached elements on your page and displays them. You can expand and collapse a detached element to see the parent and child nodes that are also being retained. You can trigger the browser's garbage collection by selecting Collect garbage and validate that you have a memory leak when a detached element cannot be garbage-collected. Finally, you can jump into JavaScript that's referencing the detached element by taking a heap snapshot with the Analyze button.

Update: This feature has been released and is no longer experimental.
See also:
 Debug DOM memory leaks with the Detached Elements tool
 The Visual Studio Code debugger now integrates with the DevTools extension
If you use JavaScript debugging in Visual Studio Code, you can now launch the Microsoft Edge Developer Tools for Visual Studio Code extension by selecting the Inspect button.

This feature integrates DOM and CSS debugging with JavaScript debugging in Visual Studio Code. If you don't have the DevTools extension installed, when you select the Inspect button, Visual Studio Code prompts you to install the extension.
Other new features are:
The tools refresh automatically when you switch between different debugging targets.
Several bug fixes.
More detailed documentation of the extension.
vscode-edge-devtoolsFor more details about improvements and fixes, check the changelog file in the  repo.

For more information, see Browser debugging with Microsoft Edge DevTools integration in Visual Studio Code. Get the Microsoft Edge Developer Tools for Visual Studio Code extension. Microsoft Visual Studio Code updates extensions automatically; to update this extension manually instead, see Update an extension manually.
You can file issues and contribute to the extension on the vscode-edge-devtools GitHub repo.
 New Fluent UI icons for DevTools
Microsoft Edge DevTools has adopted Fluent UI, giving buttons and menus a more modern look that better aligns with the rest of the Microsoft Edge browser.

 Change the DevTools display language directly from Settings
Previously, to change the display language in DevTools, you had to change the browser language. Now you can easily switch the display language in DevTools Settings, without having to change your browser settings. To do this, open Settings, and then in Preferences, select a language from the Language dropdown list.

By default, DevTools matches your browser's display language. See Change DevTools language settings.
For the history of this feature in the Chromium open-source project, see Issue 2882756.
 Copy a declaration in the Styles pane for CSS-in-JS libraries
Previously, when using CSS-in-JS libraries, you were not able to copy CSS declarations (a CSS property and value) formatted for JavaScript. You would have to edit the copied CSS to match JavaScript's syntax.
Now in Microsoft Edge version 93, you can copy a single CSS declaration or all the declarations in a style rule and paste them directly into a JavaScript file without having syntax issues. To try this feature:
1. In the Styles pane of the Elements tool, right-click a declaration in a style rule.
2. Select Copy declaration as JS or Copy all declarations as JS.
3. Paste the copied CSS into a JavaScript file in your text editor, such as Visual Studio Code. For example: 
'--more-link': 'lime'.

To learn more about viewing and changing CSS, see CSS features reference.
 Easier customization of User-Agent Client Hints
User-Agent Client Hints makes browser information more accessible than a semicolon-delimited User-Agent string, and improves site compatibility. Initially, User-Agent Client Hints were time-consuming to test and debug. There was less control over the client hints, and client hints had to be filled in properly for the form to work.
In this release, we redesigned the debugging experience so you can easily modify User-Agent Client Hints through a UI with multiple separate fields and controls. Also, you can now test your custom User-Agent Client Hints and a User-Agent string simultaneously. You can now define User-Agent Client Hints for a custom device in Settings or in the Network conditions tool.

For more information about defining hints in Settings, see Set user agent client hints.
You can also override User-Agent Client Hints for the current page by using the Network conditions tool.

For more information about defining hints in the Network conditions tool, see Set user agent client hints.
For the history of this feature in the Chromium open-source project, see Issue 1174299.
 
Screen readers now announce errors, warnings, and issues in toolbar and Console
Previously, users of screen readers would only hear the number of errors, warnings, or issues announced in the DevTools toolbar. The additional information of what type of notification was being announced wasn't included, such as "Error", "Warning", or "Issue". For example, if the DevTools reported 3 errors, screen readers would just announce "3".
Now in Microsoft Edge version 93, screen readers correctly announce the type and number of notifications; errors, warnings, or issues. For example, if DevTools reports 3 errors and 5 warnings, screen readers now announce "3 errors, 5 warnings". This fix has been applied to both the notifications in the DevTools toolbar and in the Console.

For information about debugging Console errors, see Fixing JavaScript errors that are reported in the Console. For information about issues found by DevTools and improvements you can make to a webpage, see Find and fix problems using the Issues tool.
For the history of this feature in the Chromium open-source project, see Issue 1223208.
 Copy as PowerShell in the Network tool now includes cookies
Previously, in the Network tool, the Copy > Copy as PowerShell context menu option didn't include cookies when generating a PowerShell command for a given network request in the Network Activity Log. This meant that the generated PowerShell command couldn't successfully make the same network request if cookies were required.
Now in Microsoft Edge version 93, the Copy as PowerShell context menu option correctly sets the User-Agent string and cookies that were observed by DevTools. The generated PowerShell command can now successfully make the same network request that was observed by DevTools, even to servers that depend on cookies.

For more information about the Network Activity Log, see Network features reference.
For the history of this feature, see Issue 932971.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 What's New in DevTools (Microsoft Edge 92)
 	6/21/2022 • 8 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
TIP
The Microsoft Build 2021 conference was on May 25-27. Here's a video from Build about the updates to DevTools: Microsoft Edge | State of the Platform - Microsoft Edge brings a compelling and consistent platform with tools for developers. As our legacy browsers phase out of support, Edge will soon be the only supported browser from Microsoft on Windows 10 or later. Join us to learn about the latest across the Edge platform, tools, and web apps.
 The Close button is no longer hidden when DevTools is narrow
In Microsoft Edge version 91 or earlier, the Close button to close DevTools isn't displayed when the DevTools viewport is narrow. In Microsoft Edge version 92, the Close button in the DevTools is always present, regardless of the DevTools viewport width.

 Add tools quickly with the new More Tools button
+There's a new way to open more tools in Microsoft Edge DevTools: the More Tools () menu. The More Tools menu appears on the toolbar in the main panel and on the toolbar of the drawer. Selecting a tool from the More Tools menu adds the tool to the toolbar.
To reorder the tabs on either toolbar, select and drag the tabs.
The More Tools menu was available as an experiment in Microsoft Edge version 89, and is now always present.

See also:
 The More Tools menus in About the list of tools
 Improvements for hovering, selecting, and closing tools
Tabs for each tool have been reformatted to reduce the chance of accidentally closing a tool. On each tab in the main toolbar and in the toolbar of the drawer, we added:
xxxSpacing around the tab.
Spacing around the close () button in the tab.
A background color when hovering over the tab.
A tooltip for the close () button of the tab.
Higher contrast for the close () button of the tab.
For example, when you are in the Performance tool and you hover over the Network tool's tab, these improvements help prevent accidentally closing the Network tool.
Tabs before reformatting:

Tabs after reformatting:

These improvements are especially relevant for users of localized DevTools, in which the tabs may be narrower and easier to accidentally close:

We also made it easier to re-add a tool that you closed by adding a More Tools menu to the main toolbar and drawer toolbar.
See also:
 About the list of tools
 Better support for screen readers in the Console
Prior to Microsoft Edge version 92, in the Console, assistive technologies such as screen readers didn't announce autocomplete suggestions or the results of evaluated expressions. This has been fixed now.
In the Console, screen readers now announce the currently selected autocomplete suggestion:

In the Console, screen readers now announce the result of an evaluated expression:

See also:
 Navigate DevTools with assistive technology
 Source Order Viewer
You can now view the order of source elements overlaid on the rendered webpage, for better accessibility inspection.
The order of content in an HTML document is important for search engine optimization and accessibility. CSS allows developers to create content that looks different in its on-screen order than the order in the HTML source document. This is an accessibility problem, because screen-reader users could get a confusing experience.

See Test keyboard support using the Source Order Viewer.
For the history of this feature in the Chromium open-source project, see Issue 1094406.
 User-Agent Client Hints for devices in the Network conditions tab
User-Agent Client Hints are now applied for devices in the User agent field in the Network conditions tool. User-Agent Client Hints are a new expansion to the Client Hints API that enables you to access information about a user's browser in an ergonomic way that preserves privacy.

See User-Agent Client Hints.
For the history of this feature in the Chromium open-source project, see Issue 1174299.
 
Microsoft Edge Developer Tools for Visual Studio Code version 1.1.8
The Microsoft Edge Developer Tools for Visual Studio Code extension version 1.1.8 for Microsoft Visual Studio Code has the following changes since the previous release. Microsoft Visual Studio Code updates extensions automatically. To manually update to version 1.1.8, see Update an extension manually.
You can file issues and contribute to the extension on the vscode-edge-devtools GitHub repo.
	 In 	-context documentation and UI to make it easier to use the DevTools extension
Version 1.1.8 of the Microsoft Edge Developer Tools for Visual Studio Code extension now features a simpler way to start a new instance of Microsoft Edge, by presenting instructions, buttons, links, and a documentation page to guide you.
 When you select the Microsoft Edge Tools button in the Activity Bar of Visual Studio Code, the Microsoft Edge Tools: Targets panel now presents explanatory text, buttons, and links to guide you, instead of a blank panel.
 When you open a new instance of Microsoft Edge from within Visual Studio Code, Microsoft Edge now shows a start page that explains how to use the Developer Tools extension, instead of a blank page.
 The Microsoft Edge Tools: Targets panel now has a Generate launch.json button and instructions, to help launch your project for debugging in Microsoft Edge. See also:
 Microsoft Edge DevTools extension for Visual Studio Code
 Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
 CSS Grid editor 
You can now preview and author CSS Grid layouts, using the new CSS Grid editor.
display: grid or display: inline-gridWhen an HTML element on your page has  applied to it, a grid icon is
displayed next to it in the Styles tab. Click the grid icon to display or hide the CSS grid editor. In the CSS grid
justify-content: space-aroundeditor, select any of the icons (such as ) to preview the layout in the rendered page. Flex layout works similarly.

For the history of this feature in the Chromium open-source project, see Issue 1203241.
See also:
 Inspect CSS Grid
 Support for const redeclarations in the Console 
constlet and classconstconstThe Console now supports redeclaration of  variables across separate REPL scripts (such as when you run a statement in the Console), in addition to the existing  redeclarations. This support allows you to experiment with different declarations for  variables without refreshing the page. Previously, DevTools threw a syntax error if you redeclared a  binding.
const redeclaration is supported across separate REPL scripts (refer to variable aRefer to the example below. 
). Note that the following scenarios aren't supported, by design:
constconst redeclaration within the same REPL script isn't allowed (refer to variable b redeclaration of page scripts isn't allowed in REPL scripts.
).

To learn how to run a single REPL script or a multi-line REPL script, see Run JavaScript in the Console.
For the history of this feature in the Chromium open-source project, see Issue 1076427.
 New shortcut to view iframe details 
iframe details, you can now right-click an iframeTo quickly view  element in the Elements tool, and then select Show iframe details.

iframeThis displays the details about the  in the Application tool. In the Application tool, you can examine document details, security and isolation status, permissions policy, and more, to debug potential issues.

See also:
Application tool, to manage storage
Inspect, edit, and debug HTML and CSS with the Elements tool
For the history of this feature in the Chromium open-source project, see Issue 1192084.
 Enhanced CORS debugging support 
Cross-origin resource sharing (CORS) errors are now surfaced in the Issues tool. There are various potential causes of CORS errors. Click each issue to expand it and see potential causes and solutions.

See also:
 Report CORS errors in the Network tool in What's New in DevTools (Microsoft Edge 88)
 Find and fix problems using the Issues tool
For the history of this feature in the Chromium open-source project, see Issue 1141824.
 Renamed XHR filter to Fetch/XHR 
XMLHttpRequest and FetchIn the Network tool, the XHR filter is now renamed to Fetch/XHR. This change makes it clearer that this filter includes both  API network requests.

See also:
Inspect network activity
XMLHttpRequest spec
Fetch spec
For the history of this feature in the Chromium open-source project, see Issue 1201398.
 Filter Wasm resource type in the Network tool 
In the Network tool, you can now select the new Wasm filter to filter the WebAssembly network requests.

See also:
 Filter resources in Inspect network activity
For the history of this feature in the Chromium open-source project, see Issue 1103638.
 Compute Intersections are now included in the Performance tool 
In the Performance tool, DevTools now displays Compute Intersections in the flame chart. These changes help you identify intersection observers events and debug the potential performance overhead of intersection observers.

See also:
 Trust is good, observation is better: Intersection Observer v2
 Analyze a performance recording
For the history of this feature in the Chromium open-source project, see Issue 1199137.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 What's New in DevTools (Microsoft Edge 91)
 	6/21/2022 • 12 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Wavy underlines highlight code issues and improvements in Elements tool
In most modern IDEs, wavy underlines under text indicate syntax errors. In Microsoft Edge version 91 or later, wavy underlines display under HTML in the DOM view of the Elements tool. The wavy underlines indicate code issues and suggestions related to accessibility, compatibility, performance, and so on.
To open the Issues tool and learn more about the issue and how to fix it:
ShiftPress and hold , and then click a wavy underline.
Or, right-click a wavy underline, and then select Show in Issues.
Selecting the underlined error in the Elements tool:

Displaying error details in the Issues tool:

See also:
 Find and fix problems using the Issues tool
 Learn about DevTools with informative tooltips
The DevTools Tooltips feature helps you learn about all the different tools and panes. Hover over each outlined region of DevTools to learn more about how to use the tool. To turn on Tooltips, do any of the following:
...Ctrl+Shift+H (Windows, Linux) or Cmd+Shift+HtooltipsSelect Customize and control DevTools () > Help > Toggle the DevTools Tooltips.
Press  (macOS).
Open the Command Menu and then type .
Then hover over each outlined region of DevTools:

EscTo turn off Tooltips, press .
Update: This feature has been released and is no longer experimental.
Note: As of May 2022, tooltips aren't supported from the Activity Bar; that is, in Focus Mode.
See also:
 Display DevTools Tooltips in Overview of DevTools.
 Service worker update timeline
In Microsoft Edge version 91 or later, if you're a Progressive Web App or Service Worker developer, display the update lifecycle of your Service Workers as a timeline in the Application tool. This feature helps you understand the time your Service Worker spends in each of the following stages:
Install
Wait
Activate

For real-time updates on this feature in the Chromium open-source project, see Issue 1066604.
See also:
The Service Worker lifecycle.
Service Worker improvements - DevTools debugging tools for Progressive Web Apps and Service Workers.
 Progressive Web Apps no longer display warnings for non-square icons
In Microsoft Edge version 90 or earlier, if the Web App Manifest of your PWA included a non-square icon, a warning was displayed in the Errors and Warnings section for each non-square icon. In Microsoft Edge version 91 or later, the Manifest section in the Application tool displays no warnings if you provide at least one square icon. If you don't provide any square icons, the following warning message appears:
Most operating systems require square icons.  Please include at least one square icon in the array.
In Microsoft Edge version 90 or earlier, an error is displayed for each icon that is non-square:

In Microsoft Edge version 91 or later, no error is displayed when you provide at least one square icon:

To view errors and warnings in your Web App Manifest, select Application tool > Application section > Manifest. Errors and warnings are listed under the Errors and Warnings heading.
For real-time updates on this feature in the Chromium open-source project, see Issue 1185945.
See also:
Use the Web App Manifest to integrate your Progressive Web App into the Operating System
PWABuilder: Image Generator - creates app icons for various platforms, to include in your Web App Manifest.
 Localized DevTools now supported in Chromium-based browsers
Starting in Microsoft Edge version 81, the Microsoft Edge DevTools UI is displayed in your own language. Many developers use developer tools such as StackOverflow and Visual Studio Code in their native language. To provide similar flexibility of UI language, the Microsoft Edge DevTools team, Chrome DevTools team, and the Google Lighthouse team collaborated to provide the same experience in all Chromium-based browsers.

See Change DevTools language settings.
For more information about the collaboration on this feature in the Chromium open-source project, see Issue 1136655.
 Use the keyboard to navigate to CSS variables
EnterStarting in Microsoft Edge version 88, the Styles pane displays CSS variables and provides a link directly to the definition of each variable. In Microsoft Edge version 91 or later, you can use the arrow keys to easily navigate to CSS variables. To open the definition in the Styles pane, hover on a variable, and then press :

For real-time updates on this feature in the Chromium open-source project, see Issue 1187735.
See also:
Using CSS custom properties (variables)
CSS features reference
 Issues are automatically sorted by severity
The Issues tool displays recommendations to improve your website, including accessibility, performance, security, and so on. Based on user feedback, issues are now automatically sorted by severity. In each feedback category, each issue that's marked as an Error appears first, followed each issue marked as a Warning, then each issue marked as a Tip:

See also:
 Find and fix problems using the Issues tool
 Microsoft Edge Developer Tools for Visual Studio Code version 1.1.7
The Microsoft Edge Tools for Visual Studio Code extension version 1.1.7 provides the DevTools from Microsoft Edge version 88. This extension now supports ARM devices and no longer depends on the Debugger for Microsoft Edge extension.
Version 1.1.7 includes the following bug fixes and improvements:
Updated the reliability of target closure.
Updated the side panel to automatically refreshes when you debug targets that are created or destroyed.
Added a new right-click menu that gives you faster access to the extension settings and the latest Changelog.
 Updated and simplified the release of extension documentation including the newest features.
To manually update to version 1.1.7, see Update an extension manually. You can file issues and contribute to the extension on the vscode-edge-devtools GitHub repo.
See also:
 Microsoft Edge DevTools extension for Visual Studio Code
 Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
	 Visualize CSS scroll 	-snap
scroll-snapIn the Elements tool, you can now toggle the  badge to inspect the CSS scroll-snap alignment.
scroll-snap-type applied to it, a scroll-snapWhen an HTML element on your webpage has  badge is displayed
scroll-snapnext to it in the Elements tool. Click the  badge to toggle displaying a scroll-snap overlay on the webpage.
For an example webpage, see Scroll Snap Demo. In the example, dots appear on snap edges. The scroll port has a solid outline, while the snap items have dashed outlines. The scroll padding is filled-in green, while the scroll margin is filled-in orange:

For the history of this feature in the Chromium open-source project, see Issue 862450.
See also:
Inspect CSS Grid CSS features reference
 New Memory Inspector tool 
ArrayBufferUse the new Memory Inspector tool to inspect an  in JavaScript and Wasm memory:

See:
Inspect a JavaScript ArrayBuffer with the Memory Inspector tool Using the Debugger pane to debug JavaScript code
For the history of this feature in the Chromium open-source project, see Issue 1166577.
 New Badge settings pane in the Elements tool 
Now, use the Badge settings in the Elements tool to turn on (or off) individual badges. Use this feature to customize and stay focused on important badges while you inspect webpages.
1. Right-click an element and then click Badge settings. The badge settings pane opens at the top of the Elements tool:

2. To display (or hide) the badges, select (or clear) the checkbox next to the badge name.
See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
 Enhanced image preview with aspect ratio information 
In the Elements tool, image previews have been enhanced to display more information, including the following details:

This information helps you better understand your images and apply optimization. The image aspect ratio information is also available in the Network tool, when you click a page resource that's an image:

For the history of this feature in the Chromium open-source project, see Issues 1149832 and 1170656.
See also:
Inspect, edit, and debug HTML and CSS with the Elements tool Inspect network activity
	 New options to configure Content 	-Encodings in the Network conditions tool
Content-EncodingIn the Network tool, click the new More network conditions... button next to the Throttling dropdown menu to open the Network conditions tool. To test if server responses are correctly encoded for browsers that don't support gzip, brotli, or another future :
1. Open the Network conditions tool.
2. Go to Accepted Content-Encodings.
Content-Encoding3. Clear the checkbox next to the  you want to test.

See also:
 Network conditions tool
For the history of this feature in the Chromium open-source project, see Issue 1162042.
 Styles pane enhancements 
 New shortcut to display computed value in the Styles pane 
Now, to display the computed CSS value in the Styles tab in the Elements tool:
1. Right-click a CSS property, and then select View computed value:

See also:
View only the CSS that is actually applied to an element in CSS features reference.
View the Computed sidebar pane in the Styles pane in What's new in DevTools (Microsoft Edge 87).
Explore all computed styles in Navigate DevTools with assistive technology.
To view the history of this feature in the Chromium open-source project, see Issue 1076198.
	 Support for the accent 	-color keyword
accent-colorThe autocomplete UI of the Styles pane now detects the  CSS keyword, which allows you to
specify the accent color for UI controls generated by the element. Examples of UI controls that are generated by an element include checkboxes or radio buttons.

For more information about the status of the Chromium implementation, see Feature: accent-color CSS
edge://flags#enable-experimental-web-platform-featuresproperty. To turn on this feature, go to  and set the checkbox to Enabled.
For the history of this feature in the Chromium open-source project, see Issue 1092093.
See also:
 CSS features reference
 Display details about blocked features in the Frame details view 
iframePermissions Policy is a web platform API that gives a website the ability to allow or block the use of browser features in an individual frame or in an  that it embeds. To display the details on why a feature is blocked:
1. Go to OOPIF Permissions Policy.
2. Open the Application tool.
3. Click a frame.
4. Go to the Permissions Policy section.
5. Locate the Disabled Features property.
6. Click Show details.
iframe7. Click the icon next to each policy to go to the  or network request that blocked the feature.

See also:
Permissions Policy Explainer
Application tool, to manage storage
To view the history of this feature in the Chromium open-source project, see Issue 1158827.
 Filter experiments in the Experiments setting 
Find experiments quicker with the new experiment filter. For example, to turn on new experiments for code issues:
1. In DevTools, select Settings () > Experiments.
2. In the Filter text box, start typing issues:

See also:
 Experimental features
 New Vary Header column in the Cache storage pane 
Vary Header column to display the VaryIn the Application tool's Cache Storage pane, use the new  HTTP response header values:

For the history of this feature in the Chromium open-source project, see Issue 1186049.
See also:
Vary in Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content. View Cache data
 Sources tool improvements 
 Support for new JavaScript features 
#foo in objin operator to support private (#DevTools now supports the new Private brand checks a.k.a.  JavaScript language feature. The private brand checks feature extends the ) class fields on a specific object.
Try it in the Console and Sources tools.
To inspect the private fields:
1. In the Sources tool, go to the debugger pane.
2. Expand the Scope section:

See also:
#foo in objPrivate brand checks a.k.a.  at v8.dev. in operator at MDN.
Private class fields at v8.dev.
For the history of this feature in the Chromium open-source project, see Issue 11374.
 Enhanced support for breakpoints debugging 
In Microsoft Edge version 90 or earlier, DevTools only set breakpoints in a single bundle. In Microsoft Edge version 91 or later, when you debug a shared component, DevTools properly sets breakpoints in multiple bundles.
Modern JavaScript bundlers like Webpack, and Rollup support splitting code into bundles. See Code splitting.
For the history of this feature in the Chromium open-source project, see Issues 1142705, 979000, and 1180794.
See also:
 Pause code with breakpoints
 Support hover preview with bracket notation 
[]The Sources tool now supports hover preview on JavaScript member expressions that use the  notation:

For the history of this feature in the Chromium open-source project, see Issue 1178305.
See also:
 JavaScript debugging features
 Improved outline of HTML files 
.html files. In the Sources tool, open the .htmlCtrl+Shift+O on Windows/Linux or Cmd+Shift+ODevTools now has better outline support for  file. To turn on (or off) the code outline, press  on macOS. Previously,
DevTools only displayed some of the functions. In the following figure, DevTools now correctly list all functions in the outline:

For the history of this feature in the Chromium open-source project, see Issues 761019 and 1191465.
See also:
Sources tool keyboard shortcuts in Keyboard shortcuts
Using the Editor pane to view or edit files in Sources tool overview
 Proper error stack traces for Wasm debugging 
In Microsoft Edge version 90 or earlier, DevTools only displayed generic Wasm references in Error stack traces. In
Microsoft Edge version 91 or later, DevTools resolves inline function requests and displays the source location in Error stack traces for Wasm debugging. To learn more about Error stack traces in the Console, see error in Console object API Reference.
In Microsoft Edge version 91 or later, DevTools resolves inline function requests and displays proper error stack traces for Wasm debugging.
dsquareIn Microsoft Edge version 90 and earlier, the source location isn't displayed in the Error stack traces. Source locations include . Previous error stack traces for Wasm debugging:

In Microsoft Edge version 91 and later, the source location is displayed in the Error stack traces. Proper error stack traces for Wasm debugging:

For the history of this feature in the Chromium open-source project, see Issue 1189161.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 What's New in DevTools (Microsoft Edge 90)
 	6/21/2022 • 10 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Group tools together in Focus Mode
X+Focus Mode is an experimental interface that allows you to group different tools together based on your own debugging scenarios. The new Activity Bar displayed on the left includes predefined tool groups such as Layout and Debugging. To customize each tool group, close tools with the Close () icon or add new tools with the More tools () icon.
To turn on the experiment, see Turning an experiment on or off and select the checkboxes next to Focus Mode and DevTools Tooltips and Enable + button tab menus to open more tools. For more information about this feature or to comment with questions and ideas, see DevTools: Focus Mode UI.

See Simplify DevTools using Focus Mode.
 Learn about DevTools with informative tooltips
The DevTools Tooltips feature helps you learn about all the different tools and panes. Hover over each outlined region of DevTools to learn more about how to use the tool. To turn on Tooltips, do one of the following:
...Ctrl+Shift+H (Windows, Linux) or Cmd+Shift+HtooltipsSelect Customize and control DevTools () > Help > Toggle the DevTools Tooltips.
Press  (macOS).
Open the Command Menu and then type .
Then hover over each outlined region of DevTools:

EscTo turn off Tooltips, press .
Update: This feature has been released and is no longer experimental.
Note: As of May 2022, tooltips aren't supported from the Activity Bar; that is, in Focus Mode.
See also:
 Display DevTools Tooltips in Overview of DevTools.
 Customize keyboard shortcuts in Settings
You can now customize the keyboard shortcut for any action in the DevTools.
To edit a keyboard shortcut:
1. Open DevTools, and then select Settings > Shortcuts.
2. Select the action you want to customize.
3. Click the Edit () icon.
4. Press the keys you want to bind to the action.
5. Click the checkmark () icon.
For more information about customizing and editing shortcuts, see Customize keyboard shortcuts in DevTools.
For real-time updates on this feature in the Chromium open-source project, see Issue 174309.

 Microsoft Edge DevTools for Visual Studio Code extension update
1.1.4
The Microsoft Edge Developer Tools for Visual Studio Code extension version 1.1.4 for Microsoft Visual Studio Code now displays a favicon next to each of the DevTools instances. Console messages from Microsoft Edge now display in the DevTools Console under Output of Microsoft Visual Studio Code. Microsoft Visual Studio Code updates extensions automatically. To manually update to version 1.1.4, see Update an extension manually. You can file issues and contribute to the extension on the vscode-edge-devtools GitHub repo.
The following figure displays messages from an example webpage logged in the Console tool in Microsoft Edge:

The following figure displays the same messages from the example webpage logged in the DevTools Console under Output of Microsoft Visual Studio Code:

See also:
 Microsoft Edge DevTools extension for Visual Studio Code
 Improved CSS flexbox editing with visual flexbox editor and multiple overlays
display: flex or display: inline-flexDevTools now has dedicated CSS flexbox debugging tools. If the  CSS
flexflexstyle is applied to an HTML element, a  icon appears next to that element in the Elements tool. To display (or hide) a flex overlay on the webpage, click the  icon.
display: flex or display: inline-flexTo open the Flexbox editor, in the Elements tool, go to the Styles tab and then click the new icon next to the  style. The Flexbox editor provides a quick way to edit the flexbox
properties:

In addition, the Flexbox section in the Layout pane displays all of the flexbox elements on the webpage. You can toggle the overlay of each element:

For the history of this feature in the Chromium open-source project, see Issues 1166710 and 1175699.
See also:
Edit CSS font styles and settings in the Styles pane
Syncing live changes from the Styles tool by using CSS Mirror Editing in Microsoft Edge DevTools extension for Visual Studio Code.
 Keyboard navigation improvements for network requests
Previously, you were not able to expand or collapse the chain of requests using the arrow keys on the keyboard in the Initiator pane, unlike the DOM in the Elements tool. When a network request is selected in the Network tool, the Initiator pane displays the chain of requests that initiated the currently selected request.
In Microsoft Edge version 90, you can expand or collapse the chain of requests using the arrow keys on the keyboard in the Initiator pane. The focused network request in the chain is also now highlighted.
Click a Network request and then click the Initiator pane:

Expand or collapse the request initiator chain and follow the highlighted row:

To learn more about initiators in the Network tool, see Display initiators and dependencies.
For the history of this feature in the Chromium open-source project, see Issues 1158276 and 1160637.
 Filtering in the Console is more consistent
While you filter with the Console Sidebar, the filters in the Log Levels dropdown list aren't available. Previously, the Log Levels dropdown list was highlighted when you hovered over it, even while a filter from the Console Sidebar was selected. In Microsoft Edge version 90, the Log Levels dropdown list is no longer highlighted when you hover over it while a filter from the Console Sidebar is selected.
To learn more about filtering in the Console, see Filter Messages in Console features reference.
Previously, if you open the Console sidebar and hover on Default levels, it was highlighted:

Starting in Microsoft Edge 90, if you click the Console sidebar and hover on Default levels, it doesn't highlight:

 Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
	 The Console now escapes double 	-quote characters
""Previously, the Console did not output valid double-quote () characters in JavaScript strings. Starting in Microsoft Edge version 90, the Console outputs JavaScript strings using escaped double-quote () characters:

For the history of this feature in the Chromium open-source project, see Issue 1178530.
See also:
 Console features reference
	 Emulate the CSS color 	-gamut media feature
color-gamut: p3The color-gamut media query emulates the approximate range of colors that are supported by the browser and device that you're testing. The dropdown list under Emulate CSS media feature color-gamut contains color spaces that DevTools can emulate. For example, to trigger a  media query, select color-gamut: p3 from the dropdown list.
To emulate the CSS color-gamut media feature:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press  (Windows,
Command+Option+ILinux) or  (macOS). DevTools opens.
2. In DevTools, on the main toolbar, select the Rendering tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button. The Rendering tool opens.
3. In the Emulate CSS media feature color-gamut dropdown, select a color-gamut option:

color-gamutTo learn more about the  feature, see Color Display Quality: the 'color-gamut' feature.
For the history of this feature in the Chromium open-source project, see Issue 1073887.
See also:
 Rendering tool, to see what a webpage looks like with different display options or vision deficiencies
 Improved tooling for Progressive Web Apps 
 PWA installability warning in the Console 
The Console now displays a more detailed installability warning message for Progressive Web Apps (PWAs), with a link to Improving Progressive Web App offline support detection.

See also:
 Overview of Progressive Web Apps (PWAs)
 PWA description length warning in the Manifest pane 
In the Application tool, the Manifest pane now displays a warning message if the manifest description exceeds 324 characters:

For the history of this feature in the Chromium open-source project, see Issues 965802, 1146450, and 1169689.
See also:
 Application tool, to manage storage
 New Remote Address Space column in the Network tool 
In the Network tool, the new Remote Address Space column displays the network IP address space of each network resource. To display the new Remote Address Space column:
1. In DevTools, open the Network tool.
2. In the Requests table (the main, lower part of the Network tool), right-click the header row, and then select Remote Address Space:

The Requests table now displays the Remote Address Space column:

To view the history of this feature in the Chromium open-source project, see Issue 1128885.
See also:
 Add or remove columns, in Network features reference.
 Display allowed and disallowed features in the Frame details view 
In the Application tool, the Frames node in the lower left opens the Frame details view. The Frame details view now includes a Permissions Policy section, which displays a list of allowed and disallowed browser features:

This list is controlled by the Permissions Policy web platform API, which allows a webpage to use, or blocks a webpage from using, specified browser features in an individual frame or in iframes that the frame embeds.
For the history of this feature in the Chromium open-source project, see Issue 1158827.
See also:
Permissions Policy Explainer
Application tool, to manage storage
 New SameParty column in the Cookies pane 
SamePartyThe Cookies pane in the Application tool now displays the  attribute for each cookie:

SamePartyThe  attribute is a new boolean attribute to indicate whether a cookie is included in requests to origins of the same First-Party Sets.
For the history of this feature in the Chromium open-source project, see Issue 1161427.
See also:
 View, edit, and delete cookies fn.displayName property in the Console tool is now deprecated  
fn.displayNameerror.stack and in DevTools stack traces. Starting in Microsoft Edge version 90, the fn.displayNamefn.namePreviously, the  property allowed you to control debug names for functions to display in  property is now deprecated, and replaced by the  property:

Object.defineProperty method to define the fn.name property. To learn more about fn.nameUse the standard , see Function.name.
For the history of this feature in the Chromium open-source project, see Issue 1177685.
See also:
Console features reference
Console tool utility functions and selectors
 Full accessibility tree view in the Elements tool 

This experiment provides a full accessibility tree view in the Elements tool. The Accessibility tab (grouped with the Styles tab) provides a partial accessibility tree view, that displays the direct ancestor chain from the root node to the inspected node. After you turn on this experiment and reload DevTools, click the button area at the top of the Elements panel to switch the display in the Elements tool for all elements on the webpage.
To display the DOM tree view, click the Switch to DOM Tree view button area at the top:

To display the full accessibility tree, click the Switch to Accessibility Tree view button area at the top:

To turn on the experiment, see Turning an experiment on or off and select the checkbox next to Enable full accessibility tree view in the Elements panel.
For the history of this feature in the Chromium open-source project, see Issue 887173.
See also:
Test accessibility using the Accessibility tab
Inspect, edit, and debug HTML and CSS with the Elements tool
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 What's New in DevTools (Microsoft Edge 89)
 	6/21/2022 • 14 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 What's New is now Welcome
The What's New tool in the Microsoft Edge DevTools now has a new appearance and a new name: Welcome.
The Welcome tool still displays the latest DevTools news and updates. It now also includes links to Microsoft Edge DevTools documentation, ways to submit feedback, and more. To display the Welcome tool after each update to Microsoft Edge, select the checkbox next to Open tab after each update under the title.
To close the Welcome tool, click the X on the right-side of the tab title.

Update: This feature has been released and is no longer experimental.
See also:
 Welcome tool
 Visual Font Editor in the Styles pane

When you work with fonts in CSS, use the new visual Font Editor. You can define fallback fonts, and use sliders to define font weight, size, line-height, and spacing:

The Font Editor helps you to:
Switch between units for different font properties.
Switch between keywords for different font properties.
Convert units.
Generate accurate CSS code.
To turn on this experiment, see Settings > Experiments and select the checkbox next to Enable new Font Editor tools within Styles pane.
For the history of this feature in the Chromium open-source project, see Issue 1093229.
See also:
Enable the Font Editor tool within the Styles pane in Experimental features. Edit CSS font styles and settings in the Styles pane in DevTools.
 CSS Flexbox debugging tools
DevTools now support Flexbox layout, as well as Grid layout.
Update: This feature has been released and is no longer experimental.
See also:
Getting element information from the Inspect overlay in Analyze pages using the Inspect tool.
Identify nested regions using color highlighting in Use the Inspect tool to detect accessibility issues by hovering over the webpage.
Using the Inspect tool to detect accessibility issues in Overview of accessibility testing using DevTools. Syncing live changes from the Styles tool by using CSS Mirror Editing in Microsoft Edge DevTools extension for Visual Studio Code.
Grid:
CSS grids
Improved CSS Grid tooling in What's new in DevTools (Microsoft Edge 87).
MDN:
CSS Flexible Box Layout CSS Grid Layout
For history, in the Chromium open-source project, see Issues 1136394 and 1139949.
	 New Flexbox  	(flex) icon helps identify and display flex containers
In the Elements tool, the new Flexbox (flex) icon helps you identify Flexbox containers in your code. Click the Flexbox (flex) icon to turn on or off the overlay effect that outlines a Flexbox container. You can customize the color of the overlay in the Layout pane, which is located next to Styles and Computed.
flexTo turn on and off the overlay effect that outlines the Flexbox container, click the Flexbox () icon.
You can customize the color of the overlay in the Layout pane next to Styles and Computed.
flexThe Flexbox () icon and webpage highlighted:

The Flexbox overlays highlighted in the Layout pane:

Update: This feature has been released and is no longer experimental.
See also:
Getting element information from the Inspect overlay in Analyze pages using the Inspect tool.
Identify nested regions using color highlighting in Use the Inspect tool to detect accessibility issues by hovering over the webpage. Inspect CSS Grid.
 Display alignment icons and visual guides when Flexbox layouts change using CSS properties 
When you edit CSS for your Flexbox layout, CSS autocompletes in the Styles pane now displays helpful icons next to relevant Flexbox properties. To try this new feature, open the Elements tool and select a flex container. Then add or change a property on that container in the Styles pane.
The autocomplete menu now displays icons that indicate the effect of alignment properties such as 
align-content and align-items.
align-itemsgap CSS property is supported as well. In the following figure, the gap CSS property is set to gap: 12px;Additionally, DevTools now displays a guiding line to help you better see the  CSS property. The  and the hatching pattern for each gap is displayed.
align-Autocomplete menu highlighted for CSS properties that start with :

gapFlexbox  in CSS properties and webpage highlighted:

Update: This feature has been released and is no longer experimental.
See also:
Getting element information from the Inspect overlay in Analyze pages using the Inspect tool.
Identify nested regions using color highlighting in Use the Inspect tool to detect accessibility issues by hovering over the webpage. Inspect CSS Grid.
 Add tools quickly with new More Tools button
++You now have a new way to open more tools in Microsoft Edge DevTools. The More Tools icon is a plus sign ( ) to the right of the main panel. To show a list of other tools that you can add to the main panel, click the More Tools () icon:

Update: This feature has been released and is no longer experimental.
See also:
 About the list of tools
 Assistive technologies now announce position and count of CSS suggestions
SuggestionWhen you edit CSS rules, you get a dropdown list of features. This feature wasn't available to users of assistive technologies, since it is announced in Microsoft Edge version 89. A user of assistive technologies can now navigate CSS suggestions in the Styles pane. In Microsoft Edge version 88 and earlier, assistive technology announced  as a user navigated through the list of suggestions when editing CSS in the Styles pane.
In Microsoft Edge version 89, a user of assistive technology now hears the position and count of the current suggestion. Each suggestion is announced as the user navigates through the list of suggestions, such as Suggestion 3 of 5. To learn more about writing CSS in DevTools, see CSS features reference. To view the history of this feature in the Chromium open-source project, see Issue 1157329.
To view a video that displays and reads aloud several suggestions with this experiment turned on, see Voiceover announcing devtools options on YouTube.

See also:
Navigate the Styles pane in Navigate DevTools with assistive technology. CSS features reference
 Emulate Surface Duo and Samsung Galaxy Fold
Test the appearance of your website or app on the following devices in Microsoft Edge.
Surface Duo
Samsung Galaxy Fold
getWindowSegmentsvisualViewport.segments) JavaScript API, go to edge://flagsTo access the new CSS media screen-spanning feature and the  (now  and toggle the flag next to Experimental Web Platform features:

To help enhance your website or app for the dual-screen and foldable devices, use the following features when emulating the device:

For the history of this feature in the Chromium open-source project, see Issue 1054281.
See also:
Emulate mobile devices (Device Emulation).
CSS viewport segments media query for dual-screen detection - CSS media screen-spanning feature. JavaScript visualViewport.segments API for dual-screen devices.
 Microsoft Edge Developer Tools for Visual Studio Code version 1.1.2
The Microsoft Edge Developer Tools for Visual Studio Code extension version 1.1.2 for Microsoft Visual Studio Code has the following changes since the previous release. Microsoft Visual Studio Code updates extensions automatically. To manually update to version 1.1.2, see Update an extension manually.
Added a Close instance button to each item on the target list (#248)
Bumped Microsoft Edge DevTools version from 84.0.522.63 to 85.0.564.40 (#235) Included "Debugger for Microsoft Edge" as a dependency (#233).
Implemented settings option to change extension themes (#229)
You can file issues and contribute to the extension on the vscode-edge-devtools GitHub repo.
See also:
 Microsoft Edge DevTools extension for Visual Studio Code
 Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
 Capture node screenshot beyond viewport 
In Microsoft Edge version 89, node screenshots are more accurate, capturing the full node even if content from the node isn't visible in the viewport. In the Elements tool, right-click an element, and then select Capture node screenshot.

For the history of this feature in the Chromium open-source project, see Issue 1003629.
See also:
 Capture node screenshots using the Elements tool context menu in What's new in DevTools (Microsoft Edge
86)
 Elements tool updates 
 Support forcing the :target CSS state 
:targetidhttp://www.example.com/index.html#section1 URL triggers the :targetid="section1"In the Elements tool, you can now force the :target CSS pseudo-class. The  pseudo-class is triggered when a unique element (the target element) has an  that matches a fragment of the URL. For example, the  pseudo-class on an HTML element with . To try a demo with section 1 highlighted, see CSS :target demo.
Webpage highlighted with no forced CSS:

:target CSS forced and webpage highlighted:

For the history of this feature in the Chromium open-source project, see Issue 1156628.
See also:
 Use state simulation to simulate the hover state of an animated menu item in Verify accessibility of all states of elements.
 Use Duplicate elements to copy elements 
Shift+Alt+Down Arrow (Windows, Linux) or Shift+Option+Down ArrowUse the new Duplicate element shortcut to clone an element. In the Elements tool, right-click an element, and then select Duplicate element. A new element is created under the selected element. To duplicate the element by using the keyboard, press (macOS).

For the history of this feature in the Chromium open-source project, see Issue 1150797.
See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
 Color pickers for custom CSS properties 
ShiftThe Styles pane now displays color pickers for custom CSS properties. To cycle through the RGBA, HSLA, and Hex formats of the color value, press and hold  and then click the color picker:

For the history of this feature in the Chromium open-source project, see Issue 1147016.
See also:
 Change colors with the Color Picker in CSS features reference
 Copy CSS classes and properties 
You can now copy CSS properties quicker with a few new options in the right-click menu. In the Elements tool, select an element. To copy the value, in the Styles pane, right-click a CSS class or a CSS property, and then select a copy option.
Copy options for a CSS class in the right-click menu:
OPTIONDETAILSCopy selectorCopy the current selector name.Copy ruleCopy the rule of the current selector.Copy all declarationsCopy all declarations under the current rule, including nonvalid and prefixed properties.
Copy options for a CSS property in the right-click menu:
OPTIONDETAILSCopy declarationCopy the declaration of the current line.Copy propertyCopy the property of the current line.Copy valueCopy the value of the current line.
For the history of this feature in the Chromium open-source project, see Issue 1152391.
See also:
 CSS features reference
 Cookies updates 
	 New option to display URL 	-decoded cookies
You can now display the URL-decoded cookies value in the Cookies pane. To display the decoded cookie, select Application > Cookies, click any cookie on the list, and then select the checkbox next to Show URL decoded:

For the history of this feature in the Chromium open-source project, see Issue 997625.
See also:
 View, edit, and delete cookies
 Filter and clear visible cookies 
In Microsoft Edge version 88 or earlier, the Application tool only provided a way to clear all cookies with the Clear all cookies button. In Microsoft Edge version 89, you can now select Clear filtered cookies to delete only the filtered cookies.
To filter cookies, select Application > Cookies, and then type in the Filter text box. To delete the displayed cookies, click the Clear filtered cookies button. To display all other cookies, clear the filter text.

For the history of this feature in the Chromium open-source project, see Issue 978059.
See also:
 View, edit, and delete cookies
	 New option to clear third 	-party cookies in the Storage pane
DevTools now clears only first-party cookies by default. To clear website data and first-party cookies only, in the Application tool, in the Application section in the upper left, click Storage, and then click the Clear site data button.
To clear website data and all cookies, select Application > Storage. Select the checkbox next to including third-party cookies, and then click Clear site data:

For the history of this feature in the Chromium open-source project, see Issue 1012337.
See also:
 Application tool, to manage storage
 Network tool updates See also:
 Network features reference
 Persist Record network log setting 
In Microsoft Edge version 88 or earlier, DevTools reset the Record network log setting when a webpage refreshes. In Microsoft Edge version 89, DevTools now persists the Record network log setting:

For the history of this feature in the Chromium open-source project, see Issue 1122580.
See also:
 Record network requests in Network features reference.
 Online option is now No throttling option 
The network emulation option Online is now renamed to No Throttling.

For the history of this feature in the Chromium open-source project, see Issue 1028078.
See also:
Simulate a slower network connection in Inspect network activity.
Emulate slow network connections in Network features reference.
 New copy options in the Console tool, Sources tool, and Styles pane 
 Copy object in the Console and Sources tool 
You can now copy object values in the Console and Sources tools. The ability to copy object values is useful when working with large objects.
In the Console tool, right-click an object, and then select Copy object.

In the Sources tool, on a breakpoint, hover on an object, in the Object popup window, right-click an object, and then select Copy object.

For the history of this feature in the Chromium open-source project, see Issues 1148353 and 1149859.
See also:
Console overview
Sources tool overview
 Copy file name in the Sources tool and Styles pane 
You can now copy a file name by using the right-click menu.
In the Sources tool, right-click a file name, and then select Copy file name.

In the Elements tool > Styles pane, right-click a file name, and then select Copy file name.

For the history of this feature in the Chromium open-source project, see Issues 1155120.
See also:
Sources tool overview
Inspect, edit, and debug HTML and CSS with the Elements tool
 Updates to Frame details 
In the Application tool, the Frames page has the following updates.
 Service Workers information in Frame details 
topThe Application tool now lists a dedicated service worker under the parent frame. In the following figure, service worker details are displayed. To display the service worker details, select Application > Frames > > Service Workers and then click a service worker.

For the history of this feature in the Chromium open-source project, see Issue 1122507.
See also:
 Application tool, to manage storage
 Measure Memory information in Frame details 
performance.measureMemory()performance.measureMemory()In the Frames page of the Application tool, the  API status is now displayed in the API availability section. The new  API estimates the memory usage of the entire webpage.

For the history of this feature in the Chromium open-source project, see Issue 1139899.
See also:
 Application tool, to manage storage
 Dropped frames in the Performance tool 
When you analyze load performance in the Performance tool, the Frames section now marks dropped frames as red. To display the frame rate, hover on a dropped frame:

For the history of this feature in the Chromium open-source project, see Issue 1075865.
See also:
 Record load performance in Performance features reference
	 New color contrast calculation  	- Advanced Perceptual Contrast Algorithm (APCA)

The Advanced Perceptual Contrast Algorithm (APCA) replaces the AA/AAA guidelines contrast ratio in the Color Picker. The Color Picker is used in the Styles tab in the Elements tool.
APCA is a new way to compute contrast. It is based on modern research on color perception. Compared to AA/AAA guidelines, APCA is more context-dependent. The contrast is calculated based on the following spatial properties of the text, color, and context.
Spatial properties of text that include font weight and size.
Spatial properties of color that include perceived contrast between text and background.
Spatial properties of context that include ambient light, surroundings, and intended purpose.
To turn on this experiment, select Settings > Experiments and then select the checkbox next to Enable new Advanced Perceptual Contrast Algorithm (APCA) replacing previous contrast ratio and AA/AAA guidelines. To view the history of this feature in the Chromium open-source project, see Issue 1121900.

See also:
Enable new Advanced Perceptual Contrast Algorithm (APCA) replacing previous contrast ratio and AA/AAA guidelines in Experimental features. Edge 89)_.
Change colors with the Color Picker in CSS features reference.
Test text-color contrast using the Color Picker
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 What's New in DevTools (Microsoft Edge 88)
 	6/21/2022 • 11 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Microsoft Edge and Microsoft Edge WebDriver now available on Linux
.deb or .rpmMicrosoft Edge Dev is now supported on Ubuntu, Debian, Fedora, and openSUSE distributions. Download and install the Microsoft Edge Dev  package directly from the Microsoft Edge Insider site or use the standard package management tools of your Linux distribution.
If you are using a Linux environment in your continuous integration and delivery (CI/CD) solutions, Microsoft
Edge WebDriver is also available on Linux. To get started automating Microsoft Edge with Microsoft Edge WebDriver, see Recent versions at the Microsoft Edge WebDriver page. For help with automating Microsoft Edge with Microsoft Edge WebDriver, see Use WebDriver for test automation.

See also:
 Use WebDriver to automate Microsoft Edge
 Improved webhint and platform tips in the Issues tool
webhint is an open-source tool that provides real-time feedback for websites and local webpages. Starting with Microsoft Edge version 85, see webhint feedback in the Issues tool. Issues that appear in the Issues tool are now easier to see with the addition of the following categories.
Accessibility
Compatibility
Performance
Pitfalls
PWA
Security
You can now filter out third-party issues using a new checkbox. The filter functionality helps you hide issues related to code from third-party libraries or other sources.
To help you see issues that are found by webhint, the Issues tool now displays the following information:

Find and fix problems using the Issues tool webhint extension for Visual Studio Code
 Composited Layers are now in 3D View
You can now visualize Layers content alongside z-index values and the Document Object Model (DOM). This feature helps you debug without switching between the 3D View tool and Layers tools as often.

Update: This feature has been released and is no longer experimental. The Layers tool has been removed and replaced by the 3D View tool.
See also:
 Navigate z-index, DOM, and layers using the 3D View tool
 CSS variable definitions in Styles pane
bodyIn the Styles pane of the Elements tool, CSS variables now link directly to each definition. Click the variable to easily view or change the CSS variable definition. In the example, DevTools displays the CSS attributes for the  element.
--theme-body-backgroundFor example, to display the variable definition for the  CSS variable:
--theme-body-background1. In the Styles pane of the Elements tool, hover over the style  of the CSS variable 
var(--theme-body-background). The tooltip appears, Jump to definition:

--theme-body-background1. Click the style . The Styles pane displays the definition of the style:

See also:
Edit CSS font styles and settings in the Styles pane CSS features reference
 Service worker debugging improvements
The following new features in the Network tool, Application tool, and Sources tool help you build your PWA. Use the following features when you have difficulty debugging your service worker.
startup and fetchstartup or fetchThe routing of a request displays the  events based on the network requests that run through service workers. The timelines are accessed from either the Application or Network tool. The timelines help when you are having trouble with service workers and want to see if something is wrong with the  event.
See also:
 Service Worker improvements
 Application tool 
In the Application tool, view all service worker request routing information by using the new Network requests link.
To display additional context when debugging a service worker:
1. In the Application tool, on the left, select Service Workers.
2. Click the Network requests link:

is:service-worker-interceptedThe Network tool opens in the Drawer and displays all service worker-related network requests. The network requests are filtered using :

3. To move the Network tool to the top panel, close the Drawer:

See also:
Application tool, to manage storage Service Worker improvements
 Network tool 
In the Network tool, you can debug network requests that are run by service workers. (You can also open network requests from within the Application tool, instead of the Network tool.) In the Timing pane of the Network tool, for each request, DevTools displays the following information:
fetchfetchThe start of a request and duration of the bootstrap.
Changes to service worker registration.
The runtime of a  event handler.
The runtime of all  events for loading a client.

See also:
Display the timing breakdown of a request in Network features reference. Service Worker improvements
 Sources tool 
In previous versions of Microsoft Edge, the level of depth in the call stack was limited to the JavaScript code in your service worker. In Microsoft Edge 88, the call stack now displays the initiator of requests that run through your service worker.
service-worker.js(index):157. The service-worker.js(index):157To locate the initiator of the request, use the call stack of your JavaScript code in the service worker. The call stack in the following figure starts with the JavaScript code in your service worker (), and displays a reference to the original webpage request as  file is shown, and the call stack highlights the request originator, :

(index)In the following figure, the reference is selected, and has opened the initiator that made the request. The  webpage is the request initiator:

See also:
View the call stack in JavaScript debugging features
Service Worker improvements
 Copy property value of a network request
In the Network tool, copy the property value of a network request using the new Copy value option. The property value is copied as a decoded JSON value. In previous versions of Microsoft Edge, you had to copy a value using one of the following actions:
Highlight the entire text and copy it.
Store the value as global variable, as applicable, and copy it from the DevTools Console.
To copy the property value to your clipboard, see Copy formatted response JSON to the clipboard in Network features reference.
Copying a property value in DevTools:

Pasting a property value in Microsoft Visual Studio Code:

See also:
 Console overview
For history, in the Chromium open-source project, see Issue 1132084.
 Customize multi-press keyboard shortcuts
Since Microsoft Edge version 87, you can customize keyboard shortcuts for any action in DevTools. In Microsoft Edge version 88, you can now create multi-press keyboard shortcuts.
For example, the red highlight below shows a custom multi-press keyboard shortcut for the Start recording events action:

Update: This feature has been released and is no longer experimental.
See also:
 Edit the keyboard shortcut for a DevTools action in Customize keyboard shortcuts.
For history, in the Chromium open-source project, see Issue #174309.
 The DevTools UI now matches the browser language
In Microsoft Edge version 87, if you turned on the Match browser language setting in DevTools Settings, the DevTools UI language didn't match the browser UI language. In Microsoft Edge version 88, DevTools now matches the browser language if you turn on the Match browser language setting. See Change DevTools language settings.

 Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
 New CSS angle visualization tools 
DevTools now has better support for CSS angle debugging. When an HTML element on your page has CSS angle applied to it, a clock icon is displayed next to the angle in the Styles tool. To toggle the clock overlay, click the clock icon. To change the angle, click anywhere in the clock, drag the needle, or use mouse and keyboard shortcuts.
The following CSS angle is used for the example:
background: linear-gradient(100deg, lightblue, pink);

For more information, see Change angle value with the Angle Clock in CSS features reference.
For updates on this feature in the Chromium open-source project, see Issues 1126178 and 1138633.
 Simulate storage quota size in the Storage pane 
You can now override storage quota size in the Storage pane. This feature allows you to simulate different devices and test the behavior of your website or app in low disk availability scenarios. To simulate the storage quota:
1. Navigate to Application > Storage.
2. Select the Simulate custom storage quota checkbox.
3. Enter a valid number.

For more information, see Emulate mobile devices (Device Emulation). To see updates on this feature in the Chromium open-source project, see Issues 945786 and 1146985.
 Report CORS errors in the Network tool 
Try out this feature by navigating to CORS error demo. Open the Network tool, refresh the page, and observe the failed CORS network request. The status column displays the CORS error. When you hover on the error, the tooltip now displays the error code. In Microsoft Edge version 87 and earlier, DevTools only displayed generic (failed) status for CORS errors.

For real-time updates on this feature in the Chromium open-source project, see Issue 1141824.
See also:
Enhanced CORS debugging support in What's New in DevTools (Microsoft Edge 92) Network features reference
 Frame details view updates 
In the Application tool, there's a Frames section that provides a detailed view for each frame.
See also:
 Application tool, to manage storage
	 Cross 	-origin isolation information in the Frame details view
In the Application tool, there's a Frames section that provides a detailed view for each frame. When you select a frame, the frame detail page appears, including the Security & Isolation section.
SharedArrayBufferpostMessage(). A deprecation warning appears if the SAB and postMessage()The cross-origin isolated status is now displayed under the Security & Isolation section. The new API availability section displays the availability of s (SAB) and whether the buffers can be shared using  is currently available, but the context isn't cross-origin isolated.

SharedArrayBuffersFor more information about cross-origin isolation and why it is required for features like , see WindowOrWorkerGlobalScope.crossOriginIsolated.
For real-time updates of this feature in the Chromium open-source project, see Issue 1139899.
See also:
 Application tool, to manage storage
 New Web Workers information in the Frame details view 
someNameDevTools now organizes web workers under the relevant parent frame. For example, if the  frame
worker.js, then worker.js appears under someNamecreates  in the Frames list. To view the details of the web worker:
1. Open the Application tool.
2. In the list on the left, in the Frames section, expand a frame that contains web workers.
3. Expand the Workers tree.
4. Click a worker.
For real-time updates on this feature in the Chromium open-source project, see Issues 1122507 and 1051466.

See also:
 Application tool, to manage storage
 Display opener frame details for opened windows 
topWindow to https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium, then the WindowtopDevTools now organizes opened Windows under the relevant parent frame. For example, if the  frame opens a appears under  in the Frames list.
To reveal the frame that's responsible for opening another Window, and see that frame in the Elements tool:
1. Open the Application tool.
2. On the left, in the Frames section at the bottom, expand a frame.
Window3. Expand Opened Windows and click the  for the parent frame you want to know about.
4. Click the Opener Frame link.
WindowThe details are displayed about which frame caused the opening of another . To reveal the opener in the Elements tool:
1. Open the Application tool.
2. On the left, in the Frames section at the bottom, expand a frame.
Window3. Click an opened window to open the  details.
4. Click the Opener Frame link.
For the history of this feature in the Chromium open-source project, see Issue 1107766.

See also:
 Application tool, to manage storage
 Copy stacktrace for network initiator 
In the Network tool, to copy the stacktrace to your clipboard, right-click the stacktrace, and then select Copy > Copy stacktrace:

For the history of this feature in the Chromium open-source project, see Issue 1139615.
See also:
 Display the stack trace that caused a request in Network features reference
 Preview Wasm variable value on mouseover 
In the Sources tool, use this feature to see the value of a WebAssembly (Wasm) variable when your code is paused. To display the current value of a variable, hover on a variable:

For real-time updates on this feature in the Chromium open-source project, see Issues 1058836 and 1071432.
See also:
 Using the Debugger pane to debug JavaScript code in Sources tool overview
 Consistent units of measurement for sizes of files and memory 
kB for displaying sizes of files and memory. Previously, DevTools mixed kBKiBDevTools now consistently uses and .
kBKiB or kilobyte (10^3 or 1000 bytes)
 or kibibyte (2^10 or 1024 bytes)
kB in the labels, but used KiBFor example, the Network tool previously used  in calculations. Your feedback showed that this inconsistency caused confusion.
For the history of this feature in the Chromium open-source project, see Issue 1035309.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 What's New in DevTools (Microsoft Edge 87)
 	6/21/2022 • 9 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Improving DevTools localization
To meet your translation needs, the Microsoft Edge DevTools team is focused on improving translation quality. Starting in Microsoft Edge version 87, several strings and terms are locked and don't change, even when the rest of the DevTools are displayed in other languages. The list of affected strings and terms include the following:
service workerURL, XHR, JS, and CSSThe strings in the Lighthouse tool.
The term .
Some of the Network tool filters such as .
The $0 Console Utilities API.
$0 is now available in the Console for users on localized versions of the DevTools. Thank you to the global developer community for helping improve localization of the Microsoft Edge DevTools. Continue to send feedback on localization quality to improve support for DevTools in all locales. For real-time updates on this feature in the Chromium open-source project, see Issue #1136655.

See also:
 Change DevTools language settings
 Move tools between top and bottom panels
DevTools now supports moving tools between the top and bottom panels. Customize your DevTools and improve your productivity by viewing any combination of two tools at the same time. For example, view the Elements and the Sources tools at the same time (by moving the Sources tool to the bottom).
To move any top tool to the bottom, right-click a tab and then select Move to bottom:

To move any bottom tool to the top, right-click a tab and then select Move to top:

For the history of this feature in the Chromium open-source project, see Issue #1075732.
See also:
 Panel tools vs. Drawer tools in About the list of tools
 Save and export using the Network Console
The Network Console tool now has improved compatibility with the Postman v2.1 and OpenAPI v2 schemas.
The Network Console tool now supports the following actions:
Save and export Collections and Environments.
Edit and export sets of environment variables within the Network Console tool.
Entering a name for the new environment:

Selecting the format for the new environment:

Update: This feature has been released and is no longer experimental.
See also:
 Save and export Collections, Environments, and environment variables in Compose and send web API requests using the Network Console tool.
For history, in the Chromium open-source project, see Issue #1093687.
 Improved CSS Grid tooling
The Microsoft Edge DevTools now support the following features for inspecting, viewing, and debugging your CSS grids.
 Display a simplified grid overlay using the Inspect tool, or get more detailed information with persistent overlays.
 To enable persistent grid overlays, click the grid icon next to a grid container element in the Elements tool, or click the grid in the Layout tool.
You can enable persistent overlays for multiple grids.
The new Layout tool allows you to easily toggle grid overlays and configure the appearance and the content for each.
The features are turned on by default.

Update: This feature has been released and is no longer experimental.
See also:
 CSS grids
For history, in the Chromium open-source project, see Issue #1047356.
The Microsoft Edge DevTools team is collaborating with the Chrome DevTools team and Chromium community to add new flexbox tooling features to DevTools. For updates on flexbox tooling in the Chromium open-source project, see Issue #1136394.
 Customize keyboard shortcuts in Settings
You can now customize the keyboard shortcut for any action in the DevTools. Since Microsoft Edge version 84, you can choose between Visual Studio Code and DevTools (default) presets for keyboard shortcuts. Starting in Microsoft Edge version 87, you can further customize keyboard shortcuts.

Update: This feature has been released and is no longer experimental.
See also:
 Edit the keyboard shortcut for a DevTools action in Customize keyboard shortcuts.
For history, in the Chromium open-source project, see Issue #174309.
 Introducing the Microsoft Edge Tools for Visual Studio Code extension
The Elements for Visual Studio Code and Network for Visual Studio Code extensions are now merged into the new Microsoft Edge Developer Tools for Visual Studio Code extension. Use the Microsoft Edge DevTools for the following activities without leaving Microsoft Visual Studio Code.
Debug the DOM
Edit CSS
Inspect network traffic
With the extension, launch Microsoft Edge, connect to an existing instance of the browser, or use a headless browser directly from your editor. To start contributing and filing issues with your feedback about this extension, see the Microsoft Edge Developer Tools for Visual Studio Code repo on GitHub.
Using the extension in full browser mode:

Using the extension in headless mode:

For more information, see Microsoft Edge DevTools extension for Visual Studio Code.
 Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
 New WebAuthn tool 
In earlier versions of Microsoft Edge, there was no native WebAuthn debugging support. You needed physical authenticators to test your web application with the Web Authentication API. With the new WebAuthn tool, you can do the following without the use of any physical authenticators:
Emulate authenticators.
Customize attributes of authenticators. Inspect states of authenticators.
...You can emulate authenticators and debug the Web Authentication API with the new WebAuthn tool. To open the WebAuthn tool, click the Customize and control DevTools () icon > More tools > WebAuthn.
For real-time updates on this feature in the Chromium open-source project, see Issue #1034663.
Opening the WebAuthn tool:

The WebAuthn tool:

For more information, see Emulate authenticators and debug WebAuthn.
  
Elements tool updates See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
 View the Computed sidebar pane in the Styles pane 
Toggle the Computed pane in the Styles pane. The Computed pane in the Styles pane is collapsed by default. To display or hide the Computed pane within the Styles pane, click the Show Computed Styles sidebar () button.
Opening the Computed sidebar pane:

The Computed sidebar pane:

For real-time updates on this feature in the Chromium open-source project, see Issue #1073899.
See also:
 View only the CSS that is actually applied to an element in CSS features reference
 Grouping CSS properties in the Computed pane 
To view your applied CSS with less scrolling, group the CSS properties by categories in the Computed pane. You can also selectively focus on a set of related properties while you inspect your CSS. From the Elements tool, select an element. To group (or ungroup) the CSS properties, toggle the Group checkbox.

For real-time updates on this feature in the Chromium open-source project, see Issues #1096230, #1084673, and #1106251.
See also:
 View only the CSS that is actually applied to an element in CSS features reference
 Lighthouse 6.4 in the Lighthouse tool 
The Lighthouse tool is now running Lighthouse 6.4. For a full list of changes, see the Lighthouse release notes. For real-time updates on this feature in the Chromium open-source project, see Issue #772558.
See also:
 Lighthouse tool performance.mark  () events in the Timings section
performance.mark()performance.mark()The Timings section of a recording in the Performance tool now marks  events. To try this feature and measure the performance of your JavaScript code, add  events to your code.
start and end performance markers before and after a forThe following code adds  loop:
performance.mark('start'); for (var i = 0; i < 1000; i+=7;){   console.log(i);
} performance.mark('end');
performance.mark()Then, open the Performance tool and see the Timings section to record your JavaScript code. The  events you added are now displayed in the recording.

	 New resource 	-type and url filters in the Network tool
resource-type and urlresource-type:imageUse the new  keywords in the Network tool to filter network requests. For example, use  to focus on the network requests that are images:

resource-type and urlTo discover more special keywords such as , see filter requests by properties.
For real-time updates on this feature in the Chromium open-source project, see Issues #1121141 and #1104188.
 Frame details view updates 
In the Application tool, in the list of pages on the left, the bottom page is Frames, which often lists a frame named top.
 Display COEP and COOP reporting to endpoint 
In the Application tool, in the list of pages on the left, the bottom page is Frames, which often lists a frame named top. Select the frame to view the frame detail view, which includes the Security & Isolation section.
In the Security & Isolation section of the frame detail page, view the Cross-Origin Embedder Policy (COEP)
reporting to endpoint. The Reporting API defines Report-Toand Cross-Origin Opener Policy (COOP) , which is
a new HTTP header that gives you a way to specify the server endpoints for the browser to send warnings and errors.

For real-time updates on this feature in the Chromium open-source project, see Issue #1051466.
See also:
Display opener frame details for opened windows in What's new in DevTools (Microsoft Edge 88) The Application tool, to manage storage
	 Display COEP and COOP report 	-only mode
In the Application tool, in the list of pages on the left, the bottom page is Frames, which often lists a frame named top. Select the frame to view the frame detail view, which includes the Security & Isolation section.
report-onlyreport-onlyThe Security & Isolation section of the frame detail page now displays the  label for COEP and COOP that are set to  mode.

For real-time updates on this feature in the Chromium open-source project, see Issue #1051466.
See also:
Display opener frame details for opened windows in What's new in DevTools (Microsoft Edge 88) The Application tool, to manage storage
 View and fix color contrast issues in the CSS Overview tool 
The CSS Overview tool now displays a list of elements on your page that have color contrast issues. The CSS Overview Accessible Colors Demo page has an example of a color contrast issue.
To view a list of elements that have a color contrast issue, on Contrast issues, click Text. To open the element in the Elements tool, click an element in the list. To help fix contrast issues, the Microsoft Edge DevTools automatically provide color suggestions.

Update: This feature has been released and is no longer experimental.
See also:
 CSS Overview tool
For history, in the Chromium open-source project, see Issue #1120316.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 What's New in DevTools (Microsoft Edge 86)
 	6/21/2022 • 10 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Announcements from the Microsoft Edge DevTools team
 Match keyboard shortcuts in DevTools to Visual Studio Code 
In Microsoft Edge 86, you can match keyboard shortcuts in the DevTools to your shortcuts in Microsoft Visual Studio Code.

To activate this feature, see Customize keyboard shortcuts in DevTools.
F5For example, the keyboard shortcut for pausing or continuing running a script in Visual Studio Code is . With
F8F5the DevTools (Default) preset, that same shortcut in the DevTools is , but when you select the Visual Studio Code preset, that shortcut is now also .
Chromium issue #174309
 Emulate Surface Duo and Samsung Galaxy Fold 
You can now test the look and feel of your website or app on two new devices: Surface Duo and Samsung Galaxy Fold in Microsoft Edge.
To help enhance your website or app for the dual-screen and foldable devices, use the following features when emulating the device:

Update: This feature has been released and is no longer experimental.
See also:
 Emulate dual-screen and foldable devices in Microsoft Edge DevTools
Chromium issue: #1054281
 CSS grid overlay improvements and new experimental grid features 
The Microsoft Edge DevTools team and the Chrome DevTools team collaborate on additional features. The new features include multiple overlays that are persistent and configurable from a new Layout pane on the Elements tool:

Update: This feature has been released and is no longer experimental.
See also:
CSS grid debugging features in What's new in DevTools (Microsoft Edge 85). Inspect CSS Grid in Microsoft Edge DevTools.
Chromium issue: #1047356
 Table copied from the Console preserves formatting 
console.tableIn Microsoft Edge 85 or earlier, in the Console, the formatting of a copied  was lost. If you copied the output from the table Console API, and pasted it, only the text of the table was kept.
table Console API output in Microsoft Edge 85 or earlier:

table Console API output from Microsoft Edge 85 or earlier pasted into Visual Studio Code:

In Microsoft Edge 86 or later, when you copy a table from the Console, the formatting is now preserved.
table Console API output in Microsoft Edge 86 or later:

table Console API output from Microsoft Edge 86 or later pasted into Visual Studio Code:

Chromium issue: #1115011 See also:
 Console features reference
 Source Order Viewer for easier accessibility testing 
The new accessibility helper displays the order in which elements reside in the source file:

This feature makes it easier to test the way screen reader and keyboard users experience your website or app. Screen readers and keyboard navigation depend on content being placed in a particular order in the source code of your website or app, so that it matches the rendered page. The Source Order Viewer displays potential differences in order between the rendered page and the source code.
Update: This feature has been released and is no longer experimental.
See also:
 Test keyboard support using the Source Order Viewer
Chromium issue: #1094406
 Highlight all search results in Elements tool 
In Microsoft Edge 84 and 85, the first search result in the Elements tool did not highlight. The remaining search results were highlighted correctly.
Thank you for sending your feedback and helping improve Chromium. Your feedback uncovered Issue #1103316 in the open-source Chromium project.

The issue is now fixed in all versions of Microsoft Edge.
Chromium issue: #1103316 See also:
 Search for nodes in Get started viewing and changing the DOM
 Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge that were contributed to the open-source Chromium project.
 New Media tool 
DevTools now displays media players information in the Media tool.
...To open the new Media tool, select Customize and control DevTools () > More tools > Media.

Before the new Media tool in DevTools, the logging and debug information about video players was located
edge://media-internalsunder the Recent Players setting. To open the Recent Players setting, go to  and then select the Players tool.
View live content and inspect potential issues more quickly, such as investigating:
Why frames are dropped.
Why JavaScript is interacting with the player in an unexpected way.
 Capture node screenshots using the Elements tool context menu 
You can now capture node screenshots using the right-click menu in the Elements tool.
For example, to take a screenshot of the table of contents, right-click the element, and then select Capture node screenshot.

Chromium issue: #1100253 See also:
 Capture node screenshot beyond viewport in What's new in DevTools (Microsoft Edge 89)
 Issues tool updates 
The Issues warning bar on the Console tool is now replaced with a regular message.

See also:
 Find and fix problems using the Issues tool
	 Third 	-party issues
Third-party issues are now hidden by default in the Issues tool. Select the new Include third-party issues checkbox to view the issues.

Chromium issues: 1096481, 1068116, 1080589
For more information, see Filter by origin in Find and fix problems using the Issues tool.
 Emulate missing local fonts 
local()In the Rendering tool, use the new Disable local fonts checkbox to emulate missing  sources in 
@font-face rules.
Rubik font is installed on your device and the @font-face src rule uses it as a local()For example, when the font, Microsoft Edge uses the local font file from your device.
local()When Disable local fonts is selected, DevTools ignores the  fonts and fetches each font from the network:

This feature is useful if you use two different copies of the same font during development, such as:
A local font for your design tools. A web font for your code.
Use Disable local fonts to make it easier to:
@font-faceDebug and measure loading performance and optimization of web fonts.
Verify accuracy of your CSS  rules.
Discover differences between local versions installed on your device and a web font.
Chromium issue: #384968
For more information, see Disable local fonts in Performance features reference.
See also Analyze rendering performance with the Rendering tool in Performance features reference.
 Emulate inactive users 
The Idle Detection API allows developers to detect inactive users and react on idle state changes. You can now use DevTools to emulate idle state changes in the Sensors tool for both the user state and the screen state instead of waiting for the actual idle state to change. You can open the Sensors tool from the Drawer.

Chromium issue: #1090802 See also:
 Override geolocation with the Sensors tool
	 Emulate prefers 	-reduced-data
NOTE
edge://flags#enable-experimental-web-platform-featuresIn Microsoft Edge 86, to enable this feature, go to  and turn on the Experimental Web Platform features flag. The emulation option is only displayed if the flag is enabled.The prefers-reduced-data media query detects user content preferences for reduced data. If selected, the user receives alternate page content that uses less data.
prefers-reduced-dataYou can now use DevTools to emulate the  media query, in the Rendering tool:

Chromium issue: #1096068 See also:
 Emulate dark or light schemes in the rendered page
 Support for new JavaScript features 
DevTools now has better support for the following JavaScript language features:
JAVASCRIPT LANGUAGE FEATUREDETAILSLogical assignment operators&&=, ||=, and ??=DevTools now supports logical assignment with the new  operators in the Console and Sources tools.Pretty-print numeric separatorsDevTools now properly pretty-prints the numeric separators in the Sources tool.Chromium issues: 1086817, 1080569 See also:
Run JavaScript in the Console
Using the Editor pane to view or edit files in Sources tool overview
 Lighthouse 6.2 in the Lighthouse panel 
The Lighthouse tool is now running Lighthouse 6.2. For a full list of changes, see the Lighthouse release notes.
Chromium issue: #772558
For more information, see Lighthouse tool.
 Deprecation of other origins listing in the Service Workers pane 
The Application tool now provides a link from the Service workers pane to view the full list of service workers from other origins. To access the list of service workers without opening DevTools, go to 
edge://service-worker-internals/?devtools.
Previously DevTools displayed a list nested under the Application tool > Service workers pane.

Chromium issue: #807440 See also:
Service Worker improvements
Application tool, to manage storage
 Show coverage summary for filtered items 
DevTools now recalculates and displays a summary of coverage information dynamically. The dynamic display is triggered when filters are applied in the Coverage tool. Previously, the Coverage tool always displayed a summary of all coverage information.
In the following example, the Coverage summary initially shows 
344 kB of 1.7 MB (20%) used so far. 1.4 MB unused.:

After CSS filtering is applied, the Coverage summary shows 
26.8 kB of 408 kB (7%) used so far. 381 kB unused.:

Chromium issue: #1061385
 New frame details view in Application panel 
In the Application tool, there's now a Frames section that provides a detailed view for each frame. To access the detailed view, click a frame under the Frames menu in the Application tool.

Chromium issue: #1093247 See also:
 Application tool, to manage storage
 Frame details for opened windows 
Open windows and pop-up windows now display under the frame tree as well. The detailed view of the opened windows includes additional security information.

Chromium issue: #1107766 See also:
 Application tool, to manage storage
 Security and isolation information 
Secure context, Cross-Origin-Embedder-Policy (COEP), and Cross-Origin-Opener-Policy (COOP) are now displayed in the frame details.

The Chromium project plans to add more security information to the frame details.
Chromium issue: #1051466 See also:
 Application tool, to manage storage
 Understand security issues using the Security tool
 Elements and Network panel updates See also:
Inspect, edit, and debug HTML and CSS with the Elements tool Network features reference
 Accessible color suggestion in the Styles pane 
DevTools now provides color suggestions for low color contrast text.
h1 has low-contrast text. To fix the contrast, open the color picker of the colorIn the example below,  property
in the Styles pane. After you expand the Contrast ratio section, DevTools provides AA and AAA color suggestions. Select the suggested color, to apply the color.

Chromium issue: #1093227 See also:
Change colors with the Color Picker in CSS features reference Test text-color contrast using the Color Picker
 Reinstate Properties pane in the Elements panel 
In the Elements tool, the Properties pane is back. The Properties pane was deprecated in Microsoft Edge 84. The Microsoft Edge DevTools team and the Chrome DevTools team are planning improvements for inspecting properties of elements.

Chromium issue: #1116085 See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
 Autocomplete custom fonts in the Styles pane 
font-familyImported font faces are now added to the list of CSS autocompletion when editing the  property in the Styles pane.
monospaceFor example, if  is a custom font installed on the local machine, it appears in the CSS completion list. In previous versions of Microsoft Edge, the font was not displayed.

Chromium issue: #1106221 See also:
 Edit CSS font styles and settings in the Styles pane
 CSS features reference
 Consistently display resource type in Network panel 
In the Network tool, DevTools now consistently displays the same resource type as the original network request. When redirection (HTTP status code 302) happens, DevTools appends / Redirect to the value in the Type column.
Previously, DevTools sometimes changed the value in the Type column to Other.

Chromium issue: #997694 See also:
 Network features reference
 Clear buttons in the Elements and Network tools 
The following text boxes now have Clear buttons:
The filter text boxes in the Styles pane and Network tool. The DOM search text box in the Elements tool.
Click the Clear button to remove any inputted text.
Clear buttons in the Elements tools:

Clear buttons in the Network tools:

Chromium issue: #1067184 See also:
Inspect, edit, and debug HTML and CSS with the Elements tool Network features reference
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 What's New in DevTools (Microsoft Edge 85)
 	6/21/2022 • 8 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Announcements from the Microsoft Edge DevTools team
 CSS grid debugging features 
The Microsoft Edge DevTools team is collaborating with the Chrome DevTools team and Chromium community to add new CSS grid debugging features to DevTools. You can now display grid line numbers, grid gaps, and extended grid lines as an on-page overlay. Plus, more improvements to the grid tools are coming soon.

Update: This feature has been released and is no longer experimental.
To try out the experiment with a sample, see CSS Grid planner example.
Chromium issue #1047356 See also:
 Inspect CSS Grid
 Edit and Replay requests with the Network Console 
You can now use Edit and Replay on requests in the Network Log using the Network Console. Open the Network Log, right-click, and then select Edit and Replay:

A new panel, the Network Console opens in the DevTools Drawer and automatically populates with information for the HTTP request. To display the response returned from the server, edit the request (if needed) and select Send.
You can also use the Network Console to create and send HTTP requests directly from the DevTools.

Tip: To display Network Console in the main (top) panel instead of the DevTools Drawer, see moving tools between panels.
Update: This feature has been released and is no longer experimental.
Chromium issue #1093687
  
Service worker respondWith events in the Timing tab
respondWith service worker events. The respondWithfetchrespondWith promise of the fetchThe Timing tab of the Network tool now includes service worker event shows the duration from the time immediately before the service worker  event handler starts running to the time when the  handler is settled.

fetchExpand Response received to display additional information from the  response like 
CacheStorageCacheName, serviceWorkerResponseSource, and ResponseTime.

Chromium issue #1066579 See also:
Display the timing relationship of requests in Network features reference.
Display the timing breakdown of a request in Network features reference.
webhint feedback in the Issues panel  

webhint is an open-source tool that provides real-time feedback on the accessibility, cross-browser compatibility, security, performance, PWAs, and other common web development issues of websites. You can view webhint feedback in the Issues panel.

To enable the experiment, see Turning an experiment on or off and select the checkbox next to Enable webhint. Open the Issues panel to display feedback from webhint.
Chromium issue #1070378 See also:
webhint extension for Visual Studio Code Enable webhint in Experimental features
 Move tools between panels 
Normally, tools such as Elements and Network may only be opened in the main (top) panel of DevTools. Similarly, tools such as 3D View and Issues may only be opened in the drawer (bottom) panel of DevTools. You can now customize your DevTools layout by moving tools between the top and bottom panels.

Update: This feature has been released and is no longer experimental.
Chromium issue #897944 See also:
 About Panel and Drawer tools in Overview of DevTools.
 Improved Initiator tooltip in the Network panel 
In Microsoft Edge 83 and 84, tooltips for the Initiator column, which shows the cause of the resource request, in the Network Log displayed with a horizontal scrollbar. You were only able to display the call stack that initiated the request by scrolling horizontally in the tooltip.

Starting with Microsoft Edge 85, you can now display the Initiator call stack in the tooltip without scrolling horizontally.

Chromium issue #1069404
 Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge 85 that were contributed to the open source Chromium project.
	 Style editing for CSS 	-in-JS frameworks
The Styles pane now has better support for editing styles that were created with the CSS Object Model (CSSOM) APIs. Many CSS-in-JS frameworks and libraries use the CSSOM APIs under the hood to construct styles.
You can now edit styles added in JavaScript using Constructable Stylesheets. Constructable Stylesheets are a new way to create and distribute reusable styles when using Shadow DOM.
h1 styles added with CSSStyleSheetFor example, the  (CSSOM APIs) were not editable previously. The styles are editable now in the Styles panel.

Give this feature a try with a sample that uses CSS-in-JS. See Style editing for CSS-in-JS frameworks.
Chromium issue #946975
 Lighthouse 6 in the Lighthouse panel 
The Lighthouse panel is now running Lighthouse 6. For a full list of all changes, see v6.0.0 release notes.
Lighthouse 6.0 introduces three new metrics to the report: Largest Contentful Paint (LCP), Cumulative Layout Shift (CLS), and Total Blocking Time (TBT).
The performance score formula has also been reweighted to better reflect the loading experience of the user. Chromium issue #772558 See also:
 Lighthouse tool
 First Meaningful Paint deprecation 
First Meaningful Paint (FMP) is deprecated in Lighthouse 6.0. FMP has also been removed from the Performance panel. Largest Contentful Paint is the recommended replacement for FMP.
Chromium issue #1096008 See also:
 Lighthouse tool
 Support for new JavaScript features 
DevTools now has better support for some of the latest JavaScript language features:
name?. now works in addition to name. and name[ Optional chaining syntax autocompletion. Property auto-completion in the Console now supports optional chaining syntax, for example, .
 Syntax highlighting for private fields. Private class fields are now properly syntax-highlighted and prettyprinted in the Sources panel.
 Syntax highlighting for Nullish coalescing operator. DevTools now properly pretty-prints the nullish coalescing operator in the Sources panel. Chromium issues #1073903, #1083214, #1083797 See also:
Run JavaScript in the Console
JavaScript debugging features
 New app shortcut warnings in the Manifest pane 
In the Application tool, App shortcuts help users quickly start common or recommended tasks within a web app.
In the Application tool, the Manifest pane now shows warnings for the following conditions:
When the app shortcut icons are smaller than 96x96 pixels.
When the app shortcut icons and manifest icons aren't square (since the icons are ignored).
See also:
 The Application tool, to manage storage
 Consistent display of the Computed pane 
The Computed pane in the Elements tool is now displayed consistently as a pane across all viewport sizes.
Previously, the Computed pane merged inside of the Styles pane when DevTools was narrow.

Chromium issue #1073899 See also:
 View only the CSS that is actually applied to an element in CSS features reference  Bytecode offsets for WebAssembly files 
DevTools now uses bytecode offsets for displaying line numbers of Wasm disassembly. The line numbers make it clearer that you are looking at binary data, and is more consistent with how the Wasm runtime references locations. Chromium issue #1071432 See also:
 Inspect a JavaScript ArrayBuffer with the Memory Inspector tool
	 Line 	-wise copy and cut in Sources Panel
When performing copy or cut with no selection in the Sources panel editor, DevTools copies or cuts the current line of content.

Chromium issue #800028
 Console Settings updates 
 Ungroup same console messages 
The Group similar toggle in Console Settings now applies to duplicate messages. Previously it just applied to similar messages.
hellohelloFor example, previously, DevTools did not ungroup the  messages even though Group similar is unchecked. Now, the  messages are ungrouped.

Give this feature a try with a sample that sends duplicate messages to the Console.
Chromium issue #1082963 See also:
 Turn off message grouping in Console features reference
 Persisting Selected context only settings 
The Selected context only settings in Console Settings is now persisted. Previously the settings were reset every time you closed and reopened DevTools. The change makes the setting behavior consistent with other Console Settings options.

Chromium issue #1055875 See also:
 Filter out messages from different contexts - in Console features reference
 Performance panel updates 
	 JavaScript compilation cache information in  	Performance tool
JavaScript compilation cache information is now always displayed in the Summary panel of the Performance tool. Previously, DevTools did not show anything related to code caching if code caching did not happen.

Chromium issue #912581 See also:
 Performance features reference
 Navigation timing alignment in the Performance panel 
Previously, the Performance panel showed times in the rulers based on when the recording started. The timing has now changed for recordings where the user navigates. DevTools now shows ruler times relative to the navigation, instead of when the recording started.

DOMContentLoadedThe times for , First Paint, First Contentful Paint, and Largest Contentful Paint events are updated to be relative to the start of the navigation, which means the timing matches the timings reported by 
PerformanceObserver.
Chromium issue #974550 See also:
 Performance features reference
 New icons for breakpoints, conditional breakpoints, and logpoints 
Update: As of 2022, breakpoints are now indicated by a blue rectangle, instead of a red circle.
The Sources panel has new designs for breakpoints, conditional breakpoints, and logpoints. Breakpoints are represented by a red circle, just like Visual Studio Code and Visual Studio. Icons are added to differentiate conditional breakpoints and logpoints.

Chromium issue #1041830 See also:
 Pause code with breakpoints
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 What's new in DevTools (Microsoft Edge 84)
 	6/21/2022 • 8 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Announcements from the Microsoft Edge DevTools team
 Use the DevTools in Windows high contrast mode 
Microsoft Edge DevTools is now displayed in high-contrast mode when Windows is in high-contrast mode.

F12 or Ctrl+Shift+IFollow the instructions to turn on high-contrast mode in Windows. To open DevTools in Microsoft Edge, select . DevTools is displayed in high-contrast mode.
Note: DevTools currently supports high-contrast mode on Windows, but not on macOS. Chromium issue #1048378 See also:
Apply a color theme to DevTools
Check for contrast issues with dark theme and light theme
  
Match keyboard shortcuts in the DevTools to Visual Studio Code
From your feedback and the Chromium public issue tracker, the Microsoft Edge DevTools team learned that you wanted to be able to customize keyboard shortcuts in DevTools. In Microsoft Edge 84, you can now match keyboard shortcuts in DevTools to Visual Studio Code, which is just one of the features the team is working on for shortcut customization.

To try the experiment:
?1. In DevTools, open Settings by selecting 	 or choosing the  icon in the top-right corner of DevTools.
2. In the Experiments section, select the checkbox Enable custom keyboard shortcuts settings tab (requires reload).
3. Reload DevTools.
4. Open Settings again, and select the Shortcuts section.
5. Click the Match shortcuts from preset dropdown list, select DevTools (Default), and then select Visual Studio Code.
The keyboard shortcuts in DevTools now match the shortcuts for equivalent actions in Visual Studio Code.
F5F8F5For example, the keyboard shortcut for pausing or continuing running a script in Visual Studio Code is . With the DevTools (Default) preset, that same shortcut in DevTools is , but with the Visual Studio Code preset, that shortcut is now also .
The feature is currently available in Microsoft Edge 84 as an experiment, so please share your feedback with the team!
Chromium issue #174309 See also:
 Customize keyboard shortcuts
 Remote debug Surface Duo emulators 
You can now remotely debug your web content that's running in the Surface Duo emulator using the full power of Microsoft Edge DevTools.
With the Surface Duo emulator, you can test how your web content renders on a new class of foldable and dualscreen devices. The emulator runs the Android operating system and provides the Microsoft Edge Android app. Load your web content in the Microsoft Edge app and debug it with DevTools:

edge://inspectThe  page in a desktop instance of Microsoft Edge shows the SurfaceDuoEmulator with a list of the open tabs or PWAs that are running on the Surface Duo emulator:

Click inspect for the tab or PWA that you want to debug, to open DevTools. Follow the step-by-step guide to remotely debug your web content on the Surface Duo emulator: Remotely debug Surface Duo emulators.
 Resize the DevTools drawer more easily 
In Microsoft Edge 83 or earlier, you resized the DevTools Drawer by hovering inside the toolbar of the drawer. The drawer behaved differently than the other resize controls for panes in DevTools where you hover on the border of the pane to resize it. The following image shows how resizing the drawer worked in Microsoft Edge version 83 or earlier:

Starting with Microsoft Edge 84, you can resize the drawer by hovering over the border. This change aligns the behavior for resizing the DevTools drawer with other panes in DevTools. The following image shows how resizing the drawer works in Microsoft Edge 84 or later:

Chromium issue #1076112
 Screencasting navigation buttons display focus 
When remote debugging an Android device, a Windows 10 or later device, or a Surface Duo emulator, you can toggle screencasting with the  icon in the top-left corner of DevTools. With screencasting enabled, you can navigate the tab in Microsoft Edge on the remote device from the DevTools window.
ShiftTabIn Microsoft Edge 84, these navigation buttons are now also keyboard-accessible. For example, pressing + from the screencasted URL bar puts focus on the Refresh button:

Chromium issue #1081486
 Network panel Details pane is now accessible 
In Microsoft Edge 84, the Details pane in the Network tool now takes focus when you open it for a resource in the Network Log. This change allows screen readers to read out and interact with the content of the Details pane.

Chromium issue #963183
 Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge 84 that were contributed to the open source Chromium project.
 Fix site issues with the new Issues tool in the DevTools Drawer 
The new Issues tool in the Drawer at the bottom of DevTools reduces the notification fatigue and clutter of the
Console. Currently, the Console is the central place for website developers, libraries, frameworks, and Microsoft Edge to log messages, warnings, and errors. The Issues tool aggregates warnings from the browser in a structured, aggregated, and actionable way. The Issues tool links to affected resources within DevTools, and provides guidance on how to fix the issues.
Over time, more warnings will be surfaced in the Issues tool rather than in the Console, to streamline the Console messages.
To get started, see Find and fix problems using the Issues tool.

Chromium issue #1068116
 View accessibility information in the Inspect Mode tooltip 
The Inspect Mode tooltip now indicates whether the element has an accessible name and role and is keyboardfocusable.

Chromium issue #1040025 See also:
 Analyze pages using the Inspect tool
 Performance panel updates See also:
 Performance features reference
 View Total Blocking Time information in the footer 
After recording your load performance, the Performance panel now shows Total Blocking Time (TBT) information in the footer. TBT is a load performance metric that helps quantify how long a page takes to become usable. TBT essentially measures how long a page only appears to be usable (because the content is rendered to the screen); but the page isn't actually usable, because JavaScript is blocking the main thread and therefore the page doesn't respond to user input. TBT is the main metric for approximating First Input Delay.
To get Total Blocking Time information, don't use the Refresh Page  workflow for recording page load performance.
Instead, select Record , manually reload the page, wait for the page to load, and then stop recording.
Total Blocking Time: UnavailableIf  is displayed, Microsoft Edge DevTools did not get the required information from the internal profiling data in Microsoft Edge.

Chromium issue #1054381 See also:
 Performance features reference
 Layout Shift events in the new Experience section 
The new Experience section of the Performance panel helps you detect layout shifts. Cumulative Layout Shift (CLS) is a metric that helps you quantify unwanted visual instability.
Click the Layout Shift event to display the details of the layout shift in the Summary pane. Hover on the Moved from and Moved to fields to visualize where the layout shift occurred.

See also:
 Performance features reference
 More accurate promise terminology in the Console 
Promise, the Console incorrectly provided PromiseStatus value set to resolvedWhen logging a .

fulfilled, which aligns with the PromisePromiseThe Console now uses the term  specification. For more information about the  specification, see States and Fates on GitHub.

V8 issue #6751 See also:
 Console overview
 Styles pane updates See also:
 Edit CSS font styles and settings in the Styles pane
 Support for the revert keyword 
The autocomplete UI of the Styles pane now detects the revert CSS keyword, which reverts the cascaded value of a property to the previous value applied to the styling of the element.

Chromium issue #1075437 See also:
 Edit CSS font styles and settings in the Styles pane
  
Image previews
background-imageHover on a  value in the Styles pane to display a preview of the image in a tooltip.

Chromium issue #1040019 See also:
 Edit CSS font styles and settings in the Styles pane
	 Color Picker now uses space 	-separated functional color notation
rgb()rgb(0, 0, 0) is equivalent to rbg(0 0 0)CSS Color Module Level 4 specifies that color functions, such as , should support space-separated arguments. For example, .
Shift and selecting the background-colorWhen you select colors with the Color Picker or alternate between color representations in the Styles pane by holding  value, the space-separated argument syntax is displayed.

You should also display the syntax in the Computed pane and the Inspect Mode tooltip.
Microsoft Edge DevTools is using the new syntax because upcoming CSS features such as color() don't support the deprecated comma-separated argument syntax.
The space-separated argument syntax has been supported in most browsers for a while. See Can I use: Spaceseparated functional color notations?
Chromium issue #1072952
 Deprecation of the Properties pane in the Elements panel 
console.dir($0)The Properties pane in the Elements tool is deprecated. Run  in the Console instead.

 Reference console.dir()
$0
 App shortcuts support in the Manifest pane 
In the Application tool, the Manifest page now shows app shortcuts. App shortcuts help users quickly start common or recommended tasks within a web app. The app shortcuts menu is shown only for Progressive Web Apps that are installed on the user's desktop or mobile device.

See also:
Overview of Progressive Web Apps (PWAs)
Debug Progressive Web Apps (PWAs)
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 What's New in DevTools (Microsoft Edge 83)
 	6/21/2022 • 9 minutes to read • Edit OnlineFollowing the updated Chromium schedule, we are adjusting our schedule for upcoming Microsoft Edge releases and cancelling the Microsoft Edge 82 release. Check out our blog post for more info.
To check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Announcements from the Microsoft Edge DevTools team
 Remotely debug Microsoft Edge on Windows 10 or later Devices 
The Remote Tools for Microsoft Edge (Beta) app is now available in the Microsoft Store. This app extends the Windows Device Portal. You can connect from Microsoft Edge running on your development machine to a remote Windows 10 or later device and display a list of targets. This list of targets includes all tabs in Microsoft Edge and PWAs open on the Windows device. Use DevTools on your development machine against a target running on the remote Windows device.

Read our guide for setting up your Windows 10 device and your development machine for remote debugging: Remotely debug Windows devices.
Let us know about your remote debugging experience by tweeting or clicking the Send Feedback icon.
 New ways to access Settings 
There are tons of settings for DevTools that you can customize to make DevTools look, feel, and work the way you need. In Microsoft Edge 83, accessing Settings in DevTools is now much easier. Open Settings by clicking the gear icon next to Console alerts and the main menu.

You can also open Settings from the Main Menu under More tools.

Chromium issue #1050855 See also:
 DevTools customization and settings in Simplify DevTools using Focus Mode
 New and improved infobars 
Informational notification bars (infobars) in DevTools now have an improved look and more functionality. In Microsoft Edge 83, infobars are easier to read and provide buttons so you can take the relevant action right away.

Chromium issue #1056348
 Navigate the Color Picker with your keyboard 
In previous versions of Microsoft Edge, you couldn't navigate the Shades section of the Color Picker with the keyboard. In Microsoft Edge 83, you can now use the keyboard to move the selector in the Shades section of the Color Picker.
color and background-colorThe Color Picker is a GUI in the Elements panel for changing  declarations:

Chromium issue #963183 See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
 Properties tab now populates after a page refresh 
In Microsoft Edge 81 and earlier, the Properties tab in the Elements panel was broken by page refreshes. When you refreshed the page, the Properties tab didn't populate the properties of the currently selected element:

In Microsoft Edge 83, you can now display the properties of the currently selected element after a page refresh in the Properties tab:

Chromium issue #1050999 See also:
 Inspect, edit, and debug HTML and CSS with the Elements tool
 Use the arrow keys to scroll in the Changes tool 
The Changes tool tracks any changes you have made to CSS or JavaScript in DevTools. You can use the Changes tool to quickly display all your changes and take those back to your editor/IDE.
Ctrl+Shift+Pchanges. Select the Show Changes command and then press EnterTo open the Changes tool, press  in DevTools to open the Command Menu, and then type . The Changes tool opens in the Drawer.
When you have made a change to a minified file, the Changes tool enables you to scroll horizontally to display all of your minified code. Starting in Microsoft Edge 83, you can now scroll horizontally using the arrow keys on your keyboard.

If you use screen readers or the keyboard to navigate around DevTools, send us your feedback by tweeting at us or clicking the Send Feedback icon.
Chromium issue #963183 See also:
 Track changes to files using the Changes tool
 Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge 83 that were contributed to the open source Chromium project.
 Emulate vision deficiencies 
In the Rendering tool, use the new Emulate vision deficiencies feature to get a better idea of how people with different types of vision deficiencies experience your site:

DevTools can emulate blurred vision and the following types of color vision deficiencies:
COLOR VISION DEFICIENCYDETAILSProtanopiaThe inability to perceive any red light.DeuteranopiaThe inability to perceive any green light.TritanopiaThe inability to perceive any blue light.AchromatopsiaThe inability to perceive any color, except for shades of grey (extremely rare).Less extreme versions of these color vision deficiencies exist, and are more common. For example, protanomaly is a reduced sensitivity to red light (as opposed to protanopia, which is the complete inability to perceive red light). However, these -omaly vision deficiencies aren't as clearly defined: every person with such a vision deficiency is different, and may see things differently (being able to perceive more or less of the relevant colors).
By designing for the more extreme simulations in DevTools, your web apps are guaranteed to be accessible to people with vision deficiencies as well.
Send your feedback by tweeting or clicking the Send Feedback icon.
Chromium issue #1003700 See also:
Emulate vision deficiencies
Analyze rendering performance with the Rendering tool in Performance features reference Types of Colour Blindness, at Colourblindawareness.org.
 Emulate locales 
To emulate locales, in the Sensors tool, select a location from the Location dropdown list. (To access the
SensorsSensors tool, open the Command Menu and type .) After you select a location, DevTools modifies the current default locale, which affects the following code:

Intl.* APIs, for example: new Intl.NumberFormat().resolvedOptions().localeString.prototype.localeCompare and *.prototype.toLocaleString123_456..toLocaleString()navigator.language and navigator.languagesOther locale-aware JavaScript APIs such as , for example: 
DOM APIs such as 
The Accept-Language HTTP request header
NOTE
navigator.language and navigator.languagesUpdates to  aren't visible immediately, but only after the next
Accept-Languagenavigation or page refresh. Changes to the  HTTP header are only reflected for subsequent requests.
To try a demo, see Locale-dependent code example.
Chromium issue #1051822 See also:
 Override geolocation with the Sensors tool
	 Cross 	-Origin Embedder Policy (COEP) debugging
The Network panel now provides Cross-Origin Embedder Policy debugging information.
The Status column now provides a quick explanation of why a request was blocked as well as a link to view the headers of that request for further debugging:

The Response Headers section of the Headers tab provides more guidance on how to resolve the issues:

Send your feedback by tweeting or clicking the Send Feedback icon.
Chromium issue #1051466 See also:
 Block requests in Inspect network activity.
 New icons for breakpoints, conditional breakpoints, and logpoints 
Update: As of 2022, breakpoints are now indicated by a blue rectangle, instead of a red circle.
The Sources panel has new icons for breakpoints, conditional breakpoints, and logpoints:
Breakpoints () are represented by red circles.
Conditional Breakpoints () are represented by half-red half-white circles. Logpoints () are represented by red circles with Console icons.
The motivation for the new icons was to make the UI more consistent with other GUI debugging tools (which usually color breakpoints red) and to make it easier to distinguish between the 3 features at a glance. Chromium issue #1041830 See also:
 Pause code with breakpoints
 View network requests that set a specific cookie path 
cookie-pathUse the new  filter keyword in the Network tool to focus on the network requests that set a specific cookie path.
cookie-pathTo discover more keywords like , see Filter requests by properties in Network features reference.
 Dock to left from the Command Menu 
To move DevTools to the left of the viewport (rendered webpage), open the Command Menu and run the 
Dock to left command. The Dock to left feature has been available since Microsoft Edge 75, but it was
previously only accessible from the main menu. You can now access the Dock to left feature from the Command Menu, as well.

"
Send your feedback by tweeting or clicking the Send Feedback icon.
Chromium issue #1011679 See also:
 Change DevTools placement (Undock, Dock to bottom, Dock to left)
 The Audits panel is now the Lighthouse panel 
The DevTools team frequently got feedback from web developers that while it was possible to run Lighthouse from DevTools, when they tried it out, they couldn't find a "Lighthouse" panel. So, the Audits panel is now called the Lighthouse panel.

Note: The Lighthouse panel provides links to content hosted on third-party websites. Microsoft is not responsible for and has no control over the content of these sites and any data they may collect.
See also:
 Lighthouse tool
 Delete all Local Overrides in a folder 
After setting up Local Overrides, you can right-click a directory and then select the new Delete all overrides option to delete all Local Overrides in that folder.

Send your feedback by tweeting or clicking the Send Feedback icon.
Chromium issue #1016501 See also:
 Override webpage resources with local copies (Overrides tab)
 Updated Long tasks UI 
A Long Task is JavaScript code that monopolizes the main thread for a long time, causing a web page to freeze.
You've been able to visualize Long Tasks in the Performance panel for a while now, but in Microsoft Edge 83 the Long Task visualization UI in the Performance panel has been updated. The Long Task portion of a task is now colored with a striped red background:

Send your feedback by tweeting or clicking the Send Feedback icon.
Chromium issue #1054447
 Maskable icon support in the Manifest pane 
There's a new checkbox, Show only the minimum safe area for maskable icons, in the Manifest pane of the Application tool.
Android Oreo introduced adaptive icons, which display app icons in a variety of shapes across different device models. Maskable icons are a new icon format that support adaptive icons, which enable you to ensure that your PWA icon looks good on devices that support the maskable icons standard.
To check that your maskable icon looks good on Android Oreo devices, in the Manifest pane of the Application tool, select the new checkbox Show only the minimum safe area for maskable icons:

This feature launched in Microsoft Edge 81. The updates covered here in Microsoft Edge 83 weren't covered in What's New in DevTools (Microsoft Edge 81).
See also:
 View, edit, and delete cookies - Articles about the Application tool.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 What's New in DevTools (Microsoft Edge 81)
 	6/21/2022 • 7 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Announcements from the Microsoft Edge DevTools team
 Accessibility improvements to the DevTools 
The DevTools team has contributed 170 changes to Chromium to address high-impact color contrast, keyboard, and screen reader issues in the DevTools. Every developer building the web should be able to use the DevTools.

Want to learn how to make your web page accessible to all of your users? Download the Accessibility Insights and webhint extensions for Microsoft Edge to get started.
If you use screen readers or the keyboard to navigate around the DevTools, send us your feedback by tweeting at us or clicking the Send Feedback icon!
Chromium issue #963183 See also:
Accessibility-testing features
Navigate DevTools with assistive technology
 Using the DevTools in other languages 
Many developers use other developer tools, like StackOverflow and Visual Studio Code, in their native language, not just in English. We're excited to announce localization for the DevTools, which you can now use in one of 10 languages besides English:
Chinese (Simplified) - 中文（简体）
Chinese (Traditional) - 中文（繁體）
French - français
German - deutsch
Italian - italiano
Japanese - 日本語
Korean - 한국어
Portuguese - português
Russian - русский Spanish - español
edge://settings/languagesThe DevTools automatically match the language you use for Microsoft Edge in .
F1If you want Microsoft Edge to be in one language and your DevTools to remain in English, select  in the DevTools to open Settings and disable Match browser language.

Console messages aren't localized. Only the strings used in the DevTools UI are displayed in the language you use for Microsoft Edge.
If you want to use the DevTools in a different language than the ones that are available, tweet at us or click the Send Feedback icon. Chromium issue #941561 See also:
 Change DevTools language settings webhint Microsoft Edge extension  
The webhint Microsoft Edge extension allows you to easily scan your web page and get feedback on accessibility, browser compatibility, security, performance, and more within the DevTools. Read more at https://webhint.io.

Try the webhint browser extension in Microsoft Edge. Once you install the extension, open the DevTools and select the Hints tool. From here, run a customizable site scan. Head over to webhint.io to learn more.
See also:
 The webhint extension for Visual Studio Code
3  D View
Use the 3D View to debug your web application by navigating through the Document Object Model (DOM) or the z-index stacking context.

Ctrl+Shift+P to open the Command Menu, start typing 3d viewTo access the 3D View, press , and then select Show 3D View.
The Microsoft Edge team is working with the Chromium team on the UI and adding more functionality to the 3D View, so please use the Send Feedback icon!
Chromium issue #987787 See also:
 Navigate z-index, DOM, and layers using the 3D View tool
 Visual Studio Code extensions 
The DevTools team has also released some extensions for Visual Studio Code that let you use the power of the DevTools directly from your text editor! Check out the extensions below:
See also:
Visual Studio Code for web development
Microsoft Edge DevTools extension for Visual Studio Code
 Elements for Microsoft Edge 
Use the Elements tool from within Visual Studio Code by adding the Elements for Microsoft Edge Visual Studio Code extension.

Update: As of 2022, the Elements for Microsoft Edge extension is now the Microsoft Edge DevTools extension for Visual Studio Code.
For more information, check out Microsoft Edge DevTools extension for Visual Studio Code.
 Debugger for Microsoft Edge 
With the Debugger for Microsoft Edge Visual Studio Code extension, debug JavaScript running in Microsoft Edge directly from Visual Studio Code.

Update: As of 2022, the Debugger for Microsoft Edge Visual Studio Code extension has been replaced by a built-in debugger for Microsoft Edge in Visual Studio Code. See Debug Microsoft Edge in Visual Studio Code.
webhint  
webhintwebhintThe webhint Visual Studio Code extension uses  to improve your web page while you are writing it. This extension runs and reports diagnostics on your workspace files based on  analysis.

Learn more about the Visual Studio Code webhint extension.
See also:
Visual Studio Code for web development
The webhint extension for Visual Studio Code
 Visual Studio integration 
In Visual Studio 2019 version 16.2 or later, use the Visual Studio debugger to debug JavaScript running in Microsoft Edge. Download Visual Studio 2019 to try this feature out!

To learn more about debugging Microsoft Edge from Visual Studio, see Visual Studio for web development.
 Tracking prevention Console messages 
Tracking prevention is a unique feature in Microsoft Edge that protects you from being tracked by websites you have not visited before. The default tracking prevention setting is Balanced mode, which blocks 3rd party trackers and known malicious trackers for an experience that balances privacy and web compatibility. To give you more insight into the compatibility of your web page when certain trackers are blocked, warning messages were added in the Console when a tracker is blocked.

Read more about tracking prevention and the balance between privacy and web compatibility.
See also:
Tracking prevention in Microsoft Edge
Console overview
 Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge 81 that were contributed to the open source Chromium project.
 Moto G4 support in Device Mode 
After enabling the Device Toolbar, simulate the dimensions of a Moto G4 viewport from the Device list.

Click Show Device Frame to show the Moto G4 hardware around the viewport.

Related features:
Capture screenshotOpen the Command Menu and run the  command to take a screenshot of the viewport that includes the Moto G4 hardware (after enabling Show Device Frame).
Throttle the network and CPU to more accurately simulate a mobile user's web browsing conditions.
Chromium issue #924693
 Cookie -related updates See also:
View, edit, and delete cookies
Display cookies in Network features reference
 Blocked cookies in the Cookies pane 
The Cookies pane in the Application panel now displays blocked cookies with a yellow background.

Chromium issue #1030258
 Cookie priority in the Cookie pane 
The Cookies tables in the Network and Application tools now include a Priority column.
Caution: Chromium-based browsers, like Microsoft Edge, are the only browsers that support cookie priority. Chromium issue #1026879
 Edit all cookie values 
All cells in the Cookie tables are editable now, except cells in the Size column because that column represents the network size of the cookie, in bytes. For an explanation of each column, see Fieldsin View, edit, and delete
cookies.

 Copy as Node.js fetch to include cookie data 
fetchTo get a  expression that includes cookie data, right-click a network request, and then select Copy > Copy as Node.js fetch.

Chromium issue #1029826
 More accurate web app manifest icons 
Previously, the Manifest pane in the Application panel sent its own requests in order to display web app manifest icons. DevTools now shows the exact same manifest icon that Microsoft Edge uses.

Chromium issue #985402 See also:
 Open the Cookies pane in View, edit, and delete cookies
 Hover on CSS content properties to display unescaped values 
contentIn the Styles pane of the Elements tool, to display the unescaped version of a value of a  property, hover on the value.
p::afterFor example, in this demo when you inspect the  pseudo-element an escaped string is displayed in the Styles pane:

contentWhen you hover on the  value, the unescaped value is displayed.

See also:
 CSS features reference
 More detailed source map errors in the Console 
The Console now provides more detail on why a source map failed to load or parse. Previously it just provided an error without explaining what went wrong.

See also:
Console overview
Map the processed code to your original source code, for debugging
 Setting for disabling scrolling past the end of a file 
To prevent the default UI behavior that allows you to scroll well past the end of a file in the Sources panel, open Settings and then clear the checkbox Preferences > Sources > Allow scrolling past end of file.


See also:
 Using the Editor pane to view or edit files in Sources tool overview.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 What's new in DevTools (Microsoft Edge 80)
 	6/21/2022 • 9 minutes to read • Edit OnlineTo check out the latest features of Microsoft Edge DevTools and the Microsoft Edge DevTools extension for Microsoft Visual Studio Code and Visual Studio, read these announcements.
To stay up to date and get the latest DevTools features, download an Insiders preview version of Microsoft Edge. Whether you're on Windows, Linux, or macOS, consider using Canary (or another preview channel) as your default development browser. The Beta, Dev, and Canary versions of Microsoft Edge run as separate apps, sideby-side with the stable, released version of Microsoft Edge. See Microsoft Edge Insider Channels.
For the latest announcements, follow the Microsoft Edge team on Twitter. To report a problem with DevTools or ask for a new feature, file an issue in the MicrosoftEdge/DevTools repo.
 Announcements from the Microsoft Edge DevTools team
 Accessibility improvements to the DevTools 
The DevTools team has contributed 170 changes to Chromium to address high-impact color contrast, keyboard, and screen reader issues in the DevTools. Every developer building the web should be able to use the DevTools.

Want to learn how to make your web page accessible to all of your users? Download the Accessibility Insights and webhint extensions for Microsoft Edge to get started.
If you use screen readers or the keyboard to navigate around the DevTools, send your feedback by tweeting at us or selecting the Send Feedback icon!
Chromium issue #963183 See also:
Accessibility-testing features
Navigate DevTools with assistive technology
 Using the DevTools in other languages 
Many developers use other developer tools, like StackOverflow and Visual Studio Code, in their native language,
not just in English. We're excited to announce localization for the DevTools, which you can now use in one of 10 languages besides English:
Chinese (Simplified) - 中文（简体）
Chinese (Traditional) - 中文（繁體）
French - français
German - deutsch
Italian - italiano
Japanese - 日本語
Korean - 한국어
Portuguese - português
Russian - русский
Spanish - español
edge://flagsedge://settings/languagesGo to  and set the Enable localized Developer Tools flag to Enabled. Also set the Developer Tools experiments flag to Enabled. Restart Microsoft Edge and open the DevTools. The DevTools match the language you use for Microsoft Edge in .

If you want to use the DevTools in a different language than the ones that are available, tweet at us or click the Send Feedback icon. Chromium issue #941561 See also:
 Change DevTools language settings webhint Microsoft Edge extension  
The webhint Microsoft Edge extension allows you to easily scan your web page and get feedback on accessibility, browser compatibility, security, performance, and more within the DevTools. Read more at https://webhint.io.

Try the webhint browser extension in Microsoft Edge. Once you install the extension, open DevTools and then select the Hints tool. From here, run a customizable site scan. Head over to webhint.io to learn more.
See also:
 The webhint extension for Visual Studio Code
3  D View
Use the 3D View to debug your web application by navigating through the Document Object Model (DOM) or the z-index stacking context.

edge://flagsTo access the 3D View, go to  and ensure that the Developer Tools experiments flag is set to
F1Enabled. Restart Microsoft Edge and open the DevTools. Select  in the DevTools or open the Settings >
Ctrl + Shift + PExperiments section, and turn on the Enable 3D View checkbox. Now, press , type in 3D View and select Show 3D View.
We're working on the UI and adding more functionality to the 3D View so please send us your feedback. Chromium issue #987787 See also:
 Navigate z-index, DOM, and layers using the 3D View tool
 Visual Studio Code extensions 
The DevTools team has also released some extensions for Visual Studio Code that let you use the power of the DevTools directly from your text editor. Check out the following extensions.
 Elements for Microsoft Edge 
Use the Elements tool from within Visual Studio Code by adding the Elements for Microsoft Edge Visual Studio Code extension.

Update: As of 2022, the Elements for Microsoft Edge extension is now the Microsoft Edge DevTools extension for Visual Studio Code.
For more information, check out Microsoft Edge DevTools extension for Visual Studio Code.
 Debugger for Microsoft Edge 
With the Debugger for Microsoft Edge Visual Studio Code extension, debug JavaScript running in Microsoft Edge directly from Visual Studio Code.

Update: As of 2022, the Debugger for Microsoft Edge Visual Studio Code extension has been replaced by a built-in debugger for Microsoft Edge in Visual Studio Code. See Debug Microsoft Edge in Visual Studio Code.
webhint  
webhintwebhintThe webhint Visual Studio Code extension uses  to improve your web page while you're writing it! This extension runs and reports diagnostics on your workspace files based on  analysis.

Learn more about the Visual Studio Code webhint extension.
See also:
Visual Studio Code for web development
The webhint extension for Visual Studio Code
 Visual Studio integration 
In Visual Studio 2019 version 16.2 or later, use the Visual Studio debugger to debug JavaScript running in Microsoft Edge. Download Visual Studio 2019 to try this feature out.

Read our blog post to learn how to debug Microsoft Edge from Visual Studio.
To learn more about debugging Microsoft Edge from Visual Studio, see Visual Studio for web development.
 Tracking prevention Console messages 
Tracking prevention is a unique feature in Microsoft Edge that blocks you from being tracked by a website before you visited it. The default tracking prevention setting is Balanced mode, which blocks 3rd party trackers and known malicious trackers for an experience that balances privacy and web compatibility. To give you more insight into the compatibility of your web page when certain trackers are blocked, The Microsoft Edge team added warning messages in the Console when a tracker is blocked.

Read more about tracking prevention and the balance between privacy and web compatibility.
See also:
Tracking prevention in Microsoft Edge
Console overview
 Announcements from the Chromium project
The following sections announce additional features available in Microsoft Edge 80 that were contributed to the open source Chromium project.
 Support for let and class redeclarations in the Console 
let and classThe Console now supports redeclarations of  statements. The inability to redeclare was a common annoyance for web developers who use the Console to experiment with new JavaScript code.
WARNING
let or classRedeclaring a  statement in a script outside of the Console or within a single Console input still causes a 
SyntaxError.letFor example, previously, when re-declaring a local variable with , the Console threw an error:

Now, the Console allows the redeclaration:

Chromium issue #1004193 See also:
Console overview
Run JavaScript in the Console
 Improved WebAssembly debugging 
DevTools has started to support the DWARF Debugging Standard, which means increased support for stepping over code, setting breakpoints, and resolving stack traces in your source languages within DevTools.
See also:
Filter Wasm resource type in the Network tool in What's New in DevTools (Microsoft Edge 92). WebAssembly Debugging: Enable DWARF support in Experimental features.
 Network panel updates 
 Request Initiator Chains in the Initiator panel 
You can now view the initiators and dependencies of a network request as a nested list. This may help you understand why a resource was requested, or what network activity a certain resource (such as a script) caused.

After logging network activity in the Network panel, select a resource and then go to the Initiator panel to view the Request Initiator Chain:
ai.2.min.jsai.2.min.jshttps://www.microsoftedgeinsider.comhttps://www.microsoftedgeinsider.comai.2.min.jsThe inspected resource is bold. In the screenshot above,  is the inspected resource. The resources above the inspected resource are the initiators. In the screenshot above,  is the initiator of . In other words,  caused the network request for .
https://dc.services.visualstudio.com/v2/track is a dependency of ai.2.min.js The resources below the inspected resource are the dependencies. In the screenshot above, . In other words, 
ai.2.min.js caused the network request for https://dc.services.visualstudio.com/v2/track.
ShiftInitiator and dependency information can also be accessed by holding  and then hovering over network resources. See Display initiators and dependencies in Network features reference.
Chromium issue #842488
 Highlight the selected network request in the Overview 
After you select a network resource in order to inspect it, the Network panel now puts a blue border around that resource in the Overview. This can help you detect if the network request is happening earlier or later than expected.

Chromium issue #988253
See Hide the Overview pane in Network features reference.
 URL and path columns in the Network panel 
Use the new Path and URL columns in the Network tool to display the absolute path or full URL of each network resource.

To display the new columns, right-click the Waterfall table header, and then select Path or URL. Chromium issue #993366 See also:
Network features reference.
Sort requests in Network features reference mentions the Waterfall column.
	 Updated User 	-Agent strings
User-AgentDevTools supports setting a custom User-Agent string through the Network Conditions panel. The User-Agent string affects the  HTTP header attached to network resources, and also the value of 
navigator.userAgent.
The predefined User-Agent strings have been updated to reflect modern browser versions.

Show Network ConditionsTo access Network Conditions, open the Command Menu and run the  command.
NOTE
You can also set User-Agent strings in Device Mode.
Chromium issue #1029031 See also:
Network conditions tool
Override the user agent string
 Audits panel updates 
In a later release, the Audits panel was renamed as the Lighthouse panel.
 New configuration UI 
The configuration UI has a new, responsive design, and the throttling configuration options have been simplified. For more information on the throttling UI changes, see Audits Panel Throttling.

See also:
 Lighthouse tool
 Coverage tool updates 
	 Per 	-function or per-block coverage modes
The Coverage tool has a new dropdown menu that lets you specify whether code coverage data should be collected per function or per block. Per block coverage is more detailed but also far more expensive to collect. DevTools uses per function coverage by default now.
Cau t ion
You may notice large code coverage differences in HTML files depending on whether you use per function or per block mode. When using per function mode, inline scripts in HTML files are treated as functions. If the script runs at all, DevTools marks the entire script as used code. If the script doesn't run at all, DevTools marks the script as unused code.

 Coverage must now be initiated by a page refresh 
Toggling code coverage without a page refresh has been removed because the coverage data was unreliable. For example, a function may be reported as unused if the runtime was a long time ago and the V8 garbage collector has cleaned it up. Chromium issue #1004203 See also:
 Find unused JavaScript and CSS code with the Coverage tool
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Experimental features
 	6/21/2022 • 15 minutes to read • Edit OnlineMicrosoft Edge DevTools provide access to experimental features that are still in development. This article lists and describes the experimental features which are in either:
The latest version of the Canary preview channel of Microsoft Edge. The latest version of the Stable version of Microsoft Edge.
All channels of Microsoft Edge have experimental features. You can get the latest experimental features by using the Microsoft Edge Canary channel. To view the full list available in your version of Microsoft Edge, see the Settings > Experiments page in DevTools.
These experiments could be unstable or unreliable and may require you to restart DevTools.
 Experiments which are turned on by default
The following experimental features are turned on by default. You can use these features right away, without changing any settings. You can turn off these default experimental features, if needed.
Turned on by default in Microsoft Edge Stable v101:
Enable Reporting API panel in the Application panel
Display more precise changes in the Changes tab
Tooling for CSS layers in the Styles pane
Enable webhint
Show issues in Elements
Open source files in Visual Studio Code
Turned on by default in Microsoft Edge Canary v104:
Enable Reporting API panel in the Application panel
Display more precise changes in the Changes tab
Use Lighthouse panel with timespan and snapshot modes
Tooling for CSS layers in the Styles pane
Enable color picking outside the browser window
Enable webhint
Show issues in Elements
Open source files in Visual Studio Code
 Turning an experiment on or off
Experimental features are constantly being updated and might cause performance issues. This is one reason you might want to turn off an experiment.
To turn an experiment on or off in Microsoft Edge:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
Shift+?2. In DevTools, on the main toolbar, click the Settings () button. Or, press 	.
3. On the left side of the Settings panel, select the Experiments page.

4. On the Experiments page, select or clear the checkbox for an experiment. Some experiments are turned on (selected) by default.
5. Click Close () in the upper right to close DevTools Settings.
6. Click the Reload DevTools button.
 Restoring defaults for which experiments are selected
To restore the default settings for which experimental features are turned on:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
Shift+?2. In DevTools, on the main toolbar, click the Settings () button. Or, press . The Settings panel opens, with the Preferences page selected.
3. At the bottom of the Preferences page, click the Restore defaults and refresh button, and then click Close ().
 Filtering the experiments
You can filter the experimental features by text included in the title.
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
Shift+?2. In DevTools, on the main toolbar, click the Settings () button. Or, press . The Settings panel opens, with the Preferences page selected.
3. On the left side of the Settings panel, select the Experiments page.
4. Click in the Filter text box and enter text, such as timeline. As you type, only the matching checkboxes are shown in the Experiments page.
5. To end filtering, clear the Filter text box.
 Providing feedback about the experiments
We're eager to hear your feedback about experimental features. To share feedback with us, Contact the Microsoft Edge DevTools team.
One of the UI experiments adds a new way to provide feedback: when the Focus Mode experiment is turned on, at the bottom of the Activity Bar, select Help () > Feedback.
 List of experiments
Most of the experiments that appear in the latest version of the Canary preview channel of Microsoft Edge are listed below.
 Allow extensions to load custom stylesheets
Some Microsoft Edge Add-ons can define custom color themes for DevTools. If you install an add-on with a theme, you need to enable the Allow extensions to load custom stylesheets experiment to view the add-on themes.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Capture node creation stacks
To capture JavaScript stack traces when DOM nodes are added to the DOM at runtime, enable this experiment. The captured stack traces are displayed in the Stack Trace pane of the Elements panel.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Protocol Monitor
DevTools communicates with the inspected page using the DevTools protocol.
To monitor the messages sent and received by DevTools to debug the inspected page:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
Shift+?2. In DevTools, on the main toolbar, click the Settings () button. Or, press . The Settings panel opens, with the Preferences page selected.
3. On the left side of the Settings panel, select the Experiments page.
4. Select the Protocol Monitor checkbox, and then click Close () to close Settings.
Ctrl+Shift+P5. Open the Command Menu (), and then type protocol in the text box.
6. Select Show Protocol monitor. The message appears: "One or more settings have changed which requires a reload to take effect."
7. Click the Reload DevTools button that appears next to the message.
8. The Protocol monitor tool is displayed in the Drawer at the bottom of DevTools.
 This checkbox is present in Microsoft Edge Stable v101.
 This checkbox is present in Microsoft Edge Canary v104.
 Show CSP Violations view
Adds the CSP Violations tool, which displays any Content Security Policy (CSP) violations that are detected on the inspected webpage.

 Record coverage while performance tracing
Records coverage while performance tracing.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Show option to take heap snapshot where globals are treated as root
Shows the option to take a heap snapshot where globals are treated as root.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Show back/forward cache blocking reasons in the frame tree structure view
Whether to show back/forward cache blocking reasons in the frame tree structure view.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Timeline: event initiators
Whether to include event initiators in the Timeline.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Timeline: WebGL-based flamechart
Whether to use a WebGL-based flamechart in the Timeline.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 WebAssembly Debugging: Enable DWARF support
Enables DWARF support for WebAssembly debugging. See Improved WebAssembly debugging in What's new in DevTools (Microsoft Edge 80).
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Console: Resolve variable names in expressions using source maps
Uses source maps to automatically map original variable names to minified variable names when evaluating expressions in the Console.
See Map the processed code to your original source code, for debugging.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Enable new Advanced Perceptual Contrast Algorithm (APCA) replacing previous contrast ratio and AA/AAA guidelines
The Advanced Perceptual Contrast Algorithm (APCA) replaces the AA/AAA guidelines contrast ratio in the Color Picker. The Color Picker is used in the Styles tab in the Elements tool.
APCA is a new way to compute contrast. It is based on modern research on color perception. Compared to AA/AAA guidelines, APCA is more context-dependent. The contrast is calculated based on the following spatial properties of the text, color, and context.
Spatial properties of text that include font weight and size.
Spatial properties of color that include perceived contrast between text and background.
Spatial properties of context that include ambient light, surroundings, and intended purpose.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
See also:
New color contrast calculation - Advanced Perceptual Contrast Algorithm (APCA) in What's New in DevTools (Microsoft Edge 89).
Change colors with the Color Picker in CSS features reference. Test text-color contrast using the Color Picker
 
Enable full accessibility tree view in the Elements panel
Adds a button in the Elements tool which toggles between the DOM tree and the accessibility tree.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Enable the Font Editor tool within the Styles pane
You can use the visual Font Editor to edit fonts. Use it define fonts and font characteristics. The visual Font Editor helps you do the following:
Switch between units for different font properties
Switch between keywords for different font properties
Convert units
Generate accurate CSS code
To use the visual Font Editor:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
2. In DevTools, on the main toolbar, select the Elements tab. If the Elements tab isn't visible, click the More tabs () button, or else the More Tools () button.
3. In the Styles tab, select the Font Editor icon.

For more information about the visual Font Editor, see Edit CSS font styles and settings in the Styles pane.
For more information, see Edit CSS font styles and settings in the Styles pane.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Enable automatic contrast issue reporting via the Issues Panel
Enables automatic contrast issue reporting in the Issues tool.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Enable experimental cookie features
Enables experimental cookie features.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Enable Reporting API panel in the Application panel
Use the Reporting API to catch certain errors such as security violations or deprecated API calls. These errors happen when users visit your site and are sent to a server endpoint. Enable this experiment to add the Reporting API section in the Application panel, which lists all of the reports sent to the endpoint.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Display more precise changes in the Changes tab
See More precise changes in the Changes tab.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Sync CSS changes in the Styles pane
Whether to sync CSS changes in the Styles tab in the Elements tool.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Local overrides for response headers
Whether to use local overrides for response headers.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Use Lighthouse panel with timespan and snapshot modes
Adds a selector to the Lighthouse tool to switch between different reporting modes. At the moment, the Navigation and Snapshot modes are supported.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
See also:
 Lighthouse tool
 Tooling for CSS layers in the Styles pane
@layerAdds increased support for the  CSS rule in the Styles pane. CSS rules in the Styles pane are grouped by the layers they belong to. A layer overview widget is displayed, which shows the layer tree for the currently inspected element.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Enable color picking outside the browser window
Allows you to move the mouse cursor when it's an eyedropper tool, over anywhere on your screen, not just within the Microsoft Edge window.
In the Elements tool, in the Styles tab, click on any color preview. The Color Picker opens. Click the Toggle color picker () button. The mouse cursor becomes an eyedropper. Click anywhere on your monitor to select a color.
This checkbox is not present in Microsoft Edge Stable v101. This checkbox is present in Microsoft Edge Canary v104.
See also:
 Change colors with the Color Picker in CSS features reference
 Log DevTools uncaught exceptions to Console
Controls whether to log DevTools uncaught exceptions in the Console tool.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Enable webhint
webhint is an open-source tool that provides real-time feedback for websites and local webpages. The type of feedback provided by webhint includes:
Accessibility
Cross-browser compatibility
Security
Performance
Progressive Web Apps (PWAs)
Other common web development issues
The webhint experiment displays the webhint feedback in the Issues panel. Select an issue to display documentation about the solution and a list of the affected resources on your website. Select a resource link to open the relevant Network, Sources, or Elements pane in DevTools.

Enable this experiment to view syntax errors under HTML in the DOM view of the Elements tool. For more information, see Wavy underlines highlight code issues and improvements in Elements tool.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Focus Mode
Focus Mode is a new user interface for DevTools. Focus Mode is designed to simplify and streamline the DevTools UI, without compromising its feature set.
Focus Mode replaces the main row of tabs with an Activity Bar, which is a compact toolbar with distinctive icons. The Activity Bar makes it possible to pin, rearrange, and open your favorite tools, for quick access. The Activity Bar also provides access to user settings, help, and other features.
Focus Mode also provides a Quick View list, to open a second tool alongside the tool that's already selected in the Activity Bar.
See Reduce the complexity of DevTools with Focus Mode.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Open source files in Visual Studio Code
The Open source files in Visual Studio Code experiment replaces the code editor of the Sources tool with Visual Studio Code, for editing local files. When you turn on this experiment, Developer Tools detects when you edit a local file, and prompts you to select a folder to use as your Workspace.
When you select a folder to use as your Workspace, selecting any link to a file in DevTools opens the file in Visual Studio Code. In previous versions of Microsoft Edge, this action opened the file in the code editor of the Sources tool in DevTools.

Any edits that you make in DevTools now change the file on the hard drive and sync live with Visual Studio Code. You can read about setting up your workspace in Opening source files in Visual Studio Code.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Automatically pretty print in the Microsoft Edge Sources Panel
When this experiment is turned on, when you display a minified file in the Sources panel, the file is opened in a single tab in the Sources panel, pretty-printed.
When this experiment is turned off, a UI prompt with a button asks you whether to pretty-print the file. The file is opened in an additional tab which has an appended suffix of :formatted.
A minified file is concatenated into a single long line.
In contrast, pretty print presents the contents of a file in an indented, more human-readable format.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Ignore List for JavaScript frames on Timeline
Whether to include the Ignore list for JavaScript frames on the Timeline.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Input events on Timeline overview
Controls whether to include Input events on the Timeline overview.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 
Live heap profile
Controls whether to live-update the heap profile.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Sampling heap profiler timeline
Controls whether to show the Sampling heap profiler timeline.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Timeline: invalidation tracking
Controls whether to show invalidation tracking on the Timeline.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Timeline: show all events
Controls whether to show all events on the Timeline.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Timeline: V8 Runtime Call Stats on Timeline
Controls whether to show v8 runtime call stats on the Timeline.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Timeline: Replay input events
Controls whether to replay input events on the Timeline.
This checkbox is present in Microsoft Edge Stable v101.
This checkbox is present in Microsoft Edge Canary v104.
 Enable instrumentation breakpoints
Whether to halt at test breakpoints. This experiment makes breakpoints more reliable.
This checkbox is not present in Microsoft Edge Stable v101. This checkbox is present in Microsoft Edge Canary v104.
See also:
Enable synchronization on instrumentation breakpoints
The first time source files are loaded, breakpoints might not trigger
 
 Simplify DevTools using Focus Mode
 	6/21/2022 • 5 minutes to read • Edit OnlineFocus Mode is a new user interface for DevTools. Focus Mode is designed to simplify and streamline the DevTools UI, without compromising its feature set.
Focus Mode replaces the main row of tabs with an Activity Bar, which is a compact toolbar with distinctive icons. The Activity Bar makes it possible to pin, rearrange, and open your favorite tools, for quick access. The Activity Bar also provides access to user settings, help, and other features.
Focus Mode also provides a Quick View list, to open a second tool alongside the tool that's already selected in the Activity Bar.

 Enable Focus Mode
The Microsoft Edge team is enabling Focus Mode to a subset of users to collect early feedback. Some users will have Focus Mode enabled by default, while others need to enable it first.
To check if you have Focus Mode enabled already, or to enable or disable it:
F11. Press  to open Settings.
2. Click Experiments and scroll down to the Focus Mode checkbox.
If the Focus Mode checkbox is selected, Focus Mode is already enabled. Select or clear the checkbox to enable or disable Focus Mode:

3. Close the Settings page. If you changed the Focus Mode experiment state, click the Reload DevTools button for the change to take effect.
 Main differences from the default user interface
Here are the main differences between the DevTools default user interface and Focus Mode.
 Activity Bar 
The Activity Bar is the most visible difference from the default user interface. Use it to open tools, help features, and settings.
By default, the position of the Activity Bar adapts to the location of the DevTools window. If DevTools is undocked or docked to the bottom of the browser, the Activity Bar will be horizontal. If DevTools is docked to the side of the browser, the Activity Bar will be vertical, and tool names will not be visible. This enables quicker tool access when screen width is limited.
The Activity Bar top-aligned in Focus Mode, with DevTools docked:

The Activity Bar top-aligned in Focus Mode, with DevTools popped out in a separate window:

 Warning and error indicators 
In the default DevTools user interface, a counter appears in the main toolbar showing the number of messages such as Issues recommendations and Console warnings. The counter could grow large when many messages ae generated, taking up valuable space in DevTools.

In Focus Mode, this counter has been removed. Instead, small indicators overlay Issues and Console to display whether messages have been reported by the respective tools:

 Quick View 
The Quick View list contains all tools that can be displayed alongside the one already selected from the Activity Bar.
Quick View replaces the drawer toolbar from the default user interface:

 DevTools customization and settings 
Several customization features and the DevTools settings are now grouped together under a single menu available from the Customize and control DevTools (...) button in the Activity Bar. These features and settings appear in multiple locations in the default user interface.

 Help links 
The Help menu contains links to the DevTools documentation and release notes and a button to send feedback to the team:

These links and buttons were previously nested under Customize and control DevTools > Help in the default user interface.
 Open tools from the Activity Bar
By default, the Activity Bar contains the following modes and tools:
Inspect mode () toggle button.
Device Emulation mode () button.
Welcome tool ().
Elements tool ().
Console tool ().
Sources tool ().
Network tool ().
Issues tool ().
Performance tool ().
Memory tool ().
Application tool ().
 Pin and rearrange tools in the Activity Bar
You can choose which tools appear in the Activity Bar by pinning or unpinning tools. This allows you to customize DevTools to your preferred workflow.

Click More tools (+) to list all the available tools. Selecting a tool will pin it to the Activity Bar. It will be shown by default every time DevTools is opened.
If there isn't enough space in the Activity Bar to display all pinned tools, some tools may overflow into the More tools menu:

To unpin a tool from the Activity Bar, right-click the tool and select Remove from activity bar:

Currently, the following tools cannot be unpinned from the Activity Bar:
Elements tool
Console tool
Sources tool
 Open tools from Quick View
Use the Quick View list to open a second tool next to the one already selected from the Activity Bar.
1. Select a tool from the Activity Bar.
2. Click the Quick View list and select a different tool from the list.
The following screenshot shows the Network tool and the Console tool side-by-side:

You can hide or expand Quick View by clicking Collapse Quick View / Expand Quick View or pressing the Escape key. ().
 Customize Focus Mode
The Activity Bar can be oriented vertically or horizontally to maximize usable screen space in a variety of DevTools window locations.
To change the location of the Activity Bar click Customize and control DevTools, then Activity bar location, and then select one of the locations:

depending on where DevTools is docked.
 If DevTools is docked to the left or right side of the browser window, the Activity Bar will be vertical.
 If DevTools is docked to the bottom side of the browser window, or undocked in its own window, the Activity Bar will be horizontal.
Top: The Activity Bar will always be horizontal.
Left side: The Activity Bar will always be vertical.
When the Activity Bar is horizontal, tool names appear next to tool icons if there is enough space to display them.
When DevTools is undocked in its own window, the horizontal Activity Bar shows some tabs with tool icons and names, and some tabs with icons only:

 See also
 DevTools: Focus Mode UI is the initial explainer for this experimental feature, in the Microsoft Edge DevTools repo.

 
 About the list of tools
 	6/21/2022 • 7 minutes to read • Edit OnlineDevTools provides 35 tools:
2 toolbar icons, for the Inspect tool () and Device Emulation ().
3 permanent toolbar tabs, for the Elements, Console, and Sources tools. 30 optional toolbar tabs, for the optional tools.
The default tools, including toolbar icons, toolbar tabs, and tools on the More tabs () menu:

The optional tools that aren't open by default, on the More Tools () menu:

The following features are additional ways to access the tools:
The Drawer is an additional toolbar and area to hold tool tabs.
The Command Menu is a way to directly use features of tools. The Settings pages can turn on additional features of tools.
 Overview of all tools
Microsoft Edge DevTools includes the following tools.
TOOLPURPOSEARTICLE3D View toolExplore the web page translated into a 3D perspective. Debug your webpage by navigating through the DOM or zindex stacking context.Navigate webpage layers, z-index, and DOM using the 3D View toolAnimations toolInspect and modify CSS animation effects by using the Animation
Inspector in the Animations tool.Inspect and modify CSS animation effectsApplication toolUse the Application tool to manage storage for web app pages, including manifest, service workers, local storage, cookies, cache storage, and background services.The Application tool, to manage storage
TOOLPURPOSEARTICLEChanges toolTracks any changes you've made to CSS or JavaScript in DevTools. Shows you what changes to make to your actual source files after you use DevTools to modify your webpage files sent from the server.Track changes to files using the Changes toolConsole toolAn intelligent, rich command line within DevTools. A great companion tool to use with others tools. Provides a powerful way to script functionality, inspect the current webpage, and manipulate the current webpage using JavaScript.Console overviewCoverage toolHelp you find unused JavaScript and CSS code, to speed up your page load and save your mobile users cellular data.Find unused JavaScript and CSS code with the Coverage toolCSS Overview toolHelp you better understand your page's CSS and identify potential improvements.CSS Overview toolDetached Elements toolTo increase the performance of your page, this tool finds detached elements that the browser cannot garbagecollect, and identifies the JavaScript object that is still referencing the detached element. By changing your JavaScript to release the element, you reduce the number of detached elements on your page, increasing page performance and responsiveness.Debug DOM memory leaks with the Detached Elements toolDeveloper ResourcesShows resource URLs for the webpage.Developer Resources toolDevice EmulationUse the Device Emulation tool, sometimes called Device Mode, to approximate how your page looks and responds on a mobile device.Emulate mobile devices (Device Emulation)Elements toolInspect, edit, and debug your HTML and CSS. You can edit in the tool while displaying the changes live in the browser. Debug your HTML using the DOM tree, and inspect and work on the CSS for your webpage.Inspect, edit, and debug HTML and CSS with the Elements toolInspect toolUse the Inspect tool to see information about an item within a rendered webpage. When the Inspect tool is active, you hover over items in the webpage, and DevTools adds an information overlay information and grid highlighting on the webpage.Analyze pages using the Inspect tool
TOOLPURPOSEARTICLEIssues toolThe Issues tool automatically analyzes the current webpage, reports issues grouped by type, and provides documentation to help explain and resolve the issues.Find and fix problems using the Issues toolJavaScript Profiler toolThis tool has been replaced by the
Performance tool and the Memory tool.JavaScript Profiler toolLighthouse toolUse the Lighthouse tool to identify and fix common problems that affect your site's performance, accessibility, and user experience.Lighthouse toolMedia toolUse this tool to view information and debug the media players per browser tab.View and debug media players informationMemory toolFind memory issues that affect page performance, including memory leaks, memory bloat, and frequent garbage collections.Fix memory problemsMemory Inspector toolInspect JavaScript ArrayBuffer with the Memory Inspector.Inspect a JavaScript ArrayBuffer with the Memory Inspector toolNetwork toolUse the Network tool to make sure that resources are being downloaded or uploaded as expected. Inspect the properties of an individual resource, such as the HTTP headers, content, or size.Inspect network activityNetwork conditions toolUse the Network conditions tool to disable the browser cache, set network throttling, set the user agent string, and set Content-Encodings such as deflate, gzip, and br.Network conditions toolNetwork Console toolUse the Network Console tool to make changes to network requests (network calls) to see why they fail. Change and replay any of the network requests, and make detailed network API calls.Network Console toolNetwork request blocking toolUse the Network request blocking tool to test blocking network requests to a specified URL pattern and see how a webpage behaves.Network request blocking toolPerformance toolAnalyze runtime performance, which is how your page performs when it's running, as opposed to loading.Get started analyzing runtime performanceTOOLPURPOSEARTICLEPerformance monitor toolProvides a real-time view of the runtime performance of a webpage, to determine where performance problems come from, making a website run slowly. Finds whether problems are from high memory or CPU usage, too-frequent layout and style calculations, or too many DOM nodes and event listeners.Measure runtime performance of a page using the Performance monitor toolQuick source toolUse the Quick source tool to display or edit source files when using a tool other than the Sources tool.Display or edit source files using the Quick source toolRendering toolUse the Rendering tool to see what your webpage looks like with different display options or vision deficiencies.Rendering tool, to see what a webpage looks like with different display options or vision deficienciesSearch toolUse the Search tool to find specific source files for a webpage, including
HTML, CSS, JavaScript, and image files.Find source files for a page using the Search toolSecurity toolInspects the security of a page.Understand security issues using the Security toolSensors toolSimulates different device orientations.Simulate device orientation with the Sensors toolSource Maps Monitor toolUse the Source Maps Monitor tool to monitor your source maps.Source Maps Monitor toolSources toolUse the Sources tool to view, modify, and debug front-end JavaScript code, and inspect and edit the HTML and CSS files that make up the current webpage.Sources tool overviewWebAudio toolUse the WebAudio tool to monitor WebAudio traffic. The WebAudio tool uses the WebAudio API.WebAudio toolWebAuthn toolUse the WebAuthn tool to create and interact with software-based virtual authenticators.Emulate authenticators and debug
WebAuthnWelcome toolThe Welcome tool opens when you
first open DevTools. It displays links to developer docs, latest features, Release Notes, and an option to contact the Microsoft Edge DevTools team.Welcome tool The More Tools menus
The More Tools (+) menu on the main toolbar and on the Drawer toolbar is dynamic: it omits any tab tools that are open on that toolbar.
The More tools menu in the Customize and control DevTools () menu is static: it always lists all of the optional tools. The selected tool opens in the main toolbar if it's a Panel tool, or on the Drawer if it's a Drawer tool. You can right-click the tool's tab to move it to the other toolbar.
 Panel tools vs. Drawer tools
In the Command Menu:
EscPanel tools are tools which open in the main toolbar by default.
Drawer tools are tools which open in the Drawer toolbar by default, at the bottom of DevTools. Press to show or hide the Drawer.
The Command Menu first lists the Panel tools, and then the Drawer tools:

To move a tool to the other toolbar, right-click the tool's tab and then select Move to bottom or Move to top.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+PTo open the Command Menu, press  (macOS). Or, click the Customize and control DevTools () button and then select Run command.
 Closing tool tabs
To close a tool tab that's on a toolbar:
 Click the x on the tab.
The Elements, Console, and Sources tool tabs cannot be closed.
To close all of the optional tabs at once:
 Right-click an optional tab on the toolbar (a tab that has an x button), and then select Close all.
Only the Elements, Console, and Sources remain on the main toolbar. (The Drawer toolbar is unaffected.)
If you closed all tabs on the Drawer, only the Console tab remains on the Drawer toolbar. (The main toolbar is unaffected.)
 
Restoring the default tool tabs
To restore all of the default tabs on the main toolbar: 1. In DevTools, select Settings () > Preferences.
2. Click the Restore defaults and refresh button.
The main toolbar again has all of the default tabs. The Drawer then has only the Console tab.
 See also
Overview of DevTools - Similar to the present article, but broader coverage, with a top-level introduction of DevTools.
Simplify DevTools using Focus Mode, in Experimental features. In Focus Mode, the Activity Bar is a compact replacement for the main toolbar, and the Quick View list is a replacement for the tabs on the Drawer toolbar.

 
 Analyze pages using the Inspect tool
 	6/21/2022 • 3 minutes to read • Edit OnlineUse the Inspect tool to see information about an item within a rendered webpage.
 When the Inspect tool is active, you hover over items in the webpage, and DevTools adds an information overlay information and grid highlighting on the webpage.
 When you click an item in the webpage, the DOM tree in the Elements tool is automatically updated to show the DOM element that corresponds to the clicked item in the rendered webpage, and its CSS styling in the Styles tab.
 Activating the Inspect tool
To try out the Inspect tool:
1. Open the Inspect Demo page in a new window or tab.
2. Right-click anywhere in the demo webpage and then select Inspect, to open DevTools.
Ctrl+Shift+C (Windows, Linux) or Command+Shift+C3. In the upper left corner of DevTools, click the Inspect tool () button. Or, when DevTools has focus, press  (macOS).

The button icon turns blue (), indicating that the Inspect tool is active.
4. In the rendered webpage, hover over items and watch the information overlay and grid highlighting.
5. Click an item in the rendered webpage.
The DOM tree in the Elements tool is automatically updated to show the DOM element that corresponds to the clicked item in the rendered webpage, and its CSS styling in the Styles tab. Clicking in the webpage also turns off Inspect mode in the webpage.
 Getting element information from the Inspect overlay
When the Inspect tool is active, hovering over any element on the rendered webpage displays the Inspect overlay. The Inspect overlay displays general and accessibility information about that element.

When you hover over a page element on the rendered page, the DOM tree automatically expands to highlight the element that you are hovering over.
The Inspect overlay shows the following information about the element:
The name of the element.
The element's dimensions, in pixels.
The element's color, as a hexadecimal value and a color swatch.
The element's font settings.
The element's margin and padding, in pixels.
Which information is shown depends on the type of element and the styles applied to it. If the element is positioned using CSS grid or CSS flexbox, a different icon appears next to the element's name in the Inspect overlay:

The Accessibility section of the Inspect overlay displays information about:
Text-color contrast.
The name and the role of the element that's reported to assistive technology. Whether the element is keyboard focusable.
Bad ContrastFor example, in the Inspect Demo page, for the  button, the Inspect overlay has a warning icon next to the contrast value of 1.77. The Inspect overlay also shows that the button isn't focusable via keyboard.
<div>button, instead of being implemented as a <button>The button can't be navigated to via keyboard, because the button is implemented as a  element with a class of  element.

 Inspecting non-accessible elements
pointer-events: noneElements that have the CSS property of  aren't available to the Inspect tool. In the Inspect
Overlay Button and you will see that the parent element (div.wrapperOverlay ButtonDemo page, hover over the ) is shown instead of the .

pointer-events: none, press ShiftTo inspect elements that have the CSS property of  while hovering over the
element. There's also a color overlay on page layout regions, indicating that you are in an advanced selection mode.

 Selecting the element and terminating Inspect mode

 Persisting the Inspect tool's tooltip and grid color overlay
When using the Inspect tool and moving around the rendered webpage, you can keep the current Inspect
Ctrl+Alt (Windows, Linux) or Ctrl+Optionoverlay displayed. Press and hold  (macOS) while you move
around in the rendered webpage. The existing tooltip and grid color overlay for the Inspect tool remains displayed while you hover over different parts of the rendered webpage.
 
Temporarily hiding the Inspect element tooltip
CtrlTo hide the Inspect tool's overlay while you move the mouse pointer over the rendered webpage, press and hold .
 See also
Use the Inspect tool to detect accessibility issues by hovering over the webpage
Overview of accessibility testing using DevTools - long article that's a superset of the above linked article.

 
 Emulate mobile devices (Device Emulation)
 	6/21/2022 • 7 minutes to read • Edit OnlineUse the Device Emulation tool, sometimes called Device Mode, to approximate how your page looks and responds on a mobile device.
DevTools provides the following mobile device emulation features:
Simulate a mobile viewport
Throttle the network
Throttle the CPU
Override geolocation
Set orientation
Set the user agent string
Set user-agent client hints
 Limitations
Device Emulation is a first-order approximation of the look and feel of your page on a mobile device. Device Emulation doesn't actually run your code on a mobile device. Instead, you simulate the mobile user experience from your laptop or desktop.
Some aspects of mobile devices are never emulated in DevTools. For example, the architecture of mobile CPUs is different than the architecture of laptop or desktop CPUs. When in doubt, your best bet is to actually run your page on a mobile device.
Use Remote Debugging to interact with the code of a page from your machine while your page actually runs on a mobile device. You can view, change, debug, profile, or all four while you interact with the code. Your machine can be a notebook or desktop computer.
 Simulate a mobile viewport
...Select Toggle device emulation () or select Customize and control DevTools ( ) > Device Emulation to open the UI that enables you to simulate a mobile viewport.

By default the Device Toolbar opens in Responsive Viewport Mode.
 Responsive Viewport Mode 
To quickly test the look and feel of your page across multiple screen sizes, drag the handles to resize the
626 and the height is set to 516viewport to your required dimensions. You can also enter specific values in the width and height boxes. In the following figure, the width is set to .

 Show media queries 
If you have defined media queries on your page, jump to the viewport dimensions where those media queries take effect by showing media query breakpoints above your viewport. Select More options > Show media queries.

Select a breakpoint to change the width of the viewport so that the media query gets triggered.

 Set the device type 
Use the Device Type list to simulate a mobile device or desktop device.

touch or clickThe following table describes the differences between the available device type options. The Rendering method column refers to whether Microsoft Edge renders the page as a mobile or desktop viewport. The Cursor icon column refers to what type of cursor is displayed when you hover on the page. The Events triggered column refers to whether the page triggers  events when you interact with the page.
OPTIONRENDERING METHODCURSOR ICONEVENTS TRIGGEREDMobileMobileCircle
touchMobile (no touch)MobileNormal
clickDesktopDesktopNormal
clickDesktop (touch)DesktopCircle
touchNOTE
If the Device Type list isn't displayed, select More options > Add device type.
 Mobile Device Viewport Mode 
To simulate the dimensions of a specific mobile device, select the device from the Device list.

 Rotate the viewport to landscape orientation 
Test your webpage in landscape orientation.
1. To rotate the viewport to landscape orientation, select Rotate ():

The Rotate button disappears if your Device Toolbar is narrow.
2. If needed, to access the Rotate button, increase the width of the Device Toolbar.

See also Set orientation, below.
 Show device frame 
To simulate the dimensions of a specific mobile device, open More options and then select Show device frame to show the physical device frame around the viewport.

If a device frame isn't shown for a particular device, it means that DevTools doesn't have art for that device.
The device frame for the iPhone 6:

 Add a custom mobile device 
If the mobile device option that you need isn't included on the default list, you can add a custom device. To add a custom device:
1. Select the Device list > Edit.

2. Select Add custom device.
3. On Emulated Devices, enter a device name, screen width, and screen height for the custom device. The device pixel ratio, user agent string, and device type fields are optional. The device type field defaults to Mobile.

 Show rulers 
If you need to measure screen dimensions, you can use rulers to measure the screen size in pixels. Select More options > Show rulers to display rulers above and to the left of your viewport.

Rulers appear above and to the left of the viewport:

 Zoom the viewport 
To test the look and feel of your page at multiple zoom levels, use the Zoom list to zoom in or out.

 Throttle the network and CPU
Mobile devices often have network and CPU constraints. Test how quickly your page loads and how it responds at different internet and CPU speeds.
1. Select Throttle list and change the preset to Mid-tier mobile or Low-end mobile.
fast 3Gslow 3GMid-tier mobile simulates  and throttles your CPU. It is four times slower than normal.
Low-end mobile simulates  and throttles your CPU. It is six times slower than normal.
All of the throttling is based upon the normal capability of your laptop or desktop.

If the Throttle list is hidden, your Device Toolbar is too narrow.
2. If needed, to access the Throttle list, increase the width of the Device Toolbar.

 Throttle the CPU only 
To throttle the CPU only and not the network:
1. Select the Performance panel, and select Capture Settings ().
2. Select CPU > 4x slowdown or 6x slowdown.

 Throttle the network only 
To throttle the network only and not the CPU:
1. Select the Network tool, then select Online > Fast 3G or Slow 3G.

Ctrl+Shift+P (Windows, Linux) or Command+Shift+POr, press  (macOS) to open the Command
3gMenu, start typing , and then select Enable fast 3G throttling or Enable slow 3G throttling.

You can also set network throttling from the Performance panel:
1. Select Capture Settings () and select the Network list and change the preset to Fast 3G or Slow 3G.

 Override geolocation
If your page depends on geolocation information from a mobile device to render properly, provide different geolocations using the geolocation-overriding UI.
...1. Select Customize and control DevTools () > More tools > Sensors.

Ctrl+Shift+P (Windows, Linux) or Command+Shift+POr, open the Command Menu by selecting 
Sensors(macOS). Type  and then select Show Sensors.

On the Sensors panel, to select one of the preset locations, use the Location dropdown menu. To enter a custom location, select Other and enter the coordinates of your custom location. To test how your page behaves when location information is unavailable, select Location unavailable.

 Set orientation
If your page depends on orientation information from a mobile device to render properly, open the orientation UI.
...1. Select Customize and control DevTools () > More tools > Sensors.

Ctrl+Shift+P (Windows, Linux) or Command+Shift+POr, open the Command Menu by selecting 
Sensors(macOS). Type , and then select Show Sensors.

On the Sensors panel, you can select a preset orientation from the Orientation dropdown menu.
2. To enter your own orientation, select Custom orientation, and enter your own alpha, beta, and gamma values.

 Set the user agent string
If your page depends on the user agent string from a mobile device to render properly, use the Network conditions panel to provide different user agent strings.
...1. Select Customize and control DevTools () > More tools > Network conditions.

Ctrl+Shift+P (Windows, Linux) or Command+Shift+POr, open the Command Menu by selecting 
Network conditions(macOS).Type , and select Show Network conditions.

2. Next to User agent, clear the Use browser default checkbox.
3. Select Custom to select from a list of predefined user agent strings.
4. To enter your own user agent string, enter the string in Enter a custom user agent.

 See also 
 Override the user agent string
 Set user-agent client hints
If your site employs user-agent client hints, use the Emulated Devices panel to add devices and set user-agent client hints.
1. Right-click in a webpage and then select Inspect.
2. Select Settings > Devices.
3. In the Emulated Devices panel, select Add custom device and expand user-agent client hints.

Test1014. Type a unique name in the Device Name text box such as .
5. Accept the default values or change Width, Height, and Device pixel ratio as needed.
6. Set user-agent client hints as follows:
Brand and Version, such as Edge and 92. Select + Add Brand to add multiple brand and version pairs.
Full Browser Version such as 92.0.1111.0.
Platform and Version such as Windows and 10.0.
Architecture such as x86.
Device model such as Galaxy Nexus.
You can set or change any of the user-agent client hints. There are no required values.
7. Click Add. The new device is displayed in the selected state at the top of the Emulated Devices list.
You can also set user-agent client hints in the Network tool; see Network features reference.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Emulate dual-screen and foldable devices
 	6/21/2022 • 2 minutes to read • Edit OnlineYou can emulate the following dual-screen and foldable devices in Microsoft Edge DevTools.
Surface Duo
Samsung Galaxy Fold

 Test on foldable and dual-screen devices
When you emulate the Surface Duo in a dual-screen posture in Microsoft Edge, the seam (the space between the two screens) is drawn over your website or app.
The emulated display matches the way your website (or app) renders in the Microsoft Edge Android app while running on Surface Duo. You may have to update your website (or app) to display better along the seam. For more information about adapting your website (or app) to the seam, see How to work with the seam.
The Device Toolbar has additional features to help you test your website or app in multiple postures and orientations. Click Rotate () to rotate the viewport to landscape orientation. Combine the feature with Span
() to toggle between single-screen or folded and dual-screen or unfolded postures. Together, the features allow you to test your website or app in all four possible postures and orientations.

The Experimental Web Platform features () icon displays the state of the Experimental Web
edge://flagsPlatform features flag. If the flag is turned on, the icon is highlighted. If the flag is turned off, the icon isn't highlighted. To turn on (or off) the flag, either click the icon or go to  and toggle the flag.
 Known issues 
 Pointer shaking or stuttering 
When you use a Microsoft Remote Desktop client to connect to a remote PC and emulate the Surface Duo or Samsung Galaxy Fold, the pointer may shake or stutter. If you run into the issue, contact the Microsoft Edge DevTools team.
 Additional Resources
Here are additional resources that may help you enhance your website (or app) for dual-screen devices.
For more information about web development on dual-screen devices, see Dual-screen web experiences.
Install the Surface Duo emulator. The Surface Duo emulator is different from the emulator in Microsoft Edge, runs Android, and integrates with Android Studio. See Get the Surface Duo SDK.
 
 Emulate and test other browsers
 	6/21/2022 • 4 minutes to read • Edit OnlineYour job doesn't end with making sure your site runs great across Microsoft Edge and Android. Even though the Device Emulation tool can simulate a range of other devices such as smart phones, we encourage you to check out solutions for emulation provided by other browsers.
 Summary 
 When you don't have a particular device, or want to do a spot check on something, the best option is to emulate the device right inside your browser.
 Device emulators and simulators enable you to mimic your development site on a range of devices, from your workstation.
 Cloud-based emulators enable you to automate unit tests for your site across different platforms.
 Browser emulators
Browser emulators are great for testing the responsiveness of a site. But a browser emulator doesn't emulate differences in API, CSS support, and certain behaviors that manifest only on a mobile browser on an actual device. Test your site on browsers running on real devices, to be certain everything behaves as expected.
 Firefox Responsive Design View 
Firefox has a responsive design view that encourages you to stop thinking in terms of specific devices and instead explore how your design changes at common screen sizes, or on your own screen size by dragging the edges of the window.
 EdgeHTML emulation 
To emulate Windows Phones, use the Microsoft Edge (EdgeHTML) built-in emulation.
Use IE 11 Emulation to simulate how your page might look in older versions of Internet Explorer.
 Device emulators and simulators
Device simulators and emulators simulate not just the browser environment but the entire device. Each simulator is useful to test things that require OS integration, such as form input with virtual keyboards.
 Android emulator 
At the moment, there is no way to install Microsoft Edge on an Android emulator. However, you can use the Android Browser, the Chromium Content Shell, and Firefox for Android, which we review later in this article. Chromium Content Shell runs the same Chromium rendering engine as Microsoft Edge, but comes without browser-specific features.
The Android emulator comes with the Android SDK which you need to download as part of Android Studio. Then follow the instructions to set up a virtual device and start the emulator. After your emulator is booted, select the Browser icon, and test your site on the old Stock Browser for Android.
 Chromium content shell on Android 
To install the Chromium Content Shell for Android, keep your emulator running and run the following command:
git clone https://github.com/PaulKinlan/chromium-android-installer.git chmod u+x ./chromium-android-installer/*.sh
./chromium-android-installer/install-chromeandroid.sh
Now you can test your site with the Chromium Content Shell.
 Firefox on Android 
Similar to the Chromium Content Shell, you can get an APK to install Firefox onto the emulator.
Download the correct .apk file.
To install the file onto an open emulator or connected Android device, run the following command:
adb install <path_to_APK>/fennec-XX.X.XX.android-arm.apk
iOS simulator  
The iOS simulator for Mac OS X comes with Xcode, which you install from the App Store.
When you are done, learn how to work with the simulator through Apple Developer documentation.
NOTE
To avoid having to open Xcode every time you want to use the iOS Simulator, open it, right-click the iOS Simulator icon in your dock, and then select Keep in Dock. Now just click the icon whenever you need it.
	 Microsoft Edge  	(EdgeHTML)

Microsoft Edge (EdgeHTML) Virtual Machines (VMs) enable you to access different versions of EdgeHTML and
Internet Explorer on your computer through VirtualBox (or VMWare). Select a virtual machine on the download page.
 Cloud-based emulators and simulators
If you aren't able to use the emulators and you don't have access to real devices, then cloud-based emulators are the next-best thing. A big advantage of cloud-based emulators over real devices and local emulators is that you can automate unit tests for your site across different platforms.
The following list is a sample of cloud-based emulators and testing sites. Review the descriptions for features or capabilities to consider when selecting a testing site. Conduct your own search to find the best cloud-based emulator for your needs.
 BrowserStack helps you perform manual testing. You select an operating system, a browser version, a device type, and a URL to browse, and then BrowserStack spins up a hosted virtual machine that you can interact with. You can run multiple emulators in the same screen, to test the look and feel of your app across multiple devices at the same time.
 Mobileum doesn't use emulators, but real devices which you can control remotely. This is useful when you need to reproduce a problem on a specific device and an issue might not appear in some reports.
 HeadSpin helps you perform manual cross-browser testing on thousands of real devices, browsers, and operating systems. You can record videos of complex bugs and share them through integration such as Slack, JIRA, and more. Fast forward your go-to-market launch by testing in parallel.
 LambdaTest helps you perform manual cross-browser testing on a combination of various browsers and operating systems. You can record videos of complex bugs and share them through integration such as Microsoft Teams, Slack, and more. You can speed-up your testing by running tests in parallel.
 SauceLabs enables you to run unit tests inside of an emulator, which can be useful for scripting a flow through your site and watching the video recording of this afterwards on various devices. You can also do manual testing with your site.
 TestingBot helps you do both manual testing and automated testing on various browser and operating system combinations. Test both your websites and mobile apps on TestingBot's emulators and physical devices.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Meggin Kearney (Technical Writer) and Paul Bakaus (Open Web Developer Advocate at Google | Tools, Performance, Animation, UX).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 
Inspect, edit, and debug HTML and CSS with the Elements tool
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the Elements tool to inspect, edit, and debug your HTML and CSS. You can edit in the tool while displaying the changes live in the browser.
Debug your HTML using the DOM tree, and inspect and work on the CSS for your webpage.

 See also
CSS features reference
Get started with CSS
Get started viewing and changing CSS
Inspect CSS Grid
Edit CSS font styles and settings in the Styles pane
Style editing for CSS-in-JS frameworks
Get started with HTML and the DOM
Get started viewing and changing the DOM
 
 CSS features reference
 	6/21/2022 • 11 minutes to read • Edit OnlineDiscover new workflows in the following comprehensive reference of Microsoft Edge DevTools features related to viewing and changing CSS.
To learn the basics, see Get started viewing and changing CSS.
 Select an element
The Elements tool in DevTools lets you view or change the CSS of one element at a time. The selected element is highlighted in the DOM Tree. The styles of the element are shown in the Styles pane. For a tutorial, see View the CSS for an element.
h1In the following figure, the  element that is highlighted in the DOM Tree is the selected element. On the right, the styles of the element are shown in the Styles pane. On the left, the element is highlighted in the viewport, but only because the mouse is currently hovering over it in the DOM Tree:

There are many ways to select an element:
Ctrl+Shift+C (Windows, Linux) or CommandIn a rendered webpage, right-click a page element, and then click Inspect.
	In DevTools, click Select an element () or press 	+
Shift+C (macOS), and then click the element in the viewport.
document.querySelector('p')In DevTools, click the element in the DOM Tree.
In DevTools, run a query such as  in the Console, right-click the result, and then select Reveal in Elements panel.
 View the external stylesheet where a rule is defined
In the Styles pane, click the link next to a CSS rule to open the external stylesheet that defines the rule. The stylesheet opens in the Editor pane of the Sources tool.
If the stylesheet is minified, click the Format () button, at the bottom of the Editor pane. For more information, see Reformat a minified JavaScript file with pretty-print.
https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/styles/b66bc881.site-ltr.css:2In the following figure, after you click  you are
taken to line 2 of 
https://docs.microsoft.com/_themes/docs.theme/master/en-us/_themes/styles/b66bc881.site-ltr.css.content h1:first-of-type, where the  CSS rule is defined.

 View only the CSS that is actually applied to an element
The Styles panel shows you all of the rules that apply to an element, including declarations that have been overridden. When you aren't interested in overridden declarations, use the Computed panel to view only the CSS that is actually being applied to an element.
1. Select an element.
2. Go to the Computed panel in the Elements tool.
On a wide DevTools window, the Computed panel doesn't exist. The contents of the Computed panel are shown on the Styles panel.
Inherited properties are opaque.
3. To display all inherited values, select the Show All checkbox.
h1In the following figure, the Computed panel shows the CSS properties being applied to the currently selected  element:

 View CSS properties in alphabetical order
Use the Computed panel. See View only the CSS that is actually applied to an element.
 View inherited CSS properties
Check the Show All checkbox in the Computed panel. See View only the CSS that is actually applied to an element.
 View an element's box model
To view the box model of an element, go to the Styles panel. If your DevTools window is narrow, the Box Model diagram is at the bottom of the panel.
To change a value, double-click it.
h1In the following figure, the Box Model diagram in the Styles panel shows the box model for the currently selected  element.

 Search and filter the CSS of an element
Use the Filter text box on the Styles and Computed panels to search for specific CSS properties or values.
To also search inherited properties in the Computed panel, check the Show All checkbox.
colorIn the following figure, the Styles panel is filtered to only show rules that include the search query .

In the following figure, the Computed panel is filtered to only show declarations that include the search query 
100%.

 Toggle a pseudo-class
:active, :focus, :hover, or :visitedTo toggle a pseudo-class, such as :
1. Select an element.
2. On the Elements tool, go to the Styles tab.
3. Click :hov.
4. Select the pseudo-class that you want to enable.
:hoverbackground-color: cornflowerblueThe following figure shows toggling the  pseudo-class. In the viewport, the  declaration is applied to the element, even though the element isn't
actually being hovered over.

For an interactive tutorial, see Add a pseudostate to a class.
 View a page in print mode
To view a page in print mode:
1. Open the Command Menu.
rendering2. Start typing , and then select Show Rendering.
3. Click the Emulate CSS Media dropdown list, and then select print.
 View used and unused CSS with the Coverage tool
The Coverage tool shows you what CSS a page actually uses.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P1. Open the Command Menu by pressing (macOS), while DevTools has focus.
coverage2. Start typing , and then select Show Coverage. The Coverage tool appears.
Opening the Coverage tab from the Command Menu:

The Coverage tab:
3. Click Start instrumenting coverage and refresh the page (
Coverage tab provides an overview of how much CSS (and JavaScript) is used from each file that the browser loads. Green represents used CSS. Red represents unused CSS.
An overview of how much CSS (and JavaScript) is used and unused:

4. To display a line-by-line breakdown of what CSS is used, click a CSS file.
b66bc881.site-ltr.cssIn the following figure, lines 145 to 147 and 149 to 151 of  are unused, whereas lines 163 to 166 are used:

 Force print preview mode
See Force DevTools into Print Preview mode.
 Two ways to add a CSS declaration to an element
The order of declarations affects how an element is styled. You can add declarations either by adding an inline declaration, or by adding a declaration to a style rule. These two approaches are described in the following sections.
 Adding an inline CSS declaration to an element
styleAdding a inline declaration is equivalent to adding a  attribute to the HTML of an element. For most scenarios, you probably want to use inline declarations.
Inline declarations have higher specificity than external declarations, so using inline declarations ensures that the changes take effect in your specific, expected element. For more information about specificity, see Selector Types.
To add an inline declaration:
1. Select an element.
2. In the Styles pane, click between the brackets of the element.style section. The cursor focuses, allowing you to enter text.
Enter3. Enter a property name and press .
Enter. In the DOM Tree, a style4. Enter a valid value for that property and press  attribute has been added to the element.
margin-top and background-colorstyleIn the following figure, the  properties have been applied to the selected element. In the DOM Tree, the declarations are reflected in the element's  attribute.

 Adding a CSS declaration to an existing style rule
If you're debugging an element's styles and you need to specifically test what happens when a declaration is defined in different places, add a declaration to an existing style rule.
To add a declaration to an existing style rule:
1. Select an element.
2. In the Styles pane, click between the brackets of the style rule to which you want to add the declaration.
The cursor focuses, allowing you to enter text.
Enter3. Enter a property name and press .
Enter4. Enter a valid value for that property and press .

 Change a declaration name or value
Double-click a declaration's name or value to change it. See Change declaration values with keyboard shortcuts for shortcuts for quickly incrementing or decrementing a value by 0.1, 1, 10, or 100 units.

 Change declaration values with keyboard shortcuts
While editing the value of a declaration, you can use the following keyboard shortcuts to increment the value by a specific amount:
KEYBOARD SHORTCUTINCREMENTS BYAlt+Up (Windows, Linux) or Option+Up (macOS)0.1KEYBOARD SHORTCUTINCREMENTS BY
Up1 (or 0.1, if the current value is between -1 and 1)
Shift+Up10Page Up (Windows, Linux) or Shift+Command Shift + + Up (macOS)100Down key instead of the UpTo decrement, press the  key.  Add a class to an element
To add a class to an element:
1. Select the element in the DOM Tree.
2. Click .cls.
3. Enter the name of the class in the Add New Class text box.
Enter4. Press .

 Toggle a class
To enable or disable a class on an element:
1. Select the element in the DOM Tree.
2. Open the Element Classes pane. See Add a class to an element. Below the Add New Class text boxes are all of the classes that are being applied to this element.
3. Toggle the checkbox next to the class that you want to enable or disable.
 Add a style rule
To add a new style rule:
1. Select an element.
2. Click New Style Rule (). DevTools inserts a new rule beneath the element.style rule.
h1.devsite-page-titleIn the following figure, DevTools adds the  style rule after you click New Style Rule.

 Select a stylesheet to add a rule to 
When adding a new style rule, to select a stylesheet to add a rule to:

 Add a style rule to a specific location 
To add a style rule to a specific location in the Styles panel:
1. Hover on the style rule that is directly above where you want to add your new style rule.
2. Reveal the More Actions toolbar.
3. Select Insert Style Rule Below ().

 Reveal the More Actions toolbar
Use the More Actions toolbar to:
background-color, color, box-shadow, or text-shadowInsert a style rule directly below the one you are focused on.
Add a  declaration to the style rule you are focused on.
To reveal the More Actions toolbar:
...1. In the Styles panel, hover on a style rule. More Actions () is revealed in the bottom-right of the style rule section.
.header-holder.has-default-focusIn the following figure, hover on the  style rule and More Actions is revealed in the bottom-right of the style rule section.

...2. Hover on More Actions () to reveal the actions mentioned above.
The Insert Style Rule Below action is revealed after hovering over More Actions.

 Add a background-color declaration
background-colorTo add a  declaration to an element:
background-color1. Hover on the style rule that you want to add the  declaration to.
2. Reveal the More Actions toolbar.
3. Click Add Background Color ().

 Add a color declaration
colorTo add a  declaration to an element:
color1. Hover on the style rule that you want to add the  declaration to.
2. Reveal the More Actions toolbar.
3. Click Add Color ().

 Add a box-shadow declaration
box-shadowTo add a  declaration to an element:
box-shadow1. Hover on the style rule that you want to add the  declaration to.
2. Reveal the More Actions toolbar.
3. Click Add Box Shadow ().

 Add a text-shadow declaration
text-shadowTo add a  declaration to an element:
text-shadow1. Hover on the style rule that you want to add the  declaration to.
2. Reveal the More Actions toolbar.

 Toggle a declaration
To toggle a single declaration on or off:
1. Select an element.
2. In the Styles pane, hover on the rule that defines the declaration. A checkbox appears next to each declaration.
3. Select or clear the checkbox next to the declaration. When you clear a declaration, DevTools crosses it out, to indicate that it is no longer active.
margin-topIn the following figure, the  property for the currently selected element has been toggled off.

 Change colors with the Color Picker
color and background-colorThe Color Picker provides a GUI for changing  declarations.
To open the Color Picker:
1. Select an element.
color, background-colorcolor, background-color2. In the Styles panel, find the , or similar declaration that you want to change. To the left of the , or similar value, there is a small square, which is a preview of the color.
rgba(0, 0, 0, 0.7)In the following figure, the small square to the left of  is a preview of that color.

3. Click the preview to open the Color Picker.

The following figure and list describes of each of the UI elements of the Color Picker.

CALLOUTCOMPONENTDESCRIPTION1Shades2EyedropperSample a color off the page with the Eyedropper3Copy To ClipboardCopy the Display Value to your clipboard.4Display ValueThe RGBA, HSLA, or Hex representation of the color.CALLOUTCOMPONENTDESCRIPTION5Color PaletteClick a square to change the color.6Hue7Opacity8Display Value SwitcherToggle between the RGBA, HSLA, and Hex representations of the current color.9Color Palette SwitcherToggle between the Material Design palette, a custom palette, or a page colors palette. DevTools generates the page color palette based on the colors that it finds in your stylesheets. Sample a color off the page with the Eyedropper 
When you open the Color Picker, the Eyedropper () is on by default.
To change the selected color to some other color on the page:
1. Hover on the target color in the viewport.
2. Click to confirm.
rgba(0,0,0,0.7)In the following figure, the Color Picker shows a current color value of , which is close to black. The specific color changes to the version of black that is currently highlighted in the viewport after you clicked it.

See also:
 Test text-color contrast using the Color Picker
 Change angle value with the Angle Clock
The Angle Clock provides a GUI for changing the angle amounts in CSS property values.
To open the Angle Clock:
1. Select an element which includes an angle declaration.
transform or background2. In the Styles tab, find the  declaration that you want to change. Click the Angle
Preview box next to the angle value.
100degIn the following figure, the small clock to the left of  is a preview of the angle.
3. Click the preview to open the Angle Clock:

4. Change the angle value by clicking on the Angle Clock circle, or scroll your mouse to increase or decrease the angle value by 1.
There are more keyboard shortcuts to change the angle value. Find out more in the Styles pane keyboard shortcuts.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Get started with CSS
 	6/21/2022 • 11 minutes to read • Edit OnlineIn this tutorial, you learn how to use CSS to style a web page. You also learn how to use Microsoft Edge DevTools to experiment with CSS changes.
This article is part of a series of tutorials that teaches you the basics of web development and Microsoft Edge DevTools. You gain hands-on experience by actually building your own website. You don't have to complete the previous tutorials before doing this one.
This tutorial is designed for absolute beginners and focuses on both the fundamentals of web development and the basics of using DevTools to experiment with CSS. If you want a tutorial that only focuses on DevTools, see Get started viewing and changing CSS.
At the beginning of the tutorial, your site should look like the following figure:

After you complete the tutorial, your site should look like the following figure:

 Goals
Follow this tutorial to better understand the following concepts and tasks:
How to use CSS to style a web page.
How to use Microsoft Edge DevTools to experiment with CSS. The difference between CSS and CSS frameworks.
You're building a real website.
 Prerequisites
Before doing this tutorial:
Walk through the tutorial Get started with HTML and the DOM, or make sure that you have understanding of HTML and the DOM already.
Download the Microsoft Edge web browser. The following tutorial uses a set of web development tools, called the Microsoft Edge DevTools, that are built into Microsoft Edge.
 Set up your code
To create your site, first do the following steps to set up your code.
NOTE
If you have already completed the first tutorial in the series, skip to the next section. Continue using your code from the last tutorial, Get started with HTML and the DOM.
1. Open the source code. The tab of your browser that's currently selected is called the editing tab.

2. Select cooked-amphibian. A menu pops up.

3. Select Remix Project. Glitch creates a copy of the project that you can edit. Glitch generates a random name for the new project.
4. Select Show and then select In a New Window. Another tab opens with a live view of your site. The tab of your browser that's currently selected is called the live tab.

 Understand CSS
CSS is a computer language that controls the layout and styling of web pages. The following figure is a paragraph with a border.

The following is the HTML and CSS code used to create the paragraph in the previous figure:
<p style="border: 1px dashed red; padding: 5px;">
    This has been styled with CSS.
</p>
style="border: 1px dashed red; padding: 5px;"The HTML attribute  might look new to you. The rest should look familiar. If not, complete Get started with HTML and the DOM before attempting the following sections.
 Add inline styles
You can use inline styles to apply styles to a single element.
index.html1. Go back to the editing tab and open .

style="background-color: aliceblue;" in your <nav>2. Add the attribute  element.
In the code below, the fourth line of code is the only one you need to change. The other lines of code are shown here to help you put the new attribute in the right place.
<header>
    <p>Welcome to my site!</p>
</header>
<nav style="background-color: aliceblue;">
    <ul>
        <li><a href="/">Home</a></li>
        ...
    ... ...
<nav>3. To display the changes, navigate to the live tab. The background of the  section is now blue.

 Reuse styles on a single page with internal stylesheets
<p>In a previous code, an inline style applied a style to a single  tag:
<p style="border: 1px dashed red; padding: 5px;">
    This has been styled with CSS.
</p>
<p><p>What if you wanted all of the  elements on your webpage to be styled the same way? You'd have to copy and paste the code into every single  tag on your site, which would require a lot of time and effort. If you needed to make an edit, you'd have to change every tag again. Instead, in the next steps, you use an Internal stylesheet to write your CSS once, so that it applies to multiple elements.
1. In the live tab, click Contact to go to the contact page. Notice the font of the Home and Contact links.

contact.html2. In the editor tab, open .
contact.html3. Add the following code to .
<style> and ending with </style>The lines starting with  are what you need to add. The other code is shown here so you know where to put the new code.
     <head>          ...
         <meta name="viewport" content="width=device-width, initial-scale=1">
         <style>              li a {
               font-family: 'Courier New', Courier, Serif;
             }
         </style>
         ...
     </head>4. Go back to the live tab.
5. Click Contact to go back to the contact page. Notice that the font of the Home and Contact links has changed:

 Understand internal stylesheets 
Internal stylesheets apply styles using selectors. Selectors are patterns that may apply to one or more HTML elements. The previous code snippet added the following style:
<style>     li a {
      font-family: 'Courier New', Courier, serif;     }
</style>li a is a selector that translates to "any <li> element that contains an <a> element". The browser changes the font of the Home and Contact links because each of the tag groups match the pattern.
<li><a href="/">Home</a></li>
<li><a href="/contact.html">Contact</a></li>
font-family: 'Courier New', Courier, serif is a declaration. A declaration is made of following two parts:
PARTEXAMPLEDESCRIPTIONproperty
font-familyThe property describes which style of the element should be changed.value
'Courier New', Courier, serifThe value describes exactly how the style of the element should change.font-family: 'Courier New', Courier, serifli a to 'Courier New'. If that font isn't available, use CourierserifFor example,  gives the browser the following instruction: "Set the font of elements that match the pattern . If that isn't available either, use ."
 Add multiple selectors to a ruleset 
The following CSS code is called a ruleset.
li a {
  font-family: 'Courier New', Courier, monospace; }
The following steps describe how you can use commas to add multiple selectors to a ruleset.
contact.html1. In the editor tab, open .
li a, type , h12. After .
<style>     li a, h1 {
      font-family: 'Courier New', Courier, Serif;
    }
</style><h1>li aThe previous code snippet tells the browser to style  elements the same way that it styles elements that match the pattern .
3. Navigate to the live tab.
4. Click the Contact link to go back to the contact page. Now, Contact Me! has the same font as the navigation links:

 Experiment with DevTools
As you continue your journey to become an expert in web development, you may find that CSS is tricky. You might write some code that doesn't display what you intended. Microsoft Edge DevTools makes it easy to experiment by displaying your changes in the page in real time.
 Add a declaration to an existing ruleset in DevTools To add a declaration to an existing ruleset:
1. Right-click the Home link, and then select Inspect.

<a href="/">Home</a>DevTools opens up alongside your page. The code that represents the Home link,  is
highlighted blue in the DOM Tree. The code snippet and preview should be familiar from the tutorial Get started with HTML and the DOM.
font-family: 'Courier New', Courier, serifcontact.htmlIn the following figure, the  declaration that you previously added to  is displayed in the Styles tab below the DOM Tree:

If your DevTools window is wide, the Styles tab is to the right of the DOM Tree:

font-family: 'Courier New', Courier, Serif2. Select the empty line below  to add a new declaration:

Enter3. Type color and then press . The autocomplete UI suggests options as you type:

Enter4. Type magenta and then press . All of the text on the contact page is now magenta:

 Edit a declaration in DevTools 
To edit existing declarations in DevTools:
magenta1. Select the magenta square next to . A color picker pops up:

2. Use the color picker to change the font text to a color that you like:

 Add a new ruleset in DevTools 
To add new rulesets in DevTools:
a1. Select New Style Rule () which is next to .cls. An empty ruleset appears with 	 as the selector.

a with a:hover2. Replace .

:hovera:hover style only takes effect when you're hovering over an <a> is a pseudo-class. Use pseudo-classes for style elements that may enter special states. For example, the  element.
3. Click the empty area between the brackets to add a new declaration.
Enter4. Type background-color for the declaration name and press .

Enter5. Type green for the declaration value and press .

6. Hover your mouse over the Home link. The background of the link turns green.

 Reuse styles across pages with external stylesheets
contact.htmlIn a previous step, you added the following code as an internal stylesheet, in :
<style>     li a, h1 {
        font-family: 'Courier New', Courier, Serif;
    }
</style>index.htmlWhat if you wanted to style  the same way? What if you had a large number of pages to which you wanted to apply your styles? You would have to copy and paste the internal stylesheet into every single web page on your site. The following steps describe how to add an External stylesheet to allow you to write your CSS once and apply it to multiple pages.
1. First, refresh the live tab to remove the changes that you made in DevTools.

contact.html2. Go back to the editor tab and open .

<style> and </style>, including <style> and </style>3. Delete everything between .

index.html and remove style="background-color: aliceblue;" from the <nav>4. Open  tag. You have now removed all of the CSS that you previously added to your site.

5. Select New File.

cool-file.js with style.css6. Replace  and select Add File.

style.css7. Add the following code to your  file:
li a, h1 {
  font-family: 'Courier New', Courier, Serif;
} a:hover {
  background-color: green;
} nav {
  background-color: aliceblue; }
Make sure you've created an external stylesheet. Your HTML isn't aware that it exists.
index.html8. Open .
<link rel="stylesheet" href="style.css">9. Add  to your HTML.
<head>     ...
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="style.css"> </head>
contact.html10. Open the  file and add the link there.

11. Navigate to the live tab. The home page now has the same font from the last section and a blue navigation section.

12. Select the Contact link to navigate to the contact page. The contact page has the same formatting as the home page.

 Use a CSS framework
CSS frameworks are collections of styles built by other developers that make it easier to create attractive web sites. Instead of defining styles yourself, a framework provides you a collection of styles that you can use on your page elements.
Add the Bootstrap CSS framework to your page, as follows:
1. Copy the following code:
<link rel="stylesheet" 
href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css">
contact.html2. Open the editing tab and paste the code into .

index.html3. Open the  file and add the code there.

<nav><li> and <a>4. Go back to the live tab to view your changes. While the background color of the  element and the font of the  elements are the same, the font of the other elements has changed.

 Use a class 
In the last section, you added Bootstrap to your web pages, which changed the fonts of some of the elements on your site. CSS frameworks help you make major changes to your page with very little code. Go through the following steps to use one of Bootstrap's classes to change your header.
1. Copy the following code:
class="jumbotron jumbotron-fluid"
index.html, add the previous code to the <header>2. In  tag.

contact.html, add the previous code to the <header>3. In  tag.

4. View your changes in the live tab. There's a large grey box around your header.

 Understand classes 
<header> element after you set the class attribute to jumbotronClasses let you assign collections of styles to arbitrary elements. Use the following code to apply several styles to the :
.jumbotron {   padding: 2rem 1rem;   margin-bottom: 2rem;   background-color: #e9ecef;   border-radius: .3rem; }
One advantage of a class is that it lets you apply styles to whatever elements you want. For example, suppose
<p> elements to purple, but not all <p>you want to set the background color of some  elements. Use the following code to define the style in a class:
.my-class-name {
  background-color: purple;
}
<p>Next, apply the class to only the  elements that you want to style:
<p>The text is not purple.</p>
<p class="my-class-name">The text is purple.</p> <p>The text is not purple.</p>
<p class="my-class-name">The text is purple.</p>
 Align elements 
Use other Bootstrap classes that are useful for aligning elements, as follows:
index.html1. Go back to the editor tab and open .
class="container-fluid" to your <body>2. Add  tag.

<nav> and <main> elements in <div class="row">. Make sure to put </div> after </main>3. Wrap your to properly close the new tag.

class="col-3" to your <nav> tag and class="col-9" to your <main>4. Add  tag.

5. View your changes in the live tab.

 Next steps
Congratulations, you're done!
 The best way to get better at web development is to build more sites. Don't worry about breaking stuff. Just have fun and learn as much as possible along the way.
To learn more about styling web pages, see Introduction to CSS.
To learn more about how to experiment with CSS in DevTools, see Get started viewing and changing CSS.
NOTE
https://developers.google.com/web/tools/chrome-devtools/beginners/cssPortions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page was found at  and was authored by Katherine Jackson (Technical Writer Intern, Chrome DevTools). This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Get started viewing and changing CSS
 	6/21/2022 • 4 minutes to read • Edit OnlineFollow these interactive tutorial sections to learn the basics of viewing and changing the CSS for a page by using DevTools.
 View the CSS for an element
Control (Windows, Linux) or Command1. Open the CSS Examples demo page in a new window or tab. To do this, right-click the link, or press and hold  (macOS) and then click the link.
Inspect Me!2. Right-click the  text, and then select Inspect.
Inspect Me!In DevTools, on the Elements tool, in the DOM Tree panel, the  element is highlighted.

Inspect Me! element, find the value of the data-message3. In the  attribute and copy it.
data-message4. On the page, in the Value of : text box, enter the value.
Inspect Me!5. Right-click the  text, and then select Inspect.
Inspect Me!6. In DevTools, on the Elements tool, select the Styles panel. In the Styles panel, the  element is highlighted.
alohaInspect Me!Inspect Me!7. In the  element, find the  class rule. This rule is displayed, because it is being applied to the  element.
aloha class, find the value for the padding8. In the  style and copy it.

padding9. On the page, in the Value of : text box, enter the value.
 Add a CSS declaration to an element
Use the Styles panel when you want to change or add CSS declarations to an element. 1. First, we recommend doing the View the CSS for an element tutorial section, above.
2. Open the CSS Examples demo page in a new window or tab.
Add A Background Color To Me!3. Right-click the  text, and then select Inspect.
element.style4. Click  near the top of the Styles panel.
background-color and then press Enter5. Type .
honeydew and then press Enter6. Type . In the DOM Tree, an inline style declaration applied to the element is displayed.
background-color:honeydew declaration is applied to the element using the element.styleThe  section of the Styles panel:

 Add a CSS class to an element
To display how an element looks when a CSS class is applied to or removed from an element, see the Styles panel.
1. First, we recommend doing the View the CSS for an element tutorial section, above.
2. Open the CSS Examples demo page in a new window or tab.
Add A Class To Me!3. Right-click the  text, and then select Inspect.
4. Click .cls. DevTools reveals a text box where you can add CSS classes to the page element that you're inspecting.
color_me in the Add new class text box and then press EnterAdd A Class To Me!5. Type . A checkbox appears below the Add new class text box, where you can toggle the class on and off. If the  element has any other classes applied to it, you are also able to toggle each from here.
color_meThe  class is applied to the element using the .cls section of the Styles panel:

 Add a pseudostate to a class
:activeUse the Styles panel to permanently apply a CSS pseudostate to an element. DevTools supports , 
:focus, :hover, and :visited.
1. First, we recommend doing the View the CSS for an element tutorial section, above.
2. Open the CSS Examples demo page in a new window or tab.
Hover Over Me!3. Hover on the  text. The background color changes.
Hover Over Me!4. Right-click the  text, and then select Inspect.
5. In the Styles panel, click :hov.
6. Select the :hover checkbox. The background color changes like before, even though you aren't actually hovering over the element.
:hoverHere's the result of toggling the  pseudostate on an element:

 Change the dimensions of an element
Use the Box Model interactive diagram in the Styles panel to change the width, height, padding, margin, or border length of an element.
1. First, we recommend doing the View the CSS for an element tutorial section, above.
2. Open the CSS Examples demo page in a new window or tab.
Change My Margin!3. Right-click the  text, and then select Inspect.
4. In the Box Model diagram in the Styles panel, hover on padding. The element's padding is highlighted in the viewport.
Depending on the size of your DevTools window, you may need to scroll to the bottom of the Styles panel to display the Box Model.
-margin-left5. Double-click the left margin in the Box Model, which currently has a value of , meaning that the element doesn't have a .
100px and press Enter6. Type . The Box Model defaults to pixels, but it also accepts other values, such as 
25%, or 10vw.
Hovering over the element's padding:

Changing the element's left margin:

 Debugging Media Queries
Media Queries are a way to make your website react to changes in the configuration settings for each user. The most significant use case is to provide your product a different CSS layout depending on the dimensions of the viewport.
Using separate layouts allows for a one-column layout for mobile devices and multi-column layouts when there is more screen estate available.
To debug or test the Media Queries you defined in your CSS:
1. Open DevTools. To do this, you can right-click in a webpage and then select Inspect.
Ctrl+Shift+MCmd+Shift+M2. Click the Toggle device emulation () button. Or, when DevTools has focus, press  (  on macOS).

...3. With the device toolbar open, click the  menu on the top-right and then select Show media queries:

The colored bars above the webpage represent the different media queries.
4. Hover on the boundaries in the bars to display the values of the different media queries. Click each media query value to resize the web page to match.

Sourcesreveal in source code5. To debug media queries and open the CSS file in the  editor, right-click a bar segment and then select .

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Inspect CSS Grid
 	6/21/2022 • 4 minutes to read • Edit OnlineThis article walks you through identifying CSS grids on a website and debugging grid layout issues using customizable grid overlays.
The examples used in the figures in this article are taken from the following webpages:
Fruit box
Snack box
 Before you begin
CSS Grid is a powerful layout paradigm for the web. A great place to get started learning about CSS Grid and the many features is the CSS Grid Layout guide on MDN.
 Discover CSS grids
display: grid or display: inline-grid applied to it, a gridWhen an HTML element on your page has  badge is displayed next to it in the Elements tool:

Click the badge to toggle the display of a grid overlay on the page. The overlay appears over the element, laid out like a grid to display the position of the grid lines and tracks:

Open the Layout pane. When grids are included on a page, the Layout pane includes a Grid section containing a number of options for viewing the grids.

The Grid section in the Layout pane contains the following 2 sub-sections:
Overlay display settings
Grid overlays
 Overlay display settings
In the Layout tab, in the expandable Grid section, the Overlay display settings section contains the following UI.
 Dropdown list 
Select one of the following options from the dropdown list:
LINE OPTIONDETAILSHide line labelsHide the labels of the lines for each grid overlay.Show line numbersDisplay the numbers of the lines for each grid overlay (selected by default).Show line namesDisplay the names of the lines for each grid overlay when names are provided.The following sections explain the Overlay display settings dropdown list commands.
 Hide line labels 
In the dropdown list, select Hide line labels to hide the labels of the lines for each grid overlay.

 Show line numbers 
In the dropdown list, select Show line numbers to display the numbers of the lines for each grid overlay (selected by default).
By default, the positive and negative line numbers are displayed on the grid overlay.
For more information about negative numbers in the grid overlay, see Line-based placement with CSS Grid.

 Show line names 
leftIn the dropdown list, select Show line names to view the line names instead of numbers; this displays the names of the lines for each grid overlay when names are provided. In the example, 4 lines have names: , 
middle1, middle2, and right.
For more information about line names in the grid overlay, see Layout using named grid lines.

 Checkboxes 
Select any of the checkboxes in the Overlay display settings section:
OPTIONDETAILSShow track sizesDisplay (or hide) the sizes of the tracks.OPTIONDETAILSShow area namesDisplay (or hide) the names of the area, when names are provided.Extend grid linesDisplays (or hides) the extensions of the grid dimensions along each axis. By default, grid lines are only shown inside  or 
the element with display: griddisplay: inline-grid CSS set on it.The following sections explain these checkboxes.
 Show track sizes 
Select the Show track sizes checkbox, to view the track sizes of the grid.
[authored size] and [computed size]DevTools displays  in each line label.
SIZEDETAILSauthored sizeThe size defined in stylesheet (omitted if not defined).computed sizeThe actual size on screen.snack-box column sizes are defined in the grid-template-columns:1fr 2fr;In the demo, the  CSS. Therefore, the column line labels display both authored and computed sizes.
TRACK SIZEAUTHORED SIZECOMPUTED SIZE1fr • 96.66px1fr96.66px2fr • 193.32px2fr193.32pxThe row line labels display only computed sizes, since there are no row sizes defined in the stylesheet.
TRACK SIZEAUTHORED SIZECOMPUTED SIZE80px 80px80px 80px
 Show area names 
To view the area names, select the Show area names checkbox. In the example, there are 3 areas in the grid:
top, bottom1 and bottom2.

 Extend grid lines 
Select the Extend grid lines checkbox to extend the grid lines to the edge of the viewport along each axis.

 Grid overlays
The Grid overlays section contains a list of grids that are present on the page, each with a checkbox, along with various options.
 Enable overlay views of multiple grids 
To display the overlay grid for multiple grids, select the checkbox next to each name of the grid. In the example, there are 2 grid overlays enabled, that are each represented with different colors:

 Customize the grid overlay color 
To open the color picker and customize the grid overlay color, click the box next to the name of the grid overlay:

 Highlight the grid 
To highlight the HTML element in the Elements tool and scroll to it on the webpage, click the Show element in the Elements panel () icon.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Edit CSS font styles and settings in the Styles pane
 	6/21/2022 • 3 minutes to read • Edit Online
To make it easier when working with typography, a visual Font Editor is now available in the Styles pane. Using the Font Editor, you can change your font settings, and the changes are rendered immediately in the browser - all without in-depth knowledge of CSS. The Elements tool > Styles tab > Font Editor icon opens the Font Editor, which consists of two parts:
The Font Family selector.
The CSS Properties editor.
Typography on the web is an important part of the user experience. You want to ensure that fonts follow corporate brand guidelines, and that your content is displayed as expected on various devices. Text must be easy to read using size and line-height. Users can resize fonts to meet individual needs.
For situations when specific fonts aren't available on a user device, you should provide fallback font options.
CSS provides better support for typography in recent years. Dozens of different CSS units are available to define the size of text. Several CSS properties are available to control the font size, spacing, line height, and other typographical features.
Currently the Enable new Font Editor tool within the Styles pane feature is experimental, and you need to turn it on for Microsoft Edge Developer Tools.
Any CSS in the Styles pane, either font definitions or inline styles, has a Font Editor icon. To open the visual Font Editor, click the Font Editor icon.

The Font Editor opens on top of the Styles pane:

line-height definition is set to 160% in the Styles pane, so the line height text field displays 160%All fields in the visual Font Editor are populated from the values in the CSS in the Styles pane. For example, the , and the unit dropdown list displays . Also, the slider is automatically set to match the values of the text field.
 The Font Family selector
The Font Family selector is the upper part of the visual Font Editor. To select the fonts of the CSS rule, in the CSS editor, use the Font Family selector. You can select main and fallback fonts for each CSS rule.
The Font Editor open on top of the Styles pane with the Font Family selector highlighted:

Use the Font Family dropdown list to select a font. Fonts are organized into four groups:
serif or sans-serifinherit, initial, and unsetComputed fonts, which are the fonts available in the stylesheet in the Styles pane.
System fonts, which are the fonts that are available on the current operating system.
Generic font families, such as .
Global values, such as .
The Font Editor open on top of the Styles pane with the Font Family selector highlighted:

After you select a font, another dropdown menu is displayed for you to select fallback fonts. You can select up to eight fallback fonts. To remove a font, click the Delete Font Family icon.
NOTE
If you select a global value for font family, you don't get another dropdown menu, since there is no fallback for it in CSS.
 The CSS Properties editor
You can change CSS font properties in the lower part of the visual Font Editor. You can change the font size, line height, font weight, and letter spacing using any of the UI controls. Your changes are applied immediately in the browser.
The Font Editor opens on top of the Styles pane, with the CSS properties highlighted:

16 pixels. Now, use the unit dropdown list and select the value em1 em displayed is equal to 16 pixelsYou can also convert CSS units using the visual Font Editor. For example, you can use the tool on a CSS rule where the Font Size slider is initially set to . The .
16 pixelsChanging the font size to :

emOpening the unit dropdown list to convert to :

arrow up and arrow downarrow left and arrow downThe unit dropdown list provides all the numeric CSS units that are available. Font size, line height, font weight, and spacing all use different units. When the text boxes have focus, you can press the keys to fine-tune your settings. To use the sliders with a keyboard, press the  keys.
Toggle Input TypeToggle Input TypeThe CSS Properties editor also includes preset keywords. To use the preset keywords, on the right-hand side, click the  icon. The UI changes, and a dropdown list of preset keywords are displayed. To return to the UI with the slider and other UI controls, click the  icon again.
Opening the preset keyword interface:



 
 Style editing for CSS-in-JS frameworks
 	6/21/2022 • 4 minutes to read • Edit OnlineIn the Styles tab, you can copy declarations for a style rule in a way that's formatted for JavaScript and ready to paste into a JavaScript file. This includes style rules that were defined by CSS-in-JS function calls. You can also edit style rules that were initially defined by a CSS-in-JS function call.
 Copying style rule declarations to paste them with JavaScript syntax
From the Styles pane, you can copy declarations for a style rule in a way that's formatted for JavaScript and ready to paste into a JavaScript file.
When using CSS-in-JS libraries, you can copy CSS declarations (a CSS property and value) so that they are automatically formatted for JavaScript. You don't have to manually edit the copied CSS to match JavaScript's syntax. You can copy a single CSS declaration or all the declarations in a style rule, and then paste them directly into a JavaScript file without having syntax issues.
To copy a style rule as JavaScript:
1. In DevTools, open the Elements tool, and then click the Styles tab.
2. Right-click a declaration in a style rule, and then select Copy declaration as JS or Copy all declarations as JS.
3. Paste the copied CSS into a JavaScript file in your text editor, such as Visual Studio Code. For example: 
'--more-link': 'lime'.

This feature is available starting with Microsoft Edge version 93. To learn more about viewing and changing CSS, see CSS features reference.
 Editing style rules that were initially defined by a CSSOM function
The Styles pane supports editing styles that were created with the CSS Object Model (CSSOM) APIs. Many CSSin-JS frameworks and libraries use the CSS Object Model APIs under the hood to construct styles.
You can edit styles added in JavaScript using Constructable Stylesheets. Constructable Stylesheets are a way to create and distribute reusable styles when using Shadow DOM.
 Example 
CSSStyleSheetinsertRule(). The h1 styles that were initially added by a CSSStyleSheetIn this sample code, style rules are initially defined by calling a CSS Object Model (CSSOM) function, and then the style rules are edited using the Styles pane. The  object contains the CSSOM APIs, such as  function are then editable in the Styles pane.
//Add CSS-in-JS button
function addStyle() {
  const sheet = new CSSStyleSheet();   sheet.insertRule(`h1 {     background: pink;
    text-transform: uppercase;
  }`);
  document.adoptedStyleSheets = [sheet]; }background property of the h1insertRule(). The backgroundpink to lightblueThis sample demonstrates changing the  styles that are added by the CSS Object Model function  color is initially set by calling a CSS Object Model function, and then can be changed from  by using the Styles pane.

Give this feature a try with a sample that uses CSS-in-JS.
 What is CSS-in-JS?
This section is an excerpt from the blog post CSS-in-JS support in DevTools.
Here's what we mean by CSS-in-JS, and how it's different from regular CSS. The definition of CSS-in-JS is somewhat vague. In a broad sense, it's an approach for managing CSS code using JavaScript. For example, it could mean that the CSS content is defined using JavaScript and the final CSS output is generated on-the-fly by the app.
In the context of DevTools, CSS-in-JS means that the CSS content is injected into the page by the CSS Object
<style> or <link>Model APIs. Regular CSS is injected using  elements, and it has a static source (such as a DOM node or a network resource). In contrast, CSS-in-JS often doesn't have a static source.
<style>A special case here is that the content of a  element can be updated by using the CSS Object Model API, causing the source to become out of sync with the actual CSS stylesheet.
If you use any CSS-in-JS library (such as styled-component, Emotion, or JSS), the library might inject styles using CSS Object Model APIs under the hood, depending on the mode of development and the browser.
Let's look at some examples of how you can inject a stylesheet by using the CSS Object Model API, similar to the approach used by some CSS-in-JS libraries.
// Insert new rule to an existing CSS stylesheet const element = document.querySelector('style'); const stylesheet = element.sheet;
stylesheet.replaceSync('.some { color: blue; }'); stylesheet.insertRule('.some { color: green; }');
You can create a completely new stylesheet as well:
// Create a completely new stylesheet const sheet = new CSSStyleSheet();
stylesheet.replaceSync('.some { color: blue; }'); stylesheet.insertRule('.some { color: green; }');// Apply constructed stylesheet to the document document.adoptedStyleSheets = [...document.adoptedStyleSheets, sheet];
 CSS support in DevTools 
In DevTools, the most commonly used feature when dealing with CSS is the Styles pane. In the Styles pane, you can view what CSS-in-JS rules apply to a particular element. You can also edit the CSS-in-JS rules and see the changes on the page in real time.
The Styles pane supports CSS rules that you can modify by using the CSS Object Model APIs. CSS-in-JS styles are sometimes described as constructed, to indicate that these styles were constructed by using Web APIs.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Alex Rudenko (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Get started with HTML and the DOM
 	6/21/2022 • 6 minutes to read • Edit OnlineThis is the first in a series of tutorials that teach you the basics of web development. Learn about a set of web developer tools, named Microsoft Edge DevTools, that will increase your productivity.
This tutorial describes HTML and the Document Object Model (DOM). HTML is one of the core technologies of web development. It is the language that controls the structure and content of webpages. The DOM is also related to the structure and content of webpages, which we learn more about later.
 Goals
You're going to learn web development by building a website. By the time you complete all of the tutorials in the DevTools for Beginners series, your finished site will look like the following figure.

By the end of this tutorial, you'll understand the following concepts:
How HTML and the DOM create the content displayed on webpages.
How Microsoft Edge DevTools can help you experiment with HTML and DOM changes. The difference between HTML and the DOM.
You'll also have a working website. You can use the site to host your resume or blog.
 Prerequisites
Before doing this tutorial:
If you are unfamiliar with HTML, read Getting Started with HTML.
Download the Microsoft Edge web browser. This tutorial uses a set of web development tools, called the Microsoft Edge DevTools, that are built into Microsoft Edge.
 Set up your code
You'll build a site in the Glitch online code editor.
1. Open the source code. This tab is called the editor tab throughout this tutorial.

2. Select alluring-shock. The Project Options menu opens.

3. Select Remix Project. Glitch creates a copy of the project that you can edit and randomly generates a new name for the project. The content is the same as before.

4. If you plan to complete the next tutorial in this series, select Sign In to Glitch using your Facebook, GitHub, or Google account; or email yourself a magic link. If you don't sign in to an account, you can't edit the project after closing the editor tab.
5. Select Show > In a New Window. A new tab opens, showing the live page. This tab is called the live tab throughout this tutorial.

 Add content
Your site needs more information. To add some content:
<!-- You're "About Me" will go here. --> with <h1>About Me</h1>1. In the editor tab, replace .
<body>
  <p> Your site!</p>
        <main>
           <h1>About Me</h1>
        </main>

About Me<h1>2. View your changes in the live tab. The text  is visible on the page. The text is larger than the surrounding text because the  element represents a Heading 1. Your web browser automatically styles headings in larger font sizes.

<p>I am learning web development. Recent accomplishments:</p><h1>About Me</h1>3. Back in the editor tab, insert  on the line below .
<body>
  <p> Your site!</p>
        <main>
           <h1>About Me</h1>
           <p>I am learning web development. Recent accomplishments:</p>         </main>

4. View your change in the live tab.
5. Back in the editor tab, add a list of your accomplishments using the following code.
<p>I am learning web development.  Recent accomplishments:</p>    <ul>
      <li>Learned how to set up my code in Glitch.</li>
      <li>Added content to my HTML.</li>
      <li>TODO: Learn how to use Microsoft Edge DevTools to experiment with content changes.</li>
      <li>TODO: Learn the difference between HTML and the DOM.</li>
   </ul>
6. View the live tab to make sure that the new content is displayed correctly.

 Experiment with content changes in Microsoft Edge DevTools
If you are developing a page with a lot of HTML, it becomes tedious to go back-and-forth between the editor tab and the live tab to see your changes. Microsoft Edge DevTools helps you experiment with content changes without ever leaving the live tab.
 Learn the difference between HTML and the DOM 
Before editing content from Microsoft Edge DevTools, let's understand the difference between HTML and the DOM. Proceed with the following steps to learn from an example.
A new element!?!1. Navigate to the live tab. At the bottom of your page, the text  is displayed.
index.html2. Open the editor tab and try to find the text in . The text doesn't appear in this view.
A new element!?!3. Open the live tab, right-click , and then select Inspect.

<div>A new element!?!</div>DevTools opens alongside your page.  is highlighted. Although this structure in DevTools looks like HTML, it's actually the DOM Tree.

When your page loads, the browser uses the HTML to create the initial content of the page. The DOM represents the current content of the page, which can change over time.
<div>A new element!?!</div> content is added to your page because of the <script src="new.js"></script>The 
tag at the bottom of your HTML. This tag causes some JavaScript code to run. Learn more about JavaScript in a later tutorial.
For now, think of it as a scripting language that can change the content of your page. In this case, JavaScript
<div>A new element!?!</div>code adds  to your page. That is why this text is displayed in the live tab, but not in the HTML.
 Edit the DOM 
To quickly experiment with content changes without leaving the live tab:
Your site!1. In DevTools, right-click , and then select Edit as HTML.
<p>Your site!</p>2. Replace  with the following code.
<header>
   <p><b>Welcome to my site!</b></p>    <button>Download my resume</button>
</header>

Ctrl+Enter (Windows, Linux) or Command+Enter3. Press  (macOS) to save your changes, or select
outside the box. Your changes automatically show up in the live view of your page. The text Your site! has been replaced with the new content.

This workflow is only suitable for experimenting with content changes. If you refresh the page or close the tab, your changes are lost. If you want to save your changes, manually copy the code to your HTML file. The next couple of sections show you some more ways to change content from the DOM Tree.
 Reorder nodes
You can also change the order of DOM nodes. For example, on your web page the navigation menu is near the bottom.
Move the navigation menu to the top:
<nav>1. Find the  node in the DOM Tree of DevTools.

<nav> node to the top, so that the node is the first child after the <body>2. Drag the  node.

 Delete a node 
Remove a node from the DOM Tree:
<div>A new element!?!</div>1. In the DOM Tree, select . DevTools highlights the node.
Delete. The <div>A new element!?!</div>2. Press  node is removed from the DOM Tree.

 Copy your changes
You're almost done. You made a few changes to the page in DevTools, but they're not saved to your source code.
Your site! returns to the top of the page, and the text A new element!?!1. Refresh the live tab. The changes that you made in the DOM Tree disappear. In particular, the text  returns to the bottom.

2. Copy the following code:
<!DOCTYPE html>
<html lang="en">
   <head>
      <meta charset="utf-8">
      <meta http-equiv="X-UA-Compatible" content="IE=edge">
      <meta name="viewport" content="width=device-width, initial-scale=1">
   </head>
   <body>
      <header>
            <p>Welcome to my site!</p>
      </header>
      <nav>
            <ul>
               <li><a href="/">Home</a></li>
               <li><a href="/contact.html">Contact</a></li>
            </ul>
      </nav>
      <main>
            <h1>About Me</h1>
            <p>I am learning web development.  Recent accomplishments:</p>             <ul>
               <li>Learned how to set up my code in Glitch.</li>
               <li>Added content to my HTML.</li>
               <li>Learned how to use Microsoft Edge DevTools to experiment with content changes.
</li>
               <li>Learned the difference between HTML and the DOM.</li>
            </ul>
      </main>
   </body>
</html>index.html3. Go back to the editor tab and replace the content of your  file with the code that you copied.

 Next steps
 Complete the next tutorial in this series, Get started with CSS, to learn how to style your page and experiment with style changes in Microsoft Edge DevTools.
Read Introduction to the DOM to learn more about the DOM.
Check out a course such as Introduction to Web Development, to gain additional hands-on experience with web development.
NOTE
https://developers.google.com/web/tools/chrome-devtools/beginners/htmlPortions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page was found at  and was authored by Katherine Jackson (Technical Writer Intern, Chrome DevTools). This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Get started viewing and changing the DOM
 	6/21/2022 • 11 minutes to read • Edit OnlineFollow these interactive tutorial sections to learn the basics of viewing and changing the Document Object Model (DOM) of a page using Microsoft Edge DevTools.
To understand the difference between the DOM and HTML, see Appendix: HTML versus the DOM, below.
 View DOM nodes
The DOM Tree of the Elements panel is where you do all DOM-related activities in DevTools.
 Inspect a node 
When you are interested in a particular DOM node, Inspect is a fast way to open DevTools and investigate that node.
Control (Windows, Linux) or Command1. Open the DOM Examples demo page in a new window or tab. To do this, right-click the link, or press and hold  (macOS) and then click the link.
1. Under Inspect a Node, right-click Michelangelo and then select Inspect.

<li>Michelangelo</li>The Elements tool of DevTools opens.  is highlighted in the DOM Tree.

2. Click the Inspect () icon in the top-left corner of DevTools.

<li>Tokyo</li>3. Under Inspect a Node, click the Tokyo text. Now,  is highlighted in the DOM Tree.
Inspecting a node is also the first step towards viewing and changing the styles of a node. See Get started viewing and changing CSS.
 Navigate the DOM Tree with a keyboard 
Once you have selected a node in the DOM Tree, you can navigate the DOM Tree with your keyboard.
1. Open the DOM Examples demo page in a new window or tab.
<li>Ringo</li>2. Under Navigate the DOM Tree with a Keyboard, right-click Ringo and then select Inspect.  is selected in the DOM Tree.

Up arrow key 2 times. <ul>3. Press the  is selected.

Left arrow key. The <ul>4. Press the  list collapses.
Left arrow key again. The parent of the <ul> node is selected. In this case it is the <div>navigate-the-dom-tree-with-a-keyboard-15. Press the  with the ID .
Down arrow key 2 times so that you have re-selected the <ul>6. Press the  list that you just collapsed. It
should look like this: <ul>... </ul>
Right7. Press the  arrow key. The list expands.
 Scroll into view 
<h1>When viewing the DOM Tree, you may find yourself interested in a DOM node that isn't currently in the viewport. For example, suppose that you scrolled to the bottom of the page, and you are interested in the node at the top of the page. Scroll into view lets you quickly reposition the viewport so that you can review the node.
1. Open the DOM Examples demo page in a new window or tab.
2. Under Scroll into View, right-click Magritte and then select Inspect.
3. Scroll to the bottom of the DOM Examples page.
<li>Magritte</li>4. The  node should still be selected in your DOM Tree. If not, go back to Scroll into view and start over.
<li>Magritte</li>5. Right-click the  node, and then click Scroll into view. Your viewport scrolls back up to display the Magritte node. See Appendix: Missing options if the Scroll into view option isn't displayed.

 Search for nodes 
You can search the DOM Tree by string, CSS selector, or XPath selector.
1. Focus your cursor on the Elements tool.
Ctrl+F (Windows, Linux) or Command+F2. Press  (macOS). The Search bar opens at the bottom of the
DOM Tree.
The Moon is a Harsh Mistress3. Type . The last sentence is highlighted in the DOM Tree.

The Search bar also supports CSS and XPath selectors.
 Edit the DOM
You can edit the DOM on the fly and review how the changes affect the page.
 Edit content 
To edit the content of a node, double-click the content in the DOM Tree.
1. Open the DOM Examples demo page in a new window or tab.
2. Under Edit Content, right-click Michelle and then select Inspect.
Michelle. In other words, double-click the text between <li> and </li>3. In the DOM Tree, double-click .
The text is highlighted to indicate that it is selected.

Michelle, type Leela, then press Enter4. Delete  to confirm the change. The text in the DOM changes from Michelle to Leela.
 Edit attributes 
To edit attributes, double-click the attribute name or value. Follow the instructions to learn how to add attributes to a node.
1. Open the DOM Examples demo page in a new window or tab.
2. Under Edit Attributes, right-click Howard and then select Inspect.
<li>3. Double-click . The text is highlighted to indicate that the node is selected.

Right arrow key, add a space, type style="background-color:gold", and then press Enter4. Select the . The background color of the node changes to gold.

 Edit node type 
To edit the type of a node, double-click the type and then type in the new type.
1. Open the DOM Examples demo page in a new window or tab.
2. Under Edit Node Type, right-click Hank and then select Inspect.
<li>. The text li3. Double-click  is highlighted.
li, type button, then press Enter. The <li> node changes to a <button>4. Delete  node.

 Reorder DOM nodes 
Drag nodes to reorder them.
1. Open the DOM Examples demo page in a new window or tab.
2. Under Reorder DOM Nodes, right-click Elvis Presley and then select Inspect.
<li>Elvis Presley</li>3. In the DOM Tree, drag  to the top of the list.

 Force state 
:active, :hover, :focus, :visited, and :focus-withinYou can force nodes to remain in states including :
1. Open the DOM Examples demo page in a new window or tab.
2. Under Force state, hover on The Lord of the Flies. The background color becomes orange.
3. Right-click The Lord of the Flies, and then select Inspect.
<li class="demo--hover">The Lord of the Flies</li>4. Right-click , and then select Force State > :hover.
See Appendix: Missing options if the option isn't displayed. The background color remains orange even though you aren't actually hovering over the node.
 Hide a node 
HPress  to hide a node, as follows:
1. Open the DOM Examples demo page in a new window or tab.
2. Under Hide a node, right-click The Stars My Destination and then select Inspect.
H3. Press the  key. The node is hidden.

H4. Press the  key again. The node is shown again.
 Delete a node 
DeletePress  to delete a node, as follows:
1. Open the DOM Examples demo page in a new window or tab.
2. Under Delete a Node, right-click Foundation and then select Inspect. Inspect the following nodes:
The Illustrated Man
Through the Looking-Glass
Foundation
Delete3. Select the  key. The node is deleted.
Ctrl+Z (Windows, Linux) or Command+Z4. Press  (macOS). The last action is undone and the node reappears.
 Access nodes in the Console
DevTools provides a few shortcuts for accessing DOM nodes from the Console, or getting JavaScript references to each one.
	 Reference the currently 	-selected node with $0
== $0$0When you inspect a node, the  text next to the node means that you can reference this node in the Console with the variable .
1. Open the DOM Examples demo page in a new window or tab.
2. Under Reference the currently-selected node with $0, right-click The Left Hand of Darkness and then select Inspect.
Escape3. Select the  key to open the Console Drawer.
$0 and select the Enter key. The result of the expression shows that $04. Type  evaluates to 
<li>The Left Hand of Darkness</li>:

5. Hover on the result. The node is highlighted in the viewport.
<li>Dune</li> in the DOM Tree, type $0 in the Console again, and then press Enter6. Click  again. Now, 
$0 evaluates to <li>Dune</li>:

 Store as global variable 
If you need to refer back to a node many times, store it as a global variable.
1. Open the DOM Examples demo page in a new window or tab.
2. Under Store as global variable, right-click The Big Sleep, and then select Inspect.
<li>The Big Sleep</li>3. Right-click  in the DOM Tree, and then select Store as global variable. See
Appendix: Missing options if the option isn't displayed.
temp1 in the Console and then press Enter4. Type . The result of the expression shows that the variable evaluates to the node.

 Copy JS path 
Copy the JavaScript path to a node when you need to reference it in an automated test.
1. Open the DOM Examples demo page in a new window or tab.
2. Under Copy JS path, right-click The Brothers Karamazov, and then select Inspect.
<li>The Brothers Karamazov</li>3. Right-click  in the DOM Tree, and then select Copy > Copy JS Path. A 
document.querySelector() expression that resolves to the node has been copied to your clipboard.
Ctrl+V (Windows, Linux) or Command+V4. Press  (macOS) to paste the expression into the Console.
Enter5. Press  to evaluate the expression.
The result of the Copy JS Path expression:

 Break on DOM changes
DevTools enables you to pause the JavaScript of a page when the JavaScript modifies the DOM.
 Break on attribute modifications 
Use attribute modification breakpoints when you want to pause the JavaScript that causes any attribute of a node to change.
1. Open the DOM Examples demo page in a new window or tab.
2. Under Break on attribute modifications, right-click Sauerkraut and then select Inspect.
<li id="target">Sauerkraut</li>3. In the DOM Tree, right-click , and then select Break On > Attribute
Modifications. See Appendix: Missing options if the option isn't displayed.

4. In the next step, you'll be instructed to click a button that pauses the code of the page. After the page is paused, you can no longer scroll the page. To make the page scrollable again, select Resume Script (
).

style5. Click the Set Background button above. This sets the  attribute of the node to 
background-color:thistle. DevTools pauses the page and highlights the code that caused the attribute to
change.
6. Select Resume Script (), as mentioned earlier.
 Break on node removal 
If you want to pause when a particular node is removed, use node removal breakpoints.
1. Open the DOM Examples demo page in a new window or tab.
2. Under Break on Node Removal, right-click Neuromancer and then select Inspect.
<li id="target">Neuromancer</li>3. In the DOM Tree, right-click , and then select Break On > Node
Removal. See Appendix: Missing options if the option isn't displayed.
4. Click the Delete button above. DevTools pauses the page and highlights the code that caused the node to be removed.
5. Select Resume Script ().
 Break on subtree modifications 
After you put a subtree modification breakpoint on a node, DevTools pauses the page when any of the descendants of the node are added or removed.
1. Open the DOM Examples demo page in a new window or tab.
2. Under Break on Subtree Modifications, right-click A Fire Upon The Deep and then select Inspect.
<ul id="target">, which is the node above <li>A Fire Upon the Deep</li>3. In the DOM Tree, right-click ,
and then select Break On > Subtree Modifications. If the Subtree Modifications command doesn't appear, see Appendix: Missing options.
<li>4. Click Add Child. The code pauses because a  node was added to the list.
5. Select Resume Script ().
 Next steps
That covers most of the DOM-related features in DevTools. You can discover the rest of the features by rightclicking nodes in the DOM Tree, and experimenting with the other options that were not covered in this tutorial. See Elements panel keyboard shortcuts.
Check out Overview of DevTools to discover everything else you can do with DevTools.
 Appendix: HTML versus the DOM
This section explains the difference between HTML and the DOM.
When you use a web browser to request a page, the server returns HTML like this:
<!doctype html>
<html>
    <head>
        <title>Hello, world!</title>
    </head>
    <body>
        <h1>Hello, world!</h1>
        <p>This is a hypertext document on the World Wide Web.</p>
        <script src="/script.js" async></script>
    </body>
</html>
The browser parses the HTML and creates a tree of objects like this:
html     head         title     body         h1         p         script
This tree of objects, or nodes, representing the content of the page is called the Document Object Model (DOM). Right now the DOM tree looks the same as the HTML, but suppose that the script referenced at the bottom of the HTML runs the following code:
const h1 = document.querySelector('h1'); h1.parentElement.removeChild(h1); const p = document.createElement('p');
p.textContent = 'Wildcard!'; document.body.appendChild(p);
h1 node and adds another pThat code removes the  node to the DOM. The complete DOM now looks like this:
html     head         title     body         p         script         p
The page's HTML is now different than its DOM. In other words, HTML represents initial page content, and the DOM represents current page content. When JavaScript adds, removes, or edits nodes, the DOM becomes different than the HTML.
See Introduction to the DOM to learn more.
 Appendix: Scroll into view
This is a continuation of the Scroll into view section. Follow the instructions below to complete the section.
<li>Magritte</li>1. The  node should still be selected in your DOM Tree. If not, go back to Scroll into view and start over.
<li>Magritte</li>2. Right-click the  node and select Scroll into view. Your viewport scrolls back up so
that the Magritte node is displayed. If the Scroll into view option isn't displayed, see Appendix: Missing options.

 Appendix: Missing options
Many of the instructions in this tutorial instruct you to right-click a node in the DOM Tree and then select an option from the context menu that pops up. If you don't see the specified option in the context menu, try rightclicking away from the node text.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Console overview
 	6/21/2022 • 7 minutes to read • Edit OnlineThe Console is like an intelligent, rich command line within DevTools, and is great companion tool to use with others tools. The Console provides a powerful way to script functionality, inspect the current webpage, and manipulate the current webpage using JavaScript.
The Console tool helps with several tasks, which are covered in more detail in the following articles:
Track down problems to find out why something isn't working in the current project. See Fix JavaScript errors that are reported in the Console.
Get information about the web project in the browser as log messages. See Filter Console messages.
Log information in scripts for debugging purposes. See Log messages in the Console tool.
Try JavaScript expressions live in a REPL environment. See Run JavaScript in the Console.
Interact with the web project in the browser using JavaScript. See Interact with the DOM using the Console.
You can open the Console tool in the top or bottom of DevTools; it's shown here in upper part, on the main toolbar:

The Console is shown here in the lower part of DevTools (the Drawer), with the Elements tool open above it:

Ctrl+Shift+J (Windows, Linux) or CommandThe fastest way to directly open the Console is to press +
Option+J (macOS).
 Error reports and the Console
The Console is the default place where JavaScript and connectivity errors are reported. If any errors occur, the Issues counter is displayed next to the Settings icon in DevTools that provides the number of errors and warnings. Click the Issues counter to open the Issues tool and display the problem. For more information, see Fixing JavaScript errors that are reported in the Console.
DevTools gives detailed information about the error in the Console:

 Search the web for a Console error message string
Search the web for your Console error messages, right from within DevTools. In the Console, many error messages have a Search for this message on the Web button, shown as a magnifying glass:

When you click the Search for this message on the Web button, a new tab opens in the browser and shows search results for the error message:

 Inspect and filter information on the current webpage
When you open DevTools on a webpage, there may be an overwhelming amount of information in the Console. The amount of information becomes a problem when you need to identify important information. To view the important information that needs action, use the Issues tool in DevTools.
Issues are gradually being moved from the Console to the Issues tool. However, there's still a lot of information in the Console, which is why it's a good idea to know about the automated log and filter options in the Console. For more information, see Filter Console messages.
DevTools with a Console full of messages:

 Log information to display in the Console
console.log()The most popular use case for the Console is logging information from your scripts using the method or other similar methods.  Example code 
// prints the text to the console as  a log message console.log('This is a log message');
// prints the text to the console as an informational message console.info('This is some information'); 
// prints the text to the console as an error message console.error('This is an error');
// prints the text to the console as a warning console.warn('This is a warning');
// prints the geometry of the document body as an object console.log(document.body.getBoundingClientRect());
// prints the geometry of the document body as a table console.table(document.body.getBoundingClientRect());
// shows a list of techologies as a collapsed group let technologies = ["HTML", "CSS", "SVG", "ECMAScript"]; console.groupCollapsed('Technolgies');
technologies.forEach(tech => {console.info(tech);}) console.groupEnd('Technolgies');To log information to display in the Console:
1. Open the demo webpage Console messages examples: log, info, error and warn in a new window or tab.
Ctrl+Shift+J (Windows, Linux) or Command+Option+J2. To open the Console, press  (macOS).
The Console displays the resulting messages that are caused by the demo code:

Enter3. Paste the above code into the Console, and then press .
Uncaught SyntaxError: Identifier 'technologies' has already been declaredIf you get a message: :
4. Open a new tab or window.
Ctrl+Shift+J (Windows, Linux) or Command+Option+J5. To open the Console, press  (macOS).
Enter6. Paste the above code into the Console, and then press .
Many useful methods are available when you work with the Console. For more information, see Log messages in the Console tool.
 Try your JavaScript live in the Console
The Console isn't only a place to log information. The Console is a REPL environment. When you write any JavaScript in the Console, the code runs immediately. You may find it useful to test some new JavaScript features or to do some quick calculations. Also, you get all of the features you expect from a modern editing environment, such as autocompletion, syntax highlighting, and history.
To try running JavaScript in the Console:
1. Open the Console.
2+22. Type .
2+2 live as you type it, displaying the result 4The Console displays the result of  on the following line:

This Eager evaluation feature is useful to debug and verify that you aren't making mistakes in your code.
EnterTo run the JavaScript expression in the Console and optionally display a result, press . Then, you can write the next JavaScript code to run in the Console.
Running several lines of JavaScript code in succession:

EnterShift+Enter instead of EnterBy default, you run JavaScript code on a single line. To run a line, type your JavaScript and then press . To work around the single-line limitation, press .
Arrow-UpSimilar to other command-line experiences, to access your previous JavaScript commands, press . The autocompletion feature of the Console is a great way to learn about unfamiliar methods.
To try autocompletion:
1. Open the Console.
doc2. Type .
document3. Select  from the dropdown menu.
Tab to select document4. Press .
.bo5. Type .
Tab to select document.body6. Press .
.7. Type another  to display the complete list of properties and methods available on the body of the current webpage.
For more information about all the ways to work with Console, see Console as a JavaScript environment.
Autocompletion of JavaScript expressions in the Console:

 Interact with the current webpage in the browser
The Console has access to the Window object of the browser. You can write scripts that interact with the current webpage, by reading data from the DOM and assigning data to DOM elements.
 Reading from the DOM tree in the Console 
To use a JavaScript expression to read from the current page by reading a selected element from the DOM tree:
1. Open the Console.
Enter2. Paste the following code into the Console, and then press :
document.querySelector('h1').innerHTML
<h1>This expression selects the first heading-level 1 from the DOM and then selects the HTML content that's contained between the  start and end tags. The Console displays the output of the expression, which is the text of the heading:

You have read from the DOM representation of the webpage, by entering a JavaScript expression in the Console and displaying the output in the Console.
 Writing to the DOM tree and webpage from the Console 
You can also change the rendered webpage, by changing the DOM (or writing to the DOM), from within the Console.
To change the rendered webpage:
1. Open the Console.
Enter2. Paste the following code into the Console, and then press :
document.querySelector('h1').innerHTML = 'Rocking the Console';
=The above JavaScript expression uses the  sign to assign a value to the selected DOM item. The evaluated value of the expression is a string for a heading, in this example. The expression's value (the heading string) is shown both in the Console and in the rendered webpage:

You changed the main heading of the webpage to Rocking the Console.
 Using the $$ Console utility method to 
The Console Utility methods make it easy to access and manipulate the current webpage.
For example, to add a green border around all the links in the current webpage:
1. Open the Console.
Enter2. Paste the following code into the Console, and then press :
$$('a').forEach(a => a.style.border='1px solid lime');
$$(selector)document.querySelectorAll(). In this example, we select all the <a>The  console utility function is "Query selector all". This DOM query selector function returns an array of all the elements that match the specified CSS selector, like the JavaScript function  hyperlink elements and then apply a
green box around them:

For more information, see Console tool utility functions and selectors.
 See also
Interact with the DOM using the Console.
Console features reference
Console object API Reference
Console tool utility functions and selectors
 
 Console features reference
 	6/21/2022 • 6 minutes to read • Edit OnlineThis article is an outline of the features of the Console.
Contents:
Open the Console
Open the Console tool
Open the Console tool in the Drawer
Open Console Settings
Open the Console Sidebar
View messages
Turn off message grouping
Log XHR and Fetch requests
Persist messages across page loads
Hide network messages
Filter messages
Filter out browser messages
Filter by log level
Filter messages by URL
Filter out messages from different contexts
Filter out messages that don't match a regular expression pattern
Run JavaScript
Rerun expressions from history
Watch the value of an expression in real time with Live Expressions
Turn off Eager Evaluation
Turn off autocomplete from history
Select JavaScript context
Clear the Console
 Open the Console
You can open the Console as a tool in the upper pane or as a tool in the Drawer.
 Open the Console tool 
Ctrl+Shift+J (Windows, Linux) or Command+Option+JPress  (macOS).

ConsoleTo open the Console tool from the Command Menu, type  and then run the Show Console command that has the Panel badge next to it.

 Open the Console tool in the Drawer 
Esc. Or, click Customize and control DevTools (...Press ) and then select Show console drawer.

The Drawer pops up in the bottom of the DevTools window, with the Console tool open.

To open the Console tool from the Command Menu, type Console and then run the Show Console command that has the Drawer badge next to it.

 Open Console Settings 
Click the Console Settings () button.

 Open the Console Sidebar 
To display the Sidebar, click Show console sidebar (). The Sidebar helps you filter.

 View messages
This section contains features that change how messages are presented in the Console. For a hands-on walkthrough, see View messages.
 Turn off message grouping 
To turn off the default message grouping behavior of the Console, click the Console Settings () button and then select the checkbox next to Group similar. For an example, see Log XHR and Fetch requests.
 Log XHR and Fetch requests 
XMLHttpRequest and FetchTo log all  requests to the Console as each happens, click the Console Settings (
) button and then select the checkbox next to Log XMLHttpRequests.

The top message in previous figure displays the default grouping behavior of the Console.
 Persist messages across page loads 
When you load a new webpage, the default action clears the Console. To persist messages across page loads, click the Console Settings () button and then select the checkbox next to Preserve Log.
 Hide network messages 
429The default action for Microsoft Edge is to logs network messages to the Console. In the following figure, the selected message represents an HTTP status code of .

To hide network messages:
1. Click the Console Settings () button.
2. Select the checkbox next to Hide Network.
 Filter messages
There are multiple ways to filter out messages in the Console.
 Filter out browser messages 
To only display messages that came from the JavaScript of the webpage, Open the Console Sidebar and then click # user messages.

 Filter by log level 
console.*DevTools assigns each  method one of the four severity levels:

Error
Info
Verbose
Warningconsole.log() is in the Info group, but console.error() is in the ErrorFor example,  group. The Console
object API Reference describes the severity level of each applicable method. Every message that the browser logs to the Console has a severity level too.
ErrorYou can hide any level of messages that you're not interested in. For example, if you're only interested in messages, you can hide the other three groups.
Verbose, Info, Warning, or ErrorTo filter the messages, click the Log Levels dropdown list and then select .

To use the log level to filter, open the Console Sidebar and then select Errors, Warnings, Info, or Verbose.

 Filter messages by URL 
url: followed by a URL to only view messages that came from that URL. After you type url:https://example.com/a.jsType , DevTools displays all relevant URLs. Domains also work. For example, if  and 
https://example.com/b.js are logging messages, url:https://example.com allows you to focus on the messages from these two scripts.

-url:To hide messages from a URL, type . It's a negative URL filter.

To display messages from a single URL:
1. Open the Console Sidebar.
2. Expand the # user messages section.
3. Select the URL of the script that contains the messages that you want to focus on.

 Filter out messages from different contexts 
<iframe>Suppose that you have an advertisement (ad) on your webpage. The ad is embedded in an  and generates many messages in your Console. Because the ad is running in a different JavaScript context, one way to hide the messages is to click the Console Settings () button and then select the checkbox next to Selected Context Only.
 Filter out messages that don't match a regular expression pattern 
/[gm][ta][mi]/Type a regular expression such as  in the Filter text box to filter out any messages that don't match that pattern. DevTools checks whether the pattern is found in the message text or in the script that caused the message to be logged.

 Run JavaScript
This section contains features related to running JavaScript in the Console. For a hands-on walkthrough, see Run JavaScript.
 Rerun expressions from history 
Up ArrowEnterPress  to cycle through the history of JavaScript expressions that you ran earlier in the Console. Press  to run that expression again.
 Watch the value of an expression in real time with Live Expressions 
If you find yourself typing the same JavaScript expression in the Console repeatedly, you might find it easier to create a Live Expression. With Live Expressions, you type an expression once and then pin it to the top of your Console. The value of the expression updates in near real time. See Watch JavaScript Expression Values In Real-Time With Live Expressions.
 Turn off Eager Evaluation 
Eager Evaluation displays a preview of the return value as you type JavaScript expressions in the Console. To turn off the return value previews:
1. Click the Console Settings () button.
2. Clear the checkbox next to Eager Evaluation.
 Turn off autocomplete from history 
>As you type out an expression, the autocomplete popup window for the Console displays expressions that you ran earlier. The expressions are pre-pended with the  character. To stop displaying expressions from your history, click the Console Settings () button and then clear the checkbox next to Autocomplete From History checkbox.
document.querySelector('a') and document.querySelector('img')In the following figure,  are expressions that were evaluated earlier.

 Select JavaScript context 
By default, the JavaScript Context dropdown is set to top, which represents the main webpage's browsing context.

<iframe>Suppose you have an ad on your webpage embedded in an , and you want to run JavaScript to tweak the DOM of the ad. Click the JavaScript Context dropdown list and then select the browsing context of the ad:

 Clear the Console
To clear the Console, use any of the following approaches:
clear() in the Console and then press Enterconsole.clear()Ctrl+LClick Clear Console ().
Right-click a message and then select Clear Console.
Type .
Call  from your webpage's JavaScript.
Press  while the Console is in focus.
 See also
console.log()Log messages in the Console tool - How to filter log messages such as Info, Warnings, and Errors in the Console.
Get started with running JavaScript in the Console - Steps to walk you through issuing JavaScript statements and expressions in the Console.
Console object API Reference - Functions and expressions that you can enter in the Console to write messages to the Console, such as .
monitorEvents()Console tool utility functions and selectors - Convenience functions that you can enter in the Console tool, such as.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Log messages in the Console tool
 	6/21/2022 • 8 minutes to read • Edit Onlineprint or logEver since browsers started to offer developer tools, the Console is a favorite, because in most programming courses, you learn to output some kind of  command, to gain insights about what happens in your code.
alert() or document.write()ConsoleBefore DevTools, for JavaScript, you were limited to an  statement to debug in the browser. With DevTools, to log information in the Console, many methods of the  object are available in the Console, listed in Console object API Reference.
 Console messages examples: log, info, error, and warn
ConsoleThe  object has several levels of message-logging methods:
console.logconsole.infoconsole.errorconsole.warn- Prints the text to the console as a log message.
- Prints the text to the console as an informational message.
- Prints the text to the console as an error message.
- Prints the text to the console as a warning. Example code 
// prints the text to the console as  a log message console.log('This is a log message')
// prints the text to the console as an informational message console.info('This is some information') 
// prints the text to the console as an error message console.error('This is an error')
// prints the text to the console as a warning console.warn('This is a warning') 
 Demo webpage: Console messages examples: log, info, error, and warn To try using the logging functions in the Console:
1. Open the demo webpage Console messages examples: log, info, error, and warn in a new window or tab.
Ctrl+Shift+J (Windows, Linux) or Command+Option+J2. Press  (macOS). DevTools opens, with the
Console open in main toolbar.
The demo page has already sent the above log messages to the Console:

log() and info() methods seem to do the same thing. Use info() and log()The  for different log tasks, because that allows you to filter Console messages, to display only a subset of log entries.
error() and warn()The  methods display an icon next to the message and a way to inspect the stack trace of the message.
Enter3. Copy and paste any of the examples into the Console, and then press .
Output is displayed in the Console, below the code that you entered.
 Different types of log entries and variables
Instead of log text, you can send any valid JavaScript or DOM references to the Console. The Console appropriately displays the various types of JavaScript values that you send to it from console log messages. The Console displays a filtered and formatted representation of the results.  Example code 
let x = 2;
// logs the value of x console.log(x);
// logs the name x and value of x console.log({x})   
// logs a DOM reference  
console.log(document.querySelector('body'));
// logs an Object
console.log({"type":"life", "meaning": 42}); let w3techs = ['HTML', 'CSS', 'SVG', 'MathML'];
// logs an Array console.log(w3techs); Demo webpage: Logging different variable types 
logTo use the  function to display different variable types:
1. Open the demo webpage Console messages examples: Logging different types in a new window or tab.
Ctrl+Shift+J (Windows, Linux) or Command+Option+J2. Press  (macOS). DevTools opens, with the
Console open in main toolbar.
Each type of result is displayed in a different way.
3. Click the triangles to toggle the information and analyze each result in more detail.
{} around the xSuppose you get many log messages that only display a value, but you don't know where the value originated. For that case, we added curly braces  variable, to provide better grouping.
Logging variables of different types in the Console:

Logging variables of different types in the Console with expanded, extra information:

Enter4. Copy and paste any of the examples into the Console, and then press .
Output is displayed in the Console, below the code that you entered.
 Format and convert values with specifiers
%A special feature of all the log methods is that you can use specifiers in your log statement's message. Specifiers are part of a log message and start with a percentage sign () character. Specifiers allow you to log certain values in different formats and even convert between formats.
%s%i or %d%f logs as Strings.
 logs as Integers.
 logs as a floating-point value.

%o
%O
%c logs as an expandable DOM element.  logs as an expandable JavaScript object.  allows you to style you message with CSS.  Example code 
// logs "10x console developer"
console.log('%ix %s developer', 10, 'console');
// logs PI => 3.141592653589793 console.log(Math.PI); 
// logs PI as an integer = 3 console.log('%i', Math.PI); 
// logs the document body as a DOM node console.log('%o', document.body); 
// logs the body of the document as a JavaScript object with all properties console.log('%O', document.body); 
// shows the message as red and big
console.log('%cImportant message follows','color:red;font-size:40px') Demo webpage: Logging with specifiers 
1. Open the demo page Console messages examples: Logging with specifiers in a new tab or window.
Ctrl+Shift+J (Windows, Linux) or Command+Option+J2. Press  (macOS). DevTools opens, with the
Console open in main toolbar.
The webpage has already populated the Console with output.
The first example demonstrates that the order of replacement of specifiers is the parameter order following the string:
console.log('%ix %s developer', 10, 'console'); // logs "10x console developer"
log3. Click the expander triangles in the output results, to expand and see the data that's output by the above  statements that are in the webpage.
F54. If necessary, press  to reload the page and re-populate the Console output.
Specifiers are used to log, format, and convert values:

%o and %O5. In the Console, click triangles to expand the log results, to see the difference between the specifiers.
The body of the webpage is either displayed as an expandable DOM node, or as a full list of all JavaScript properties on the webpage body:

Enter6. Copy and paste the above example code listing into the Console, and then press .
Output is displayed in the Console, below the code that you entered.
 Group log messages
group and groupCollapsedIf you log a lot of information, you can use the  methods to display log messages as expandable and collapsible groups in the Console. Groups can be nested and named to make the data much easier to understand.
 Example code 
// Example 1: Nested groups, with the inner group hidden (collapsed):
console.group("Passengers: Heart of Gold"); console.log('Zaphod'); console.log('Trillian'); console.log('Ford'); console.log('Arthur'); console.log('Marvin');
console.groupCollapsed("Hidden"); console.log('(Frankie & Benjy)'); console.groupEnd("Hidden");
console.groupEnd("Passengers: Heart of Gold");
// Example 2:
let technologies = {
  "Standards": ["HTML", "CSS", "SVG", "ECMAScript"],
  "Others": ["jQuery", "Markdown", "Textile", "Sass", "Pug"]
}
for (tech in technologies) {   console.groupCollapsed(tech);
  technologies[tech].forEach(t => console.log(t));   console.groupEnd(tech); } Demo webpage: Grouping logs 
In this example, the group names are optionally generated.
1. Open the demo page Console messages examples: Grouping logs in a new tab or window.
Ctrl+Shift+J (Windows, Linux) or Command+Option+J2. Press  (macOS). DevTools opens, with the
Console open in main toolbar.
The webpage has already populated the Console with output.
Logging lots of values as groups:

3. In the Console output, expand and collapse each of the sections:

Enter4. Copy and paste the above example code listing into the Console, and then press .
Output is displayed in the Console, below the code that you entered.
 Display complex data as tables
console.table()The  method logs complex data not as a collapsible and expandable object, but as a table that you can sort using different headers. A sorted table makes it much easier for people to review the information.
 Example code 
let technologies = {
  "Standards": ["HTML", "CSS", "SVG", "ECMAScript"],
  "Others": ["jQuery", "Markdown", "Textile", "Sass", "Pug"] }
// log technologies as an object console.log(technologies); // show technologies as a table console.table(technologies);
// get the dimensions of the document body
let bodyDimensions = document.body.getBoundingClientRect();
// show dimensions as an object console.log(bodyDimensions); // show dimensions as a table console.table(bodyDimensions);The second portion of the code listing from the demo page is shown further down.
 Demo webpage: Using table formatting To show complex data as tables:
1. Open the demo page Console messages examples: Using table in a new window or tab.
Ctrl+Shift+J (Windows, Linux) or Command+Option+J2. Press  (macOS). DevTools opens, with the
Console open in main toolbar.
The webpage has already populated the Console with output.
3. In the Console, click the expander triangles.
console.table4. Click the expander triangles. Displaying data with  makes the data easier to read:

Enter5. Copy and paste the above code listing into the Console, and then press .
Output is displayed in the Console, below the code that you entered.
console.tableThe output of  has a table format. The output has a table format not only when the output is displayed in the Console, but also, if you copy and paste a table into Microsoft Excel, Microsoft Word, or any other product that supports tabular data, the structure of the output remains intact.
 Specify an array of columns for each property, for readability 
console.table() method also allows you to specify an ArrayIf the data has named parameters, the  of columns
for each property to display as a second parameter. The following example shows how to specify an array of columns that is more readable:
 Exam ple c ode 
This code is from the same demo webpage as above.
// get all the h1, p and script elements
let contentElements = document.querySelectorAll(':is(h1,p,script)');
// show the elements as an unfiltered table console.table(contentElements) // show only relevant columns
console.table(contentElements,['nodeName', 'innerText', 'offsetHeight'])console.table()This code filters the information that the  method displays.
The code provides an array of properties to display, as a second parameter:

Enter1. Copy and paste the above code listing into the Console, and then press .
Output is displayed in the Console, below the code that you entered.
 Log statements vs. breakpoint debugging and Live Expressions 
logconsole.log() request. Released products shouldn't use any logYou may be tempted to use the  methods as your main means to debug webpages, because log methods are simple to use. Consider the result of any statement that was used for debugging, because it could reveal inside information to people. And the noise created in the Console is overwhelming.
logInstead of  statements, try using Breakpoint Debugging or Live Expressions. You may find that your workflows are more effective and you get better results.
 
 Run JavaScript in the Console
 	6/21/2022 • 3 minutes to read • Edit OnlineYou can enter any JavaScript expression, statement, or code snippet in the Console, and it runs immediately and interactively as you type. This is possible because the Console tool in DevTools is a REPL environment. REPL stands for Read, Evaluate, Print, and Loop.
The Console:
1. Reads the JavaScript that you type into it.
2. Evaluates your code.
3. Prints out the result of your expression.
4. Loops back to the first step.
To enter JavaScript statements and expressions interactively in the Console:
Ctrl+Shift+JCommand+Option+J1. Right-click in a webpage and then select Inspect. DevTools opens. Or, press  (Windows, Linux) or  (macOS), to directly open the DevTools console.
Esc2. If necessary, click in DevTools to give it focus, and then press  to open the Console.
2+2, without pressing Enter3. Click in the Console, and then type .
4 on the next line while you type. The Eager evaluationThe Console immediately displays the result feature helps you write valid JavaScript. The Console displays the result while you type, regardless of whether your JavaScript is correct, and regardless of whether a valid result exists.

Enter4. When you press , the Console runs the JavaScript command (expression or statement), displays the result, and then moves the cursor down to allow you to enter the next JavaScript command.

 Autocompletion to write complex expressions
The Console helps you write complex JavaScript using autocompletion. This feature is a great way to learn about JavaScript methods that you didn't know of before.
To try autocompletion while writing multi-part expressions:
doc1. Type .
document2. Press the arrow keys to highlight  on the dropdown menu.
Tab to select document3. Press .
.bo4. Type .
Tab to select document.body5. Press .
.6. Type another  to get a large list of possible properties and methods available on the body of the current webpage.

 Console history
Up ArrowAs with many other command-line environments, a history of the commands that you entered is available for reuse. Press  to display the commands that you entered previously.
Similarly, autocompletion keeps a history of the commands you previously typed. You can type the first few letters of earlier commands, and your previous choices appear in a text box.
$_Also, the Console also offers quite a few utility methods that make your life easier. For example,  always contains the result of the last expression you ran in the Console.

 Multiline edits
By default, the Console only gives you one line to write your JavaScript expression. You code runs when you
Enter. The one line limitation may frustrate you. To work around the 1-line limitation, press Shiftpress +
Enter instead of Enter. In the following example, the value displayed is the result of all the lines (statements)
run in order:

If you start a multi-line statement in the Console, the code block is automatically recognized and indented. For example, if you start a block statement, by entering a curly brace, the next line is automatically indented:

 Network requests using top-level await()
Other than in your own scripts, Console supports top level await to run arbitrary asynchronous JavaScript in it.
fetch API without wrapping the awaitFor example, use the  statement with an async function.
To get the last 50 issues that were filed on the Microsoft Edge Developer Tools for Visual Studio Code GitHub repo:
1. In DevTools, open the Console.
2. Copy and paste the following code snippet to get an object that contains 10 entries:
await ( await fetch(
'https://api.github.com/repos/microsoft/vscode-edge-devtools/issues?state=all&per_page=50&page=1' )).json();

The 10 entries are hard to recognize, since a lot of information is displayed.
console.table()3. Optionally, use the  log method to only receive the information in which you're interested:

copy()To reuse the data returned from an expression, use the  utility method of the Console.
4. Paste the following code. It sends the request and copies the data from the response to the clipboard:
copy(await (await fetch(
'https://api.github.com/repos/microsoft/vscode-edge-devtools/issues?state=all&per_page=50&page=1' )).json())
The Console is a great way to practice JavaScript and to do some quick calculations. The real power is the fact that you have access to the window object. See Interact with the DOM using the Console.

 
 Console object API Reference
 	6/21/2022 • 3 minutes to read • Edit OnlineconsoleUse the  object's methods to write messages to the Console from your JavaScript.
consoleYou can also enter these methods into the Console. For example, in the Console, to enter a  method that takes a variable:
1. In the Sources tool, in the Debugger, set a breakpoint in your JavaScript code.
2. In the Debugger, step through your code.
console3. When you are in a valid context so that the desired variable is in-scope, enter a method of the object into the Console tool. The result is displayed in the Console.

 assert
expression evaluates to falseWrites an error to the Console when .
console.assert(expression, object)
ErrorLog level:  Example 
const x = 5; const y = 3;
const reason = 'x is expected to be less than y'; console.assert(x < y, {x, y, reason}); Output 


 clear
Clears the Console.
If Preserve Log is turned on, the clear method is turned off.
console.clear()
 See also 
 Clear the Console

 count
labelWrites the number of times that the count method has been invoked at the same line and with the same . Use the countReset method to reset the count.
console.count([label])
InfoLog level: 
 Example 
console.count(); console.count('coffee'); console.count(); console.count();
 Output 


 countReset
Resets a count.
console.countReset([label])
 Example 
console.countReset(); console.countReset('coffee');

 debug
Identical to the log method, except different log level.
console.debug(object [, object, ...])
VerboseLog level: 
 Example 
console.debug('debug');
 Output 



 dir
Prints a JSON representation of the specified object.
console.dir(object)
InfoLog level: 
Example 
console.dir(document.head);


 dirxml
nodePrints an XML representation of the descendants of .
console.dirxml(node)
InfoLog level: 
Example 
console.dirxml(document);


 error
objectPrints the  to the Console, formats it as an error, and includes a stack trace.
console.error(object [, object, ...])
ErrorLog level: 
Example 
console.error("I'm sorry, Dave.  I'm afraid I can't do that.");



 group
Visually groups messages together until the groupEnd method is used. Use the groupCollapsed method to collapse the group when it initially logs to the Console.
console.group(label)
 Example 
const label = 'Adolescent Irradiated Espionage Tortoises'; console.group(label); console.info('Leo'); console.info('Mike'); console.info('Don'); console.info('Raph'); console.groupEnd(label);
 Output 


 groupCollapsed
Identical to the log method, except the group is initially collapsed when it logs to the Console.
console.groupCollapsed(label)

 groupEnd
Stops visually grouping messages. See the group method.
console.groupEnd(label)

 info
Identical to the log method.
console.info(object [, object, ...])
InfoLog level: 
 Example 
console.info('info');
 Output 


 log
Prints a message to the Console.
console.log(object [, object, ...])
InfoLog level: 
 Example 
console.log('log');
 Output 


 table
Logs an array of objects as a table.
console.table(array)
InfoLog level:  Example 
console.table([
      {
         first: 'René',          last: 'Magritte',
      },       {
         first: 'Chaim',          last: 'Soutine',          birthday: '18930113',
      },       {
         first: 'Henri',          last: 'Matisse',
      }
]); Output 


 time
Starts a new timer. Use the timeEnd method to stop the timer and print the elapsed time to the Console.
console.time([label])
 Example 
console.time();
for (var i = 0; i < 100000; i++) {       let square = i ** 2;
} console.timeEnd();
 Output 


 timeEnd
Stops a timer. For more information, see the time method.
console.timeEnd([label])
InfoLog level: 

 trace
Prints a stack trace to the Console.
console.trace()
InfoLog level: 
 Example 
const first = () => { second(); }; const second = () => { third(); }; const third = () => { fourth(); }; const fourth = () => { console.trace(); }; first();
 Output 


 warn
Prints a warning to the Console.
console.warn(object [, object, ...])
WarningLog level: 
 Example 
console.warn('warn');
 Output 


 See also
consoledebug()MDN Web Docs >  object Reference - Has a summary overview of the methods, and has one page per method, with additional syntax details.
Log messages in the Console tool - An interactive introduction.
Console tool utility functions and selectors - Console-only utility methods, such as  and 
monitorEvents().
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Console tool utility functions and selectors
 	6/21/2022 • 11 minutes to read • Edit OnlineThe Console Utilities API contains a collection of convenience functions for performing common tasks, such as:
Selecting and inspecting DOM elements.
Displaying data in a readable format.
Stopping and starting the profiler. Monitoring DOM events.
These commands only work by entering them directly into the DevTools Console; you can't call these commands from scripts.
 Summary
FUNCTIONDESCRIPTION$_Returns the value of the most recently evaluated expression.$0 - $4Returns a recently selected element or JavaScript object.$(selector)Query selector; returns the reference to the first DOM element with the specified CSS selector, like 
document.querySelector().$$(selector, [startNode])Query selector all; returns an array of elements that match the specified CSS selector, like 
document.querySelectorAll().$x(path, [startNode])Returns an array of DOM elements that match the specified XPath expression.clear()Clears the console of its history.copy(object)Copies a string representation of the specified object to the clipboard.debug(function)When the specified function is called, the debugger is invoked and breaks inside the function on the Sources panel.dir(object)console.dir()Displays an object-style listing of all of the properties for the specified object, like .dirxml(object)console.dirxml()Prints an XML representation of the specified object, as displayed in the Elements tool, like .inspect(object/function)Opens and selects the specified DOM element in the
Elements tool, or the specified JavaScript heap object in the Memory tool.FUNCTIONDESCRIPTIONgetEventListeners(object)Returns the event listeners that are registered on the specified object.keys(object)Returns an array containing the names of the properties belonging to the specified object.monitor(function)Logs a message to the console that indicates the function name, along with the arguments passed to the function as part of a request.monitorEvents(object[, events])When one of the specified events occurs on the specified object, the event object is logged to the console.profile([name])Starts a JavaScript CPU profiling session with an optional name.profileEnd([name])Completes a JavaScript CPU profiling session and displays the results in the Memory tool.queryObjects(Constructor)Returns an array of the objects that were created by the specified constructor.table(data[, columns])Logs object data, formatted as a table with column headings, for the specified data object.undebug(function)Stops the debug of the specified function, so that when the function is requested, the debugger is no longer invoked.unmonitor(function)Stops the monitoring of the specified function.unmonitorEvents(object[, events])Stops monitoring events for the specified object and events.values(object)Returns an array containing the values of all properties belonging to the specified object.
 Recently evaluated expression
Returns the value of the most recently evaluated expression.  Syntax 
$_
 Example 
2+2) is evaluated. The $_In the following figure, a simple expression ( property is then evaluated, which contains the same value:

$_.length$_ now becomes the latest evaluated expression, 4In the following figure, the evaluated expression initially contains an array of names. Evaluating  to find the length of the array, the value stored in :


 Recently selected element or JavaScript object
Returns a recently selected element or JavaScript object.
$0 returns the most recently selected element or JavaScript object, $1 returns the second most recently
$0, $1, $2, $3, and $4selected one, and so on. The  commands work as a historical reference to the last five
DOM elements that were inspected within the Elements tool, or the last five JavaScript heap objects that were selected in the Memory tool.
  
Syntax
$0
 Example 
img element is selected in the Elements tool. In the Console drawer, $0In the following figure, an  has been evaluated and displays the same element:

$0$1The following image shows a different element selected in the same webpage. The  now refers to the newly selected element, while  returns the previously selected element:


 Query selector
Query selector; returns the reference to the first DOM element with the specified CSS selector, like 
document.querySelector().
This function is an alias for the document.querySelector() function.  Syntax 
$(selector, [startNode])
 Example 
$('img') returns a reference to the first <img>In the following figure,  element in the webpage:

Right-click the returned result and then select Reveal in Elements Panel to find it in the DOM, or Scroll in to View to show it on the page.
 Example 
srcThe following example returns a reference to the currently selected element and displays its  property:
$('img').src
Result:

startNodedocumentThis function also supports a second parameter, , that specifies an element or node from which to search for elements. The default value of the parameter is .  Example 
$('img', document.querySelector('title--image')).src
img element after the title--image element is found, and the src property of the imgResult: the first element is returned:

NOTE
$, the functionality is overwritten, and $If you are using a library such as jQuery that uses  corresponds to the implementation from that library.
 Query selector all
Query selector all; returns an array of elements that match the specified CSS selector, like 
document.querySelectorAll().
This function is equivalent to document.querySelectorAll().  Syntax 
$$(selector, [startNode])
 Example 
$$() creates an array of all <img>srcIn the following example,  elements in the current webpage, and displays the value of the  property for each element:
var images = $$('img'); for (each in images) {
    console.log(images[each].src); }Result:

startNodedocumentThis query selector function also supports a second parameter, , that specifies an element or node from which to search for elements. The default value of the parameter is .
 Example 
$$() to create an array of all <img>The following, modified version of the previous example uses  elements that appear in the current webpage after the selected node:
var images = $$('img', document.querySelector(`title--image`)); for (each in images) {
   console.log(images[each].src); }$$() selects all images that appear after the specified <div>Here's the result.  element in the webpage, and displays the sources:

NOTE
Shift+EnterPress  in the Console to start a new line without running the script.
 XPath
Returns an array of DOM elements that match the specified XPath expression.
 Syntax 
$x(path, [startNode])
 Example 
<p>In the following example, all of the  elements on the webpage are returned:
$x("//p")
Result:

 Example 
<p> elements that contain <a>In the following example, all of the  elements are returned:
$x("//p[a]")
Result:

$x(path) has an optional second parameter, startNodeSimilar to the other selector commands, , that specifies an element or node from which to search for elements:


 clear
Clears the console of its history.
 Syntax 
clear()
 Example 
clear()

 copy
Copies a string representation of the specified object to the clipboard.
 Syntax 
copy(object)
 Example 
copy($0)

 debug
When the specified function is called, the debugger is invoked and breaks inside the function on the Sources panel.
After the debugger is paused, you can then step through the code and debug it.
 Syntax 
debug(function)
NOTE
debug()The Chromium issue #1050237 is tracking a bug with the  function. If you encounter the issue, try using breakpoints instead. Example 
debug("debug");
Result:

undebug(function)Use  to stop breaking on the function, or use the UI to turn off all breakpoints.
For more information on breakpoints, see Pause your code with breakpoints.

 dir
console.dir()Displays an object-style listing of all of the properties for the specified object, like .
This function is an alias for console.dir().
  
Syntax
dir(object)
document.head in the Console to display the HTML between the <head> and </head>Evaluate  tags.
 Example 
console.dir()In the following example, an object-style listing is displayed after using  in the Console:
document.head; dir(document.head);
Result:

For more information, see console.dir() in the Console API.

 dirxml
console.dirxml()Prints an XML representation of the specified object, as displayed in the Elements tool, like .
This function is equivalent to console.dirxml().
 Syntax 
dirxml(object)

 inspect
Opens and selects the specified DOM element in the Elements tool, or the specified JavaScript heap object in the Memory tool.
For a DOM element, this function opens and selects the specified DOM element in the Elements tool.
For a JavaScript heap object, this function opens the specified JavaScript heap object in the Memory tool.
 Syntax 
inspect(object/function)
 Example 
document.bodyIn the following example, the  opens in the Elements tool:
inspect(document.body);
Result:

When passing a function to inspect, the function opens the webpage in the Sources tool for you to inspect.

 getEventListeners
Returns the event listeners that are registered on the specified object.
click or keydownThe return value is an object that contains an array for each registered event type (such as ). The members of each array are objects that describe the listener registered for each type.
 Syntax 
getEventListeners(object)
 Example 
documentIn the following example, all of the event listeners that are registered on the  object are listed:
getEventListeners(document);
Result:

If more than one listener is registered on the specified object, then the array contains a member for each listener.
document element for the clickIn the following figure, two event listeners are registered on the  event:

You can further expand each of the following objects to explore their properties. Here's an expanded view of the listener object:


 keys
Returns an array containing the names of the properties belonging to the specified object.
values()To get the associated values of the same properties, use .
 Syntax 
keys(object)
 Example 
Suppose your application defines the following object:
var player1 = {"name": "Ted", "level": 42}
player1keys(player1) and values(player1)In the following code, the result assumes  was defined in the global namespace (for simplicity) before you type  in the console:
keys(player1) values(player1)
Result:


 monitor
Logs a message to the console that indicates the function name, along with the arguments passed to the function as part of a request.
 Syntax 
monitor(function)
 Example 
function sum(x, y) {     return x + y;
} monitor(sum);
Result:

unmonitor(function)To end monitoring, use .

 monitorEvents
When one of the specified events occurs on the specified object, the event object is logged to the console.
You can specify a single event to monitor, an array of events, or one of the generic events types that are mapped to a predefined collection of events.
 Syntax 
monitorEvents(object[, events])
 Example 
The following code monitors all resize events on the window object:
monitorEvents(window, "resize");
Result:

 Example 
resize and scrollThe following code defines an array to monitor both  events on the window object:
monitorEvents(window, ["resize", "scroll"]);
 Specifying an event type 
You can also specify one of the available types of events, strings that map to predefined sets of events. The following table shows the available event types and the associated event mappings:
EVENT TYPECORRESPONDING MAPPED EVENTS
mouse"click", "dblclick", "mousedown", "mousemove", "mouseout",
"mouseover", "mouseup", "mousewheel"
key"keydown", "keypress", "keyup", "textInput"
touch"touchcancel", "touchend", "touchmove", "touchstart"
control"blur", "change", "focus", "reset", "resize", "scroll", "select",
"submit", "zoom" Example 
key event type corresponding to keyIn the following code, the  events on an input text field are currently selected in the Elements tool:
monitorEvents($0, "key");
Here's the sample output after typing a character in the text field:


 profile
Starts a JavaScript CPU profiling session with an optional name.
To complete the profile and display the results in the Memory tool, call profileEnd().
 Syntax 
profile([name])
 Example 
profile()To start profiling, call :
profile("My profile")
To stop profiling and display the results in the Memory tool, call profileEnd().
Profiles can also be nested:
profile('A'); profile('B'); profileEnd('A'); profileEnd('B');
The result is the same, regardless of the order. The result appears as a Heap Snapshot in the Memory tool, with grouped profiles:

NOTE
Multiple CPU profiles can operate at the same time, and you aren't required to close-out each profile in creation order.

 profileEnd
Completes a JavaScript CPU profiling session and displays the results in the Memory tool.
To call this function, you must be running the profile() function.
 Syntax 
profileEnd([name])
 Example 
1. Run the profile() function to start profiling.
profileEnd()2. Run the  function to stop profiling and display the results in the Memory tool:
profileEnd("My profile")
For more information, see profile, above.

 queryObjects
Returns an array of the objects that were created by the specified constructor.
queryObjects()The scope of  is the currently selected runtime context in the Console.
 Syntax 
queryObjects(Constructor)
 Example 
queryObjects(promise) returns all instances of PromisequeryObjects(HTMLElement)queryObjects(functionName) returns all objects that were instantiated using new functionName().
 returns all HTML elements.
.

 table
Logs object data, formatted as a table with column headings, for the specified data object.
For example, using this function, you can display a list of people's names as a table, in the Console.
 Syntax 
table(data[, columns])
 Example 
The following code displays a list of names using a table in the console, with the column headings defaulting to the variable names:
var names = {     0: {
        firstName:  "John",         lastName:  "Smith"
    },     1:  {
        firstName:  "Jane",         lastName:  "Doe"
    } };
table(names);Result:


 undebug
Stops the debug of the specified function, so that when the function is requested, the debugger is no longer invoked.
 Syntax 
undebug(function)
 Example 
undebug(getData);

 unmonitor
Stops the monitoring of the specified function.
This function is used together with monitor().
 Syntax 
unmonitor(function)
 Example 
unmonitor(getData);

 unmonitorEvents
Stops monitoring events for the specified object and events.
 Syntax 
unmonitorEvents(object[, events])
 Example 
windowThe following code stops all event monitoring on the  object:
unmonitorEvents(window);
mouse events on the currently selected element, and then stops monitoring mousemoveYou can also selectively stop monitoring specific events on an object. For example, the following code starts monitoring all  events
(perhaps to reduce noise in the console output):
monitorEvents($0, "mouse"); unmonitorEvents($0, "mousemove");

 values
Returns an array containing the values of all properties belonging to the specified object.
 Syntax 
values(object)
 Example 
values(object);

 See also
console.* functions, such as console.log() and console.error()Console features reference
Console object API Reference - .
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 
Monitor changes in JavaScript using Live Expressions
 	6/21/2022 • 3 minutes to read • Edit OnlineLive Expressions are a great way to monitor JavaScript expressions that change a lot. Instead of generating many Console messages to read and navigate, you can pin your specific JavaScript expressions to the top of the Console.
 Add a new live expression
To add a live expression:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. In DevTools, open the Console.
4. In the Console, click the Create live expression () icon next to the Filter text box.
A text box opens:

document.activeElement5. Enter the JavaScript expression  into the text box. A Live Expression can be any valid JavaScript expression.
Ctrl+Enter (Windows, Linux) or Command+Enter6. To save the expression, press  (macOS). Or, click outside of the Live Expression text box.
bodyThe expression is now live, and displays  as the result:

Tab and Shift+Tab7. Click different parts of the webpage, or press  to move around in the webpage, the
document.activeElement Live Expression value changes.
TabIn the accessibility-testing demo webpage, when you  to put focus on the Other text box in the
input#freedonation.smallinputDonation section, the Live Expression value reads .
8. In that same window, go to the webpage Overview of DevTools, and then click the Docs button in the upper left.
button.nav-bar-button.focus-visibleThe Live Expression value changes to :

9. To change the value again, open and click the Search text box on the webpage.
The Live Expression value changes to 
input#site-search-input.autocomplete-input.input.is-small.focus-visible:

 Remove Live Expressions
A Live Expression is available as long as you keep it active.
To get rid of a Live Expression, click the 
 Replace Console logging with Live Expressions
You can create as many Live Expressions as you want, and persist each Live Expression across browser sessions and windows. Live Expressions are a way to cut down on noise in your debugging workflow.
 Using Console logging to display mouse coordinates 
To monitor the mouse movement in the current webpage:
1. Open the demo webpage Logging Mouse Movement demo in a new window or tab.
Ctrl+Shift+J (Windows, Linux) or Command+Option+J2. Press  (macOS). The Console tool opens in
DevTools, next to the demo webpage.
3. Move your mouse around over the rendered demo webpage.
Many log messages are output, displayed in the Console:

The large amount of information slows down your debugging process, and makes it hard to see the changes that you're trying to monitor. As the Console displays more messages when you move your mouse, the values that you want to see scroll off the screen.
 Using Live Expressions to display mouse coordinates 
Use Live Expressions to monitor the mouse movement in the current webpage, without relying on verbose log messages.
To use Live Expressions to avoid excessive Console log messages:
1. Open the demo webpage Mouse movement without logging demo in a new window or tab.
Ctrl+Shift+J (Windows, Linux) or Command+Option+J2. Press  (macOS). The Console tool opens in
DevTools, next to the demo webpage.
3. Move your mouse around. No log messages are output.
x, and the expression yEnter two Live Expressions: the expression , as follows:
4. In the Console tool, click the Create live expression () icon next to the Filter text box.
xy5. Enter the JavaScript expression  into the text box, and then click outside of the Live Expression text box. Repeat for . If needed, see Add a new live expression, above.
6. Move your mouse around.
x and yNow in the DevTools Console, the Live Expression value is updated, below the Live Expression, showing the  coordinates of the mouse:

When you use Live Expressions, you always get the information on the same part of your screen, and keep Console logs for values that don't change as much.
Live Expressions run exclusively on your computer, and you don't need to change anything in your code to display the expression and its result. Live Expressions are a great way to ensure that you only display the information that you want to debug. Live Expressions also help you limit the noise on your users' computers.

 
 
Fix JavaScript errors that are reported in the Console
 	6/21/2022 • 6 minutes to read • Edit OnlineThis article walks you through six demo pages to demonstrate resolving JavaScript errors that are reported in the Console.
 Fix JavaScript errors
The first experience you have with the Console is likely to be errors in scripts.
 Demo page: JavaScript error reported in the Console tool 
1. Open the demo webpage JavaScript error reported in the Console tool in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
In the top right of DevTools, the Open Console to view errors button displays an error about the webpage.
3. Click the Open Console to view errors button on the top right. In DevTools, the Console gives you more information about the error:

Many error messages in the Console have a Search for this message on the Web button, shown as a magnifying glass. This feature was introduced in Microsoft Edge version 94. (For more information, see Search the web for a Console error message string.)
error.htmlThe information in this error message suggests that the error is on line 16 of the  file.
error.html:164. Click the  link on the right of the error message in the Console. The Sources tool opens and highlights the line of code with the error:

h2 element in the document and paint a red border around it. But no h2The script tries to get the first element exists, so the script fails.
 Find and debug network issues
The Console also reports network errors.
 Demo page: Network error reported in Console 
1. Open the demo webpage Network error reported in Console in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.

loadingThe table displays , but nothing changes on the webpage, because the data is never retrieved. In the Console, the following two errors occurred:
GETUncaught (in promise) TypeError: data.forEach is not a functionA network error that starts with  HTTP method followed by a URI.
An  error.
network-error.html:403. Click the link to the webpage and line of code where the error occurs, to open the Sources tool. That is, click the  link in the Console:

error (xThe Sources tool opens. The problematic line of code is highlighted and followed by an ) button.
xFailed to load resource: the server responded with a status of 404 ()4. Click the error () button. The message  appears.

This error informs you that the requested URL isn't found.
5. Open the Network tool, as follows: open the Console, and then click the URI that's associated with the error.
The Console displays an HTTP status code of the error after a resource isn't loaded:

The Network tool displays more information about the failed request:

6. Inspect the headers in the Network tool to get more insight:

//) occur in the requested URI after the word reposWhat was the problem? Two slash characters (.
/7. Open the Sources tool and inspect line 26. A trailing slash character () occurs at the end of the base URI. The Sources tool displays the line of code with the error:

 Viewing the resulting page when there are no errors in the Console 
Next, we'll look at the resulting page when there are no errors in the Console.
 Demo page: Fixed network error reported in Console 
1. Open the demo webpage Fixed network error reported in Console in a new window or tab.
The example without any errors loads information from GitHub and displays it:

 Demo page: Network error reporting in Console and UI 
Use defensive coding techniques to avoid the previous user experiences. Make sure your code catches errors and displays each error in the Console, as follows:
1. Open the demo webpage Network error reporting in Console and UI in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
The example webpage demonstrates these practices:
Provide a UI to the user to indicate that something went wrong.
In the Console, provide helpful information about the Network error from your code.
The example catches and reports errors:

handleErrorsthrow ErrorThe following code in the demo catches and reports errors using the  method, specifically the  line:
const handleErrors = (response) => {    if (!response.ok) {
      let message = 'Could not load the information'       document.querySelector('tbody').innerHTML = `       <tr><td colspan=3>Error ${message}</td></tr>
      `;
      throw Error(response.status + ' ' + response.statusText);
   }
   return response;
}; Create errors and traces in the Console
throw ErrorBesides the  example in the previous section, you can also create different errors and trace problems in the Console.
 Demo page: Creating error reports and assertions in Console To display two created error messages in the Console:
1. Open the demo page Creating error reports and assertions in Console in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
Error messages appear in the Console:

The demo page uses the following code:
function first(name) { second(name); } function second(name) { third(name); } function third(name) {     if (!name) {
        console.error(`Name isn't defined :(`)
    } else {
        console.assert(             name.length <= 8,
            `"${name} is not less than eight letters"`         );
    } } first(); first('Console');
first('Microsoft Edge Canary');There are three functions that request each other in succession:

first()
second()
third()name argument to the other. In the third() function, you check if the nameEach function sends a 
nameassert() method to check if the nameargument exists and if it doesn't, you log an error that name isn't defined. If  is defined, you use the  argument is fewer than eight letters long.
first()You request the  function three times, with the following parameters:
console.error() method in the third()Console as a parameter to the first() function doesn't cause an error because nameNo argument that triggers the  function.
The term argument exists and is shorter than eight letters.
Microsoft Edge Canary as a parameter to first()	 The phrase 	 function causes the 
console.assert() method to report an error, because the parameter is longer than eight letters.
console.assert()if{}The demo uses the  method to create conditional error reports. The following two examples have the same result, but one needs an extra  statement:
let x = 20;
if (x < 40) { console.error(`${x} is too small`) }; console.assert(x >= 40, `${x} is too small`)
The second and third lines of the code perform the same test. Because the assertion needs to record a negative result:
x < 40 in the ifx >= 40You test for  case.
You test for  for the assertion.
 Demo page: Creating traces in Console 
console.trace()If you aren't sure which function requests another function, use the  method to track which functions are requested in order to get to the current function.
To display the trace in the Console:
1. Open the demo page Creating traces in Console in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
The page uses this code:
function here() {there()} function there() {everywhere()} function everywhere() {    console.trace();
} here(); there();here() is named there() and then everywhere()everywhere()The result is a trace to display that , and in the second example to display that it's named .
Here's the trace that's produced, in the Console:

 See also
 Console overview - General use of the Console to display and resolve error messages.
 
 Interact with the DOM using the Console
 	6/21/2022 • 6 minutes to read • Edit OnlineThe Console tool is a great way to interact with the webpage in the browser. The Console is like a scriptenvironment version of the Inspect tool.
 Read from the DOM
To reference the header of the webpage:
Ctrl+Shift+J1. Open the DevTools Console. To do this from a webpage, you can press  (Windows,
Command+Option+JLinux) or  (macOS).
Enter2. Type or paste the following code into the Console, and then press :
document.querySelector('header')

<header> element, or press Shift+Tab3. In the Console, hover over the resulting HTML . In the rendered webpage, DevTools highlights the header:

 Manipulate the DOM
You can manipulate the webpage from the Console, as follows. In this example, you set a value in the DOM by using the Console, to affect the webpage styling: you add a green border around the header.
Ctrl+Shift+J (Windows, Linux) or Command+Option+J1. Press  (macOS). The Console opens in
DevTools, next to the present webpage.
2. Paste the following code into the Console:
document.querySelector('header').style.border = '2em solid green'
A green border appears around the header:

 Get a direct reference an element 
Depending on the complexity of the webpage, it can be daunting to find the right element to manipulate. But you can use the Inspect tool to help you. Suppose you want to manipulate the Documentation region within the header of the rendered page:

To get a direct reference to the element that you want to manipulate:
1. In DevTools, click the Inspect tool, and then in the rendered webpage, hover over the element:

2. Click the element on the page, and DevTools jumps to the Elements tool.
...3. Click the  menu next to the element in the DOM tree:

4. Right-click the element in the DOM tree and then select Copy > Copy JS Path.

Enter5. In the Console, paste the JavaScript path that you copied, but don't press  yet.
My Playground. To do that, add .textContent = "My Playground"6. Change the text of the link to  to the
JavaScript path that you previously pasted:

Use any JavaScript DOM manipulations you want in the Console. To make it more convenient, the Console comes with a few helper utility methods.
 Helpful Console utility methods
console.log()Many convenience methods and shortcuts are available to you as Console Utilities. Some of the methods are incredibly powerful and are much more effective than using  statements.
 The power of the $ functions 
$The  has special powers in Console, and you may remember that from jQuery.
$_ stores the result of the last command. So, if you type 2+2 and press Enter, and then type $_		, the
4Console displays .
$0 to $4 is a stack of the last inspected elements. $0		 is always the newest one. So in the earlier
$0.textContent = "My Playground"example, you just select the element in the Inspect tool and type  to get the same effect.
$x()$() and $$() are shorter versions of for document.querySelector() and document.querySelectorAll() allows you to select DOM elements using XPATH.
.
 Example: Extracting all links from a page, as a sortable table 
1. Enter the following code, which retrieves all the links in the webpage, and displays the links as a sortable table to copy and paste (for example, into Excel):
console.table($$('a'),['href','text']);
$$('a') is short for document.querySelectorAll('a').

However, suppose you don't want to display all the information, but you want to grab it as data and then select only some of the data.
$$('a')The  shortcut helps with that: it selects the anchor links and all of the properties for each anchor link. But the problem is that you only want the anchor links and the related text, not all the properties of the anchor links.

$$NodeList like document.querySelectorAll(), the $$ shortcut gives you all of the ArrayTo solve that problem, the  shortcut has an interesting extra feature: instead of returning a pure  methods,
map()including .
map() method of the Array2. Use the  object to reduce the information to what you need:
$$('a').map(a => {
   return {url: a.href, text: a.innerText}
})
Array of all the links, as objects with url and textThe above code returns an  properties.

You aren't done yet; several links are internal links to the webpage or have empty text.
filter3. Use the  method to get rid of the internal links:
$$('a').map(a => {
   return {text: a.innerText, url: a.href}
}).filter(a => {
   return a.text !== '' && !a.url.match('docs.microsoft.com') })

By manipulating the DOM through issuing statements in the Console, you can change these elements in the rendered webpage.
4. For example, enter the following code, which adds a green border around all external links:
$$('a[href^="https://"]').forEach(    a => a.style.border = '1px solid green' )

Instead of writing complex JavaScript to filter results, use the power of CSS selectors.
 Creating a table 
src and altTo create a table of the  information for all images on the webpage that aren't inline images:
1. Open the Console.
Enter2. Paste the following code into the Console, and then press :
console.table($$('img:not([src^=data])'), ['src','alt'])

 Example: Getting all page headings and anchor URLs 
Ready for an even more complex example? HTML webpages that are generated from Markdown tagging, like
# New featuresthe present article, have automatic ID values for each heading, to allow you to deep-link directly to that section of the webpage. For example, a  h1 heading in the Markdown source file becomes 
<h1 id="new-features">New features</h1> in the HTML file.
To list all of the automatic headings to copy and paste:
1. Open the Console.
2. Copy and paste the following code:
let out = '';
$$('#main [id]').filter(
   elm => {return elm.nodeName.startsWith('H')}
).forEach(elm => {
   out += elm.innerText + "\n" +          document.location.href + '#' +          elm.id + "\n";
}); console.log(out);
The result is text that contains content for each heading followed by the full URL that points to it.

  
Clean up with clear and copy
When developing in the Console, things can get messy. It can be difficult to select results to copy and paste. The following two utility methods help you:
copy() copies whatever you give it to the clipboard. The copy()		 method is especially useful when you
$_mix it with , which copies the last result.
clear()		 clears the Console.
 Read and monitor events 
Two other interesting utility methods of Console deal with event handling:
getEventListeners(node)monitorEvents(node, events) lists all the event listeners of a node.
 monitors and logs the events that happen on a node.
To list all of the event listeners that are assigned to the first form in the webpage:
1. In DevTools, open the Console.
2. Type or paste the following code into the Console:
getEventListeners($('form'));

When you monitor, you to get a notification in the Console every time something changes to the specified elements. You define the events you want to listen to as a second parameter. It's important for you to define the events that you want to monitor, otherwise any event happening to the element is reported.
To get a notification in the Console every time you scroll, resize the window, or when the user types in the search form:
1. In DevTools, open the Console.
2. Paste the following code into the Console:
monitorEvents(window, ['resize', 'scroll']); monitorEvents($0, 'keyup');

3. To log any key action on the currently selected element, focus on the search form in the header and press some keys.

4. To stop logging, remove the monitoring you set, enter the following code into the Console:
unmonitorEvents(window, ['resize', 'scroll']); unmonitorEvents($0, 'key');
 Reuse DOM manipulation scripts
You may find it useful to manipulate the DOM from the Console. You might soon run into the limitations of the Console as a development platform. The good news is that the Sources tool in DevTools offers a fully featured development environment. In the Sources tool, you can:
Store your scripts for the Console as snippets; see Run snippets of JavaScript on any webpage.
Run the scripts in a webpage by using a keyboard shortcut or the editor.
 See also
Log messages in the Console tool
Run JavaScript in the Console
 
 Filter Console messages
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the filter options of the DevTools Console to reduce the noise from excessive console log messages, to better see the type of log messages that you're looking for.
When you go to various webpages, you may find that the Console is flooded with all kinds of information.
Often the information isn't relevant to you, such as information about the page that another developer logged. Or you might see logged information about violations and warnings about the performance of the current site, that you aren't able to change.
You can filter console log messages in various ways:
Filter by log level.
Filter by text.
Filter by regular expression. Filter by message source.
 Filter by log level
console object has a severity level attached to it. The severity levels are Verbose, InfoEach method of the , 
Warning, or Error. Display the severity levels in the API documentation. For example, console.log()Info-level message, but console.error() is an Error is an -level message.
To filter messages in the Console, use the Log Level dropdown menu. You may toggle the state of each level. To turn off each level, remove the checkmark next to each.

Since no filter is applied, the following figure displays dozens of messages. Next, reduce and manage the number of messages.

WarningsTo hide all the Warning-level messages to cut down on the noise, click the Log Levels dropdown and then clear the  level.

 Filter by text
To see more detail, to filter messages using text, type a string into the Filter text box. For example, type block into the box to only display your messages about the browser blocking resources from loading.

 Filter by regular expression
/^Tracking/TrackingRegular expressions are a powerful way to filter messages. For example, type  into the Filter text box to only display messages that start with the term . If you're unfamiliar with regular expressions, RegExr.com is a great resource to learn about using regular expressions.

 Filter by message source
You can define what kind of messages you want to display, and where each message originated, by using the Sidebar of the Console.
1. Click the Show console sidebar button:

When the Sidebar is open, you can display the overall number of messages and where each originated.
All messages, User Messages, Errors, Warnings, Info, and VerboseThe options are .

2. Select any of the options to display only the messages of that type. For example, to display user messages, click the user messages option to display less noise.

3. To filter more and expand the message category, click the triangle icon next to the message category.

4. Individual sources are revealed and listed. Select a source, to display only messages that originate from that source:

 
 Sources tool overview
 	6/21/2022 • 21 minutes to read • Edit OnlineUse the Sources tool to view, modify, and debug front-end JavaScript code, and to inspect the resources that make up the current webpage.
Detailed contents:
The Navigator, Editor, and Debugger panes
Using the Navigator pane to select files
Using the Page tab to explore resources that construct the current webpage
Using the Filesystem tab to define a local Workspace
Using the Overrides tab to override server files with local files
Using the Content scripts tab for Microsoft Edge extensions
Using the Snippets tab to run JavaScript code snippets on any webpage Using the Command Menu to open files
Using the Editor pane to view or edit files
Editing a JavaScript file
Reformatting a minified JavaScript file with pretty-print
Mapping minified code to your source code to show readable code
Transformations from source code to compiled front-end code
Editing a CSS file
Editing an HTML file
Going to a line number or function
Displaying source files when using a different tool
Using the Debugger pane to debug JavaScript code
The basic approach to using a debugger
Advantages of the debugger's Watch and Scope over console.log
Debug from Visual Studio Code directly
Articles about debugging
 The Navigator, Editor, and Debugger panes
The Sources tool has three panes:
PANEACTIONSNavigator paneNavigate among the resources that are returned from the server to construct the current webpage. Select files, images, and other resources, and view their paths. Optionally, set up a local Workspace to save changes directly to source files.Editor paneView JavaScript, HTML, CSS, and other files that are returned from the server. Make experimental edits to JavaScript or CSS. Your changes are preserved until you refresh the page, or are preserved after page refresh if you save to a local file with Workspaces. When you use Workspaces or Overrides, you can edit HTML files as well.PANEACTIONSDebugger paneUse the JavaScript Debugger to set breakpoints, pause running JavaScript, and step through the code, including any edits you have made, while watching any JavaScript expressions you specify. Watch and manually change the values of variables that are in-scope for the current line of code.The following figure shows the Navigator pane highlighted with a red box in the upper left corner of DevTools, the Editor pane highlighted in the upper right, and the Debugger pane highlighted on the bottom. On the far left side is the main part of the browser window, showing the rendered webpage grayed-out because the debugger is paused on a breakpoint:

When DevTools is wide, the Debugger pane is placed on the right, and includes Scope and Watch:

To maximize the size of the Sources tool, undock DevTools into a separate window, and optionally move the DevTools window to a separate monitor. See Change DevTools placement (Undock, Dock to bottom, Dock to left).
To load the debugging demo webpage that's shown above, see The basic approach to using a debugger, below.
 Using the Navigator pane to select files
Use the Navigator pane (on the left) to navigate among the resources that are returned from the server to construct the current webpage. Select files, images, and other resources, and view their paths.

To access any hidden tabs of the Navigator pane, select  (More tabs).
The following subsections cover the Navigator pane:
Using the Page tab to explore resources that construct the current webpage
Using the Filesystem tab to define a local Workspace
Using the Overrides tab to override server files with local files
Using the Content scripts tab for Microsoft Edge extensions
Using the Snippets tab to run JavaScript code snippets on any page Using the Command Menu to open files
 Using the Page tab to explore resources that construct the current webpage 
Use the Page tab of the Navigator pane to explore the file system that's returned from the server to construct the current webpage. Select a JavaScript file to view, edit, and debug it. The Page tab lists all of the resources that the page has loaded.

To display a file in the Editor pane, select a file in the Page tab. For an image, a preview of the image is displayed.
To display the URL or path for a resource, hover over the resource.
To load a file into a new tab of the browser, or to display other actions, right-click on the file name.
 Icons in the Page tab 
The Page tab uses the following icons:
topThe window icon, along with the label , represents the main document frame, which is an HTML frame.
The cloud icon represents an origin.
The folder icon represents a directory. The page icon represents a resource.
 Group files by folder or as a flat list 
The Page tab displays files or resources grouped by server and directory, or as a flat list.
To change how resources are grouped:
1. Next to the tabs on the Navigator pane (on the left), select the ... (More options) button. A menu appears.
2. Select or clear the Group by folder option.
 Using the Filesystem tab to define a local Workspace 
Use the Filesystem tab of the Navigator pane to add files to a Workspace, so that changes you make in DevTools get saved to your local file system.
A file that's in a Workspace is indicated by a green dot next to the file name, throughout DevTools.

By default, when you edit a file in the Sources tool, your changes are discarded when you refresh the webpage. The Sources tool works with a copy of the front-end resources that are returned by the web server. When you modify these front-end files that are returned by the server, the changes don't persist, because you didn't change the source files. You need to also apply your edits in your actual source code, and then re-deploy to the server.
In contrast, when you use a Workspace, changes that you make to your front-end code are preserved when you refresh the webpage. With a Workspace, when you edit the front-end code that's returned by the server, the Sources tool also applies your edits to your local source code. Then for other users to see your changes, you only need to redeploy your changed source files to the server.
Workspaces work well when the JavaScript code that's returned by the server is the same as your local JavaScript source code. Workspaces don't work as well when your workflow involves transformations on your source code, such as minification or TypeScript compilation.
For more information, see the tutorial Edit files with Workspaces (Filesystem tab).
 Using the Overrides tab to override server files with local files 
Use the Overrides tab of the Navigator pane to override page assets (such as images) with files from a local folder.
Items in this tab override what the server sends to the browser, even after the server has sent the assets.

The Overrides feature is similar to Workspaces. Use Overrides when you want to experiment with changes to a webpage, and you need to keep the changes after you refresh the webpage, but you don't care about mapping your changes to the source code of the webpage.
A file that overrides a file that is returned by the server is indicated by a purple dot next to the file name, throughout DevTools.
 See also 
Override webpage resources with local copies (Overrides tab)
Map the processed code to your original source code, for debugging Sources tool keyboard shortcuts in Keyboard shortcuts
 Using the Content scripts tab for Microsoft Edge extensions 
Use the Content scripts tab of the Navigator pane to view any content scripts that were loaded by a Microsoft Edge extension that you installed.

When the debugger steps into code that you don't recognize, you might want to mark that code as Library code, to avoid stepping into that code. See Mark content scripts as Library code.
 See also 
Content scripts
Create an extension tutorial, part 2
 Using the Snippets tab to run JavaScript code snippets on any webpage 
Use the Snippets tab of the Navigator pane to create and save JavaScript code snippets, so that you can easily run these snippets on any webpage.

For example, suppose you frequently enter the following code in the Console, to insert the jQuery library into a page so that you can run jQuery commands from the Console:
let script = document.createElement('script'); script.src = 'https://code.jquery.com/jquery-3.2.1.min.js'; script.crossOrigin = 'anonymous';
script.integrity = 'sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4='; document.head.appendChild(script);
CtrlInstead, you can save this code in a Snippet and then easily run it whenever you need to. When you press 
S (Windows, Linux) or Command+S+ (macOS), DevTools saves the Snippet to your file system.
There are multiple ways to run a Snippet:
 In the Navigator pane, select the Snippets tab, and then select the snippets file to open it. Then at the bottom of the Editor pane, select Run ().
Ctrl+P (Windows, Linux) or Command+P! When DevTools has focus, press  (macOS) to open the Command Menu, and then type .
Snippets are similar to bookmarklets.
 See also 
 Run snippets of JavaScript on any webpage
 Using the Command Menu to open files 
To open a file, in addition to using the Navigator pane within the Sources tool, you can use the Command Menu from anywhere within DevTools.
Ctrl+P on Windows/Linux or Command+PFrom anywhere in DevTools, press  on macOS. The Command
Menu appears, and lists all the resources that are in the tabs of the Navigator pane of the Sources tool. Or, next to the tabs of the Navigator pane in the Sources tool, select the ... (More options) button, and then select Open File.
.jsTo display and pick from a list of all .js files, type .

?, the Command Menu shows several commands, including ... Open file. If you select BackspaceIf you type to clear the Command Menu, a list of files is shown.
For more information, see Run commands with the Microsoft Edge DevTools Command Menu.
 Using the Editor pane to view or edit files
Use the Editor pane to view the front-end files that are returned from the server to compose the current webpage, including JavaScript, HTML, CSS, and image files. When you edit the front-end files in the Editor pane, DevTools updates the webpage to run the modified code.

The Editor pane has the following level of support for various file types:
FILE TYPESUPPORTED ACTIONSJavaScriptView, edit, and debug.CSSView and edit.HTMLView and edit.ImagesView.By default, edits are discarded when you refresh the webpage. For information about how to save the changes to your file system, see Using the Filesystem tab to define a local Workspace, above.
The following subsections cover the Editor pane:
Editing a JavaScript file
Reformatting a minified JavaScript file with pretty-print
Mapping minified code to your source code to show readable code
Transformations from source code to compiled front-end code
Editing a CSS file
Editing an HTML file
Going to a line number or function
Displaying source files when using a different tool
 Editing a JavaScript file 
To edit a JavaScript file in DevTools, use the Editor pane, within the Sources tool.

...To load a file into the Editor pane, use the Page tab in the Navigator pane (on the left). Or use the Command Menu, as follows: in the upper right of DevTools, select Customize and control DevTools () and then select Open File.
 Save and Undo 
Ctrl+S (Windows, Linux) or Command+SFor JavaScript changes to take effect, press  (macOS).
If you change a file, an asterisk appears next to the file name.
Ctrl+S on Windows/Linux or Command+SCtrl+Z on Windows/Linux or Command+ZTo save changes, press  on macOS.
To undo a change, press  on macOS.
By default, your edits are discarded when you refresh the webpage. For more information about how to save the changes in your local file system, see Edit files with Workspaces (Filesystem tab).
 Find and Replace 
Ctrl+FTo find text in the current file, select the Editor pane to give it focus, and then press  on
Command+FWindows/Linux, or  on macOS.

To find and replace text, select the Replace (A->B) button to the left of the Find text box. The Replace (A->B) button appears when viewing an editable file.
 Showing the changes you made 
To review the changes you made to a file, right-click in the Editor pane and then select Local Modifications.
The Drawer opens at the bottom of DevTools, showing your changes within the Changes tab.

 Changes inside a function take effect 
DevTools doesn't re-run a script, so the only JavaScript changes that take effect are changes that you make within functions. For example, in the following figure, we added the following code to the JavaScript that is returned by the server:
console.log('A')console.log('B') inside an onClickWe added the statement  outside of any function.
We added the statement  function. We then saved the changes, entered numbers into the form, and then selected the form button to send the form.
console.log('A'), which is at global scope, doesn't run, but console.log('B')onClick function, does run, outputting BAfter submitting the form, , inside an  to the Console:

	 Reformatting a minified JavaScript file with pretty 	-print
To use pretty-print to reformat a file to make it readable, select the Pretty print button (), which is shown as braces, at the bottom of the Editor pane. Or, if a Pretty-print button appears at the top of the Editor pane, you can select that button.

:formattedThe reformatted file appears in a new tab, with  appended to the file name. The reformatted code is read-only.

To make the reformatted file scroll to the code that you select in the minified file:
1. If the reformatted file tab is open, close it.
2. Select some code in the minified file in the Editor pane.
3. Select the Pretty print button. The formatted code appears in a new tab, scrolled to the code that you selected.
For more information, see Reformat a minified JavaScript file with pretty-print.
 Mapping minified code to your source code to show readable code 
Source maps from preprocessors cause DevTools to load your original JavaScript source files in addition to your minified, transformed JavaScript files that are returned by the server. You then view your original source files while you set breakpoints and step through code. Meanwhile, Microsoft Edge is actually running your minified code.
In the Editor pane, if you right-click a JavaScript file and then select Add source map, a popup box appears, with a Source map URL text box and an Add button.
The source-mapping approach keeps your front-end code human-readable and debuggable even after you combine, minify, or compile it. For more information, see Map the processed code to your original source code, for debugging.
	 Transformations from source code to compiled front 	-end code
If you use a framework that transforms your JavaScript files, such as React, your local source JavaScript might be different than the front-end JavaScript that's returned by the server. Workspaces aren't supported in this scenario, but source code mapping is supported in this scenario.
.ts or .jsx.ts or .jsxIn a development environment, your server might include your source maps and your original files for React. The Sources tool displays these files, but doesn't allow you to edit these files. When you set breakpoints and use the debugger, DevTools displays your original  files, but actually stepsthrough the minified version of your JavaScript files.
In this scenario, the Sources tool is useful for inspecting and stepping-through the transformed, front-end JavaScript that's returned from the server. Use the debugger to define Watch expressions, and use the Console to enter JavaScript expressions to manipulate data that's in-scope.
  
Editing a CSS file
There are two ways to edit CSS in DevTools:
In the Elements tool, you work with one CSS setting at a time, through user interface controls. This approach is recommended in most cases. For more information, see Edit CSS font styles and settings in the Styles pane. In the Sources tool, you use a text editor.
H1The Sources tool supports directly editing a CSS file. For example, if you edit the CSS file from the tutorial Edit files with Workspaces (Filesystem tab) to match the style rule below, the  element in the upper left of the rendered webpage changes to green:
h1 {
  color: green;
}

CSS changes take effect immediately; you don't need to manually save the changes.
 See also 
Edit CSS font styles and settings in the Styles pane
DevTools for beginners: Get started with CSS - tutorial
Sources tool keyboard shortcuts in Keyboard shortcuts
 Editing an HTML file 
There are two ways to edit HTML in DevTools:
In the Elements tool, you work with one HTML element at a time, through user interface controls. In the Sources tool, you use a text editor.

Unlike a JavaScript or CSS file, an HTML file that is returned by the web server cannot be directly edited in the Sources tool. To edit an HTML file using the Editor of the Sources tool, the HTML file must be in a Workspace or on the Overrides tab. See these subsections of the current article:
Using the Filesystem tab to define a local Workspace
Using the Overrides tab to override server files with local files
Ctrl+S on Windows/Linux or Command+STo save changes, press  on macOS. An edited file is marked by an asterisk.
Ctrl+F on Windows/Linux or Command+FTo find text, press  on macOS.
Ctrl+Z on Windows/Linux or Command+ZTo undo an edit, press  on macOS.
To view other commands while editing an HTML file, in the Editor pane, right-click the HTML file.
You can also edit HTML by using an HTML editor, rather than DevTools. For example, the article DevTools for beginners: Get started with HTML and the DOM uses a website that enables HTML editing within the webpage.
 Going to a line number or function 
To go to a line number or symbol (such as a function name) in the file which is open in the Editor pane, you can use the Command Menu, rather than scrolling through the file.
1. In the Navigator pane, select the ellipses (...) (More options), and then select Open File. The Command Menu appears.
2. Type one of the following characters:
CHARACTERCOMMAND NAMEPURPOSE:Go to lineGo to a line number.@Go to symbol@Go to a function. When you type , the Command Menu lists the functions that are found in the JavaScript file which is open in the Editor pane.For more information, see Run commands with the Microsoft Edge DevTools Command Menu.
 Displaying source files when using a different tool 
The main place to view source files in the DevTools is within the Sources tool. But sometimes you need to access other tools, such as Elements or Console, while viewing or editing your source files. You use the Quick source tool in the Drawer, which appears at the bottom of DevTools.
To use the Quick source tool:
1. Select a tool other than the Sources tool, such as the Elements tool.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P2. Press  (macOS). The Command Menu opens.
quick3. Type , and then select Show Quick source.
At the bottom of the DevTools window, the Drawer appears, with the Quick source tool selected. The Quick source tool contains the last file you edited in the Sources tool, within a compact version of the DevTools code editor.
Ctrl+P (Windows, Linux) or Command+P4. Press  (macOS) to open the Open File dialog.
 Using the Debugger pane to debug JavaScript code
Use the JavaScript debugger to step through the JavaScript code that's returned by the server. The debugger includes the Debugger pane, along with breakpoints that you set on lines of code in the Editor pane.
With the debugger, you step through the code, while watching any JavaScript expressions you specify. Watch and manually change variable values, and automatically show which variables are in-scope for the current statement.

The debugger supports standard debugging actions, such as:
Setting breakpoints, to pause code.
Stepping through code.
Viewing and editing properties and variables.
Watching the values of JavaScript expressions.
Viewing the call stack (the sequence of function calls so far).
The debugger in DevTools is designed to look, feel, and work like the debugger in Visual Studio Code and the debugger in Visual Studio.
The following subsections cover debugging:
The basic approach to using a debugger
Advantages of the debugger's Watch and Scope over console.log
Debug from Visual Studio Code directly Articles about debugging
 The basic approach to using a debugger 
console.log()console.log()To troubleshoot JavaScript code, you can insert  statements in the Editor pane. Another, more powerful approach is to use the debugger of Microsoft Edge DevTools. Using a debugger can actually be simpler than , once you're familiar with the debugger approach.
To use a debugger on a webpage, you typically set a breakpoint and then send a form from the webpage, as follows:
1. Open the Demo: Get Started Debugging JavaScript with Microsoft Edge DevTools webpage in a new window or tab.
F122. Right-click anywhere in the webpage, and then select Inspect. Or, press . The DevTools window opens, next to the demo webpage.
3. In DevTools, select the Sources tab.
4. In the Navigator pane (on the left), select the Page tab, and then select the JavaScript file, such as 
get-started.js.
var sum = addend1 + addend2;5. In the Editor pane, select a line number near a suspect line of code, to set a breakpoint on that line. In the figure below, a breakpoint is set on the line . (Update: As of 2022, breakpoints are now indicated by a blue rectangle, instead of a red circle.)
5 and 16. In the webpage, enter values and submit the form. For example, enter numbers, such as , then select the button Add Number 1 and Number 2.
The debugger runs the JavaScript code and then pauses at the breakpoint. The debugger is now in Paused mode, so you can inspect the values of the properties that are in-scope, and step through the code.

sum and typeof sumIn the above figure, we added the Watch expressions , and stepped two lines past the breakpoint.
7. Examine the values in the Scope pane, which shows all variables or properties that are in-scope for the current breakpoint, and their values.
console.logAt this point, you could add expressions in the Watch pane. These expressions are the same expressions that you would write within a  statement to debug your code.
EscTo run JavaScript commands to manipulate data in the current context, you use the Console. If you want to open the console in the Drawer at the bottom of DevTools, press .
F98. Step through the code by using the controls at the top of the Debugger pane, such as Step ().
The bug in this demo is that you need to first convert the input data from strings to numbers.
9. To fix the bug, refresh the page to reset the webpage form, and then change the line:
var sum = addend1 + addend2;
to:
var sum = parseInt(addend1) + parseInt(addend2);
Ctrl+S (Windows, Linux) or Command+S10. Press  (macOS) to save the change in the local cached file.
5 and 111. Enter  into the webpage and then click the Add button. Now Scope > Local > sum: is the number 6, instead of the string "51".
 See also 
Sources tool keyboard shortcuts in Keyboard shortcuts
Get started debugging JavaScript - a tutorial using an existing, simple webpage that contains a few form controls.
 Advantages of the debugger's Watch and Scope over console.log These three approaches are equivalent:
console.log(sum) and console.log(typeof sum)sum Temporarily adding the statements  in the code, where  is in-scope.
sum and console.log(typeof sum)sum Issuing the statements  in the Console pane of the DevTools, when the debugger is paused where  is in-scope.
sum and typeof sum	 Setting the Watch expressions 	 in the Debugger pane.
sum is in-scope, sumsumsumWhen the variable  and its value are automatically shown in the Scope section of the Debugger pane, and are also overlaid in the Editor pane where  is calculated. So you probably wouldn't need to define a Watch expression for .
console.logEscThe debugger gives a richer, more flexible display and environment than a  statement. For example, in the debugger, as you step through the code, you can display and change the values of all currently defined properties and variables. You can also issue JavaScript statements in the Console, such as to change values in an array that's in-scope. (To show the Console, press .)
Breakpoints and Watch expressions are preserved when you refresh the webpage.
 Debug from Visual Studio Code directly 
To use the more full-featured debugger of Visual Studio Code instead of the DevTools debugger, use the Microsoft Edge DevTools extension for Visual Studio Code.

This extension provides access to the Elements and Network tools of Microsoft Edge DevTools, from within Microsoft Visual Studio Code.
For more information, see Visual Studio Code for web development and the GitHub Readme page, Microsoft Edge Developer Tools for Visual Studio Code.
 Articles about debugging 
The following articles cover the Debugger pane and breakpoints:
Get started debugging JavaScript - A tutorial (with screen captures), using an existing, simple project.
JavaScript debugging features - How to use the debugger to set breakpoints, step through code, view and modify variable values, watch JavaScript expressions, and view the call stack.
 Pause your code with breakpoints - How to set basic and specialized breakpoints in the debugger.
 See also
 Sources tool keyboard shortcuts in Keyboard shortcuts
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Get started debugging JavaScript
 	6/21/2022 • 9 minutes to read • Edit OnlineThis article teaches you the basic workflow for debugging any JavaScript issue in DevTools.
 Step 1: Reproduce the bug
The first step in debugging is to find a series of actions that consistently reproduce a bug.
Ctrl (Windows, Linux) or Command1. Open the demo webpage Get Started Debugging JavaScript in a new window or tab. To do this, right-click the link. Or, press and hold  (macOS), and then click the link.
52. Enter  in the Number 1 text box.
13. Enter  in the Number 2 text box.
5 + 1 = 514. Click Add Number 1 and Number 2. The label below the button says . The result should be
6. Next, fix the addition error that is the bug.

 Step 2: Get familiar with the Sources tool UI
DevTools provides many different tools for different tasks. Different tasks include changing CSS, profiling pageload performance, and monitoring network requests. The Sources tool is where you debug JavaScript.
Ctrl+Shift+J (Windows, Linux) or Command+Option1. To open the Console tool in DevTools, press +
J (macOS).

2. Select the Sources tool.


 The Debugger pane (at the bottom). This pane provides tools for inspecting the JavaScript for the webpage. If your DevTools window is wide, this pane is displayed to the right of the Editor pane.
 Step 3: Pause the code with a breakpoint
console.log()A common method for debugging this type of problem is to insert several  statements into the code and then to inspect values as the script runs. For example:
function updateLabel() {     var addend1 = getNumber1();     console.log('addend1:', addend1);     var addend2 = getNumber2();     console.log('addend2:', addend2);     var sum = addend1 + addend2;     console.log('sum:', sum);
    label.textContent = addend1 + ' + ' + addend2 + ' = ' + sum;
}console.log()console.log()The  method might get the job done, but breakpoints get it done faster. A breakpoint allows you to pause your code in the middle of the runtime, and examine all values at that moment in time. Breakpoints have the following advantages over the  method.
console.log()console.log() With 	, you need to manually open the source code, find the relevant code, insert the  statements, and then refresh the webpage to display the messages in the Console. With
breakpoints, you can pause on the relevant code without having to know how the code is structured.
console.log() In your  statements, you need to explicitly specify each value that you want to inspect. With breakpoints, DevTools shows you the values of all variables at that moment in time. Sometimes variables that affect your code are hidden and obfuscated.
console.log()In short, breakpoints can help you find and fix bugs faster than the  method.
 Event listener breakpoints 
5 + 1 = 51) is computed in the clickIf you step back and think about how the app works, you might make an educated guess that the incorrect sum (  event listener associated with the Add Number 1 and Number 2
clickbutton. So, you probably want to pause the code around the time that the  listener runs. Event Listener Breakpoints let you do that:
1. In the Debugger pane, click Event Listener Breakpoints to expand the section. DevTools reveals a list of expandable event categories, such as Animation and Clipboard.
2. Next to the Mouse event category, click Expand (). DevTools reveals a list of mouse events, such as click and mousedown. Each event has a checkbox next to it.
click3. Select the checkbox next to click. DevTools is now set up to automatically pause when any  event listener runs.

get-started.js4. Back on the demo, click Add Number 1 and Number 2 again. DevTools pauses the demo and highlights a line of code in the Sources tool. DevTools should pause on line 16 in .
if (inputsAreEmpty()) {
If you pause on a different line of code, click Resume Script Execution () until you pause on the correct line.
NOTE
clickclickIf you paused on a different line, you have a browser extension that registers a  event listener on every webpage that you visit. You are paused in the  listener of the extension. If you use InPrivate Mode to
browse in private, which disables all extensions, you might see that you pause on the desired line of code every time.Event Listener Breakpoints are just one of many types of breakpoints available in DevTools. Memorize all the different types to help you debug different scenarios as quickly as possible. To learn when and how to use each type, see Pause your code with breakpoints.
 Step 4: Step through the code
One common cause of bugs is when a script runs in the wrong order. Stepping through your code allows you to walk through the runtime of your code. You walk through one line at a time to help you figure out exactly where your code is running in a different order than you expect. Try it now:
1. Click Step over next function call (). DevTools runs the following code without stepping into it.
if (inputsAreEmpty()) {
NOTE
inputsAreEmpty()ifDevTools skips a few lines of code. This is because  evaluates as false, so the block of code for the  statement doesn't run.updateLabel()2. On the Sources tool of DevTools, click Step into next function call () to step through the runtime of the  function, one line at a time.
get-started.jsupdateLabel()That's the basic idea of stepping through code. If you look at the code in , you can see that the bug is probably somewhere in the  function. Rather than stepping through every line of code, you can use another type of breakpoint (a line-of-code breakpoint) to pause the code closer to the probable location of the bug.
 Step 5: Set a line-of-code breakpoint
Line-of-code breakpoints are the most common type of breakpoint. When you get to the specific line of code you want to pause, use a line-of-code breakpoint.
updateLabel()1. Look at the last line of code in :
label.textContent = addend1 + ' + ' + addend2 + ' = ' + sum;
2. On the left, the number of this particular line of code is displayed as 34. Click line 34. DevTools displays a red circle (or more recently, a blue rectangle) to the left of 34. The red circle (or blue rectangle) indicates that a line-of-code breakpoint is on this line. DevTools always pauses before this line of code is run.
addend1, addend2, and sum3. Click Resume script execution (). The script continues to run until it reaches line 34. On lines 31, 32, and 33, DevTools prints the values of  to the right of the semi-colon on each line.

 Step 6: Check variable values
addend1, addend2, and sumThe values of  look suspicious. The values are wrapped in quotes. The quotations mean that the value is a string, which is a good hypothesis to explain the cause of the bug. Gather more information about the situation. DevTools provides many tools for examining variable values.
 Method 1: The Scope pane 
If you pause on a line of code, the Scope pane displays the local and global variables that are currently defined, along with the value of each variable. It also displays closure variables, as applicable. Double-click a variable value to edit it. If you don't pause on a line of code, the Scope pane is empty.

 Method 2: Watch Expressions 
sumtypeof sumThe Watch pane allows you to monitor the values of variables (such as ) or expressions (such as ). You can store any valid JavaScript expression in a Watch Expression.
1. Select the Watch tab.
2. Click Add watch expression ().
typeof sum3. Type .
Enter. DevTools displays typeof sum: "string"4. Press . The value to the right of the colon is the result of your Watch Expression.
NOTE
typeof sumIn the following figure, the  Watch Expression is displayed in the Watch pane. If your DevTools window is wide, the Watch pane is displayed within the Debugger pane, which then appears on the right.
sumAs suspected,  is being evaluated as a string, when it should be a number. You now confirmed value type is the cause of the bug.
 Method 3: The Console 
console.log()The Console allows you to view  output. You can also use the Console to evaluate arbitrary
JavaScript statements while the debugger is paused at a code statement. For debugging, you can use the Console to test potential fixes for bugs.
Esc1. If the Console tool is closed, press  to open it. The Console tool opens in the lower pane of the DevTools window.
parseInt(addend1) + parseInt(addend2)addend1 and addend22. In the Console, type . The statement the tool is paused on a line of code where  are in scope.
Enter. DevTools evaluates the statement and prints 63. Press , which is the result you expect the demo to produce.

 Step 7: Apply a fix
We've identified a possible fix for the bug. Next, edit the JavaScript code directly within the DevTools UI and then rerun the demo to test the fix, as follows.
1. Click Resume script execution ().
var sum = addend1 + addend22. In the Editor pane, replace the line  with 
var sum = parseInt(addend1) + parseInt(addend2).
Ctrl+S (Windows, Linux) or Command+S3. Press  (macOS) to save your change.
4. Click Deactivate breakpoints (). It changes blue to indicate the option is active. While Deactivate breakpoints is set, DevTools ignores any breakpoints you set.
5. Try out the demo with different values. The demo now calculates correctly.
Cau t ion
This workflow only applies a fix to a local copy of the code sent from the server. When debugging your project, after you identify the fix, you still need to apply that fix to the code on the server, such as by editing your local source code and then re-deploying your fixed code to the server.
 Next steps
Congratulations! You now know how to make the most of Microsoft Edge DevTools when debugging JavaScript. The tools and methods you learned in this article may save you countless hours.
This article showed two ways to set breakpoints. DevTools also provides ways to set breakpoints to pause your code when certain conditions are met, such as:
Conditional breakpoints that are only triggered when the condition that you provide is true.
Breakpoints on caught or uncaught exceptions.
XHR breakpoints that are triggered when the requested URL matches a substring that you provide.
For more information about when and how to use each type, see Pause your code with breakpoints.
A couple of code stepping controls aren't explained in this article. For more information, see Step over line of code in "JavaScript debugging features".
 See also
JavaScript debugging features - Using the UI of the debugger in the Sources tool. Sources tool overview - Introduces the JavaScript debugger and code editor.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Pause code with breakpoints
 	6/21/2022 • 6 minutes to read • Edit OnlineUse breakpoints to pause your JavaScript code. This article explains each type of breakpoint available in DevTools, as well as when to use and how to set each type.
For an introductory tutorial using an existing webpage, see Get started debugging JavaScript.
 Overview of when to use each breakpoint type
The most well-known type of breakpoint is line-of-code. But line-of-code breakpoints may be inefficient to set, especially if you don't know exactly where to look, or if you are working with a large codebase. You can save yourself time when debugging by knowing how and when to use the other types of breakpoints.
BREAKPOINT TYPEUSE THIS WHEN YOU WANT TO PAUSE...Line-of-codeOn an exact region of code.Conditional line-of-codeOn an exact region of code, but only when some other condition is true.DOMOn the code that changes or removes a specific DOM node, or the children.XHRWhen an XHR URL contains a string pattern.Event listenerclickOn the code that runs after an event, such as , runs.ExceptionOn the line of code that is throwing a caught or uncaught exception.FunctionWhenever a specific command, function, or method is run. Line-of-code breakpoints
Use a line-of-code breakpoint when you know the exact region of code that you need to investigate. DevTools always pauses before this line of code is run.
To set a line-of-code breakpoint in DevTools:
1. Select the Sources tool.
2. Open the file that contains the line of code that you want to break on.
3. Go the line of code.
4. To the left of the line of code is the line number column. Click it. A red icon (or more recently, a blue rectangle arrow) appears next to the line number column:

	 Line 	-of-code breakpoints in your code
debuggerRun the  method from your code to pause on that line. This is equivalent to a line-of-code breakpoint, except that the breakpoint is set in your code, not in the DevTools UI.
console.log('a'); console.log('b'); debugger; console.log('c');
	 Conditional line 	-of-code breakpoints
Use a conditional line-of-code breakpoint when you know the exact region of code that you need to investigate, but you want to pause only when some other condition is true.
To set a conditional line-of-code breakpoint:
1. Select the Sources tool.
2. Open the file that contains the line of code you want to break on.
3. Go to the line of code.
4. To the left of the line of code is the line number column. Right-click it.
5. Select Add conditional breakpoint. A dialog is displayed underneath the line of code.
6. Enter your condition in the dialog.
Enter7. Press  to activate the breakpoint. A red diamond (or more recently, an orange icon) appears on top of the line number column:

	 Manage line 	-of-code breakpoints
Use the Breakpoints pane to disable or remove line-of-code breakpoints from a single location.
Right-click anywhere in the Breakpoints pane to deactivate all breakpoints, disable all breakpoints, or remove all breakpoints. Disabling all breakpoints is equivalent to unchecking each one. Deactivating all breakpoints instructs DevTools to ignore all line-of-code breakpoints, but to also maintain the enabled state so that each are in the same state as before when you reactivate each one.

 DOM change breakpoints
Use a DOM change breakpoint when you want to pause on the code that changes a DOM node or the children.
To set a DOM change breakpoint:
1. Select the Elements tool.
2. Go the element on which you want to set the breakpoint.
3. Right-click the element, point to Break on, then select Subtree modifications, Attribute modifications, or Node removal.

 Types of DOM change breakpoints 
 Subtree modifications. Triggered when a child of the currently selected node is removed or added, or the contents of a child are changed. Not triggered on child node attribute changes, or on any changes to the currently selected node.
 Attributes modifications: Triggered when an attribute is added or removed on the currently selected node, or when an attribute value changes.
 Node Removal: Triggered when the currently selected node is removed.
 XHR/Fetch breakpoints
send()Use an XHR breakpoint when you want to break when the request URL of an XHR contains a specified string. DevTools pauses on the line of code where the XHR runs the  method.
NOTE
This feature also works with Fetch API requests.
One example of when this is helpful is when your webpage is requesting an incorrect URL, and you want to quickly find the AJAX or Fetch source code that is causing the incorrect request.
To set an XHR breakpoint:
1. Select the Sources tool.
2. Expand the XHR Breakpoints panel.
3. Click Add breakpoint.
4. Enter the string which you want to break on. DevTools pauses when this string is present anywhere in an XHR request URL.
Enter5. Press  to confirm.

 Event listener breakpoints
clickUse event listener breakpoints when you want to pause on the event listener code that runs after an event is fired. You can select specific events, such as , or categories of events, such as all mouse events.
1. Select the Sources tool.
2. Expand the Event Listener Breakpoints panel. DevTools shows a list of event categories, such as Animation.
3. Check one of these categories to pause whenever any event from that category is fired, or expand the category and check a specific event.

 Exception breakpoints
Use exception breakpoints when you want to pause on the line of code that is throwing a caught or uncaught exception.
1. Select the Sources tool.

3. Optional: Check the Pause On Caught Exceptions checkbox if you also want to pause on caught exceptions, in addition to uncaught ones.

 Function breakpoints
debug(method) method, where methodRun the  is the command, function, or method you want to debug, when
debug()console.log()you want to pause whenever a specific function is run. You can insert  into your code (such as a  statement), or run the method from the DevTools Console.
debug() is equivalent to setting a line-of-code breakpoint on the first line of the function.
function sum(a, b) {     let result = a + b; // DevTools pauses on this line.
    return result;
} debug(sum); // Pass the function object, not a string. sum();
 Make sure the target function is in scope 
ReferenceErrorDevTools throws a  if the function you want to debug isn't in scope.
(function () {     function hey() {         console.log('hey');
    }
    function yo() {         console.log('yo');
    }     debug(yo); // This works.
    yo(); })(); debug(hey); // This doesn't work.  hey() is out of scope.debug()When you're calling  from the DevTools Console, here's a technique to ensure that the target function is in scope:
1. Set a line-of-code breakpoint somewhere where the function is in scope.
2. Trigger the breakpoint. Your code is paused at the breakpoint, and the variables for the current function are in scope.
debug()3. Call  in the DevTools Console, while the code is still paused on your line-of-code breakpoint.
 See also
JavaScript debugging features - Using the UI of the debugger in the Sources tool.
Get started debugging JavaScript - An introductory tutorial using an existing webpage.
Sources tool overview - The debugger is part of the Sources tool, which includes a JavaScript editor.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 JavaScript debugging features
 	6/21/2022 • 8 minutes to read • Edit OnlineThis article covers how to use the debugger in Microsoft Edge DevTools, including how to set a line-of-code breakpoint. To set other types of breakpoints, see Pause your code with breakpoints.
To learn the basics of debugging, see Get started debugging JavaScript, which is a tutorial that uses an existing, form-based webpage. The tutorial has screen captures, so you can skim it. You can easily try out the debugger features by using the demo webpage.
 View and edit JavaScript code
When fixing a bug, you often want to try out some changes to your JavaScript code. You don't need to make the changes in an external editor or IDE, re-upload the file to the server, and then refresh the page; instead, to test changes, you can edit your JavaScript code directly in DevTools and see the result immediately.
To view and edit a JavaScript file:
1. Select the Sources tool.
2. In the Navigator pane, select your file, to open it in the Editor pane.
3. In the Editor pane, edit your file.
Ctrl+S (Windows, Linux) or Command+S4. Press  (macOS) to save. DevTools then loads the JavaScript file into the JavaScript engine of Microsoft Edge.

 Reformat a minified JavaScript file with pretty-print
To make a minified file human-readable, click the Format () button at the bottom of the Editor pane.

 Set a breakpoint, to pause code
To pause your code in the middle of the runtime, set a breakpoint. The most basic and well-known type of breakpoint is a line-of-code breakpoint.
Use a line-of-code breakpoint when you know the exact region of code that you need to investigate. DevTools always pauses at the specified line of code, before running it.
To set a line-of-code breakpoint:
1. Select the Sources tool.
2. Open the file that contains the line of code.
3. Click the area to the left of the line number for the line of code. Or, right-click the line number and then select Add breakpoint.
A red circle (or more recently, a blue rectangle) then appears next to the line number, indicating a breakpoint.

Line-of-code breakpoints may be inefficient to set, especially if you don't know exactly where to look, or if your codebase is large. To save time when debugging, learn how and when to use the other types of breakpoints. See Pause your code with breakpoints.
 Step through code
After your code is paused at a breakpoint, step through the code, one line at a time, investigating control flow and property values along the way.
 Step over line of code 
When paused on a line of code containing a function that isn't relevant to the problem you are debugging, click the Step over () button to run the function without stepping into it.

For example, suppose you are debugging the following code snippet.
function updateHeader() {     var day = new Date().getDay();     var name = getName(); // A     updateName(name); // D
}
function getName() {
    var name = app.first + ' ' + app.last; // B     return name; // C
}AB and C. DevTools then pauses on DYou are paused on . After you click Step over, DevTools runs all the code in the function that you are stepping over, which is .
 Step into line of code 
When paused on a line of code containing a function call that is related to the problem you are debugging, click the Step into () button to investigate that function further.

For example, suppose you're debugging the following code:
function updateHeader() {     var day = new Date().getDay();     var name = getName(); // A     updateName(name);
}
function getName() {
    var name = app.first + ' ' + app.last; // B     return name;
}A. After you click Step into, DevTools runs this line of code, then pauses on BYou are paused on .
 Step out of line of code 
When paused inside of a function that isn't related to the problem you are debugging, click the Step out () button to run the rest of the code of the function.

For example, suppose you're debugging the following code:
function updateHeader() {     var day = new Date().getDay();     var name = getName();     updateName(name); // C
}
function getName() {
    var name = app.first + ' ' + app.last; // A     return name; // B
}A. After you click Step out, DevTools runs the rest of the code in getName()You are paused on , which is just 
B in this example, and then pauses on C.
 Run all code up to a specific line 
When debugging a long function, there may be a lot of code that isn't related to the problem you are debugging.
You can step through all the lines, but that's tedious.
Slightly better, you can set a line-of-code breakpoint on the line in which you are interested and then click the Resume script execution () button.
 But there's a faster way: Right-click a the line of code, and then select Continue to here. DevTools runs all of the code up to that point, and then pauses on that line.

 Restart the top function of the call stack 
To pause on the first line of the top function in your call stack, while paused on a line of code, right-click the Call Stack pane, and then select Restart frame. The top function is the last function that was run.
The following code is an example for you to step through:
function factorial(n) {     var product = 0; // B     for (var i = 1; i <= n; i++) {       product += i;
    }
    return product; // A }
A. After selecting Restart frame, you should be paused on BYou are paused on , without ever setting a breakpoint or choosing Resume script execution.

 Resume script runtime 
To continue the runtime after a pause of your script, click the Resume script execution () button. DevTools runs the script up until the next breakpoint, if any.

 Force script runtime 
To ignore all breakpoints and force your script to continue to run, click and hold the Resume script execution ( ) button and then click the Force script execution ( ) button.

 Change thread context 
When working with web workers or service workers, click on a context listed in the Threads pane to switch to that context. The blue arrow icon represents which context is currently selected.

For example, suppose that you are paused on a breakpoint in both your main script and your service worker script. You want to view the local and global properties for the service worker context, but the Sources tool is showing the main script context. To switch to the service worker context, in the Threads pane, click the service worker entry.
 View and edit properties and variables
While paused on a line of code, use the Scope pane to view and edit the values of properties and variables in the local, closure, and global scopes.

 Watch the values of JavaScript expressions
Use the Watch pane to watch the values of custom expressions. You can watch any valid JavaScript expression.
To refresh the values of all existing expressions, click the Refresh ( refresh while stepping through code.
 To delete a watch expression, right-click the expression and then select Delete watch expression ().
 View the call stack
While paused on a line of code, use the Call Stack pane to view the call stack that got you to this point.
Click an entry to jump to the line of code where that function was called. The blue arrow icon represents which function DevTools is currently highlighting.

NOTE
When not paused on a line of code, the Call Stack pane is empty.
 Copy stack trace 
To copy the current call stack to the clipboard, right-click the Call Stack pane, and then select Copy stack trace.

The following code is an example of the output:
getNumber1 (get-started.js:35) inputsAreEmpty (get-started.js:22) onClick (get-started.js:15)
 Ignore a script or pattern of scripts
Mark a script as Library code when you want to ignore that script while debugging. When marked as Library code, a script is obscured in the Call Stack pane, and you never step into the functions of the script when you step through your code.
A uses libFor example, in the following code snippet, line , which is a third-party library. If you are confident that the problem you are debugging isn't related to that third-party library, then it makes sense to mark the script as Library code.
function animate() {     prepare();
    lib.doFancyStuff(); // A     render();
}
 Mark a script as Library code from the Editor pane To mark a script as Library code from the Editor pane:
1. Open the file.
2. Right-click anywhere in the file and then select Add script to ignore list (previously shown as Mark as Library code).

 Mark a script as Library code from the Call Stack pane 
To mark a script as Library code from the Call Stack pane:
Right-click a function in the script and then select Add script to ignore list (previously shown as Mark
 Mark a script as Library code from Settings 
To mark a single script or pattern of scripts from Settings:
1. Open Settings.
2. Navigate to the Library code setting.
3. Click Add pattern.
4. Enter the script name or a regex pattern of script names to mark as Library code.
5. Click Add.

 Run snippets of debug code from any page
If you find yourself running the same debug code in the Console over and over, consider Snippets. Snippets are runtime scripts that you author, store, and run within DevTools.
See Run snippets of JavaScript on any webpage.
 See also
Get started debugging JavaScript - A simple, short tutorial using existing code, with screen captures. Sources tool overview - The Sources tool includes the JavaScript debugger and editor. Disable JavaScript.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Run snippets of JavaScript on any webpage
 	6/21/2022 • 3 minutes to read • Edit OnlineIf you are running the same code in the Console repeatedly, consider saving the code as a Snippet instead. Snippets are scripts that you author in the Sources tool. Snippets have access to the JavaScript context of the webpage, and you can run Snippets on any webpage. The security settings of most webpages block from loading other scripts in Snippets. For that reason, you must include all your code in one file.
Snippets are an alternative to bookmarklets with the difference that Snippets only run in DevTools and aren't limited to the allowed length of a URL.
Using Snippets is an excellent way to change a few things in a third-party webpage. Code changes in Snippets are added to the current webpage and run in the same context. For more information about changing the existing code of a webpage, see Overrides.
The following figure shows the DevTools homepage on the left and some Snippet source code on the right.
The webpage before running the Snippet:

The Snippet source code from the webpage before running the Snippet:
console.log('Hello, Snippets!'); document.body.innerHTML = ''; var p = document.createElement('p');
p.textContent = 'Hello, Snippets!'; document.body.appendChild(p);
Hello, Snippets!In the following figure, the webpage appears after running the Snippet. The Console Drawer pops up to display the  message that the Snippet logs, and the content of the webpage changes completely:

 Open the Snippets tab
The Snippets tab, in the Navigator pane on the left, lists your Snippets. When you want to edit a Snippet, you need to open it from the Snippets tab:

 Open the Snippets tab with a mouse 
1. Select the Sources tab. The Sources tool appears:

2. In the Navigator pane (on the left), select the Snippets tab. To access the Snippets option, you might need to click the More tabs () button.
 Open the Snippets tab with the Command Menu 
1. Select anything in DevTools, so that DevTools has focus.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P2. Press  (macOS) to open the Command
Menu.
Snippets, select Show Snippets, and then press Enter3. Type  to run the command:

 Create Snippets
 Create a Snippet through the Sources tool 
1. Open the Snippets tab.
2. Click New snippet.
Enter3. Enter a name for your Snippet, and then press :

 Create a Snippet through the Command Menu 
1. Focus your cursor somewhere in DevTools.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P2. Press  (macOS) to open the Command
Menu.
snippet, select Create new snippet, and then press Enter3. Start typing :

To rename your new Snippet with a custom name, see Rename Snippets.
 Edit Snippets
1. Open the Snippets tab.
2. In the Snippets tab, select the name of the Snippet that you want to edit. The Snippet opens in the Code Editor:

3. Use the Code Editor to add JavaScript to your Snippet.
Ctrl+S (Windows, Linux) or Command+S4. When an asterisk appears next to the name of your Snippet, it means you have unsaved code. Press  (macOS) to save:

 Run Snippets
 Run a Snippet from the Sources tool 
1. Open the Snippets tab.
2. Click the name of the Snippet that you want to run. The Snippet opens in the Code Editor:
3. Click Run snippet ().
 Run a Snippet with the Command Menu 
1. Focus your cursor somewhere in DevTools.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P2. Press  (macOS) to open the Command
Menu.
> character and type the !3. Delete the  character followed by the name of the Snippet that you want to run:

Enter4. Press  to run the Snippet.
 Rename Snippets
1. Open the Snippets tab.
2. Right-click the Snippet name, and then select Rename.
 Delete Snippets
1. Open the Snippets tab.
2. Right-click the Snippet name, and then select Remove.
 Save Snippets
By default, Snippets are only available within DevTools, but you can also save them to disk.
1. Open the Snippets tab.
2. Right-click the Snippet name, and then select Save as.
3. Enter a file name and location when prompted.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Edit files with Workspaces (Filesystem tab)
 	6/21/2022 • 5 minutes to read • Edit OnlineThis tutorial provides hands-on practice in setting up and using a Workspace. After you add files to a
Workspace, the changes that you make in your source code within DevTools are saved on your local computer, and are preserved after you refresh the webpage.
Before beginning this tutorial, you should know how to do the following:
Use html, CSS, and JavaScript to build a web page
Use DevTools to make basic changes to CSS
Run a local HTTP web server
 Overview
Workspaces enable you to save a change that you make in Devtools to a local copy of the same file on your computer. For this tutorial, you should have the following settings on your machine.
You have the source code for your site on your desktop.
localhost:8080You are running a local web server from the source code directory, so that the site is accessible at .
localhost:8080	 You opened 	 in Microsoft Edge, and you are using DevTools to change the CSS of the site.
With Workspaces enabled, the CSS changes that you make within DevTools are saved to the source code on your desktop.
 Limitations
If you are using a modern framework, it probably transforms your source code from a format that is easy to maintain into a format that is optimized to run as quickly as possible.
Workspaces is usually able to map the optimized code back to your original source code with the help of source maps. But there is a lot of variation between frameworks over how each framework uses source maps. Devtools doesn't support all of the variations.
The Workspaces feature doesn't work with the Create React App framework.
 Related feature: Local overrides
Local Overrides is another DevTools feature that is similar to Workspaces. Use Local Overrides when you want to experiment with changes to a webpage, and you need to display the changes across webpage loads, but you don't care about mapping your changes to the source code of the webpage.
 Step 1: Set up
We'll set up the demo and then set up DevTools.
 Set up the demo 
1. Open the demo source code.
app directory on your desktop. Save copies of the index.html, styles.css, and script.js2. Create an 
app~/Desktop/appfiles from the demo source code to the  directory. For the rest of the tutorial, the directory is referred to as .
~/Desktop/app. Below is some sample code for starting up SimpleHTTPServer3. Start a local web server in , but you can use whatever server you prefer.
cd ~/Desktop/app
python -m SimpleHTTPServer # Python 2
cd ~/Desktop/app
python -m http.server # Python 3
localhost:8080 or http://0.0.0.0:80804. Open a tab in Microsoft Edge and navigate to the locally hosted version of the site. You should be able to access it using a URL like . The exact port number might be different.

 Set up DevTools 
Ctrl+Shift+J (Windows, Linux) or Command+Option+J1. Press  (macOS) to open the Console panel of DevTools.

2. Navigate to the Sources tool.
3. In the Navigator pane (on the left), click the Filesystem tab.

4. Click Add Folder To Workspace.
~/Desktop/app5. Type .
6. Click Allow to give DevTools permission to read and write to the directory.
index.html, script.js, and styles.cssIn the Filesystem tab, a green dot now appears next to . A green dot
indicates that DevTools has established a mapping between a network resource of the page, and the file in 
~/Desktop/app.

 Step 2: Save a CSS change to disk
styles.css. The color property of h1 elements is set to fuchsia1. Open .

2. Select the Elements tool.
color property of the <h1><h1>3. Change the value of the  element to your favorite color. To do this, select the  element in the DOM Tree.
<h1>The CSS rules that are applied to the  element are shown in the Styles pane. The green dot next to 
styles.css:1 means that any change that you make are mapped to ~/Desktop/app/styles.css.

styles.css in a text editor again. The color4. Open  property is now set to your favorite color.
5. Refresh the page.
<h1>The color of the  element is still set to your favorite color. The change remains across a refresh, because when you made the change DevTools saved the change to disk. And then, when you refreshed the page, your local server served the modified copy of the file from disk.
 Step 3: Save an HTML change to disk
You can change HTML tagging using the Elements tool, but to be able to save the edits, we'll use the Sources tool.
 Change HTML from the Elements Panel 
You can make changes to the HTML content in the Element tool, but your changes to the DOM tree aren't saved to disk, and only affect the current browser session.
The DOM tree is not the HTML source tagging.
 Change HTML from the Sources tool 
If you want to save a change to the HTML of the webpage, use the Sources tool.
1. Navigate to the Sources tool.
2. In the Navigator pane (on the left), click the Page tab.
3. Click (index). The HTML for the page opens.
<h1>Workspaces Demo</h1> with <h1>I ❤ Cake</h1>4. Replace . Review the following figure.
Ctrl+S (Windows, Linux) or Command+S5. Press  (macOS) to save the change.
<h1>6. Refresh the page. The  element continues to display the new text after the page is refreshed.

~/Desktop/app/index.html. The <h1>7. Open  element contains the new text.
 Step 4: Save a JavaScript change to disk
The main place to use the code editor of DevTools is the Sources tool. But sometimes you need to access other tools, such as the Elements tool or the Console panel, while editing files. The Quick source tool gives you just the editor from the Sources tool, while any tool is open.
To open the DevTools code editor alongside other tools:
1. Navigate to the Elements tool.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P2. Press  (macOS). The Command Menu opens.
quickindex.html3. Type , and then select Show Quick source. At the bottom of the DevTools window, the Quick source tool appears, displaying the contents of , which is the last file you edited in the Sources tool.

Ctrl+P (Windows, Linux) or Command+P4. Press  (macOS) to open the Open File dialog, as shown below.
script5. Type , then select app/script.js.

NOTE
Save Changes To Disk With WorkspacesThe  link in the demo is styled regularly.6. Add the following code to the bottom of script.js using the Quick source tool.
console.log('greetings from script.js');
document.querySelector('a').style = 'font-style:italic';
Ctrl+S (Windows, Linux) or Command+S7. Press  (macOS) to save the change.
8. Refresh the page. The link on the page is now italicized.

 Next steps
Use what you have learned in this tutorial to set up Workspaces in your own project.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 
Override webpage resources with local copies (Overrides tab)
 	6/21/2022 • 3 minutes to read • Edit OnlineSometimes you need to try out some possible fixes for a webpage, but you don't have access to the source files, or changing the page requires a slow and complex build process. You can debug and fix all kind of problems in DevTools. But the changes don't persist; after you refresh the local file, all your work is gone. The Overrides feature in the Sources tool helps you solve this problem.
You can now take a resource of the current webpage and store it locally. When you refresh the webpage, the browser doesn't load the resource from the server. Instead, the browser replaces the server resource with your local copy of the resource.
 Setting up your local folder to store Overrides
1. Navigate to the Sources tool.
≫2. In the Navigator pane (on the left), click the Overrides tab. If the Overrides tab isn't displayed, click the  icon.
The Sources tool with insufficient space to display the Overrides tab:

Selecting the Overrides tab:

3. Select a folder on your local computer to store the resource files that you want to replace. To search for a folder, click + Select folder for overrides.

4. DevTools warns you that must have full access to the folder and that you should not reveal any sensitive information. Select Allow to grant access.

5. In the Overrides tab, a checkbox is shown next to Enable Local Overrides. To the right of Enable
Local Overrides is a Clear configuration icon that allows you to delete your local overrides settings. You are now done setting up your folder, and are ready to replace live resources with local resources.

 Adding files to your Overrides folder
To add files to your overrides folder, open the Elements tool and inspect the webpage. To edit, click the name of the CSS file in the Styles inspector.
Selecting a file in the Styles inspector:

In the Sources editor, right-click the file name, and then click Save for overrides.
In the Sources editor, adding the name of the file to the overrides list:

Right-click a file name and then select Save for overrides:

The file is stored in your overrides folder. Verify that DevTools create a folder that is named using the URL of the file with the correct directory structure. The file is stored inside. The file name in the editor now also shows a purple dot that indicates that the file is local and not a live one.
Successfully stored the file in your overrides folder:

In the following example, you can now change the styles of the webpage. To add a red border around the file, on the Styles editor, copy the following style, and add it to the body element.
border: 10px solid firebrick
The file is automatically saved on your computer. If you refresh the file, the border is displayed and none of your work is lost.
Changing the webpage styles persistently by editing a file in your overrides folder:

On the Sources tool, in the Page section, right-click a file and then add it to overrides. Files that are already in your overrides folder have a purple dot on the icon.
Selecting a file from the Sources tool for overrides:

Alternatively, on the Network tool, right-click a file and then add it to overrides. When overrides are in effect, files that are located on your computer and not from the live webpage. When overrides are in effect, on the Network tool, locate a warning icon next to the file name.
Selecting a file from the Network tool for overrides:

 Two-way interaction of overrides
Use the editor provided with the Sources tool of DevTools or any editor you want to change the files. Changes are synced across all the products that access the files in the overrides folder.
 
 Mark content scripts as Library code
 	6/21/2022 • 2 minutes to read • Edit OnlineWhen you use the Sources tool to step through code, sometimes you pause on code that you don't recognize. You're probably paused on code for one of the Microsoft Edge Extensions that you installed. To avoid pausing on extension code:
1. In DevTools, in the upper right, click the Settings () button.
2. In the Settings > Library Code page, select the Mark content scripts as Library Code checkbox.

3. Click the Close DevTools () button.
 See also
 Step 4: Step through the code in Get started debugging JavaScript
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Disable JavaScript
 	6/21/2022 • 2 minutes to read • Edit OnlineTo see how your webpage renders and behaves when a browser doesn't have JavaScript support, temporarily turn off JavaScript.
To turn off JavaScript:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P2. Press  (macOS) to open the Command
Menu.

javascript, select Disable JavaScript, and then press Enter3. Start typing  to run the command.
JavaScript is now disabled.

The yellow warning icon next to Sources reminds you that JavaScript is disabled.

JavaScript remains disabled in the tab for as long as you have DevTools open.
To see whether the page depends on JavaScript while loading, refresh the page.
To re-enable JavaScript:
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P1. Press  (macOS) to open the Command
Menu.
2. Select the Enable JavaScript command.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 
Map the processed code to your original source code, for debugging
 	6/21/2022 • 3 minutes to read • Edit OnlineTo see and work with your original source code when you're debugging JavaScript in DevTools, rather than having to work with the compiled and minified version of your code that's returned by the web server, use source maps.
Source mapping keeps your client-side code readable and debuggable, even after your build process compiles and minifies your code and combines it into a single file. Source maps map your compiled, minified code to your original source code files. In DevTools, you can then read and debug your familiar, original source code, instead of the unrecognizable transformed and compiled code.
To use this source mapping technique, you must use pre-processors that can produce source maps. Make sure your web server can serve source maps.
 Get started with preprocessors
This article explains how to interact with JavaScript source maps in the Sources tool.
 Use a supported preprocessor
Use a minifier that is capable of creating source maps. For an extended view, see the Source maps: languages, tools and other info wiki page.
The following types of preprocessors are commonly used in combination with source maps:
Transpilers (Babel, Traceur).
Compilers (Closure Compiler, TypeScript, CoffeeScript, Dart). Minifiers (UglifyJS).
 Source maps in the Sources tool
Source maps from preprocessors cause DevTools to load your original files in addition to your minified ones. You then use the originals to set breakpoints and step through code. Meanwhile, Microsoft Edge is actually running your minified code. The running of the code gives you the illusion of running a development site in production.
When running source maps in DevTools, you should notice that the JavaScript isn't compiled, and all of the individual JavaScript files that it references are displayed. Source maps in DevTools is using source mapping, but the underlying functionality actually runs the compiled code.
Any errors, logs, and breakpoints map to the original source code, for easier debugging.
 Enable source maps in Settings 
Source maps are enabled by default.
To make sure that source maps are enabled:
CtrlShift+I (Windows, Linux) or Command+Option+I1. To open DevTools, in Microsoft Edge, right-click a webpage, and then select Inspect. Or, press +  (macOS).
2. In DevTools, click Settings () > Preferences.
3. In the Preferences page, in the Sources section, make sure the Enable JavaScript source maps checkbox and the Enable CSS source maps checkbox are selected:

4. In the upper right of Settings, click the Close (x) button.
 Debugging with source maps 
When debugging your code and source maps are enabled, source maps are used in several places:
In the Console tool, links from log messages to source files go to the original files, not the compiled files.
When stepping through code in the Sources tool, the original files are displayed in the Navigator pane on the left.
 In the Sources tool, the links to source files that appear in the Call Stack of the Debugger pane open the original source files.
//# sourceURL Use  to name evaluated files in the Sources tool
//# sourceURL pragma, such as // # sourceURL=myFileNameThe , is a convention that allows you to make
#development much easier when working with evaluated JavaScript files. There can be space characters before or after the .
eval()When loading JavaScript files and evaluating them using the  function, the Sources tool doesn't have a file name to display these files in the Navigator pane. By including the following special comment in your code, you can name evaluated files, inline scripts, and styles, so that each one appears as a recognizable file name in the Sources tool. For example:
//# sourceURL=source.coffee
 See also
Securely debug original code by publishing source maps to the Azure Artifacts symbol server
Securely debug original code by using Azure Artifacts symbol server source maps Source Maps Monitor tool
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Meggin Kearney (Technical Writer) and Paul Bakaus (Open Web Developer Advocate, Google: Tools, Performance, Animation, and UX).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 
Securely debug original code by publishing source maps to the Azure Artifacts symbol server
 	6/21/2022 • 4 minutes to read • Edit OnlineTo securely see and work with your original development source code in DevTools rather than the compiled, minified, and bundled production code that's returned by the web server, use source maps served by the Azure Artifacts symbol server.
Publishing your source maps directly to your web server would make your original source code publicly visible. To avoid making your original source code publicly visible, publish your source maps to the Azure Artifacts symbol server. This approach makes it possible to use your source maps in DevTools, when debugging your production website, without publishing the source maps to your web server.
Source maps map your compiled production code to your original development source files. In DevTools, you can then see and work with your familiar development source files, instead of the compiled code. To learn more about source mapping and using source maps in DevTools, see Map the processed code to your original source code, for debugging.
 Concepts
You must index your source maps on the Azure Artifacts symbol server, so that your source maps are available to DevTools when you debug your production website.
x_microsoft_symbol_client_keyTo do this, add the  string property to your source maps at compilation time. This
property contains the lowercase hexadecimal value of the 256-bit SHA-2 hash of your corresponding original source file.
DevTools is then able to compute this hash for each of your compiled files, and use the hash to retrieve the correct source map from the Azure Artifacts symbol server. In order to securely retrieve your source maps, DevTools uses a Personal Access Token that you provide, to connect to the Azure Artifacts symbol server.
 Step 1: Generate a Personal Access Token for Azure DevOps
Publishing source maps to the Azure Artifacts symbol server requires a Personal Access Token (or PAT). This PAT will be used by your build system when compiling code and publishing source maps.
To generate a PAT in Azure DevOps:
https://dev.azure.com/{yourorganization}1. Sign in to your Azure DevOps organization by going to .
2. In Azure DevOps, go to User settings > Personal access tokens:

The Personal Access Tokens page appears:

3. Click New Token. The Create a new personal access token dialog box opens:

4. In the Name text box, enter a name for the PAT, such as "publish source maps".
5. In the Expiration section, enter an expiration date for the PAT.
6. In the Scopes section, click Show all scopes to expand the section.
7. Scroll down to the Symbols section, and then select the Read & write checkbox.
8. Click the Create button. The Success! dialog box appears:

9. Click the Copy to clipboard button to copy the PAT. Make sure to copy the token and store it in a secure location. For your security, it won't be shown again.
To learn more about PAT, see Use personal access tokens.
 Step 2: Compute the SHA-256 hash of your script and append it to your source maps
At the final step of your application's build process, for every source map you want to publish, you should
x_microsoft_symbol_client_keycompute the SHA-256 hash of the JavaScript file to which the Source Map corresponds, and append it to the source map via the  string property.
Build systems vary from application to application, so there isn't a clear single way to apply this. But here is a sample Webpack 5 plugin, which can be added to your Webpack configuration if you're using it:

// file: webpack.plugin-symbols.js
// Copyright (C) Microsoft Corporation. All rights reserved. // Licensed under the BSD 3-clause license.
const crypto = require('crypto'); const fs = require('fs'); const path = require('path'); const process = require('process');
module.exports = class PrepareSourceMapsForSymbolServerPlugin {   /**
* @param {import('webpack').Compiler} compiler
* @returns {void}
   */
  apply(compiler) {
    compiler.hooks.emit.tap('PrepareSourceMapsForSymbolServerPlugin', (compilation) => {       const files = Object.keys(compilation.assets);
      const sourceMaps = files.filter(v => v.endsWith('.map'));       const sourceFilesAndMapsNames = sourceMaps.map(mapFileName => {
        const sourceFileName = mapFileName.substring(0, mapFileName.length - 4);         return {           sourceFileName,           mapFileName,
        };       });
      const sourceFiles = sourceFilesAndMapsNames.map(({ sourceFileName, mapFileName }) => {         const sourceFile = compilation.assets[sourceFileName];         const sourceFileBuffer = sourceFile.buffer();         const hasher = crypto.createHash('sha256');         hasher.write(sourceFileBuffer);         const digest = hasher.digest();
        const sourceFileHash = digest.toString('hex');
        const sourceMapAsset = compilation.assets[mapFileName];         const sourceMapSource = sourceMapAsset.source();         const sourceMapContents = JSON.parse(sourceMapSource);
        sourceMapContents['x_microsoft_symbol_client_key'] = sourceFileHash;         const rewrittenSourceMapContents = JSON.stringify(sourceMapContents);         if (!sourceMapAsset.isBuffer()) {
          // Not a buffer -- write to the _value property           sourceMapAsset._value = rewrittenSourceMapContents;
        }         else {
          sourceMapAsset._valueAsBuffer = Buffer.from(rewrittenSourceMapContents, 'utf-8');
        }
        return {           sourceFileName,           mapFileName,           sourceFileHash,           sourceMapAsset,
        };
      });
    });
  }
};plugins section in your webpack.config.jsYou can then add the plugin to the  configuration file:
const PrepareSourceMapsForSymbolServerPlugin = require('./webpack.plugin-symbols.js');
// ...
module.exports = (env, args) => {
  const mode = process.env.NODE_ENV || (env && env.NODE_ENV) || 'production';   return {
    devtool: mode === 'production' ? 'hidden-source-map' : 'inline-source-map',     resolve: {       modules: [
        path.resolve('./node_modules'),
      ],     },     output: {       publicPath: '/',
      filename: '[name].bundle.js',       chunkFilename: '[name].chunk.js',
    },
    plugins: [
        // ... other plugins
        new PrepareSourceMapsForSymbolServerPlugin(),     ]
  });
}; Step 3: Publish source maps to the Azure Artifacts symbol server
Complete either one of the following options to publish source maps.
 Publish source maps using Azure DevOps Pipelines 
PublishSymbols@2Azure DevOps comes with the  pipeline build task. This task can be used to publish your source maps to the Azure Artifacts symbol server.
indexableFileFormats parameter set to either AllMake sure that you configure this task with the  or 
SourceMap.
symbol.exe Publish source maps using  
symbol.exesymbol.exeThe Symbol Server team publishes a .NET Core application, , which can be downloaded automatically. After downloading , you can execute a command to publish your source maps to the Azure Artifacts symbol server:
symbol publish
        -d {root directory containing your source maps}
        -n {a unique name for this job}
        -s {service URL, such as https://artifacts.dev.azure.com/contoso}         --patAuthEnvVar {name of environment variable containing a PAT}
        --indexableFileFormats SourceMap
-nNote here that the  parameter must be unique. Repetition of job names, even failed job names, will be rejected.
 See also
Securely debug original code by using Azure Artifacts symbol server source maps
Map the processed code to your original source code, for debugging
 
 
Securely debug original code by using Azure
Artifacts symbol server source maps
 	6/21/2022 • 3 minutes to read • Edit OnlineTo securely see and work with your original development source code in DevTools rather than the compiled, minified, and bundled production code that's returned by the web server, you can use source maps published on the Azure Artifacts symbol server.
Source maps map your compiled production code to your original development source files. In DevTools, you can then see and work with your familiar development source files, instead of the compiled code. To learn more about source mapping and using source maps in DevTools, see Map the processed code to your original source code, for debugging.
Downloading your source maps from the Azure Artifacts symbol server makes it possible to debug your production website by retrieving your original development source code securely.
 Prerequisite: Publish source maps to the Azure Artifacts symbol server
To use source maps from the Azure Artifacts symbol server in DevTools, they need to be published to the server first.
To learn about how to publish source maps, see Securely debug original code by publishing source maps to the Azure Artifacts symbol server.
 Step 1: Generate a Personal Access Token for Azure DevOps
To obtain source maps from the Azure Artifacts symbol server, DevTools uses the fetch protocol to talk to Azure DevOps, which requires a valid Personal Access Token (PAT).
You need to generate a PAT even if you already generated one to publish source maps to the symbol server in Securely debug original code by publishing source maps to the Azure Artifacts symbol server.
To generate a PAT in Azure DevOps:
https://dev.azure.com/{yourorganization}1. Sign in to your Azure DevOps organization by going to .
2. In Azure DevOps, go to User settings > Personal access tokens:

The Personal Access Tokens page appears:

3. Click New Token. The Create a new personal access token dialog box opens:

4. In the Name text box, enter a name for the PAT, such as "devtool source maps".
5. In the Expiration section, enter an expiration date for the PAT.
6. In the Scopes section, click Show all scopes to expand the section.
7. Scroll down to Symbols, and then select the Read checkbox.
8. Click the Create button. The Success! dialog box appears:

9. Click the Copy to clipboard button to copy the PAT. Make sure to copy the token and store it in a secure location. For your security, it won't be shown again.
To learn more about PAT, see Use personal access tokens.
 Step 2: Configure DevTools
DevTools now needs to be configured with the PAT to successfully retrieve the source maps.
To configure DevTools:
CtrlShift+I (Windows, Linux) or Command+Option+I1. To open DevTools, in Microsoft Edge, right-click a webpage, and then select Inspect. Or, press +  (macOS).
2. In DevTools, click Settings () > Symbol Server.
3. In the Azure DevOps organization text box, enter the Azure DevOps organization where you created the PAT.
4. In the Azure DevOps personal access token text box, paste your PAT.

5. Click x in the upper right to close the Settings panel, and then click the Reload DevTools button.
 Step 3: Retrieve original code in DevTools
After the above setup steps, when you use DevTools to work on a build of your web site for which symbols have been published, you can now see your original source code, instead of the transformed code.
In the Console tool, links from log messages to source files go to the original files, not the compiled files.
When stepping through code in the Sources tool, the original files are listed in the Navigator pane on the left.
 In the Sources tool, the links to source files that appear in the Call Stack of the Debugger pane open the original source files.
 Check the status of downloaded source maps
You can check the status of your source maps by using the Source Maps Monitor tool.
To learn more about the Source Maps Monitor tool and how it can help monitor which source files requested source maps, and whether those source maps were loaded, see Source Maps Monitor tool.
 See also
Securely debug original code by publishing source maps to the Azure Artifacts symbol server
Map the processed code to your original source code, for debugging
Source Maps Monitor tool

 
 
Navigate webpage layers, z-index, and DOM using the 3D View tool
 	6/21/2022 • 9 minutes to read • Edit OnlineUse the 3D View tool to debug your web app by rotating your page in 3D space to get a perspective on your webpage, represented as layers. 3D visualization helps you understand the DOM hierarchy for your webpage in terms of z-index layers.

On the left, the 3D View tool has 3 tabs:
The Composited Layers tab shows a realistic rendering of the webpage, including images, for a comprehensive experience as you move the page around in 3D space.
The Z-index tab. Explore the elements of the webpage, with an emphasis on the z-index layer context. Use this tab, or view, to debug the webpage based on the z-index stacking context.
The DOM tab. Explore the DOM as a whole, with all of the elements easily accessible. Explore all the elements of the webpage, translated into a 3D perspective.
On the right, the 3D canvas represents the webpage according to which tab and options you select.
 Zoom, pan, and rotate the 3D canvas
 Zoom the page in or out 
To zoom the webpage in or out on the 3D canvas, use the mouse scroll wheel, or use the slider in the lower right.
	 Pan view  	(button)
To shift the page left, right, up, or down, click the Pan view () button and then drag the page on the 3D canvas in the desired direction with your mouse.
	 Rotate view  	(button)
To rotate the page by using the mouse, click the Rotate view () button and then drag the page on the 3D canvas in the desired angle with your mouse.
To rotate the page by using the keyboard, click in the 3D canvas to put focus on it so that a black border appears, and then press the arrow keys.
left arrow and right arrowup arrow and down arrowTo rotate the page horizontally, press the  keys. To rotate the page vertically, press the  keys.
The keys rotate the page, regardless of whether the Pan view or Rotate view button is selected in the toolbar.
For more information, see these other sections in this page:
Toolbar above the 3D canvas
Movement controls in lower right
 The Composited Layers tab
In the Composited Layers view, the 3D canvas displays the list of layers created by the browser rendering engine for the webpage.
Use the Composited Layers view to analyze how many layers are created by your CSS code, how big they are, and how often they change.
On the 3D canvas on the right, select an element of the webpage. In the Composited Layers tab, the layers tree expands automatically, and the Details tab below the layers tree shows information about the selected layer.

	 Slow scroll rects  	(checkbox)
The Slow scroll rects checkbox highlights sections of the page that cause slow scrolling. This checkbox is helpful to investigate performance problems. Certain webpages use JavaScript to detect scroll (or touch) on certain page elements in a way that may make scrolling through the webpage slower than it normally could be.
This checkbox highlights (in pink) the boxes of the rendered webpage that may cause these performance issues.
This checkbox is similar to the Scrolling performance issues checkbox in the Rendering tool, which highlights the slow rects on the page directly (in yellow). See Find scroll performance issues in realtime in Performance features reference. Both checkboxes are based on the same debugging info, but these two tools present this information differently.
	 Paints  	(checkbox)
Renders the content from the webpage (color or image file) onto the elements.
 Layers expander tree 
Expand this tree to display the list of composited layers. Click on a layer to review detailed information about it in the Details info pane.
 Details info pane 
 Size 
The width and then the height of the selected composited layer, along with the location of the upper left of the layer relative to the upper left of the page viewport. For example, "1034 x 28055 (at 0, 0)".
 Compositing Reasons 
Reasons why the browser rendering engine created the layer. For example: "Secondary layer, to house contents that can be scrolled."
 Memory estimate 
The memory consumed for the selected layer. For example: "116 MB".
 Paint count 
How many times the selected layer was painted by the rendering engine.
 The Z-index tab
The Z-index tab contains some of the same features as the DOM tab, but adds z-index labels on the 3D canvas.

For background information, see MDN > CSS Reference > z-index.
	 Show Elements type  	(section)
The Show Elements type section in the Z-index tab controls which elements of the page are shown in the 3D canvas.
 The Show all radio button shows all elements of the page. This view is the quickest way to display all the page elements after changing the other 3D display settings.
 The Show only stacking contexts radio button only shows the page elements which are relevant to zindex stacking. This view removes elements that don't participate in a stacking context, and flattens the DOM to produce easier navigation in the 3D canvas.
The Show z-index labels checkbox shows or hides the z-index labels in the 3D canvas. By default, this checkbox is selected.
	 Color type  	(section)
In the Z-index tab, you can choose from the following color schemes to visualize the DOM in the 3D canvas:
Purple to White radio button - The 3D canvas shows elements ranging from purple to white.
Use background color radio button - The 3D canvas shows elements rendered using the background color that's defined for each element.
These radio buttons allow you to toggle through the options and pick the color type. The color type is either most appropriate for your project or one that you like the most. The z-index labels add visual information on the 3D canvas, so per user feedback, there are fewer color options in the Z-index tab than in the DOM tab.
 The DOM tab
The DOM tab provides a general debugging view, rather than focusing on z-index. The DOM is stacked more closely and cleanly than in the Z-index tab, because there aren't z-index context labels on the 3D canvas.

	 Nesting level for page  	(slider)
1The number next to the slider indicates the number of layers for the document. Dragging the slider to the left causes the outermost layers to peel away until you are left with a nesting level set to , which displays only the furthest-back element in the DOM. To remove some of the clutter, drag the slider. It helps you get a closer look at what is happening in the lower levels.
 Reset button 
Resets the Nesting level for page slider to the default value for the page.
	 Color type  	(section)
In the DOM tab, You can choose from the following color schemes visualize the DOM in the 3D canvas:
Purple to White radio button - The 3D canvas shows elements ranging from purple to white.
Blue to Yellow radio button - The 3D canvas shows elements ranging from blue to yellow.
Rainbow radio button - The 3D canvas shows elements as purple, blue, green, yellow, orange, and red.
Use screen texture radio button - Renders the content from the webpage (color or image file) onto the elements.
 Use background color radio button - The 3D canvas shows elements rendered using the background color that's defined for each element.
 Toolbar above the 3D canvas
	 Retake snapshot  	(button)
Click the Retake snapshot () button to re-load the DOM to match the latest webpage viewport. For example, after you make the viewport narrower or when you switch to a Device Emulation view, per Emulate mobile devices (Device Emulation).
When the Composited Layers tab is selected, this button is omitted, because retaking the snapshot happens automatically when you resize the viewport.
	 Reset view  	(button)
Click the Reset view button () to reset the panning and rotation of the page.
	 Pan view  	(button)
To shift the page left, right, up, or down, click the Pan view () button and then drag the page on the 3D canvas in the desired direction with your mouse.
	 Rotate view  	(button)
To rotate the page by using the mouse, click the Rotate view () button and then drag the page on the 3D canvas in the desired angle with your mouse.
To rotate the page by using the keyboard, click in the 3D canvas to put focus on it so that a black border appears, and then press the arrow keys.
left arrow and right arrowup arrow and down arrowTo rotate the page horizontally, press the  keys. To rotate the page vertically, press the  keys.
The keys rotate the page, regardless of whether the Pan view or Rotate view button is selected in the toolbar.
	 Isolate selected element  	(button and section)
Instead of showing all the page's DOM elements in the 3D canvas, you can focus on just displaying a portion of the DOM.
Select an element of the webpage in the 3D canvas, and then click the Isolate selected element button. The 3D canvas displays the selected element and the element's parents or children, without displaying the rest of the page elements.
Use this button to display the element that you selected on the 3D canvas, while reducing the clutter that complex webpages can create in the 3D canvas.
	 Include parents  	(checkbox)
The Include parents checkbox controls whether the parent elements of a selected page element are displayed in the 3D canvas. The Include parents checkbox is turned on by default. When this checkbox is selected, to display an element and any of its parent elements on the 3D canvas, select an element in the 3D canvas or in the Elements tool, and then click the Isolate selected element button.
This checkbox is shown when the Z-index or DOM tab is selected.
	 Include children  	(checkbox)
The Include children checkbox is only shown when the DOM tab is selected.
To display only the DOM element that you selected, along with and parents and children of the element:
 Select the Include parents and Include children checkboxes, and then click the Isolate selected element button. This is the default.
To display only the DOM element that you selected, along with the element's parent elements, but not the element's child elements:
 Select the Include parents checkbox, clear the Include children checkbox, and then click the Isolate selected element button.
To display only the DOM element that you selected, along with the element's child elements, but not the element's parent elements:
 Clear the Include parents checkbox, select the Include children checkbox, and then click the Isolate selected element button.
To display only the DOM element that you selected, without its parent or child elements:
 Clear the Include parents and the Include children checkbox, and then click the Isolate selected element button.
 Movement controls in lower right

The controls in the lower right of the 3D canvas work the same, regardless of which tab you select.
 Zoom slider - This zooms the page in or out, same as the mouse scroll wheel, or dragging two fingers across the touchpad.
Up button - Moves the page up, relative to the page's coordinate system.
Down button - Moves the page down, relative to the page's coordinate system.
Left button - Moves the page right, relative to the page's coordinate system.
 Right button - Moves the page left, relative to the page's coordinate system.
 See also
MDN > Web APIs > Document Object Model (DOM)
MDN > CSS Reference > z-index

 
 Inspect and modify CSS animation effects
 	6/21/2022 • 4 minutes to read • Edit OnlineInspect and modify CSS animation effects by using the Animation Inspector in the Animations tool.

 Summary 
 Capture animations by opening the Animations tool. The Animations tool automatically detects and sorts animations into groups.
Inspect animations by slowing down each one, replaying each one, or viewing the source code.
Modify animations by changing the timing, delay, duration, or keyframe offsets.
 Overview
The Animations tool has two main purposes:
Inspecting animations. You can slow down, replay, or inspect the source code for an Animation Group.
Modifying animations. You want to modify the timing, delay, duration, or keyframe offsets of an Animation Group. Bezier editing and keyframe editing are currently not supported.
The Animation Inspector supports CSS animations, CSS transitions, and web animations. requestAnimationFrame animations are currently not supported.
 What's an Animation Group? 
An Animation Group is a group of animations that may be related to each other. Currently, the web has no real concept of a group animation, so motion designers and developers have to compose and time individual animations so that the animations render as one coherent visual effect. The Animation Inspector predicts which animations are related based on start time (excluding delays, and so on). The Animation Inspector also groups the animations side-by-side.
In other words, a set of animations that are all triggered in the same script block are grouped together. If an
animation is asynchronous, it is placed in a separate group.
 Get started
To open the Animation Inspector, use any of these approaches, in DevTools:
From the main toolbar or on the Drawer: click the More Tools (
From the Customize menu: Click the Customize and control DevTools ( More tools sub-menu, and then select Animations.
Shift+Ctrl+P	 From the Command Menu: When DevTools has focus, press 	 on Windows/Linux or 
Command+Shift+P on macOS to open the Command Menu, start typing animations, and then select
Drawer: Show Animations.
By default, the Animations tool opens in the Drawer, next to the Console tool. By using the Animations tool on the Drawer, you can use it at the same time as using another tools on the main toolbar.

The Animation Inspector is grouped into four main sections (or panes). This guide refers to each pane as follows:
INDEXPANEDESCRIPTION1ControlsFrom here you can clear all currently captured Animation Groups, or change the speed of the currently selected Animation Group.2OverviewSelect an Animation Group here to inspect and modify it in the Details pane.3TimelinePause and start an animation from here, or jump to a specific point in the animation.4DetailsInspect and modify the currently selected Animation Group.
To capture an animation, just perform the interaction that triggers the animation while the Animation Inspector is open. If an animation is triggered on page load, refresh the page with the Animation Inspector open to detect the animation.
 Inspect animations
After you capture an animation, there are a few ways to replay it:
Hover on the thumbnail in the Overview pane to view a preview of it.
Select the Animation Group from the Overview pane (so that it is displayed in the Details pane), and then click the replay ( ) icon. The animation is replayed in the viewport. Click the animation speed (
                            ) icons to change the preview speed of the currently selected Animation Group. You can use the red vertical bar to change your current position. Click and drag the red vertical bar to scrub the viewport animation.
 View animation details 
After you capture an Animation Group, click on it from the Overview pane to view the details. In the Details pane, each individual animation is assigned to a row.

Hover on an animation to highlight it in the viewport. Click on the animation to select it in the Elements tool.

The leftmost, darker section of an animation is its definition. The right, more faded section represents iterations.
For example, in the following figure, sections two and three represent iterations of section one:

If two elements have the same animation applied to them, the Animation Inspector assigns the same color to the
elements. The color is random and has no significance. For example, in the following figure, the two elements 
spinrightleftdiv.cwccw.laterdiv.ccwcw.laterdiv.cwccw.earlierdiv.ccwcw.earlier and  have the same animation () applied, as do the  and  elements.

 Modify animations
There are three ways you can modify an animation with the Animation Inspector:
Animation duration.
Keyframe timings. Start time delay.
For this section, suppose that the screenshot below represents the original animation:

To change the duration of an animation, click and drag the first or last circle.

If the animation defines any keyframe rules, then these are represented as white-filled inner circles. Click and drag a white-filled inner circle to change the timing of the keyframe:

To add a delay to an animation, click the animation anywhere except the circles, and drag it:

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Application tool, to manage storage
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the Application tool to manage storage for web app pages, including manifest, service workers, local storage, cookies, cache storage, and background services.

The Application tool has the following pages:
Application
Manifest
Service Workers
Storage
Storage
Local Storage
IndexedDB
Web SQL
Cookies
Trust Tokens
 Interest Groups Cache
Cache Storage
Back/forward cache
Background Services
Background Fetch
Background Sync
Notifications
Payment Handler
Periodic Background Sync
Push Messaging
Reporting API
Frames

 
 View, edit, and delete cookies
 	6/21/2022 • 2 minutes to read • Edit OnlineHTTP cookies are used to manage user sessions, store user personalization preferences, and track user behavior. Use the Cookies pane of the Application tool to view, edit, and delete the HTTP cookies for a webpage.
See Using HTTP cookies.
 Open the Cookies pane
1. Open DevTools.
2. Click the Application tab to open the Application panel. The Manifest pane opens:

3. Under Storage, expand Cookies, then select an origin:

 Fields
The Cookies table contains the following fields:
Name. The name of the cookie.
Value. The value of the cookie.
CookieDomain. The hosts that are allowed to receive the cookie. See Scope of cookies.
Path. The URL that must exist in the requested URL in order to send the  header. See Scope of cookies.
Session Expires / Max-Age. The expiration date or maximum age of the cookie. See Permanent cookies. For session cookies this value is always .
Size. The size, in bytes, of the cookie.
HTTP. If true, this field indicates that the cookie should only be used over HTTP, and JavaScript modification isn't allowed. See HttpOnly cookies.
 Secure. If true, this field indicates that the cookie must be sent to the server only over a secure, HTTPS connection. See Secure cookies.
strict or laxlow, medium (default), or highSameSite. Contains  if the cookie is using the experimental Samesite attribute.
Priority. Contains  if the cookie is using the deprecated cookie Priority attribute.
 Filter cookies
To filter cookies by Name or Value, use the Filter text box:

Filtering by other fields isn't supported.
 Edit a cookie
The Name, Value, Domain, Path, and Expires / Max-Age fields are editable. Double-click a field to edit it:

 Delete cookies

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 View and edit local storage
 	6/21/2022 • 2 minutes to read • Edit OnlineTo view, edit, and delete localStorage key-value pairs, use the Application tool.
 View localStorage keys and values
1. Click the Application tab to open the Application tool. The Manifest pane is shown by default.

2. Expand the Local Storage menu.

3. Click a domain to view the key-value pairs.

4. Click a row of the table to view the value in the viewer below the table.

 Create a new localStorage key-value pair
1. View the localStorage key-value pairs of a domain.
2. Double-click the empty part of the table. DevTools creates a new row and focuses your cursor in the Key column.

 Edit localStorage keys or values
1. View the localStorage key-value pairs of a domain.
2. Double-click a cell in the Key or Value column to edit that key or value.

 Delete localStorage key-value pairs
localStorage1. View the  key-value pairs of a domain.
2. Click the key-value pair that you want to delete. DevTools highlights it blue to indicate that it is selected.
Delete3. Press 	, or click Delete Selected ().
 
localStorageDelete all  key-value pairs for a domain
localStorage1. View the  key-value pairs of a domain.
2. Click Clear All ().
 Interact with localStorage from the Console
localStorageSince you can run JavaScript in the Console, and since the Console has access to the JavaScript contexts of the page, it is possible to interact with  from the Console.
localStorage1. Use the JavaScript contexts menu to change the JavaScript context of the Console if you want to access the  key-value pairs of a domain other than the page that is displayed.

localStorage2. Run your  expressions in the Console, the same as you do in your JavaScript.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 View and change IndexedDB data
 	6/21/2022 • 2 minutes to read • Edit OnlineTo view and change IndexedDB data, use the Application tool.
 View IndexedDB data
1. In DevTools, click the Application tab to open the Application tool. The Manifest pane usually opens by default.

2. Expand the IndexedDB menu to review which databases are available.

NOTE
<iframe>Known Limitation Third-party databases aren't visible. For example, if you use an  to embed an ad on your page, and your ad network uses IndexedDB, the IndexedDB data for your ad network isn't visible. See issue #943770.3. Select a database, to see the origin and version number.

4. Click an object store, to see the key-value pairs.
NOTE
IndexedDB data doesn't update in real-time. See Refresh IndexedDB data.

generators.
5. Click a cell in the Value column to expand the value.

6. Click an index, such as title or body in the following figure, to sort the object store according to the values of that index.

 Refresh IndexedDB data
IndexedDB values in the Application tool don't update in real-time.
To refresh the data, view an object store and then click Refresh ().
To refresh all data, view a database and click Refresh database.

 Edit IndexedDB data
IndexedDB keys and values aren't editable from the Application tool. However, since DevTools has access to page context, you can run JavaScript code within DevTools to edit IndexedDB data.
 Edit IndexedDB data with Snippets 
Snippets are a way to store and run blocks of JavaScript code within DevTools. When you run a Snippet, the result is logged to the Console. You can use a Snippet to run JavaScript code to edit an IndexedDB database.

 Delete IndexedDB data
	 Delete an IndexedDB key 	-value pair
1. View an IndexedDB object store.
2. Click the key-value pair that you want to delete. DevTools highlights it to indicate that it is selected.

Delete3. Press 	 or click Delete Selected ().

	 Delete all key 	-value pairs in an object store
1. View an IndexedDB object store.

2. Click Clear object store ().
 Delete an IndexedDB database 
1. View the IndexedDB database that you want to delete.
2. Click Delete database.

 Delete all IndexedDB storage 
1. Open the Clear storage pane.
2. Make sure that the IndexedDB checkbox is enabled.
3. Click Clear site data.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 View and edit session storage
 	6/21/2022 • 2 minutes to read • Edit OnlineTo view, edit, and delete sessionStorage key-value pairs, use the Application tool.
 View sessionStorage keys and values
1. In DevTools, click the Application tab to open the Application tool. The Manifest panel is shown by default.

2. Expand the Session Storage menu.

3. Click a domain to view the key-value pairs.

4. Click a row of the table to view the value in the viewer below the table.

 Create a new sessionStorage key-value pair
1. View the sessionStorage key-value pairs of a domain.
2. Double-click the empty part of the table. DevTools creates a new row and focuses your cursor in the Key column.

 Edit sessionStorage keys or values
1. View the sessionStorage key-value pairs of a domain.
2. Double-click a cell in the Key or Value column to edit that key or value.

 Delete sessionStorage key-value pairs
sessionStorage1. View the  key-value pairs of a domain.
2. Click the key-value pair that you want to delete. DevTools highlights it blue to indicate that it is selected.
Delete3. Press 	 or click Delete Selected ().
 Delete all sessionStorage key-value pairs for a domain
sessionStorage1. View the  key-value pairs of a domain.
2. Click Clear All ().
 Interact with sessionStorage from the Console
sessionStorageSince you can run JavaScript in the Console, and since the Console has access to the JavaScript contexts of the page, it's possible to interact with  from the Console.
sessionStorage1. Use the JavaScript contexts menu to change the JavaScript context of the Console if you want to access the  key-value pairs of a domain other than the page you are on.

sessionStorage2. Run your  expressions in the Console, the same as your JavaScript.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 View Web SQL data
 	6/21/2022 • 2 minutes to read • Edit OnlineThis article shows how to use DevTools to inspect Web SQL data.
WARNING
The Web SQL specification is not being maintained.
 View Web SQL Data
1. In DevTools, open the Application tool. The Manifest pane usually opens by default.

2. Expand the Web SQL section to view databases and tables. In the following figure, below html5meetup is a database and rooms is a table.

3. Click a table to view the data for that table.

 Edit Web SQL data
You can't edit Web SQL data when viewing a Web SQL table, such as in the previous figure. But you can run statements from the Web SQL Console that edit or delete tables. See Run Web SQL queries.
 Run Web SQL queries
1. Click a database to open a console for that database.
Enter2. Type a Web SQL statement, then press  to run it.

 Refresh a Web SQL table
DevTools doesn't update tables in real-time. To update the data in a table:
1. View the data in a Web SQL table.
2. Click Refresh ().
 Filter out columns in a Web SQL table
1. View the data in a Web SQL table.
2. Use the Visible columns text box to specify what columns you want to show. Provide the column names as a CSV list.

 Delete all Web SQL data
1. Open the Clear Storage pane.
2. Make sure that the Web SQL checkbox is turned on.

3. Click Clear site data.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 View Cache data
 	6/21/2022 • 2 minutes to read • Edit OnlineThis guide shows you how to use DevTools to inspect Cache data.
To inspect HTTP cache data, in the Network tool, use the Size column of the Network Log. See Log network activity in Inspect network activity.
 View cache data
1. Click the Application tab to open the Application panel. The Manifest pane usually opens by default.

2. Expand the Cache Storage section to view available caches.

3. Click a cache to view the contents.

4. Click a resource to view the HTTP headers in the section below the table.

5. Click Preview to view the content of a resource.

 Refresh a resource
1. View the data for a cache.
2. Click the resource that you want to refresh. DevTools highlights it to indicate that it is selected.

 Filter resources
1. View the data for a cache.
2. Use the Filter by Path text box to filter out any resources that don't match the path that you provide.

 Delete a resource
1. View the data for a cache.
2. Click the resource that you want to delete. DevTools highlights it to indicate that it is selected.

 Delete all cache data
1. Open Application > Clear storage.
2. Make sure that the Cache storage checkbox is selected.

3. Click the Clear site data button.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Debug Progressive Web Apps (PWAs)
 	6/21/2022 • 5 minutes to read • Edit OnlineUse the Application panel to inspect, modify, and debug web app manifests, service workers, and service worker caches.
This article only discusses the Progressive Web App features of the Application panel. For help on the other panes in the Application panel, see View page resources and View and edit local storage.
See also Overview of Progressive Web Apps (PWAs).
 Summary 
Use the Manifest pane to inspect your web app manifest and trigger Add to Homescreen events.
Use the Service Workers pane for a whole range of service-worker-related tasks, like unregistering or updating a service, emulating push events, going offline, or stopping a service worker.
View your service worker cache from the Cache Storage pane.
Unregister a service worker and clear all storage and caches with a single button click from the Clear storage pane.
 Web app manifest
If you want your users to be able to add your app to their mobile homescreens, you need a web app manifest. The manifest defines how the app appears on the homescreen, where to direct the user when launching from homescreen, and what the app looks like on launch.
After you have your manifest set up, you can use the Manifest pane of the Application panel to inspect it.

https://airhorner.com/manifest.json in the previous figure).
 The Identity and Presentation sections just display fields from the manifest source in a more userfriendly display.
 The Icons section displays every icon that you've specified.
 Service workers
Service workers are a fundamental technology in the future web platform. They are scripts that the browser runs in the background, separate from a web page. The scripts allow you to access features that without the need of a web page or user interaction, like push notifications, background sync, and offline experiences.
The Service Workers pane in the Application panel is the main place in DevTools to inspect and debug service workers.
If a service worker is installed to the currently open page, then it is listed on this pane. For example, in the previous figure, there is a service worker installed for the scope of 
https://weather-pwa-sample.firebaseapp.com.
Go offline The Offline checkbox puts DevTools into offline mode. This is equivalent to the offline mode available from the Network tool, or the  option in the Command Menu.
The Update on reload checkbox forces the service worker to update on every page load.
The Bypass for network checkbox bypasses the service worker and forces the browser to go to the network for requested resources.
The Update button performs a one-time update of the specified service worker.
The Push button emulates a push notification without a payload (also known as a tickle).
The Sync button emulates a background sync event.
The Unregister button unregisters the specified service worker. Check out Clear storage for a way to unregister a service worker and wipe storage and caches with a single button click.
 The Source line tells you when the currently running service worker was installed. The link is the name of the source file of the service worker. Choosing on the link sends you to the source of the service worker.
#36 The Status line tells you the status of the service worker. The ID number next to the green status indicator ( in previous figure) is for the currently active Service Worker. Next to the status, a start button (if the service worker is stopped) or a stop button (if the service worker is running) is displayed. Service workers are designed to be stopped and started by the browser at any time. Explicitly stopping your service worker using the stop button may simulate that. Stopping your service worker is a great way to test how your code behaves when the service worker starts back up again. It frequently reveals bugs due to faulty assumptions about persistent global state.
 The Clients line tells you the origin that the service worker is scoped to. The focus button is mostly useful when you've enabled the show all checkbox. When that checkbox is enabled, all registered service workers are listed. If you click the focus button next to a service worker that is running in a different tab, Microsoft Edge focuses on that tab.
If the service worker causes any errors, a new label called Errors shows up.
 Service worker caches
The Cache Storage pane provides a read-only list of resources that have been cached using the (service worker) Cache API.

NOTE
The first time you open a cache and add a resource to it, DevTools may not detect the change. Refresh the page and to display the cache.
If you have two or more caches open, the caches are displayed under the Cache Storage dropdown list, as shown in the following screenshot.

 Quota usage
Some responses within the Cache Storage pane may be flagged as being "opaque". This refers to a response retrieved from a different origin, like from a CDN or remote API, when CORS isn't enabled.
QuotaExceedednavigator.storageIn order to avoid leakage of cross-domain information, significant padding is added to the size of an opaque response used for calculating storage quota limits (for example whether a  exception is thrown) and reported by the  API.
The details of this padding vary from browser to browser, but for Microsoft Edge, this means that the minimum size that any single cached opaque response contributes to the overall storage usage is approximately 7 megabytes. Remember the padding when determining how many opaque responses you want to cache, since you may easily exceed storage quota limitations much sooner than you otherwise expect based on the actual size of the opaque resources.
Related Guides:
 Stack Overflow: What limitations apply to opaque responses?
 Clear storage
The Clear Storage pane is a very useful feature when developing progressive web apps. This pane lets you unregister service workers and clear all caches and storage with a single button click.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Debug background services
 	6/21/2022 • 5 minutes to read • Edit OnlineThe Background Services section of Microsoft Edge DevTools is a collection of tools for the Web APIs that enable your website to send and receive data even when a user doesn't use your website, and enable the browser to report production problems to your server.
Microsoft Edge DevTools considers each of the following APIs to be a background service:
Background Fetch
Background Sync
Notifications
Payment Handler
Periodic Background Sync
Push Messages
Reporting API
The Background Services section logs API events, even when you're not using DevTools, to help you make sure that events are being sent and received as expected.
 Background Fetch
The Background Fetch API enables the service worker of a Progressive Web App to reliably download large resources, like movies or podcasts, as a background service. To log Background Fetch events for 3 days, even when DevTools isn't open:
Ctrl+Shift+I1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing 
Command+Option+I(Windows, Linux) or  (macOS).
2. In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools () button.
3. On the left, in the Background Services section, select Background Fetch. The Background Fetch page opens.

5. Click an event to view its details in the space below the table.

 Background Sync
The Background Sync API enables the offline service worker of a Progressive Web App to send data to a server once it has re-established a reliable internet connection. To log Background Sync events for 3 days, even when DevTools isn't open:
Ctrl+Shift+I1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing 
Command+Option+I(Windows, Linux) or  (macOS).
2. In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools () button.
3. On the left, in the Background Services section, select Background Sync. The Background Sync page opens.

4. Click Record (). After triggering some Background Sync activity, DevTools logs the events to the table.

5. Select an event to view its details in the space below the table.

 Notifications
After a service worker has received a Push Message from a server, the service worker uses the Notifications API to display the data to a user. To log Notifications for 3 days, even when DevTools isn't open:
Ctrl+Shift+I1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing 
Command+Option+I(Windows, Linux) or  (macOS).
2. In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools () button.

3 On the left, in the Background Services section, select Notifications. The Notifications page opens.

5. Click an event to view its details in the space below the table.

 Payment Handler
The Payment Handler API allows web applications to handle payment requests on behalf of users. To log the payment request and response events for 3 days, even when DevTools isn't open:
Ctrl+Shift+I1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing 
Command+Option+I(Windows, Linux) or  (macOS).
2. In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools () button.
3. On the left, in the Background Services section, select Payment Handler. The Payment Handler page opens.

4 Click Record (). After triggering some payment requests, DevTools logs the events to the table.

5. Click an event to view its details in the space below the table.

 Periodic Background Sync
The Periodic Background Sync API enables the service worker of a Progressive Web App to retrieve data from a server, periodically, even when the website isn't opened. To learn more about the Periodic Background Sync API, see Use the Periodic Background Sync API to regularly get fresh content.
To log Periodic Background Sync events for 3 days, even when DevTools isn't open:
Ctrl+Shift+I1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing 
Command+Option+I(Windows, Linux) or  (macOS).

2 In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools () button.
3. On the left, in the Background Services section, select Periodic Background Sync. The Periodic Background Sync page opens.
4. Click Record ( the table.

 Push Messages
To display a push notification to a user, the service worker of a Progressive Web App must first use the Push Message API to receive data from a server. When the service worker is ready to display the notification, it uses the Notifications API. To log Push Messages for 3 days, even when DevTools isn't open:
Ctrl+Shift+I1 Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing 
Command+Option+I(Windows, Linux) or  (macOS).
2. In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools () button.
3. On the left, in the Background Services section, select Push Messaging. The Push Messaging page opens.

4. Click Record (). After triggering some Push Message activity, DevTools logs the events to the table.

5. Click an event to view the details in the space below the table.

 Reporting API
The Reporting API enables web developers to receive reports of security violations, deprecated API calls, and others, from their production websites.
To see reports that have been sent by the browser using the Reporting API:
Ctrl+Shift+I1. Open DevTools by right-clicking the webpage and selecting Inspect. Or by pressing 
Command+Option+I(Windows, Linux) or  (macOS).
2. In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools () button.
3. On the left, in the Background Services section, select Reporting API. The Reporting API page opens.


4. The Reporting API page displays the reports sent in the table at the top.

5. Click a report to view the details in the space below the table.

Reporting-Endpoints6. The Reporting API page also displays the list of reporting endpoints configured via the  HTTP header in the table at the bottom.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored
by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse). 	 This work is licensed under a Creative Commons Attribution 4.0 International License. 
 Track changes to files using the Changes tool
 	6/21/2022 • 2 minutes to read • Edit OnlineThe Changes tool tracks any changes you've made to CSS or JavaScript in DevTools. It shows you what changes to make to your actual source files after you've successfully used DevTools to modify your webpage files sent from the server.
Use the Changes tool to quickly display all your changes in order to re-apply those changes to the actual source files in your editor (in your Integrated Development Environment; IDE).

In DevTools, use any of the following ways to open the Changes tool. The Changes tool is a Drawer tool; by default, it opens in the Drawer.
 Open the Changes tool by right-clicking in a changed file
In the Sources tool, right-click any file that shows that it was changed, and then select Local modifications:

 Open the Changes tool by clicking the More Tools icon
+On the main toolbar or Drawer toolbar, click the More Tools () icon and then select Changes:

The Changes tool appears in the main toolbar or in the Drawer, depending on which toolbar you used.
 Open the Changes tool by clicking the Customize DevTools icon
...Click Customize and control DevTools (), point to More tools, and then select Changes:

 Open the Changes tool by using the Command Menu
Ctrl+Shift+P on Windows/Linux or Command+Shift+PEnterOpen the Command Menu by pressing  on Mac, and then type changes. The Show Changes command is highlighted; press .

 Interpret added lines, removed lines, and differences in a line
diffEach modified file is listed in the side pane. Selecting a file shows the modifications as a  view. You won't see the entire file, but only the lines that have changed, along with a few lines above and below the changed lines, for context.

TYPE OF CHANGEINDICATORRemoved line-Each line that was removed from the code is preceded by a  and is colored red.Added line+Each new line has a  in front of it and is colored green.Changed line- line and then a +An adjacent pair of lines, with a  line.Changes are represented as insertion or deletion of individual lines of code, in the two columns of line numbers. The left column represents line numbers in the old file, and the right column represents lines numbers in the new file.
 Open a changed file in the Sources tool
Clicking a modified line in the Changes tool opens the file in the Sources tool, scrolled to the modified line.
 Undo all changes
Revert all changes to the current fileTo undo all changes, click the  button, shown as a circular arrow.

 Horizontally scroll entries
When you have made a change to a minified file, the Changes tool enables you to scroll horizontally to display all of your minified code. To scroll horizontally, click the horizontal scrollbar or press the arrow keys.

 
 
Find unused JavaScript and CSS code with the Coverage tool
 	6/21/2022 • 2 minutes to read • Edit OnlineThe Coverage tool can help you find unused JavaScript and CSS code. Removing unused code can speed up your page load and save your mobile users cellular data.

Finding unused code is relatively easy. But refactoring a codebase so that each page only ships the JavaScript and CSS that it needs can be difficult. This guide doesn't cover how to refactor a codebase to avoid unused code, because this refactoring depends on your technology stack.
 Overview
Shipping unused JavaScript or CSS is a common problem in web development. For example, suppose that you want to use the Bootstrap button component on your page. To use the button component, you need to add a link to the Bootstrap stylesheet in your HTML, like this:
<head>     ...
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    ...
</head>This stylesheet doesn't just include the code for the button component. It contains the CSS for all of the Bootstrap components. But you're not using any of the other Bootstrap components. So your page is downloading a bunch of CSS that it doesn't need.
This extra CSS is a problem for the following reasons:
 The extra code slows down your page load.
 If a user accesses the page on a mobile device, the extra code uses up their cellular data.
 Open the Coverage tool
1. Open the Command Menu.
coverage, select the Show Coverage command, and then press Enter2. Start typing . The Coverage tool opens in the Drawer.

 Record code coverage
1. Click one of the following buttons in the Coverage tool:
 Click Start Instrumenting Coverage And Reload Page () if you want to see what code is needed to load the page.
 Click Instrument Coverage () if you want to see what code is used after interacting with the page.
2. Click Stop Instrumenting Coverage And Show Results () when you want to stop recording code coverage.
 Analyze code coverage
The table in the Coverage tool displays the resources that were analyzed, and how much code is used within each resource. Click a row to open that resource in the Sources tool and display a line-by-line breakdown of used code and unused code.
A code coverage report:

Columns in the code coverage report:
COLUMNDESCRIPTIONURLThe URL of the resource that was analyzed.TypeWhether the resource contains CSS, JavaScript, or both.Total BytesThe total size of the resource in bytes.Unused BytesThe number of bytes that weren't used.Last, unnamed columnA visualization of the Total Bytes and Unused Bytes columns. The red section of the bar is unused bytes. The green section is used bytes.NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 CSS Overview tool
 	6/21/2022 • 2 minutes to read • Edit OnlineThe CSS Overview tool displays a summary of CSS-related information about the webpage. This tool lists the colors, fonts, and media queries the webpage uses. The tool also lists the elements on your page that have color contrast issues, and the unused CSS declarations. The CSS Overview Accessible Colors Demo page has an example of a color contrast issue.
To view a list of elements that have a color contrast issue, on Contrast issues, click Text.
To open the element in the Elements tool, click an element in the list. To help fix contrast issues, DevTools automatically provides color suggestions.
For updates on this feature in the Chromium open-source project, see Issue #1120316.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 
Debug DOM memory leaks with the Detached Elements tool
 	6/21/2022 • 5 minutes to read • Edit OnlineUse the Detached Elements tool to find detached elements that the browser cannot garbage-collect, and locate the JavaScript object that is still referencing the detached element. By changing your JavaScript to release the element, you reduce the number of detached elements on your page.
A memory leak can occur in your application when an element is no longer attached to the Document Object Model (DOM) tree, but is still referenced by some JavaScript running on the page. These elements are called detached elements. For the browser to garbage-collect (GC) the detached element, the element must not be
referenced from the DOM tree or from JavaScript code.
For more information about heap snapshots and detached elements, read Discover detached DOM tree memory leaks with Heap Snapshots.
As explained in Fix memory problems, memory issues affect page performance, including memory leaks, memory bloat, and frequent garbage collections. Symptoms for your users include:
The performance of a page gets progressively worse over time.
The performance of a page is consistently bad.
The performance of a page is delayed or appears to pause frequently.
 Open the Detached Elements tool
To open the Detached Elements tool and load the demo page:
1. Open the Detached Elements demo application in a new window or tab.
Ctrl+Shift+I2. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
3. In DevTools, on the main toolbar, select the Detached Elements tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools ( ) button:

 Get detached elements
The Get Detached Elements () button in the Detached Elements tool finds and displays all of the detached elements on a web page.
To find detached elements:
1. In the demo application, make sure that the Room 1 button is selected.
2. In the demo application, click the Simulate high traffic button.
3. After some messages are generated and displayed in the demo application, click the demo's Stop button:

4. Click the Room 2 button:

The Detached Elements tool displays all of the detached elements of the page. When you switch to Room 2 in the demo application, the messages that were generated in Room 1 are no longer attached to the DOM, but they are still referenced by JavaScript.
 Trigger garbage collection
Next, trigger garbage collection (GC) in the browser:
1. In the Detached Elements tool, click the Collect garbage () icon.
2. Click the Get Detached Elements () icon.
When you select Collect garbage, the browser runs garbage collection. When you select Get Detached Elements, the Detached Elements tool displays all detached elements that cannot be garbage collected. These detached elements may be memory leaks if they aren't going to be reused by the application.
 Identify the JavaScript code that retains detached elements
Once you have found a detached element that cannot be garbage-collected, you can use the Analyze button in the Detached Elements tool to identify the JavaScript code running on the page that is still referencing the detached element. The Analyze button takes a heap snapshot and populates the ID of the detached element with its location in the heap:

For more information about heap snapshots, read Record heap snapshots using the Memory tool.
To identify the JavaScript code that references a detached element:
1. In the Detached Elements tool, click the Analyze () icon.
The Memory tool opens in the bottom panel of DevTools.
2. From the Detached Elements tool, select the Id field of a detached element.
The Memory tool in the bottom panel automatically selects the object in the heap that is referencing the detached element. We call these objects Retainers:

3. In the Memory tool in the bottom panel, select the link room.js:13.
The Sources tool opens in the top panel to line 13 of the file room.js.
hide()unmounted array. The unmounted4. In the  function of room.js, the JavaScript code of the demo application adds each message in the room to an  array is the object that is referencing the detached element:

You have now identified the retainer that is preventing the detached element from being garbage-collected by the browser!
 Identify the DOM node causing others to be retained
Because the DOM is a fully connected graph, when one DOM node is retained in memory by JavaScript it can cause other DOM nodes to be retained with it.
To identify the culprit node in a detached tree that is causing the entire tree to be retained:
1. Click the Detach Elements () icon to destroy the parent-child links inside the detached tree:
2. Click the Collect garbage (
Parent-child links are removed inside the detached tree.
 Change the selected target to a different origin
You can check for detached elements from different origins or frames using the Selected target dropdown list.
1. Click the Selected target dropdown list:

2. Select a different origin.
The new origin is displayed in the Detached Elements tool.
 Additional considerations
When looking for memory leaks, remember that leaks can depend on the context of your application. For the demo application, you found detached elements that could not be garbage collected by the browser, and you identified the JavaScript that's retaining the detached elements. However, in the context of the demo application, it makes sense to retain the list of chat messages, so that if a user switches back to Room 1, the message log is preserved.
The following image shows detached elements in the form of messages that are reattached when a user navigates from Room 2 back to Room 1:

Similarly, a feed in social media might detach elements as users scroll past them, and reattach them to the DOM when users scroll back up. Detached elements aren't always an indication of a memory leak, and memory leaks aren't always caused by detached elements.
For long-running apps, small memory leaks of only a few kilobytes can noticeably degrade performance over time. Web developers who use the React framework know that React maintains a virtualized copy of the DOM. Failing to properly unmount components can potentially lead to an application leaking large parts of the virtual
DOM.
This demo app and its leaks are artificial. Test the Detached Elements tool on your production website or app. If you find potential problems with the Detached Elements tool, contact the Microsoft Edge DevTools team to send feedback about the Detached Elements tool and memory leak debugging.

 
 Developer Resources tool
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the Developer Resources tool to view resource URLs for the webpage.


 
 Find and fix problems using the Issues tool
 	6/21/2022 • 4 minutes to read • Edit OnlineThe Issues tool automatically analyzes the current webpage, reports issues grouped by type, and provides documentation to help explain and resolve the issues.
The Issues tool provides feedback in the following categories:
Accessibility.
Compatibility across browsers.
Performance.
Progressive Web Apps.
Security. Other.
Feedback in the Issues tool is provided by several sources, including the Chromium platform, Deque axe, MDN browser compatibility data, and webhint. For information about these sources of feedback that populate the Issues tool, see:
axe Tools Overview browser-compat-data repo webhint
 Opening the Issues tool
1. Go to a webpage that contains issues to fix. For example, open the accessibility-testing demo page in a new tab or window.
2. Open DevTools. After a few seconds, the Issues counter () appears in the upper right corner of DevTools.
3. Refresh the page, because some issues are reported based on network requests. Notice the updated count in the Issues counter.
4. Select the Issues counter. The Issues tool opens with issues grouped into different categories.

 Other ways to open the Issues tool 
There are several additional ways to open the Issues tool:
ShiftClick the More Tools (+) menu in the main panel or the Drawer, and then select Issues.
Select Customize and control DevTools > More tools > Issues.
In the DOM tree in the Elements tool, press  and then click a wavy-underlined element name. Or, open the context menu on a wavy-underlined element and then select View issues.
 Issues are automatically ordered by severity 
Within each category of issues, first the errors are listed, then warnings, and then tips.

 Expand entries in the Issues tool
The Issues tool presents additional documentation and recommended fixes to apply to each issue. To expand an issue to get this additional information, select an issue, as follows.
1. Open the accessibility-testing demo page in a new window or tab, and then open DevTools.
2. Open the Issues tool by selecting the Issues counter ().
3. Select an issue, to expand the issue.

Each displayed issue has the following components:
A headline describing the issue.
A description providing more context and proposed solutions.
An AFFECTED RESOURCES section that links to resources in DevTools, such as the Elements, Sources, or Network tool.
 Links to further documentation.
 View issues in context of an associated tool
An issue in the Issues tool may include one or more links that open different tools, such as the Elements, Sources, or Network tool. You can open one of these tools to perform additional troubleshooting steps.
To open a linked tool from the Issues tool:
1. As described in the previous section, open the demo page and then expand an issue in the Issues tool.
2. In AFFECTED RESOURCES > Open in, select the tool name. The affected resource is displayed in the selected tool:

An expanded issue may have a Network link, to display the affected resource in the Network tool:

 Open issues from the DOM tree
ShiftIf an element has an associated issue, the DOM tree in the Elements tool shows a wavy underline under the element name. Right-click the element and then select View issues. Or, press and hold  and then click the element with the wavy underline.
To display an issue for elements with wavy underlines in the DOM tree:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. In DevTools, select the Elements tab.
<body> > <section> > <main> > <article id="cats">. Notice that the <img>4. In the DOM tree, expand element has a wavy underline.

<img>5. Hover over the  element. A tooltip displays information about the issue.
6. Open the context menu on the element with the wavy underline, and then select View issues. The Issues tool opens and displays the issue that's associated with that element.

 Filter issues
To reduce the number of issues displayed in the Issues tool, you can filter the list by severity, browser, and origin.
 Filter by severity 
By default, only errors and warnings are displayed. To display issues with other severity levels:

 Filter by browser 
Issues that belong to the Compatibility category can also be filtered by browser. By default, the following browsers are tested:
Edge
Chrome
Firefox
Safari
Safari iOS
Chrome for Android Firefox for Android
To change the list of browsers that are tested for compatibility issues:
Click Top browsers.
Select any of the browser category sets: Top browsers, Desktop browsers, Mobile browsers.
Or select any number of individual browsers from the list.
Click Regenerate issues to update the compatibility issues based on the selected browsers.

 Filter by origin 
By default, the Issues tool only lists issues that pertain to the current web page's code. To include issues that are caused by third-party libraries or frameworks loaded by the web page too, select the Include third-party issues checkbox.

 See also
 Automatically test a webpage for accessibility issues

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored
by Sam Dutton (Developer Advocate).  This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 JavaScript Profiler tool
 	6/21/2022 • 2 minutes to read • Edit OnlineThe JavaScript Profiler tool has been replaced by the Performance tool and the Memory tool.
For the Performance tool, see Get started analyzing runtime performance.
For the Memory tool, see Fix memory problems.

 
 Lighthouse tool
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the Lighthouse tool to identify and fix common problems that affect your site's performance, accessibility, and user experience.
The Lighthouse tool was previously called the Audits tool.
See:
Test accessibility using Lighthouse
Establish a baseline in Optimize website speed using Lighthouse

 
 View and debug media players information
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the Media tool to view information and debug the media players per browser tab.
 Open the Media tool
The Media tool is the main place in DevTools for inspecting the media player of a webpage.
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
2. In DevTools, on the main toolbar, select the Media tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools ( ) button.

 View media players information
1. Navigate to a webpage with a media player, such as the following webpage.
Maximizing productivity with the Edge Developer Tools
2. Under the Players menu, a media player is displayed.
3. Click the player. The Properties panel displays the properties of the media player.

4. To view all the media player events, click the Events panel.

5. To view the media player message logs, click the Messages panel. You can filter the messages by log level or string.

6. On the Timeline panel, the media playback and buffer status is displayed live.

 Remote debugging 
View the media players information on an Android device from your Windows or macOS computer.
1. To set up remote debugging, see Get started with remote debugging Android devices.
2. View the media players information remotely.
 Hide and show media players
Sometimes you run more than one media player on a webpage, or use the same browser tab to browse different webpages, each with media players.
You can hide (or show) each media player, for an easier debugging experience:
1. Browse to several different video webpages using the same browser tab.
2. To hide media players:


NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Fix memory problems
 	6/21/2022 • 9 minutes to read • Edit OnlineLearn how to use Microsoft Edge and DevTools to find memory issues that affect page performance, including memory leaks, memory bloat, and frequent garbage collections.
Find out how much memory your page is currently using with the Microsoft Edge Browser Task Manager.
Visualize memory usage over time with the Memory panel.
Identify detached DOM trees (a common cause of memory leaks) with Heap snapshot.
Find out when new memory is being allocated in your JavaScript heap (JS heap) with Allocation instrumentation on timeline.
See also Debug DOM memory leaks with the Detached Elements tool.
 Overview
In the spirit of the RAIL performance model, the focus of your performance efforts should be your users.
Memory issues are important because they are often perceivable by users. Users may perceive memory issues in the following ways:
 The performance of a page gets progressively worse over time. This is possibly a symptom of a memory leak. A memory leak is when a bug in the page causes the page to progressively use more and more memory over time.
 The performance of a page is consistently bad. This is possibly a symptom of memory bloat. Memory bloat is when a page uses more memory than is necessary for optimal page speed.
 The performance of a page is delayed or appears to pause frequently. This is possibly a symptom of frequent garbage collections. Garbage collection is when the browser reclaims memory. The browser decides when this happens. During collections, all script running is paused. So if the browser is garbage collecting a lot, script runtime is going to get paused a lot.
 Memory bloat: how much is "too much"? 
A memory leak is easy to define. If a site is progressively using more and more memory, then you have a leak. But memory bloat is a bit harder to pin down. What qualifies as "using too much memory"?
There are no hard numbers here, because different devices and browsers have different capabilities. The same page that runs smoothly on a high-end smartphone may crash on a low-end smartphone.
The key here is to use the RAIL model and focus on your users. Find out what devices are popular with your users, and then test out your page on those devices. If the experience is consistently bad, the page may be exceeding the memory capabilities of those devices.
 Monitor memory use in realtime with the Microsoft Edge Browser Task Manager
Use the Microsoft Edge Browser Task Manager as a starting point to your memory issue investigation. The Microsoft Edge Browser Task Manager is a realtime monitor that tells you how much memory a page is currently using.
Shift+Esc1. Press  or go to the Microsoft Edge main menu and select More tools > Browser Task
Manager to open the Microsoft Edge Browser Task Manager.

2. Right-click the table header of the Microsoft Edge Browser Task Manager, and then enable JavaScript memory.

These two columns tell you different things about how your page is using memory:
 The Memory column represents native memory. DOM nodes are stored in native memory. If this value is increasing, DOM nodes are getting created.
 The JavaScript Memory column represents the JS heap. This column contains two values. The value
you are interested in is the live number (the number in parentheses). The live number represents how much memory the reachable objects on your page are using. If this number is increasing, either new objects are being created, or the existing objects are growing.
 Visualize memory leaks with Performance panel
You can also use the Performance panel as another starting point in your investigation. The Performance panel helps you visualize the memory use of a page over time.
1. In DevTools, open the Performance tool.
2. Select the Memory checkbox.
3. Make a recording.
It's a good practice to start and end your recording with a forced garbage collection. To force garbage collection, click the collect garbage  button while recording.
To demonstrate memory recordings, consider the following code:
var x = []; function grow() {
    for (var i = 0; i < 10000; i++) {
        document.body.appendChild(document.createElement('div'));
    }
    x.push(new Array(1000000).join('x')); }
document.getElementById('grow').addEventListener('click', grow);divEvery time that the button referenced in the code is clicked, 10,000  nodes are appended to the document
x characters is pushed onto the xbody, and a string of 1,000,000  array. Running the previous code sample produces a recording in the Performance panel like the following figure:

First, an explanation of the user interface. The HEAP graph in the Overview pane (below NET) represents the JS heap. Below the Overview pane is the Counter pane. The memory usage is broken down by JS heap (same as HEAP graph in the Overview pane), documents, DOM nodes, listeners, and GPU memory. Clear a checkbox to hide it from the graph.
grow()Now, an analysis of the code compared with the previous figure. If you review the node counter (the green graph), it matches up cleanly with the code. The node count increases in discrete steps. You can presume that each increase in the node count is a call to .
The JS heap graph (the blue graph) is not as straightforward. In keeping with best practices, the first dip is actually a forced garbage collection (click the collect garbage  button).
As the recording progresses, the JS heap size spikes are displayed. This is natural and expected: the JavaScript code is creating the DOM nodes on every button you click, and is doing a lot of work when it creates the string of one million characters.
The key thing here is the fact that the JS heap ends higher than it began (the "beginning" here being the point after the forced garbage collection). In the real world, if you saw this pattern of increasing JS heap size or node size, it would potentially indicate a memory leak.
 Discover detached DOM tree memory leaks with Heap Snapshots
A DOM node is only garbage collected when there are no references to the node from either the DOM tree or JavaScript code running on the page. A node is said to be "detached" when it is removed from the DOM tree but some JavaScript still references it. Detached DOM nodes are a common cause of memory leaks.
This section teaches you how to use the heap profilers in DevTools to identify detached nodes.
Here's a simple example of detached DOM nodes:
var detachedTree;
function create() {
    var ul = document.createElement('ul');     for (var i = 0; i < 10; i++) {
        var li = document.createElement('li');         ul.appendChild(li);
    }
    detachedTree = ul;
}
document.getElementById('create').addEventListener('click', create);ul node with ten liClicking the button referenced in the code creates a  children. The nodes are referenced by the code, but they don't exist in the DOM tree, so each node is detached.
Heap snapshots are one way to identify detached nodes. As the name implies, heap snapshots show you how memory is distributed among the JS objects and DOM nodes for your page at the point of time of the snapshot.
To create a snapshot:
1. Open DevTools and go to the Memory panel.
2. Click the Heap snapshot radio button, and then click the Take snapshot button at the bottom of the panel.

The snapshot may take some time to process and load.
3. After the snapshot is finished, select it from the left-hand panel (it's named HEAP SNAPSHOTS).
Detached4. In the Class filter text box, type , to search for detached DOM trees:

5. Expand the carats to investigate a detached tree:

6. Click a node to investigate it further.
detachedTreeIn the Objects pane, you can see more information about the code that is referencing the node. For example, in the following figure, the  variable is referencing the node.
detachedTree7. To fix the particular memory leak, study the code that uses the  variable and make sure that the reference to the node is removed when it is no longer needed.

 Identify JS heap memory leaks with Allocation instrumentation on timeline
Allocation instrumentation on timeline is another tool that can help you track down memory leaks in your JS heap.
Demonstrate Allocation instrumentation on timeline using the following code:
var x = []; function grow() {
    x.push(new Array(1000000).join('x')); }
document.getElementById('grow').addEventListener('click', grow);Every time that the button referenced in the code is clicked, a string of one million characters is added to the x array.
To record an Allocation instrumentation on timeline:
1. Open DevTools, and select the Memory panel.
2. Click the Allocation instrumentation on timeline radio button, then click the Start button.
3. Perform the action that you suspect is causing the memory leak.
4. When you are done, click the Stop recording heap profile  button.
5. As you are recording, notice whether any blue bars show up on the Allocation instrumentation on the timeline, like in the following figure:

Those blue bars represent new memory allocations. Those new memory allocations are your candidates for memory leaks.
6. Zoom on a bar to filter the Constructor pane to only show objects that were allocated during the specified timeframe.

7. Expand the object and select the value to view more details in the Object pane.
x variable in the WindowFor example, in the following figure, in the details of the newly allocated object indicates that it was allocated to the  scope:

 Investigate memory allocation by function
Use the Allocation sampling profiling type to view memory allocation by JavaScript function.

1. Click the Allocation sampling radio button.
2. If there is a worker on the page, you can select that as the profiling target, by using the dropdown menu next to the Start button.
3. Click the Start button.
4. On the webpage, perform actions that you want to investigate.
5. Click the Stop button when you have finished all of your actions.
DevTools shows you a breakdown of memory allocation by function. The default view is Heavy (Bottom Up), which displays the functions that allocated the most memory at the top.

 Spot frequent garbage collections
If your page appears to pause frequently, then you may have garbage collection issues.
You can use either the Microsoft Edge Browser Task Manager or Performance memory recordings to spot frequent garbage collection.
 In the Microsoft Edge Browser Task Manager, frequently rising and falling Memory or JavaScript
Memory values represent frequent garbage collection.
 In Performance recordings, frequent changes (rising and falling) to the JS heap or node count graphs indicate frequent garbage collection.
After you have identified the problem, you can use an Allocation instrumentation on timeline recording to find out where memory is being allocated and which functions are causing the allocations.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Memory terminology
 	6/21/2022 • 9 minutes to read • Edit OnlineThis article describes common terms used in memory analysis, and is applicable to various memory profiling tools for different languages.
The terms and notions described here refer to the Memory panel. If you've ever worked with either the Java, .NET, or some other memory profiler, then this article may be a refresher.
 Object sizes
Think of memory as a graph with primitive types (like numbers and strings) and objects (associative arrays). Memory can be visually represented as a graph with a number of interconnected points, as follows:

An object can hold memory in two ways:
Directly; the memory is held by the object itself.
Implicitly, by holding references to other objects. An object holding references to other objects prevents those objects from being automatically disposed by a garbage collector (GC).
The Memory panel in DevTools is a tool for investigating memory issues.
When working with the Memory panel, you will likely find yourself looking at a few different columns of information. Two columns that stand out are Shallow Size and Retained Size:

 Shallow size 
The shallow size is the size of memory that is held by the object.
Typical JavaScript objects have some memory reserved for their description and for storing immediate values. Usually, only arrays and strings can have a significant shallow size. However, strings and external arrays often have their main storage in renderer memory, exposing only a small wrapper object on the JavaScript heap.
Renderer memory is all memory of the process where an inspected page is rendered:
renderer memory = native memory + JS heap memory of the page + JS heap memory of all dedicated workers started by the page
Nevertheless, even a small object can hold a large amount of memory indirectly, by preventing other objects from being disposed of by the automatic garbage collection process.
 Retained size 
The retained size is the size of memory that is freed once the object is deleted along with the dependent objects that were made unreachable from garbage-collection roots (GC roots).
Garbage-collection roots are made up of handles that are created (as either local or global) when making a reference from native code to a JavaScript object outside of the V8 VM. All such handles can be found within a heap snapshot under GC roots > Handle scope and GC roots > Global handles. Describing the handles in this documentation without diving into details of the browser implementation may be confusing. Both garbagecollection roots and the handles aren't something you need to worry about.
There are many internal GC roots, most of which aren't interesting for the users. From the applications standpoint, there are the following kinds of roots:
distance Window global object (in each iframe). In the heap snapshots, the 	 field indicates the number of property references on the shortest retaining path from the window.
 The document DOM tree, consisting of all native DOM nodes that are reachable by traversing the document. Not all of the nodes have JavaScript wrappers, but if a node has a wrapper, the node is alive while the document is alive.
 Sometimes objects are retained by the debug context in the Sources tool and the Console, such as after Console evaluation. Create heap snapshots with a cleared Console tool and no active breakpoints in the debugger in the Sources tool.
TIP
clear()Before taking a heap snapshot in the Memory tool, clear the Console tool and deactivate breakpoints in the Sources tool. To clear the Console tool, run the  method.window object of the browser or the GlobalThe memory graph starts with a root, which may be the  object of a
Node.js module. You don't control how the root object is garbage-collected.

Whatever isn't reachable from the root gets garbage-collected.
NOTE
The number that's shown in the Shallow size and Retained size columns is the number of bytes.
 Objects retaining tree
The heap is a network of interconnected objects. In the mathematical world, this structure is called a graph or memory graph. A graph is constructed from nodes that are connected by edges.
Nodes and edges in a graph are given labels as follows:
Nodes (or objects) are labelled using the name of the constructor function that was used to build them.
Edges are labelled using the names of properties.
Learn how to record a profile using the Heap Profiler. In the following figure, some of the notable things in the Heap Snapshot recording in the Memory tool include Distance, which is the distance from the garbagecollection root. If almost all the objects of the same type are at the same distance, and a few are at a bigger distance, that's something worth investigating.
Distance from root:

 Dominators
Dominator objects are comprised of a tree structure, because each object has exactly one dominator. A dominator of an object might lack direct references to an object that it dominates. That is, dominator's tree is not a spanning tree of the graph.
In the following figure:
Node 1 dominates node 2.
Node 2 dominates nodes 3, 4 and 6.
Node 3 dominates node 5.
Node 5 dominates node 8.
Node 6 dominates node 7.

#3 is the dominator of node #10. But node #7#10. Therefore, an object B is a dominator of an object AB exists in every simple path from the root to the object AIn the following figure, node  also exists in every simple path from the garbage collection root GC to node  if object .
GC dominates nodes #1, #3, and #11Node :

#3 is dominated by node GC and dominates node #7Node :

#7 is dominated by node #3 and dominates nodes #8, #9, and #10Node :

#8 is dominated by node #7Node  and doesn't dominate any nodes:

#10 is dominated by node #7Node  and doesn't dominate any nodes:

#11 is dominated by node #1Node  and doesn't dominate any nodes:

 V8 specifics
When profiling memory, it is helpful to understand why heap snapshots look a certain way. This section describes some memory-related topics specifically corresponding to the V8 JavaScript virtual machine (abbreviated here as V8 VM, or just VM).
 JavaScript object representation 
In JavaScript, there are three primitive types:
3.14159...true or false"Werner Heisenberg"Numbers (such as ).
Booleans ().
Strings (such as ).
Primitives cannot reference other values, and are always leaf nodes (also called terminating nodes).
Numbers can be stored as either:
Immediate 31-bit integer values that are called small integers (SMIs).
Heap objects, referred to as heap numbers. Heap numbers are used for storing values that don't fit into the SMI form, such as doubles, or when a value needs to be boxed, such as setting properties on it.
Strings can be stored in either:
The VM heap.
Externally in the renderer's memory. A wrapper object is created and used for accessing external storage where, for example, script sources and other content that is received from the Web is stored, rather than copied onto the VM heap.
Memory for new JavaScript objects is allocated from a dedicated JavaScript heap (or VM heap). These objects are managed by VM V8's garbage collector, and therefore, these objects stay alive as long as there is at least one strong reference to them.
Native objects - Anything not in the JavaScript heap is called a native object. A native object, in contrast to a heap object, isn't managed by the V8 garbage collector throughout its lifetime, and can only be accessed from JavaScript by using its JavaScript wrapper object.
A cons string (concatenation string) is an object that consists of pairs of strings that are stored and then joined, and is a result of concatenation. The joining of the cons string contents occurs only as needed. For example, when a substring of a joined string needs to be constructed.
a and b, you get a string (a, b)For example, if you concatenate  which represents the result of
dconcatenation, and is a cons string. If you later concatenated  with that result, you get another cons string: 
((a, b, d).
Arrays - An array is an object that has numeric keys. Arrays are used extensively in the V8 VM for storing large amounts of data. Sets of key-value pairs that are used like dictionaries are implemented as arrays.
A typical JavaScript object is stored as only one of two array types:
A typical JavaScript object can be one of two array types:
An array for storing named properties. An array for storing numeric elements.
When there are a small number of properties, the properties are stored internally in the JavaScript object.
Map is an object that describes both the kind of object it is and the layout. For example, maps are used to describe implicit object hierarchies for fast property access.
 Object groups 
Each native objects group is made up of objects that hold mutual references to each other. Consider, for example, a DOM subtree where every node has a link to the relative parent and links to the next child and next sibling, thus forming a connected graph.
Note that native objects aren't represented in the JavaScript heap. The lack of representation is why native objects have zero size. Instead, wrapper objects are created.
Each wrapper object holds a reference to the corresponding native object, for redirecting commands to it. In turn, an object group holds wrapper objects. This doesn't create an uncollectable cycle, because garbage collection is smart enough to release object groups whose wrappers are no longer referenced. But forgetting to release a single wrapper will hold references to the whole group and to any associated wrappers.
 Cycles
Cycles are nodes that appear at least twice in a retainer path. One appearance of a node is earlier in the retainer path, and other appearances of that node are later in the retainer path.
To free up memory, it's most important to remove the occurrence of the node which appears first in the retainer path. The second and potentially subsequent appearances of the node are still displayed in the Retainers section.
 Using filters to hide cycles 
Cycles are displayed in the Retainers section of a heap snapshot. To help simplify the retainer path, the Retainers section in the Memory tool has filters to hide cycles.
In the Retainers section, a cycled node is indicated by being grayed out.
In the following image, in the Filter edges dropdown menu, Hide cycled is not selected, so a cycled node (grayed out) is displayed:

In the Filter edges dropdown menu, Hide cycled is selected, so the cycled node is not displayed:

 Using filters to hide internal nodes 
To filter out the display of internal nodes so that they aren't displayed in the Retainers section, in the Filter edges dropdown menu, select Hide internal. Internal nodes are objects that are specific to V8 (the JavaScript engine in Microsoft Edge).
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Meggin Kearney (Technical Writer).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Record heap snapshots using the Memory tool
 	6/21/2022 • 9 minutes to read • Edit OnlineUse the heap profiler in the Memory tool to do the following:
Record JavaScript heap (JS heap) snapshots.
Analyze memory graphs.
Compare snapshots. Find memory leaks.
The DevTools heap profiler shows memory distribution used by your page's JavaScript objects and related DOM nodes. See also Objects retaining tree) in Memory terminology.
 Take a snapshot
1. In DevTools, open the Memory tool.
2. In the Select profiling type section, select the Heap snapshot option button.
Ctrl+E (Windows, Linux) or Cmd+E3. Click the Take snapshot button, and then click Start. Or, press (macOS).

Snapshots are initially stored in the renderer process memory. Snapshots are transferred to the DevTools on demand, when you click the snapshot icon to view it.
After the snapshot has been loaded into DevTools and has been parsed, the number below the snapshot title appears and shows the total size of the reachable JavaScript objects.

NOTE
Only reachable objects are included in snapshots. Also, taking a snapshot always starts with a garbage collection.
 Clear snapshots
Click the Clear all profiles icon to remove snapshots (both from DevTools and any memory associated with the renderer process).

Closing the DevTools window doesn't delete profiles from the memory associated with the renderer process.
When reopening DevTools, all previously taken snapshots reappear in the list of snapshots.
NOTE
Try out this example of scattered objects and profile it using the heap profiler. A number of (object) item allocations are displayed.
 View snapshots
View snapshots from different perspectives for different tasks.
Summary view shows objects grouped by the constructor name. Use it to hunt down objects (and the memory use) based on type grouped by constructor name. Summary view is particularly helpful for tracking down DOM leaks.
Comparison view. Displays the difference between two snapshots. Use it to compare two (or more) memory snapshots from before and after an operation. Inspecting the delta in freed memory and reference count lets you confirm the presence and cause of a memory leak.
Containment view. Allows exploration of heap contents. Containment view provides a better view of object structure, helping analyze objects referenced in the global namespace (window) to find out what is keeping objects around. Use it to analyze closures and dive into your objects at a low level.
To switch between views, use the selector at the top of the view.

NOTE
Not all properties are stored on the JavaScript heap. Properties implemented using getters that run native code aren't captured. Also, non-string values such as numbers aren't captured.
 Summary view 
Initially, a snapshot opens in the Summary view, displaying object totals, which can be expanded to show instances:

Top-level entries are "total" lines.
TOP-LEVEL ENTRIESDESCRIPTIONConstructorRepresents all objects created using this constructor.DistanceDisplays the distance to the root using the shortest simple path of nodes.Shallow sizeDisplays the sum of shallow sizes of all objects created by a certain constructor function. The shallow size is the size of memory held by an object (generally, arrays and strings have larger shallow sizes). See Object sizes.Retained sizeDisplays the maximum retained size among the same set of objects. The size of memory that you can free after an object is deleted (and the dependents are made no longer reachable) is called the retained size. See Object sizes.@After expanding a total line in the upper view, all of the instances are displayed. For each instance, the shallow and retained sizes are displayed in the corresponding columns. The number after the  character is the unique ID of the object, allowing you to compare heap snapshots on per-object basis.
Yellow objects have JavaScript references.
Red objects are detached nodes. A detached node is referenced from a node that has a yellow background.
	 Constructor  	(group) entries in the heap profiler
The various constructor (group) entries in the heap profiler correspond to the following types of objects.

CONSTRUCTOR (GROUP) ENTRYDESCRIPTION(global property)The intermediate objects between a global object (like 
window) and an object referenced by it. If an object is
Personcreated using a constructor  and is held by a global object, the retaining path would be represented as 
[global] > (global property) > Person. This contrasts
with the norm, where objects directly reference each other. Intermediate objects exist for performance. Globals are modified regularly and property access optimizations do a good job for non-global objects aren't applicable for globals.(roots)The root entries in the retaining tree view are the entities that have references to the selected object. These can also be references created by the engine for its own purposes. The engine has caches which reference objects, but all such references are weak and don't prevent an object from being collected, given that there are no truly strong references.(closure)A count of references to a group of objects through function closures.(array, string, number, regexp)A list of object types with properties which reference an Array, String, Number, or regular expression.(compiled code)<script>Everything related to compiled code. Script is similar to a function, but corresponds to a  body.
SharedFunctionInfos (SFI) are objects standing between functions and compiled code. Functions usually have a context, while SFIs do not.HTMLDivElement, HTMLAnchorElement, DocumentFragment, and so on.References to elements or document objects of a particular type referenced by your code.CONSTRUCTOR (GROUP) ENTRYDESCRIPTION(object shape)References to the hidden classes and descriptor arrays that V8 (the JavaScript engine of Microsoft Edge) uses to understand and index the properties in objects. See HiddenClasses and DescriptorArrays.(BigInt)References to the BigInt object, which is used to represent and manipulate values that are too large to be represented by the Number object. See BigInt. Comparison view 
Find leaked objects by comparing multiple snapshots to each other. Usually, a pair of direct and reverse operations, such as opening a document and then closing it, shouldn't leave any garbage.
To verify that a certain application operation doesn't create leaks:
1. Take a heap snapshot before performing an operation.
2. Perform an operation. That is, interact with a page in some way that might be causing a leak.
3. Perform a reverse operation. That is, do the opposite interaction and repeat it a few times.
4. Take a second heap snapshot and change the view of this one to Comparison, comparing it to Snapshot 1.
In the Comparison view, the difference between two snapshots is displayed. When expanding a total entry, added and deleted object instances are shown.

 Containment view 
The Containment view is essentially a "bird's eye view" of the objects structure of your application. It allows you to peek inside function closures, to observe virtual machine (VM) internal objects that together make up your JavaScript objects, and to understand how much memory your application uses at a very low level.
CONTAINMENT VIEW ENTRY POINTSDESCRIPTIONDOMWindow objectsGlobal objects for JavaScript code.GC rootsThe actual GC roots used by the garbage of the VM. GC roots are comprised of built-in object maps, symbol tables, VM thread stacks, compilation caches, handle scopes, and global handles.Native objectsBrowser objects "pushed" inside the JavaScript virtual machine (JavaScript VM) to allow automation, for example, DOM nodes, CSS rules.
 Naming functions to differentiate between closures in the snapshot 
Name the functions, so that you can easily distinguish between closures in the snapshot. For example, this example doesn't use named functions:
function createLargeClosure() {
    var largeStr = new Array(1000000).join('x');     var lC = function() { // this is NOT a named function         return largeStr;
    };     return lC; }
The following code uses named functions, to easily distinguish between closures in the snapshot:
function createLargeClosure() {
    var largeStr = new Array(1000000).join('x');     var lC = function lC() { // this IS a named function         return largeStr;
    };     return lC;
}
 Demo: Impact of closures on memory 
evalTo analyze the impact of closures on memory, try out this example: open the demo webpage why  is evil in a new window or tab.
 Demo: Recording heap allocations 
You may also be interested in following up the above demo with this example that takes you through recording heap allocations: open the demo webpage heap allocations in a new window or tab.
 Filter a heap snapshot by node type
Use filters to focus on specific parts of a heap snapshot. You can filter by node type if, for example, you're only interested in the strings or arrays from the heap.
When looking at all the objects in a heap snapshot in the Memory tool, it can be difficult to focus on specific objects or retaining paths. Use the Node Types filter when looking at a heap snapshot, to focus on only specific types of nodes. For example, to see only the arrays and string objects that are in the heap, select the Array and String entries in the Node Types filter.

 Look up color coding
Properties and property values of objects have different types and are colored accordingly. Each property has one of four types:
PROPERTY TYPEDESCRIPTIONa: property.
[
]A regular property with a name, accessed via the  (dot) operator, or via   (brackets) notation, for example 
["foo bar"].0: element
[
]A regular property with a numeric index, accessed via  (brackets) notation.a: context varA variable in a function context, accessible by the variable name from inside a function closure.PROPERTY TYPEDESCRIPTIONa: system propA property added by the JavaScript VM, not accessible from JavaScript code.SystemObjects designated as  don't have a corresponding JavaScript type. Each is part of the object system implementation of the Javascript VM. V8 allocates most of the internal objects in the same heap as the user's JS objects. So these are just V8 internals.
 Find a specific object
Ctrl+FTo find an object in the collected heap, you can search using  and give the object ID.
 Uncover DOM leaks
The heap profiler has the ability to reflect bidirectional dependencies between browser native objects (DOM nodes, CSS rules) and JavaScript objects. This helps to discover otherwise invisible leaks happening due to forgotten detached DOM subtrees floating around.
#treeDOM leaks may be bigger than you think. Consider the following sample. When is the  garbagecollected?
var select = document.querySelector; var treeRef = select("#tree"); var leafRef = select("#leaf"); var body = select("body"); body.removeChild(treeRef);
//#tree in not GC yet due to treeRef treeRef = null;
//#tree is not GC yet due to indirect reference from leafRef
leafRef = null; //#NOW can be #tree GC#leaf maintains a reference to the relevant parent (parentNode) and recursively up to #treeleafRef is nullified is the WHOLE tree under #treeThe , so only when  a candidate for garbage-collection (GC).

 Example: Leaking DOM nodes 
Try this example of a leaking DOM node to understand where DOM nodes might leak, and how to detect such leakage.
 Example: DOM leaks being bigger than expected 
Also try this example of DOM leaks being bigger than expected.
To read more about DOM leaks and memory analysis fundamentals, check out Finding and debugging memory leaks with the Microsoft Edge DevTools by Gonzalo Ruiz de Villa.
 Save and export strings from a heap snapshot to JSON
When taking a heap snapshot in the Memory tool, you can export all string objects from the snapshot to a
(string)JSON file. In the Memory tool, in the Constructor section, click the Save all to file button next to the  entry:

The Memory tool exports a JSON file that contains all of the string objects from the heap snapshot:

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Meggin Kearney (Technical Writer).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Use Allocation instrumentation on timeline
 	6/21/2022 • 2 minutes to read • Edit OnlineIn the Memory tool, use the Allocation instrumentation on timeline radio button to find objects that aren't being properly garbage-collected, and continue to retain memory.
 How Allocation instrumentation on timeline works
Allocation instrumentation on timeline combines the detailed snapshot information of the heap profiler with the incremental updating and tracking of the Performance tool. Similarly, tracking heap allocation for objects involves starting a recording, performing a sequence of actions, and stopping the recording for analysis.
Allocation instrumentation on timeline takes heap snapshots periodically throughout the recording (as frequently as every 50 ms) and one final snapshot at the end of the recording.

NOTE
@The number after the  is an object ID that persists across the multiple snapshots taken during the recording session. The persistent object ID enables precise comparison between heap states. Objects are moved during garbage collections, so displaying the address of an object makes no sense. Enable Allocation Instrumentation on Timeline
To begin using Allocation instrumentation on timeline:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
2. In DevTools, on the main toolbar, select the Memory tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
3. Select the Allocation instrumentation on timeline radio button.
4. Start recording.
The record heap allocations profiler:

 Read a heap allocation timeline
The heap allocation timeline shows where objects are being created and identifies the retaining path. In the following figure, the bars at the top indicate when new objects are found in the heap.
The height of each bar corresponds to the size of the recently allocated objects, and the color of the bars indicate whether or not those objects are still live in the final heap snapshot. Blue bars indicate objects that are still live at the end of the timeline, Gray bars indicate objects that were allocated during the timeline, but have since been garbage collected.

You can use the sliders in the timeline above to zoom into that particular snapshot and review the objects that were recently allocated at that point:

Clicking on a specific object in the heap shows the retaining tree in the bottom portion of the heap snapshot. Examining the retaining path to the object should give you enough information to understand why the object was not collected, and you should make the necessary code changes to remove the unnecessary reference.
 View memory allocation by function
You can view memory allocation by JavaScript function. See Investigate memory allocation by function.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Meggin Kearney (Technical Writer).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Speed up JavaScript runtime
 	6/21/2022 • 3 minutes to read • Edit OnlineTo identify expensive functions, use the Memory tool.

 Summary 
 Record exactly which functions were called and how much memory each requires with Allocation Sampling in the Memory tool.
 Visualize your profiles as a flame chart.
 Record a Sampling Profile
If you notice jank (interruptions of rendering) in your JavaScript, collect a Sampling Profile. Sampling Profiles show where running time is spent on functions in your page.
1. In DevTools, go to the Memory tool.
2. Click the Allocation sampling radio button.
3. Click Start.
4. Depending on what you are trying to analyze, you can either refresh the page, interact with the page, or just let the page run.
5. When you're finished, click the Stop button.
You can also use the Console Utilities API to record and group profiles from the command line.
 View Sampling Profile
When you finish recording, DevTools automatically populates the Memory panel under SAMPLING PROFILES with the data from your recording.
The default view is Heavy (Bottom Up). This view allows you to review which functions had the most impact on performance and examine the requesting path for each function.  Change sort order 
To change the sorting order, select the dropdown menu next to the focus selected function () icon and then select one of the following options:
Chart. Displays a chronological chart of the recording.

Heavy (Bottom Up). Lists functions by impact on performance and enables you to examine the calling paths to the functions. This is the default view.

Tree (Top Down). Shows an overall picture of the calling structure, starting at the top of the call stack.

 Exclude functions 
To exclude a function from your Sampling Profile, select it and then click the exclude selected function ( ) button. The requesting function (parent) of the excluded function (child) is charged with the allocated memory assigned to the excluded function (child).
Click the restore all functions () button to restore all excluded functions back into the recording.
 View Sampling Profile as Chart
The Chart view provides a visual representation of the Sampling Profile over time.
After you record a Sampling Profile, view the recording as a flame chart by changing the sort order to Chart.

The flame chart is split into two parts:
INDEXPARTDESCRIPTION1OverviewA birds-eye view of the entire recording. The height of the bars correspond to the depth of the call stack. So, the higher the bar, the deeper the call stack.2Call StacksThis is an in-depth view of the functions that were called during the recording. The horizontal axis is time and vertical axis is the call stack. The stacks are organized top-down. So, the function on top called the one below it, and so on.Functions are colored randomly. There is no correlation to the colors used in the other panels. However, functions are always colored the same across invocations, so that you can observe patterns in each runtime.

A tall call stack isn't necessarily significant; it might just mean that a lot of functions were called. But a wide bar means that a function took a long time to complete, so these are candidates for optimization.
 Zoom in on specific parts of recording 
To zoom in on particular parts of the call stack, click and drag left and right across the overview. After you zoom, the call stack automatically displays the portion of the recording that you selected.

 View function details 
Click a function, to view it in the Sources tool.
Hover on a function to display the name and timing data:
DETAILDESCRIPTIONNameThe name of the function.Self sizeThe size of the current invocation of the function, including only the statements in the function.Total sizeThe size of the current invocation of this function and any functions that it called.URLThe location of the function definition in the form of 
base.js261base.js:261	 where 	 is the name of the file where
the function is defined and 	 is the line number of the definition.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse) and Meggin Kearney (Technical Writer).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 
Inspect a JavaScript ArrayBuffer using Memory Inspector
 	6/21/2022 • 5 minutes to read • Edit OnlineUse Memory Inspector to view and interact with the following types of objects:
ArrayBuffer
TypedArray
DataView
WebAssembly (Wasm) memory
Using Memory Inspector you can view the different types of memory objects, navigate, and select the types to be used to interpret the values. It shows the ASCII values directly next to the bytes, and lets you select different endianness.

ArrayBuffersThe Memory Inspector tool provides greater ability than the Sources tool to inspect  when debugging. The Scope view in the Sources tool displays a list of single values within the array buffer, which makes it difficult to see all the data. Additionally, navigating to a certain range within the buffer requires you to scroll to a specific index and the values are always displayed as a single byte, even if you wanted to see them in another format, such as 32-bit integers.

 Open Memory Inspector while debugging
1. Start Microsoft Edge.
2. Open the test site Inspect ArrayBuffers in JS (Memory in JS).
F12 or Ctrl+Shift+I (Windows, Linux) or Command+Option+I3. Open DevTools by pressing (macOS).
demo-js.js4. Click Sources and open the  file.
5. Set a breakpoint at line 18 as shown in the following image.

6. Refresh the webpage. It fails to display because the JavaScript pauses at the breakpoint.
buffer7. In the right Debugger pane under Scope, find the  line.
buffer8. From the  line you can open Memory Inspector using one of the following methods:
buffer Click on the Reveal in Memory Inspector panel icon () at the end of the  property line, or

The JavaScript ArrayBuffer opens in Memory Inspector.

 Inspect multiple objects 
You can inspect multiple objects at the same time such as DataView and TypedArray.
b2b2With the demo webpage paused at the breakpoint, object  in the Scope view is a TypedArray. Right click the  object and select Reveal in Memory Inspector panel
b2 object opens next to the first tab, which represents the bufferA new tab for the  object in Memory
Inspector.

 Navigating in Memory Inspector
The Memory Inspector panel includes three types of content:
Navigation bar
Memory buffer
Value inspector
 Navigation bar 

0x00000008The Enter address text box shows the current byte address in hex format. You can change the value to jump to a new location in the memory buffer. Click in the text box and change the value to . The Memory buffer immediately jumps to that byte address.
Memory buffers may be longer than one page. Use the left and right arrow buttons to navigate Previous page (<) and Next page (>), respectively. If there is only one page of memory buffer data, the arrows take you to the beginning and ending of the page.
Use the far-left history arrows to Go back in address history () and Go forward in address history ( ).
If the Memory buffer does not automatically update when stepping through values, click Refresh ().
 Memory buffer 

Reading from the left side of the panel, the address is displayed in hex format. The currently selected address is bold.
The memory is also shown in hex format, each byte separated by a space. The currently selected byte is highlighted. You can click on any byte or navigate using the arrow keys (left, right, up, and down).
The ASCII representation of the memory is shown on the right side of the panel. The highlighted character corresponds to the selected byte. You can click on any character or navigate using the arrow keys (left, right, up, and down).
 Value inspector 

Click the current Endian type to switch between Big endian and Little endian.
The main area shows each value and interpretation based on the settings. By default, all values are shown.
Click Toggle value type settings () to select which value types to see in the inspector. This becomes the new default value type setting.

decYou can change the encoding view using the drop-down list. For integers you can choose from decimal ,
hex, and octal oct. For floats you can choose between decimal notation decscihexadecimal  and scientific notation .
 Inspecting memory
Complete the following steps to debug a webpage in Memory Inspector.
0x000000271. In the Navigation bar change the address to .
2. View the ASCII representation and the value interpretations. All values should be zero or empty.

3. Click Resume script execution () or press F8 or Ctrl +\ to step through the code.
The ASCII representation and the value interpretations are updated.

4. Click the Jump to address button () for Pointer 32-bit or Pointer 64-bit as needed to jump to the next active memory address. If next memory address is not available, the button is turned off () with the tooltip Address out of memory range.
5. Customize the Value inspector to show only floating point values. Click Toggle value type settings ( ) and clear all checkboxes except the two Floating point values.

6. Click Toggle value type settings () to close the value type settings.
dec to sci7. Use the drop-down menus to change the encoding from . The value representations are updated.

8. Explore the memory buffer using the keyboard or navigation bar.
9. Repeat steps 3 and 4 to observe value changes.
 WebAssembly memory inspection
For WebAssembly (Wasm) memory inspection, the process is similar to inspecting JavaScript memory.
1. Open the Wasm test site Inspect Wasm memories (Memory in Wasm).
F12 or Ctrl+Shift+I (Windows, Linux) or Command+Option+I2. Open DevTools by pressing (macOS).
memory-write.wasm3. Click Sources and open the  file.
4. Set a breakpoint at the first line in the loop, hexadecimal value 0x03c.
5. Refresh the page.
6. In the debugger pane under Scope, expand the Module.

$imports.memory7. Click on the Reveal in Memory Inspector panel icon () at the end of the  property line.
The Wasm ArrayBuffer opens in Memory Inspector.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kim-Anh Tran (Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Inspect network activity
 	6/21/2022 • 7 minutes to read • Edit OnlineUse the Network tool to make sure that resources are being downloaded or uploaded as expected. Inspect the properties of an individual resource, such as the HTTP headers, content, or size.
This is a step-by-step tutorial walkthrough of the Network tool, for inspecting network activity for a page.
For an overview of the network-related DevTools features, see Network features reference.
 When to use the Network panel
In general, use the Network panel when you need to make sure that resources are being downloaded or uploaded as expected. The most common use cases for the Network panel are:
Making sure that resources are actually being uploaded or downloaded at all.
Inspecting the properties of an individual resource, such as the HTTP headers, content, size, and so on.
If you're looking for ways to improve page load performance, don't start with the Network tool. There are many types of load performance issues that aren't related to network activity. Start with the Lighthouse tool, because it gives you targeted suggestions on how to improve your page. See Optimize website speed using Lighthouse.
 Open the Network panel
To get the most out of this tutorial, open the demo and try out the features on the demo page.
1. Open the Inspect Network Activity Demo in a new tab or window:

Ctrl+Shift+J2. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+J(Windows, Linux) or  (macOS). DevTools opens.
3. In DevTools, on the main toolbar, select the Console tab. If that tab isn't visible, click the More tabs () button:

You might prefer to dock DevTools to the bottom of your window:

4. Open the Network tool:

The Network tool is initially empty. DevTools only logs network activity after you open it, and no network activity has occurred since you opened DevTools.
 Log network activity
To view the network activity that a page causes:
1. Refresh the webpage. The Network panel logs all network activity in the Network Log:

Each row of the Network Log represents a resource. By default the resources are listed chronologically. The top resource is usually the main HTML document. The bottom resource is whatever was requested last.
Each column represents information about a resource. In the previous figure, the default columns are displayed.
Status. The HTTP status code for response.
Type. The resource type.
Initiator. The cause of the resource request. Clicking a link in the Initiator column takes you to the source code that caused the request.
Time. The duration of the request.
Waterfall. A graphical representation of the different stages of the request. To display a breakdown, hover over a Waterfall.
NOTE
The graph above the Network Log is called the Overview. You won't use the Overview graph in this tutorial, so you can hide it. See Hide the Overview pane.
After you open DevTools, it records network activity in the Network Log.
2. To demonstrate this, first look at the bottom of the Network Log and make a mental note of the last activity.
3. Now, click the Get Data button in the demo.
getstarted.json4. Look at the bottom of the Network Log again. A new resource named  is displayed:

 Show more information
The columns of the Network Log are configurable. You can hide columns that you aren't using. There are also many columns that are hidden by default which you might find useful.
1. Right-click the header of the Network Log table, and then select Domain. The domain of each resource is now shown:

2. To see the full URL of a resource, hover over its cell in the Name column.
 Simulate a slower network connection
The network connection of the computer that you use to build sites is probably faster than the network connections of the mobile devices of your users. By throttling the page, you get a better idea of how long a page takes to load on a mobile device.
1. Select the Throttling dropdown list, which is set to No throttling by default.
2. Select Slow 3G:


On repeat visits, the browser usually serves some files from the cache, which speeds up the page load. Empty cache and hard refresh forces the browser to go the network for all resources. Use it to display how a firsttime visitor experiences a page load.
The Empty cache and hard refresh workflow is only available when DevTools is open.
See also Emulate slow network connections in Network features reference.
 Capture screenshots
Screenshots display how a webpage looks over time while it loads.

2. Refresh the page again using the Empty cache and hard refresh workflow. See Simulate a slower connection above if you need a reminder on how to do this.
The Screenshots panel provides thumbnails of how the page looked at various points during the loading process:

3. Click the first thumbnail. DevTools shows you what network activity was occurring at that moment in time:
4. Click (
5. Refresh the page again.
 Inspect the details of the resource
Select a resource to learn more information about it.
network-tutorial/1. Select . The Headers panel is shown. Use this panel to inspect HTTP headers:

2. Select the Preview panel. A basic rendering of the HTML is shown:

The panel is helpful when an API returns an error code in HTML. You might find it easier to read the rendered HTML than the HTML source code, or when you inspect images.
3. Select the Response panel. The HTML source code is shown:
Tip: When a file is minified, select the Format ( format the contents of the file for readability.
4. Select the Timing panel. A breakdown of the network activity for the resource is displayed:

5. Click Close () to view the Network Log again:

 Search network headers and responses
Use the Search pane when you need to search the HTTP headers and responses of all resources for a certain string or regular expression.
For example, suppose you want to verify that your resources are using reasonable cache policies.

no-cache and press Enter. The Search pane lists all instances of no-cache2. Type  that it finds in resource headers or content:

3. Click a result to view the resource in which the result was found. If you are looking at the details of the resource, select a result to go directly to it. For example, if the query was found in a header, the Headers panel opens. If the query was found in content, the Response panel opens:

4. Close the Search pane and the Headers panel.
 Filter resources
DevTools provides numerous workflows for filtering out resources that aren't relevant to the task at hand:

The Filters toolbar should be turned on by default. If the Filters toolbar isn't on, click Filter () to show it.
 Filter by string, regular expression, or property 
The Filter text box supports many different types of filtering.
png into the Filter text box. Only the files that contain the text png1. Type  are shown. In this case the only files that match the filter are the PNG images:

/.*\.[cj]s+$/. DevTools filters out any resource with a filename that doesn't end with a j or a cs2. Type followed by 1 or more  characters:

-main.css. DevTools filters out main.css3. Type . If any file matches that pattern, it's also filtered out:

larger-than:10004. Type  into the Filter text box. DevTools filters out any resource with responses that are smaller than 1000 bytes:

For the full list of filterable properties, see Filter requests by properties.
5. Clear the Filter text box of any text.
 Filter by resource type 
To focus in on a certain type of file, such as stylesheets:
1. Select CSS. All other file types are filtered out:

Control (Windows, Linux) or Command2. To also display scripts, press and hold  (macOS), and then click JS:

3. To remove the filters and display all resources again, select All.
For other filtering workflows, see Filter requests.
 Block requests
How does a page look and behave when some of the page resources aren't available? Does it fail completely, or is it still somewhat functional? Block requests to find out:
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P1. Press  (macOS) to open the Command
Menu.
block, select Show Request Blocking, and then press Enter2. Type :

3. Click Add Pattern ().
main.css4. Type :

5. Click Add.
6. Refresh the page. As expected, the styling of the page is slightly messed up, because the main stylesheet has been blocked.
main.cssIn the  row in the Network Log, the red text means that the resource was blocked:

7. Clear the Enable request blocking checkbox.
 Conclusion
Congratulations, you have completed the tutorial! You now know how to use the Network tool in Microsoft Edge DevTools.
To discover more DevTools features related to inspecting network activity, see Network features reference.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Network features reference
 	6/21/2022 • 17 minutes to read • Edit OnlineThis article is an outline of the various features of the Network tool, which is used for network analysis and inspecting network activity for a webpage.
See also Inspect network activity, which is a step-by-step tutorial walkthrough of the Network tool.
 Record network requests
By default, DevTools records all network requests in the Network tool, so long as DevTools is open.

 Stop recording network requests To stop recording requests:
1. On the Network tool, click Stop recording network log (). It turns grey to indicate that DevTools is no longer recording requests.
Ctrl+E (Windows, Linux) or Command+E2. Press  (macOS) while the Network tool is in focus.
 Clear requests 
Click the Clear () button on the Network tool to clear all requests from the Requests table.

 Save requests across page loads 
To save requests across page loads, on the Network tool, select the Preserve log checkbox:

DevTools saves all requests until you disable Preserve log.
 Capture screenshots during page load 
You can capture screenshots to analyze what's displayed for users while waiting for your page to load.
To enable screenshots:
1. In DevTools, open the Network tool.
2. In the upper right within the Network tool, click the Network settings (gear) icon. A row of checkboxes appears.
3. Select the Capture screenshots checkbox:

To capture a screenshot:
Ctrl+F51. While the Network tool has focus, press  refresh the page. Screenshot are captured and thumbnails are shown below the row of checkboxes.
You can interact with the screenshots as follows.
2. Hover over a screenshot to display the point at which that screenshot was captured. A yellow vertical line is displayed on the Overview chart pane.

3. Click the thumbnail of a screenshot to filter out any requests that occurred after the screenshot was captured.
4. Double-click a screenshot thumbnail to zoom-in and view the screenshot.
Esc5. Press  to close the screenshot viewer.
 Change loading behavior
	 Emulate a first 	-time visitor by disabling the browser cache
To emulate how a first-time user experiences your site, turn on the Disable cache checkbox. DevTools disables the browser cache. This feature more accurately emulates a first-time user's experience, because requests are served from the browser cache on repeat visits.
The Disable Cache checkbox:

 Disable the browser cache from the Network Conditions drawer 
If you want to disable the cache while working in other DevTools panels, use the Network Conditions drawer:
1. Open the Network Conditions drawer.
2. Select or clear the Disable cache checkbox.
 Manually clear the browser cache 
To manually clear the browser cache at any time, right-click anywhere in the Requests table, and then click Clear Browser Cache.
Selecting Clear Browser Cache:

 Emulate offline 
A new class of web apps, named Progressive Web Apps, functions offline with the help of service workers. You may find it useful to quickly simulate a device that has no data connection, when you are building this type of app.
To simulate an offline network experience, select the No throttling dropdown menu > Presets > Offline.
The Offline dropdown menu:

 Emulate slow network connections 
Emulate Slow 3G, Fast 3G, and other connection speeds from the No throttling dropdown menu.
The Throttling dropdown menu:

You can choose from different presets, such as Slow 3G or Fast 3G. To add your own custom presets, open the Throttling menu, and select Custom > Add.
DevTools displays a warning icon next to the Network tool to remind you that throttling is enabled.
See also Simulate a slower network connection in Inspect network activity.
 Emulate slow network connections from the Network Conditions drawer 
If you want to throttle the network connection while working in other DevTools panels, use the Network Conditions drawer tool:
1. Open the Network Conditions drawer.
2. Select your connection speed from the Throttling menu.
 Manually clear browser cookies 
To manually clear browser cookies at any time, right-click anywhere in the Requests table, and then select Clear Browser Cookies.

 Override the user agent 
To manually override the user agent:
1. Open the Network Conditions drawer tool.
2. Clear the Select automatically checkbox.
3. Select a user agent option from the menu, or enter a custom user agent in the text box.
 Set user agent client hints
If your site employs user agent client hints, use the Network conditions panel to provide different user agent client hints.
1. Right-click the webpage and select Inspect.
2. Select Network > Network conditions.
3. In the User agent panel clear the Use browser default checkbox, then select User agent client hints.

4. Accept the default value of Custom..., or select a predefined browser and device from the dropdown list.
5. For either choice, set User agent client hints as follows:
Brand and Version such as Edge and 92. Click + Add Brand to add multiple brand and version pairs.
Full Browser Version such as 92.0.1111.0.
Platform and Version such as Windows and 10.0.
Architecture such as x86.
Device model such as Galaxy Nexus.
NOTE
Set or change any of the user agent client hints. There are no required values.
6. Select Update.
navigator.userAgentData7. To verify changes, click Console and type . Expand the results as needed to view changes to user agent data.
You can also set user agent client hints in Emulate mobile devices (Device Emulation).
 Filter requests
You can filter requests by properties, by type, or by time, and you can hide data URLs.
 Filter requests by properties 
Use the Filter text box to filter requests by properties, such as the domain or size of the request.
If the text box isn't displayed, the Filters pane is probably hidden. For more information, see Hide the Filters pane.
The Filter text box:

You can use multiple properties simultaneously by separating each property with a space. For example, 
mime-type:image/png larger-than:1K displays all PNGs that are larger than 1 kilobyte. The multi-property filters
AND operations. ORare equivalent to  operations are currently not supported.
The complete list of supported properties:
PROPERTYDETAILS
domain**.com.comOnly display resources from the specified domain. You can use a wildcard character () to include multiple domains. For example, 	 displays resources from all domain names ending in 	. DevTools populates the autocomplete dropdown menu with all of the domains that are found.
has-response-headerDisplays the resources that contain the specified HTTP response header. DevTools populates the autocomplete dropdown menu with all of the response headers that are found.
isis:running to find WebSocketUse  resources.
larger-than10001kDisplays resources that are larger than the specified size, in bytes. Setting a value of  is equivalent to setting a value of .
methodDisplays resources that were retrieved over a specified HTTP method type. DevTools populates the dropdown menu with all of the HTTP methods that are found.PROPERTYDETAILS
mime-typeDisplays resources of a specified MIME type. DevTools populates the dropdown menu with all MIME types that are found.
mixed-contentmixed-content:allShow all mixed content resources () or
just the ones that are currently displayed (
mixed-content:displayed).
schemeDisplays resources retrieved over unprotected HTTP (
scheme:http) or protected HTTPS (scheme:https).
set-cookie-domainSet-CookieDomainDisplays resources that have a  header with a  attribute that matches the specified value. DevTools
populate the autocomplete with all of the cookie domains that are found.
set-cookie-nameSet-CookieDisplays resources that have a  header with a name that matches the specified value. DevTools populate the autocomplete with all of the cookie names that are found.
set-cookie-valueSet-CookieDisplays resources that have a  header with a value that matches the specified value. DevTools populate the autocomplete with all of the cookie values that are found.
status-codeDisplays resources that match the specific HTTP status code. DevTools populates the autocomplete dropdown menu with all of the status codes that are found. Filter requests by type 
To filter requests by request type, click the buttons on the Network panel:
XHR
JS
CSS Img
Media
Font
Doc
WS - WebSocket.
Manifest
Other - Any other type not listed here.
If the buttons don't appear, the Filters pane might be hidden. See Hide the Filters pane.
Control (Windows, Linux) or CommandTo enable multiple type filters simultaneously, press and hold  (macOS) and then click the filters.
Use the Type filters to display JS, CSS, and Document resources:

 Filter requests by time 
Click and drag left or right on the Overview pane to only display requests that were active during that time frame. The filter is inclusive. Any request that was active during the highlighted time is shown.
Filtering out any requests that were inactive around 300 ms:

 Hide data URLs 
data:Data URLs are small files embedded into other documents. Any request that displays in the Requests table that starts with  is a data URL.
To hide the requests, turn off the Hide data URLs checkbox:

 Sort requests
By default, the requests in the Requests table are sorted by initiation time, but you can sort the table using other criteria.
 Sort by column 
Click the header of any column in the Requests to sort requests by that column.
 Sort by activity phase 
To change how the Waterfall sorts requests:
 Right-click the header of the Requests table, hover over Waterfall, and then select one of the following options:
Start Time - The first request that was initiated is placed at the top.
Response Time - The first request that started downloading is placed at the top.
End Time - The first request that finished is placed at the top.
Total Duration - The request with the shortest connection settings and request or response is placed at the top.
 Latency - The request that waited the shortest time for a response is placed at the top.
These descriptions assume that each respective option is ranked from shortest to longest. Click the header of the Waterfall column to reverse the order.
The following shows sorting the Waterfall by total duration. The lighter portion of each bar is time spent waiting and the darker portion is time spent downloading bytes:

 Analyze requests
So long as DevTools are open, it logs all requests in the Network tool. Use the Network panel to analyze requests.
 Display a log of requests 
Use the Requests table to display a log of all requests made while DevTools have been open. To reveal more information about each item, click or hover on requests.

The Requests table displays the following columns by default:
Name. The filename of, or an identifier for, the resource.
Status. The HTTP status code.
Type. The MIME type of the requested resource.
Initiator. The following objects or processes can initiate requests:
Parser. The HTML parser.
Redirect. An HTTP redirect.
Script. A JavaScript function.
Other. Some other process or action, such as navigating to a page via a link or entering a URL in the address bar.
Size. The combined size of the response headers plus the response body, as delivered by the server.
Time. The total duration, from the start of the request to the receipt of the final byte in the response. Waterfall. A visual breakdown of each request's activity.
 Add or remove columns 
Right-click the header of the Requests table and select an option to hide or show it. Currently displayed options have checkmarks next to them.

 Add custom columns 
To add a custom column to the Requests table, right-click the header of the Requests table and then select Response Headers > Manage Header Columns.

 Display the timing relationship of requests 
Use the Waterfall to display the timing relationships of requests. The default organization of the Waterfall uses the start time of the requests. So, requests that are farther to the left started earlier than the requests that are farther to the right.
To see the different ways that you can sort the Waterfall, go to Sort by activity phase.
The Waterfall column of the Requests pane:

 Display a preview of a response body 
To display a preview of a response body, use the following steps.
1. Click the URL of the request, under the Name column of the Requests table.
2. Select the Preview tab.
The Preview tab is mostly useful to display images.

 Display a response body 
To display the response body to a request, use the following steps.
1. Click the URL of the request, under the Name column of the Requests table.
2. Click the Response tab.

 Display HTTP headers 
To display HTTP header data about a request, use the following steps.
1. Click the URL of the request, under the Name column of the Requests table.
2. Click the Headers tab.

 Display HTTP header source 
By default, the Headers panel shows header names alphabetically. To display the HTTP header names in the order received, use the following steps.
1. Open the Headers panel for the request that interests you. For more information, see Display HTTP headers.
2. Click view source, next to the Request Header or Response Header section.
 Display query string parameters 
To display the query string parameters of a URL in a human-readable format, use the following steps.
1. Open the Headers panel for the request that interests you. For more information, see Display HTTP headers.
2. Navigate to the Query String Parameters section.

 Display query string parameters source 
To display the query string parameter source of a request, use the following steps.
1. Navigate to the Query String Parameters section. For more information, see Display query string parameters.
2. Select view source.
	 Display URL 	-encoded query string parameters
To display query string parameters in a human-readable format, but with encodings preserved, use the following steps.
1. Navigate to the Query String Parameters section. For more information, see Display query string parameters.
2. Click view URL encoded.
 Display cookies 
To display the cookies sent in the HTTP header of a request, use the following steps.
1. Click the URL of the request, under the Name column of the Requests table.
2. Click the Cookies tab.

 Display the timing breakdown of a request 
To display the timing breakdown of a request, use the following steps.
1. Click the URL of the request, under the Name column of the Requests table.
2. Click the Timing tab.
For a faster way to access the data, see Preview a timing breakdown, in the present article.
For more information about each of the phases that may be displayed in the Timing panel, see Timing breakdown phases explained, in the present article.
The Timing panel:

More information about each of the phases.
For more information about accessing the display, see Display timing breakdown.
 Preview a timing breakdown 
To display a preview of the timing breakdown of a request, in the Waterfall column of the Requests table, hover on the entry for the request.
Previewing the timing breakdown of a request:

To view the data without hovering, see the top of the present section, Display the timing breakdown of a request.
 Timing breakdown phases explained 
Each of these phases may appear in the Timing tab:
Queueing. The browser queues requests when any of the following are true
There are higher priority requests.
There are already six TCP connections open for this origin, which is the limit. Applies to HTTP/1.0 and HTTP/1.1 only.
The browser is briefly allocating space in the disk cache.
Stalled. The request could be stalled for any of the reasons described in Queueing.
DNS Lookup. The browser is resolving the IP address for the request.
Initial connection. The browser is establishing a connection, including TCP handshakes and retries and negotiating a Secure Socket Layer (SSL).
Proxy negotiation. The browser is negotiating the request with a proxy server.
Request sent. The request is being sent.
ServiceWorker Preparation. The browser is starting up the service worker. Request to ServiceWorker. The request is being sent to the service worker.
Waiting (TTFB). The browser is waiting for the first byte of a response. TTFB stands for Time To First Byte. This timing includes one round trip of latency and the time the server took to prepare the response.
Content Download. The browser is receiving the response.
Receiving Push. The browser is receiving data for this response via HTTP/2 Server Push.
Reading Push. The browser is reading the local data that was previously received.
 Display initiators and dependencies 
ShiftTo display the initiators and dependencies of a request, hold  and hover on the request in the Requests table.
DevTools colors:
Initiators are shown in green.
Dependencies are shown in red.
Displaying the initiators and dependencies of a request:

When the Requests table is ordered chronologically, if you hover on a line, the line preceding it displays a green request. The green request is the initiator of the dependency. If another green request is displayed on the line before that, that higher request is the initiator of the initiator. And so on.
 Display load events 
DOMContentLoaded and loadDevTools displays the timing of the  events in multiple places on the Network tool.
DOMContentLoaded event is colored blue, and the loadThe  event is red.
DOMContentLoaded and loadThe locations of the  events on the Network tool:

 Display the total number of requests 
The total number of requests is listed in the Summary pane, at the bottom of the Network tool.
Cau t ion
This number only tracks requests that have been logged since DevTools was opened. If other requests occurred before DevTools was opened, those requests aren't counted.
The total number of requests since DevTools were opened

 Display the total download size 
The total download size of requests is listed in the Summary pane, at the bottom of the Network tool.
Cau t ion
This number only tracks requests that have been logged since DevTools was opened. If other requests occurred before DevTools was opened, the previous requests aren't counted.
The total download size of requests:

To verify how large resources are after the browser uncompresses each item, see display the uncompressed size of a resource.
  
Display the stack trace that caused a request
After a JavaScript statement requests a resource, hover on the Initiator column to display the stack trace leading up to the request.
The stack trace leading up to a resource request:

 Display the uncompressed size of a resource 
Turn on the Use large request rows checkbox and then examine the bottom value of the Size column.
jquery-3.3.1.min.js29.9 KB, whereas the uncompressed size was 84.9 KBThe following is an example of uncompressed resources. The compressed size of the  file that was sent over the network was :

 Export requests data
 Save all network requests to a HAR file 
To save all network requests to a HAR file:
1. In the Requests table, right-click a request and then select Save as HAR with Content. DevTools saves all requests that have occurred since you opened DevTools to the HAR file. You can't filter requests, and you can't save a single request.
Once you save a HAR file, you can import it back into DevTools for analysis. Drag-and-drop the HAR file into the Requests table.
Selecting Save as HAR with Content:

 Copy one or more requests to the clipboard 
Under the Name column of the Requests table, right-click a request, hover over Copy, and select one of the following options:
NAMEDETAILSCopy Link AddressCopy the URL of the request to the clipboard.Copy ResponseCopy the response body to the clipboard.Copy as Fetch Copy as cURLCopy the request as a cURL command.Copy All as Fetch Copy All as cURLCopy all requests as a chain of cURL commands.Copy All as HARCopy all requests as HAR data.Select Copy Response:

 Copy formatted response JSON to the clipboard 
Select a network request and then navigate to the Headers pane. To copy the JSON value of a response, navigate to Request payload, right-click the JSON response content and then select Copy Value.

Pasting the formatted response JSON in Microsoft Visual Studio Code:

 Copy property values from network requests to your clipboard To copy property values from network requests to your clipboard:
1. Open the Headers pane.
2. Open one of the following header sections.
Request payload (JSON)
Form Data
Query String Parameters
Request Headers
Response Headers
3. Right-click a value and then select Copy value. You can now paste the value into any editor to review it.
 Change the layout of the Network panel
You can expand or collapse sections of the Network tool UI to focus important information.
 Hide the Filters pane 
By default, DevTools shows the Filters pane. To hide the Filters pane, select Filter ().

 Use large request rows 
Use large rows when you want more whitespace in your network requests table. Some columns also provide a little more information when using large rows. For example, the bottom value of the Size column is the uncompressed size of a request.
To enable large rows, select the Use large request rows checkbox. An example of large request rows in the Requests pane:

 Hide the Overview pane 
By default, DevTools displays the Overview pane. To hide the Overview pane, clear the Show Overview checkbox.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Network issues guide
 	6/21/2022 • 2 minutes to read • Edit OnlineThis guide shows you how to detect network issues or optimization opportunities in the Network panel of Microsoft Edge DevTools.
To learn the basics of the Network tool, see Inspect network activity.
 Queued or stalled requests
Symptoms
Six requests are downloading simultaneously. After that, a series of requests are queued or stalled. Once one of the first six requests finishes, one of the requests in the queue starts.
edge-iconx1024.msft.pngIn the Waterfall in the following figure, the first six requests for the  asset start simultaneously. The subsequent requests are stalled until one of the original six finishes.

Causes
Too many requests are being made on a single domain. On HTTP/1.0 or HTTP/1.1 connections, Microsoft Edge allows a maximum of six simultaneous TCP connections per host.
Fixes
Implement domain sharding if you must use HTTP/1.0 or HTTP/1.1.
Use HTTP/2. Don't use domain sharding with HTTP/2.
Remove or defer unnecessary requests so that critical requests download earlier.
 Slow Time To First Byte (TTFB)
Symptoms
A request spends a long time waiting to receive the first byte from the server.
In the following figure, the long, green bar in the Waterfall indicates that the request was waiting a long time. This was simulated using a profile to restrict network speed and add a delay.

Causes
The connection between the client and server is slow.
The server is slow to respond. Host the server locally to determine if it is the connection or server that is slow. If you still get a slow Time To First Byte (TTFB) when accessing a local server, then the server is slow.
Fixes
If the connection is slow, consider hosting your content on a CDN or changing hosting providers.
If the server is slow, consider optimizing database queries, implementing a cache, or modifying your server configuration.
 Slow content download
Symptoms
A request takes a long time to download.
In the following figure, the long, blue bar in the Waterfall next to the png means it took a long time to download.

Causes
The connection between the client and server is slow.
A lot of content is being downloaded.
Fixes
Consider hosting your content on a CDN or changing hosting providers.
Send fewer bytes by optimizing your requests.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse) and Jonathan Garbee (Google Developer Expert for Web Technology).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 View page resources
 	6/21/2022 • 2 minutes to read • Edit OnlineResources are the files that a page needs in order to display correctly. Examples of resources include:
CSS files.
JavaScript files.
HTML files.
Image files.
You can view the resources that make up a web page from within several tools, or panels.
This guide assumes that you are familiar with the basics of web development and Microsoft Edge DevTools.
 Open resources from the Command Menu
When you know the name of the resource that you want to inspect, the Command Menu provides a fast way of opening the resource.
Ctrl+P (Windows, Linux) or Command+P1. Press  (macOS). The Open File dialog opens.

Enter2. Select the file from the dropdown list, or start typing the filename and press  once the correct file is highlighted in the autocomplete box.

 Open resources in the Network tool
See Inspect the details of a resource in Inspect network activity.

 Reveal resources in the Network tool from other panels 
The next section, Browse resources in the Network panel, shows how to view resources from various parts of the DevTools UI. To inspect a resource in the Network tool, right-click the resource and select Reveal in Network panel.

 Browse resources in the Network panel
1. Open Log network activity (in the article Inspect network activity) in a new tab or window.

 Browse resources by directory in the Sources tool
To view the resources of a webpage organized by directory:
1. Open DevTools.
2. Select the Sources tool, and then in the Navigator pane in the upper left, select the Page tab.
3. Click the More options (...) button to the right of the Page tab, and then select Group by folder.

Here is a breakdown of the non-obvious items in the previous figure.
PAGE ITEMDESCRIPTION
topThe main document browsing context.
airhorner.comThe domain. All resources nested under it come from that domain. For example, the full URL of the 
comlink.global.js file is probably https://airhorner.com/scripts/comlink.global.js.
scriptsA directory.
(index)The main HTML document.
sw.jsA service worker runtime context.4. Select a resource to view it in the Editor.

 Browse resources by filename in the Sources tool
By default, the Page tab groups resources by directory. To display the resources for each domain as a flat list, instead of grouping them by directory:
1. Go to the Sources tool.
2. In the Navigator pane (on the left), select the Page tab.
...3. Click More options  and then clear the Group by folder checkbox.

Resources are organized by file type. Within each file type, the resources are organized alphabetically.

 Browse resources by file type in the Application tool
To group resources together based on their file type:
1. Select the Application tab. The Application tool opens. By default, the Manifest pane usually opens first.

2. Scroll down to the Frames pane.

3. Expand the sections you're interested in.
4. Select a resource to view it.

 Browse files by type in the Network panel
See Filter by resource type.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Service Worker improvements
 	6/21/2022 • 2 minutes to read • Edit OnlineThis article explains improvements to developer tools for working with service workers and the network requests that pass through each service worker. The service worker improvements are in the Network, Application, and Sources tools.
The improvements to service workers simplify the following tasks:
Debug based on Service Worker timelines.
The start of a request and duration of the bootstrap.
Update to Service worker registration.
The runtime of a request using the fetch event handler. The runtime of all fetch events for loading a client.
Explore the runtime details of fetch event handlers, install event handlers, and activate event handlers. Step into and out of fetch event handler with page script information.
The improved experiences span three different developer tools:
 The Network tool. Select a network request that runs through a service worker and access the corresponding timeline of the service worker in the Timing tool.
The Application tool. To debug the service workers, go to the Service Workers tool.
The Sources tool. Access page script information when stepping into fetch event handlers.
 Network

You can access the service worker debugging features in the Network tool in either of the following ways:
 Directly in the Network tool.
 Started in the Application tool.
 Request routing 
respondWithTo make request routing easier to visualize, timelines now display the service worker start-up and the  fetch events. To debug and visualize a network request that passed through a service worker:
1. Select the network request that went through a service worker.
2. Open the Timing tool.
 Fetch events 
respondWith fetch events, click the dropdown arrow to the left of the respondWithTo learn more about the . To
find more details about the Original Request and Response Received, click the corresponding dropdown arrows.
 Application

 Service worker update timeline 
The Microsoft Edge DevTools team added a timeline in the Application tool to reflect the update lifecycle of the service worker. This timeline displays the installation and activation events. Each of the events have a corresponding dropdown arrow to give you more details.
 Request routing and fetch events 
You can now access the service worker timelines through the Network tool in the console drawer. This feature benefits performance, minimizes UI duplication, and creates a more comprehensive debugging experience.
1. Open the service worker that you're debugging.
2. Click the Network button to open the request routing experience.
3. Use the respondWith dropdown arrows for fetch event request and response information.
The Network tool displays the network requests that went through the service worker you are debugging. The automatic filter is a way to narrow down your exploration.
See also Application tool, to manage storage.
 Sources

To find more stack information, set a break point in the fetch handler. The details lead to where the resource is requested in the page script.
When the debugger pauses inside a fetch handler, a combined stack information is displayed in the panel to the right. After that, you can move around in the stack frames.
 Future work 
The Microsoft Edge DevTools team plans to further develop the cache detail, and are investigating more ways to improve the service worker debugging experience for Progressive Web Application (PWA) developers.
 
 Network conditions tool
 	6/21/2022 • 2 minutes to read • Edit Online
See Disable the browser cache from the Network Conditions drawer in Network features reference.
 Set network throttling
See Emulate slow network connections from the Network Conditions drawer in Network features reference.
 Set the user agent string
See:
Set the user agent string in Emulate mobile devices (Device Emulation).
Override the user agent string.
Set user agent client hints in Network features reference.
 Set Content-Encodings, such as deflate, gzip, and br
See Enable text compression in Optimize website speed using Lighthouse.
 See also
The following What's New entries provide additional information:
Easier customization of User-Agent Client Hints in What's New in DevTools (Microsoft Edge 93).
User-Agent Client Hints for devices in the Network conditions tab in What's New in DevTools (Microsoft Edge 92).
New options to configure Content-Encodings in the Network conditions tool in What's New in DevTools (Microsoft Edge 91).
Updated User-Agent strings in What's new in DevTools (Microsoft Edge 80).

 
 Override the user agent string
 	6/21/2022 • 2 minutes to read • Edit OnlineTo override the user agent string from Microsoft Edge DevTools:
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P1. Press  (macOS) to open the Command
Menu.

network conditions, select Show Network conditions, and then press Enter2. Type  to open the
Network conditions tool.
3. In the User agent section, clear the Use browser default checkbox.

4. Select a user agent from the dropdown list, or enter a custom user agent.
5. Click User agent client hints to view and change these values as described in Network features reference.
 See also
 Set the user agent string in Emulate mobile devices (Device Emulation)
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 
Compose and send web API requests using the Network Console tool
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the Network Console tool to send web API requests. For example, use the Network Console tool when you're developing and testing web APIs.
To test a URL:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
2. In DevTools, on the main toolbar or the Drawer toolbar at the bottom, select the Network Console tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
The Network Console tool opens:

3. In the main pane of the Network Console tool, click Create a request.
4. In the Untitled Request text box, enter a URL to test.
5. In the GET dropdown list, select a REST method: GET, HEAD, POST, PUT, or PATCH.
6. Optionally, in the Query section, click the Key and Value text boxes and enter key/value pairs:

The Computed URL is updated as you enter key/value pairs.
7. Click the Send button.
 Starting from the Network tool
To use the Network Console starting from the Network tool:
1. Go to a webpage to test.
Ctrl+Shift+I2. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
3. In DevTools, on the main toolbar, select the Network tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
4. Refresh the webpage.
The Network tool displays the resources that are used to construct the webpage.
5. Right-click the network request that you want to change and resend, and then select Edit and Resend:

  The resource opens in the Network Console tool in the Drawer at the bottom of DevTools. 6. In the Network Console, edit the network request information, and then click the Send button:

 Save and export Collections, Environments, and environment variables
You can:
Save and export Collections.
Save and export Environments.
Edit and export sets of environment variables.
Entering a name for the new environment:

Selecting the format for the new environment:

The Network Console tool is compatible with the Postman v2.1 and OpenAPI v2 schemas.
See also:
 Save and export using the Network Console in What's New in DevTools (Microsoft Edge 87)
 
 Network request blocking tool
 	6/21/2022 • 3 minutes to read • Edit OnlineUse the Network request blocking tool to check how a webpage looks and behaves when some resources are unavailable, such as image files, JavaScript files, fonts, or CSS stylesheets. Use this tool to test blocking network requests to a specified URL pattern and see how a webpage behaves.
When a webpage depends on external resources that are hosted on other servers than the HTML webpage, sometimes those servers might be unresponsive or unavailable to some users. When this happens, some resources that your webpage depends on might not be retrieved by the web browser. It's important to check how your webpage behaves when external resources fail to load. Test whether the webpage handles missing resources gracefully, or appears broken to your users.
After you create blocked network requests and test the webpage, you can then edit or delete the blocked network requests.
 Block a network request
To block a network request:
1. Go to the webpage for which you want to block network requests.
Ctrl+Shift+I2. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS).
3. In DevTools, on the main toolbar, click the Network request blocking tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
4. Click the Add pattern () button. The Enable network request blocking checkbox is automatically selected.
*5. In the Text pattern to block network requests text box, type the URL of a network request that you want to block. You can either type the full URL, just the domain name to block all requests from this domain, or replace parts of it with  for wildcard pattern matching.
contoso.comFor example,  matches URLs like:

https://contoso.com
https://subdomain.contoso.com
https://subdomain.contoso.com/path/to/resource*.pngAnd  matches URLs like:

https://www.contoso.com/resource.png
http://third-party.com/6469272/163348534-b90ea1a3-c33cbeb1aed8.png6. Click the Add button:

 Delete a blocked network request

To delete all network blocking requests at once:
 In the toolbar, click the Remove all patterns () button.
 Modify a blocked network request
To change an existing blocked network request:
In the Network request blocking table, hover over the blocked network request, and then click Edit (
):

 Toggle network request blocking
To toggle network request blocking without having to delete and re-create all of the blocked network requests:
In the toolbar, select or clear the Enable network request blocking checkbox:
 Block a network request by using the Network tool
You can block network requests that are made by your webpage either by using the Network request blocking tool or by using the Network tool.
To block network requests by using the Network tool:
1. Go to the webpage for which you want to block network requests.
Ctrl+Shift+I2. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
3. In DevTools, on the main toolbar, click the Network tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
4. In the table of network requests in the bottom pane, find the network request that you want to block.
5. Right-click the network request, and then click Block request URL to block this specific resource, or Block request domain to block all resources from the same domain:

 Try the network request blocking tool
To try the Network request blocking tool:
1. In a separate window or tab, go to the Accessibility-testing demo webpage.
Ctrl+Shift+I2. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
3. In DevTools, on the main toolbar, select the Network request blocking tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
The page content is displayed:

4. In the the Network request blocking panel, click the Add pattern () icon or the Add pattern button, if it's displayed.
5. In the Text pattern to block matching requests text box, paste the following URL path, and then click the Add button:
https://microsoftedge.github.io/Demos/
6. Refresh the page. Now most elements of the page aren't displayed, and a number of network requests are indicated as blocked:

7. Click the Remove all patterns () icon, and then click Refresh. The page content re-appears.

 
 Get started analyzing runtime performance
 	6/21/2022 • 8 minutes to read • Edit OnlineRuntime performance is how your page performs when it's running, as opposed to loading. The following tutorial teaches you how to use the DevTools Performance tool to analyze runtime performance.
In terms of the RAIL model, the skills you learn in this tutorial are useful for analyzing the Response, Animation, and Idle phases of your page.
See also Optimize website speed using Lighthouse.
 Get started
In the following tutorial, you open DevTools on a "Sluggish Animation" demo page and use the Performance tool to find a performance bottleneck on the page.
1. Open Microsoft Edge in InPrivate Mode. InPrivate Mode ensures that Microsoft Edge runs in a clean state. For example, if you have a lot of extensions installed, the extensions may create noise in your performance measurements.
2. Load the following "Sluggish Animation" demo page in your InPrivate window. You'll profile this page, which shows a variable number of icons moving up and down.
https://microsoftedge.github.io/Demos/devtools-performance-get-started/
Ctrl+Shift+I (Windows, Linux) or Command+Option+I3. Press  (macOS) to open DevTools.

For the rest of the screenshots below, DevTools is undocked to a separate window, to better focus on the contents.
 Simulate a mobile CPU 
Mobile devices have much less CPU power than desktops and laptops. Whenever you profile a page, use CPU Throttling to simulate how your page performs on mobile devices.
1. In DevTools, open the Performance tool.
2. Select the checkbox next to Screenshots.
3. Click Capture Settings (). DevTools reveals settings related to how it captures performance metrics.
4. For CPU, select 4x slowdown. DevTools throttles your CPU so that it is 4 times slower than usual.

When testing other pages; if you want to ensure that each page works well on low-end mobile devices, set CPU Throttling to 6x slowdown. The demo doesn't work well with 6x slowdown, so it just uses 4x slowdown for instructional purposes.
 Set up the demo 
It's hard to create a runtime performance demo that works consistently for all readers of the website. The following section lets you customize the demo to make sure that your experience is relatively consistent with the screenshots and descriptions, regardless of your particular setup.
1. Click the Add 10 button until the blue icons move noticeably slower than before. On a high-end machine, you can click it about 20 times.
2. Click Optimize. The blue icons should move faster and more smoothly.
3. To better display a difference between the optimized and un-optimized versions, click the Subtract 10 button a few times and try again. If you add too many blue icons, you might max out the CPU, and then you might not observe a major difference in the results for the two versions.
4. Click Un-Optimize. The blue icons move slower and with more sluggishness again.
 Record runtime performance 
When you ran the optimized version of the page, the blue icons move faster. Why is that? Both versions are supposed to move the icons the same amount of space in the same amount of time. Take a recording in the Performance tool to learn how to detect the performance bottleneck in the un-optimized version.
1. In DevTools, click Record (). DevTools captures performance metrics as the page runs.

2. Wait a few seconds.
3. Click Stop. DevTools stops recording, processes the data, then displays the results in the Performance tool.

That's an overwhelming amount of data, but it'll all make more sense shortly.
 Analyze the results
Once you have a recording of the page's performance, you can assess the page's performance and find the cause of any performance issues.
 Analyze frames per second 
The main metric for measuring the performance of any animation is frames per second (FPS). Users are happy when animations run at 60 FPS.
1. Look at the FPS chart, shown below. Whenever a red bar is displayed above FPS, it means that the framerate dropped so low that it's probably harming the user experience. In general, the higher the green bar, the higher the FPS.

2. Below the FPS chart, the CPU chart is displayed. The colors in the CPU chart correspond to the colors in the Summary panel, at the bottom of the Performance tool. The fact that the CPU chart is full of color means that the CPU was maxed out during the recording. Whenever the CPU is maxed out for long periods, that's an indicator that you should find ways to do less work.

3. Hover over the FPS, CPU, or NET charts. DevTools shows a screenshot of the page at that point in time. Move your mouse left and right to replay the recording. The action is called scrubbing, and it's useful for manually analyzing the progression of animations.

4. In the Frames section, hover on one of the green squares. DevTools shows you the FPS for that particular frame. Each frame is probably well below the target of 60 FPS.

The display indicates that the webpage isn't performing well. In real scenarios, it may not be so clear whether the page is performing well, so having all of the tools to make measurements comes in handy.
 Bonus: Open the FPS meter 
Another handy tool is the FPS meter, which provides real-time estimates for FPS as the page runs.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P1. Press  (macOS) to open the Command
Menu.
Rendering2. Start typing  in the Command Menu and click Show Rendering.
3. In the Rendering tool, turn on FPS Meter. A new overlay appears in the top-right of your viewport.

Escape4. Turn off the FPS Meter and press  to close the Rendering tool. You aren't using FPS Meter in this tutorial.
 Find the bottleneck 
After you measured and verified that the animation isn't performing well, the next step is to answer the question "why?".
1. When no events are selected, the Summary panel shows you a breakdown of activity. The page spent most of the time rendering. Since performance is the art of doing less work, your goal is to reduce the amount of time spent doing rendering work.

2. Expand the Main section. DevTools shows you a flame chart of activity on the main thread, over time. The x-axis represents the recording, over time. Each bar represents an event. A wider bar means that event took longer. The y-axis represents the call stack. When events are stacked on top of each other, it means the upper events caused the lower events.

3. There's a lot of data in the recording. To Zoom into a single event, click, hold, and drag your cursor over the Overview, which is the section that includes the FPS, CPU, and NET charts. The Main section and Summary panel only display information for the selected portion of the recording.

WAnother way to zoom is to put focus on the Main section, click the background or an event, and press ,
A, S, or D.
4. Focus on the red triangle in the top-right of the Animation Frame Fired event. Whenever a red triangle is displayed, it's a warning that there may be an issue related to the event.
The Animation Frame Fired event occurs whenever a requestAnimationFrame() callback is run.
5. Click the Animation Frame Fired event. The Summary panel now shows you information about that event. Note the Reveal link. After you click it, DevTools highlights the event that initiated the Animation Frame Fired event. Also, focus on the app.js:95 link. After you click it, the relevant line in the source
code is displayed.

After clicking an event, use the arrow keys to select the events next to it.
6. Under the app.update event, there's a bunch of purple events. If each purple event was wider, it looks as though each one may have a red triangle on it.
7. Click one of the purple Layout events. DevTools provides more information about the event in the Summary panel. Indeed, there is a warning about forced reflows (another word for layout).
8. In the Summary panel, click the app.js:71 link under Layout Forced. DevTools takes you to the line of code that forced the layout.

The problem with the code is that, in each animation frame, it changes the style for each icon, and then queries the position of each icon on the page. Because the styles changed, the browser doesn't know if each icon position changed, so it has to re-layout the icon in order to compute the new position.
That was a lot to learn. You now have a solid foundation in the basic workflow for analyzing runtime performance. Good job.
 Bonus: Analyze the optimized version 
Using the workflows and tools that you just learned, click Optimize on the demo to turn on the optimized code, take another performance recording, and then analyze the results. From the improved framerate to the reduction in events in the flame chart in the Main section, the optimized version of the app does much less work, resulting in better performance.
topEven the optimized version isn't great, because it manipulates the  property of every icon. A better approach is to stick to properties that only affect compositing.
 Next steps
AltTo get more comfortable with the Performance tool, practice makes perfect. Try profiling your pages and analyzing the results. If you have any questions about your results, use the Send Feedback icon, press +
Shift+I (Windows, Linux) or Option+Shift+I (macOS), or tweet the DevTools team. Include screenshots
or links to reproducible pages, if possible.

Last, there are many ways to improve runtime performance. This article focused on one particular animation bottleneck to give you a focused tour of the Performance tool, but it's only one of many bottlenecks you may encounter.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Analyze runtime performance
 	6/21/2022 • 5 minutes to read • Edit OnlineUsers expect interactive and smooth pages. Each stage in the pixel pipeline represents an opportunity to introduce jank (interruptions of rendering). Learn about tools and strategies to identify and fix common problems that slow down runtime performance.
 Summary 
 Don't write JavaScript that forces the browser to recalculate layout. Separate read and write functions, and perform reads first.
Don't over-complicate your CSS. Use less CSS and keep your CSS selectors simple.
Avoid layout as much as possible. Choose CSS that doesn't trigger layout at all.
Painting may take up more time than any other rendering activity. Watch out for paint bottlenecks.
 JavaScript
JavaScript calculations, especially ones that trigger extensive visual changes, may stall application performance. Don't let badly timed or long-running JavaScript interfere with user interactions.
 JavaScript: Tools 
Evaluate ScriptTake a recording in the Performance tool and look for suspiciously long  events.
If you notice quite a bit of jank (interruptions of rendering) in your JavaScript, you may need to take your analysis to the next level and collect a JavaScript CPU profile. CPU profiles show where runtime is spent within the functions of your page. Learn how to create CPU profiles in Speed up JavaScript runtime.
 JavaScript: Problems 
The following table describes some common JavaScript problems and potential solutions.
PROBLEMEXAMPLESOLUTIONExpensive input handlers affecting response or animation.Touch, parallax scrolling.Let the browser handle touch and scrolls, or bind the listener as late as possible. See Expensive Input Handlers in Paul Lewis' runtime performance checklist.Badly timed JavaScript affecting response, animation, load.User scrolls right after page load, setTimeout / setInterval.Optimize JavaScript runtime: use 
requestAnimationFrame, spread DOM manipulation over frames, use Web Workers.Long-running JavaScript affecting response.The DOMContentLoaded event stalls as it is swamped with JS work.Move pure computational work to Web Workers. If you need DOM
requestAnimationFrameaccess, use .Garbage-y scripts affecting response or animation.Garbage collection may happen anywhere.Write less garbage-y scripts. See
Garbage Collection in Animation in Paul Lewis' runtime performance checklist. Style
Style changes are costly, especially if those changes affect more than one element in the DOM. Any time you apply styles to an element, the browser figures out the impact on all related elements, recalculates the layout, and repaints.
 Style: Tools 
Recalculate StyleTake a recording in the Performance tool. Check the recording for large  events (displayed in purple).
Recalculate StyleSelect a  event to view more information about it in the Details pane. If the style changes are taking a long time, that is a performance hit. If the style calculations are affecting a large number of elements, that is another area with room for improvement.

Recalculate StyleTo reduce the impact of  events:
Use the CSS Triggers to learn which CSS properties trigger layout, paint, and composite. These properties have the worst impact on rendering performance. Switch to properties that have less impact.
 Style: Problems 
The following table describes some common style problems and potential solutions.
PROBLEMEXAMPLESOLUTIONExpensive style calculations affecting response or animation.Any CSS property that changes the geometry of an element, like the width, height, or position; the browser checks all other elements and recalculates the layout.Avoid CSS that triggers layoutsComplex selectors affecting response or animation.Nested selectors force the browser to know everything about all the other elements, including parents and children.Reference an element in your CSS with just a class. Layout
<body>Layout (or reflow in Firefox) is the process by which the browser calculates the positions and sizes of all the elements on a page. The layout model of the web means that one element may affect others; for example, the width of the  element typically affects the widths of any child elements, and so on, all the way up and down the tree. The process may be quite involved for the browser.
As a general rule of thumb, if you ask for a geometric value back from the DOM before a frame is complete, you are going to find yourself with "forced synchronous layouts", which may be a big performance bottleneck if repeated frequently or performed for a large DOM tree.
 Layout: Tools 
LayoutThe Performance pane identifies when a page causes forced synchronous layouts. These  events are marked with red bars.

"Layout thrashing" is a repetition of forced synchronous layout conditions. This occurs when JavaScript writes and reads from the DOM repeatedly, which forces the browser to recalculate the layout over and over. To identify layout thrashing, look for a pattern of multiple forced synchronous layout warnings. Review the previous figure.
 Layout: Problems 
The following table describes some common layout problems and potential solutions.
PROBLEMEXAMPLESOLUTIONForced synchronous layout affecting response or animation.Forcing the browser to perform layout earlier in the pixel pipeline, resulting in repeating steps in the rendering process.Batch your style reads first, then do any writes.Layout thrashing affecting response or animation.A loop that puts the browser into a read-write-read-write cycle, forcing the browser to recalculate layout over and over again.Automatically batch read-write operations using FastDom library. Paint and composite
Paint is the process of filling in pixels. It is often the most costly part of the rendering process. If you noticed that your page isn't working as designed in any way, it is likely that you have paint problems.
Compositing is where the painted parts of the page are put together for displaying on screen. For the most part, if you stick to compositor-only properties and avoid paint altogether, you should notice a major improvement in performance, but you need to watch out for excessive layer counts.
 Paint and composite: Tools 
Want to know how long painting takes or how often painting occurs? Check the Enable advanced paint instrumentation setting in the Performance panel and then take a recording. If most of your rendering time is spent painting, you have paint problems.
 Paint and composite: Problems 
The following table describes some common paint and composite problems and potential solutions.
PROBLEMEXAMPLESOLUTIONPaint storms affecting response or animation.Big paint areas or expensive paints affecting response or animation.Avoid paint, promote elements that are moving to their own layer, use transforms and opacity.Layer explosions affecting animations.translateZ(0)Overpromotion of too many elements with  greatly affects animation performance.Promote to layers sparingly, and only when you know it offers tangible improvements.NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse) and Meggin Kearney (Technical Writer).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Optimize website speed using Lighthouse
 	6/21/2022 • 16 minutes to read • Edit OnlineThis tutorial teaches you how to use DevTools to find ways to make your websites load faster.
This tutorial uses the Lighthouse tool. The Lighthouse tool provides links to content hosted on third-party websites. Microsoft is not responsible for and has no control over the content of these sites and any data that may be collected.
The Lighthouse tool was previously called the Audits tool. "Audits panel" means the same thing as "Lighthouse tool".
 Prerequisites
 You should have basic web development experience, similar to what is taught in this Introduction to Web Development class.
 You don't need to know anything about load performance. You learn about load performance in this tutorial.
 Introduction
This is Tony. Tony is very famous in cat society. He has built a website so that his fans can learn about his favorite foods. His fans love the site, but Tony keeps hearing complaints that the site loads slowly. Tony has asked you to help him speed the site up.

 Step 1: Audit the site
Whenever you set out to improve the load performance of a site, always start with an audit.
The audit has two important functions:
It creates a baseline for you to measure subsequent changes against.
It gives you actionable tips on what changes have the most impact.
 Setup 
First, you must set up the site so that you can make changes to it later.
1. Open the source code for the site. This tab is referred to as the editor tab.

2. Click tony. A menu appears.

3. Click Remix Project. The name of the project changes from tony to a randomly generated name. You now have your own editable copy of the code. Later on, you can make changes to this code.
4. Click Show and then select In a New Window. The demo opens in a new tab. This tab is be referred to as the demo tab. It may take a while for the site to load.

Ctrl+Shift+J (Windows, Linux) or Command+Option+J5. Press  (macOS). DevTools opens alongside the rendered demo webpage.

Ctrl+Shift+PFor the rest of the screenshots in this tutorial, DevTools is shown in a separate window. Press 
Command+Shift+P (macOS) to open the Command Menu, type Undock(Windows, Linux) or , and then select
Undock into separate window.

 Establish a baseline 
The baseline is a record of how the site performed before you made any performance improvements.
1. Select the Lighthouse tool. It might be hidden behind the More tools () button.

2. Match your audit configuration settings to those in the previous figure. Here is an explanation of the different options:
 Device. Set to Mobile changes the user agent string and simulates a mobile viewport. Set to Desktop pretty much just turns off the Mobile changes.
 Audits. Turn off a category to prevent the Audits panel from running those audits, and excludes those audits from your report. Leave the other categories Turned on, if you want to display the types of recommendations that are provided. Turn off categories to slightly speed up the auditing process.
 Throttling. Set to Simulated Slow 4G, 4x CPU Slowdown simulates the typical conditions of browsing on a mobile device. It is named "simulated" because the Audits panel doesn't actually throttle during the auditing process. Instead, it just extrapolates how long the page takes to load under mobile conditions. The Applied... setting, on the other hand, actually throttles your CPU and network, with the tradeoff of a longer auditing process.
 Clear Storage. Turn on the checkbox to clear all storage associated with the page before every audit. Leave this setting on if you want to audit how first-time visitors experience your site. Turn off this setting when you want the repeat-visit experience.
3. Click Run Audits. After 10 to 30 seconds, the Audits panel displays a report of the performance of the site.

 Handling report errors 
If you ever get an error in your Audits panel report, try running the demo tab from an InPrivate window with no other tabs open. This ensures that you are running Microsoft Edge from a clean state. Microsoft Edge Extensions in particular often interfere with the auditing process.
 Understand your report 
The number at the top of your report is the overall performance score for the site. Later, as you make changes to the code, the number displayed should rise. A higher score means better performance.

The Metrics section provides quantitative measurements of the performance of the site. Each metric provides insight into a different aspect of the performance. For example, First Contentful Paint tells you when content is first painted to the screen, which is an important milestone in the user's perception of the page load, whereas Time To Interactive marks the point at which the page appears ready enough to handle user interactions.

Click the highlighted toggle button in the following figure to display a description for each metric. Then click Learn More to read documentation about it.

Below Metrics is a collection of screenshots that show you how the page looked as it loaded.

The Opportunities section provides specific tips on how to improve the load performance of this specific page.

Click an opportunity to learn more about it.

Click Learn More to display documentation about why an opportunity is important, and specific recommendations on how to fix it.

The Diagnostics section provides more information about factors that contribute to the load time of the page.

The Passed Audits section shows you what the site is doing correctly. Click to expand the section.

 Step 2: Experiment
The Opportunities section of your audit report gives you tips on how to improve the performance of the page. In this section, you implement the recommended changes to the codebase, auditing the site after each change to measure how it affects site speed.
 Enable text compression 
Your report says that avoiding enormous network payloads is one of the top opportunities for improving the performance of the page. Enabling text compression is an opportunity to improve the performance of the page.
Text compression is when you reduce, or compress, the size of a text file before sending it over the network. This compression is similar to how you can archive a directory before sending it, to reduce the size.
Before you enable compression, here are a couple of ways to manually check whether text resources are compressed.
1. Click the Network tool.

2. Click the Network setting icon.
3. Click the Use Large Request Rows checkbox. The height of the rows in the table of network requests increases.

4. If the Size column in the table of network requests isn't displayed, click the table header > Size.
bundle.js1.2 MB and 1.2 MBEach Size cell shows two values. The top value is the size of the downloaded resource. The bottom value is the size of the uncompressed resource. If the two values are the same, then the resource isn't being compressed when it is sent over the network. For example, in the previous figure, the top and bottom values for are .
Check for compression by inspecting the HTTP headers of a resource:
bundle.js1. Click .
2. Click the Headers panel.

content-encoding header. A content-encodingbundle.jsgzip, deflate, or br3. Search the Response Headers section for a  heading isn't displayed, meaning that  wasn't compressed. When a resource is compressed, this header is usually set to . For an explanation of the values, see Directives.
Enough with the explanations; it's time to make some changes. Enable text compression by adding a couple of lines of code, as follows.
1. In the editor tab, select server.js.

app.use(compression())2. Add the following code to server.js. Make sure to put  before 
app.use(express.static('build')).
const express = require('express'); const app = express(); const fs = require('fs');
const compression = require('compression'); app.use(compression()); app.use(express.static('build')); const listener = app.listen(process.env.PORT || 1234, function () {    console.log(`Listening on port ${listener.address().port}`);
});NOTE
compression package via something like npm i -S compressionUsually, you have to install the , but this has already been done for you.3. Wait for Glitch to deploy the new build of the site. The fancy animation next to Tools means that the site is getting rebuilt and redeployed. The change is ready when the animation next to Tools goes away. Click Show and then select In a New Window again.
Use the workflows that you learned earlier to manually check that the compression is working:
bundle.js. In the figure after the following, the top value of 256 KB for bundle.js1.2 MB1. Go back to the demo tab and refresh the page. The Size column should now show 2 different values for text resources like  is the size of the file that was sent over the network, and the bottom value of  is the uncompressed file size.

bundle.js now includes a content-encoding: gzip2. The Response Headers section for  header:

Audit the page again to measure what kind of impact text compression has on the load performance of the page:
1. Select the Lighthouse tool (formerly called the Audits tool).
2. Click Perform an audit ().
3. Keep the settings the same as before.
4. Click Run audit.

Your overall performance score should have increased, meaning that the site is getting faster.
 Text compression in the real world 
Most servers have simple fixes like this for enabling compression. Do a search on how to configure whatever server you use to compress text.
 Resize images 
Your report indicates that avoiding enormous network payloads is one of the top opportunities for improving the performance of the page. Resizing images helps reduce the size of the network payload. If your user is viewing your images on a mobile device screen that is 500-pixels-wide, there is really no point in sending a 1500-pixel-wide image. Ideally, you send a 500-pixel-wide image, at most.
1. In your report, select Avoid enormous network payloads to display which images should be resized.
.jpgIt looks like two of the  files are over 2000 KB, which is bigger than necessary.
src/model.js2. Back in the editor tab, open .
const dir = 'big' with const dir = 'small'3. Replace . This directory contains copies of the same images which have been resized.
4. Audit the page again, to see how the change affects load performance.

The change only has a minor effect on the overall performance score. However, one thing that the score doesn't show clearly is how much network data you're saving your users. The total size of the old photos was around 5.3 megabytes, whereas now it's only about 0.18 megabytes.
 Resizing images in the real world 
For a small app, doing a one-off resize like this might be good enough. But for a large app, this isn't scalable.
Here are some strategies for managing images in large apps:
srcsetResize images during your build process.
Create multiple sizes of each image during the build process and then use  in your code. At runtime, the browser takes care of choosing which size is best for the device.
Use an image CDN that lets you dynamically resize an image when you request it.
At the very least, optimize each image. This can often create huge savings.
Optimization is when you run an image through a special program that reduces the size of the image file. For more tips, see Essential Image Optimization.
	 Eliminate render 	-blocking resources
Your latest report says that eliminating render-blocking resources is now the biggest opportunity.
A render-blocking resource is an external JavaScript or CSS file that the browser must download, parse, and run before it displays the page. The goal is to only run the core CSS and JavaScript code that is required to display the page properly.
The first task, then, is to find code that you don't need to run on page load.
lodash.js1. Click Eliminate render-blocking resources to display the resources that are blocking:  and 
jquery.js.

Ctrl+Shift+P (Windows, Linux) or Command+Shift+P2. Press  (macOS) to open the Command
CoverageMenu, start typing , and then select Show Coverage.


bundle.jsjquery.js, and lodash.js3. Click Refresh (). The Coverage tool provides an overview of how much of the code in ,  runs while the page loads. In the figure after the following, about 76% and 30% of the jQuery and Lodash files aren't used, respectively.

jquery.js4. Click the  row. DevTools opens the file in the Sources tool. If a line of code ran, a blue bar appears next to it. A red bar means the line of code was not run, and is definitely not needed on load of the webpage.

5. Scroll through the jQuery code. Some of the lines that run are actually just comments. To strip comments and reduce the size of the file, run the code through a minifier app or script.
In short, when you're working with your own code, the Coverage tool helps you analyze your code, line-by-line, and only ship the code that's needed for page load.
jquery.js and lodash.jsAre the  files even needed to load the page? The Request blocking tool shows what happens when resources aren't available:
1. Select the Network tool.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P2. Press  (macOS) to open the Command
Menu again.
blocking3. Start typing , and then select Show Request Blocking.

/libs/*, and then press Enter4. Click Add Pattern (), type 	 to confirm.

5. Refresh the page. The jQuery and Lodash requests are red, meaning that the requests were blocked. The page still loads and is interactive, so it looks like these resources aren't needed whatsoever!

/libs/*6. Click Remove all patterns () to delete the 	 blocking pattern.
In general, the Request blocking tool is useful for simulating how your page behaves when any given resource isn't available.
Now, remove the references to these files from the code and audit the page again:
template.html1. Back in the editor tab, open .
<script src="/libs/lodash.js"> and <script src="/libs/jquery.js"></script>2. Delete .
3. Wait for the site to re-build and re-deploy.
4. Audit the page again from the Audits tool. Your overall score should have improved again.

 Optimizing the Critical Rendering Path in the real 	-world
The Critical Rendering Path refers to the code that you need to load a page. In general, speed up page load by only shipping critical code during the page load, and then lazy-loading everything else.
 It's unlikely that you can find scripts that you can remove outright, but you might find many scripts that you don't need to request during the page load, which can instead be requested asynchronously.
 If you're using a framework, check whether it has a production mode. This production mode might use a feature such as tree shaking in order to eliminate unnecessary code that's blocking the critical render.
 Do less main thread work 
Your latest report shows some minor potential savings in the Opportunities section, but if you look down in the Diagnostics section, it looks like the biggest bottleneck is too much main thread activity.
The main thread is where the browser does most of the work needed to display a page, such as parsing and running HTML, CSS, and JavaScript.
The goal is to use the Performance panel to analyze what work the main thread is doing while the page loads, and find ways to defer or remove unnecessary work.
1. Select the Performance tool.
2. Click Capture Settings ().
3. Set Network to Slow 3G and CPU to 6x slowdown. Mobile devices typically have more hardware constraints than laptops or desktops, so these settings let you experience the page load as if you were using a less powerful device.
4 Click Refresh (). DevTools refreshes the page and then produces a visualization of all the work performed in order to load the page. This visualization is referred to as the trace.
The trace shows activity chronologically, from left to right. The FPS, CPU, and NET charts at the top give you an overview of frames per second, CPU activity, and network activity. The block of yellow highlighted in the figure after the next, the CPU was completely busy with scripting activity. This is a clue that you may be able to speed up page load by doing less JavaScript work.

Investigate the trace to find ways to do less JavaScript work:
1 Click the Timings section to expand it. Based on the fact that there may be a bunch of Timing measures from React, it seems like Tony's app is using the development mode of React. Switching to the production mode of React may yield some easy performance wins.
2. Click Timings again to collapse that section.
Evaluate Script event caused the (anonymous) function to run, which caused (anonymous)3. Browse the Main section. This section shows a chronological log of main thread activity, from left to right. The y-axis (top to bottom) shows why events occurred. For example, in the figyre after the following, the  to run, which
__webpack__require__caused  to run, and so on.

AppmineBitcoin1 Scroll down to the bottom of the Main section. When you use a framework, most of the upper activity is caused by the framework, which is usually out of your control. The activity caused by your app is usually at the bottom. In this app, it seems like a function named  is causing a lot of requests to a  function. It sounds like Tony might be using the devices of his fans to mine cryptocurrency...


NOTE
Although the requests that your framework makes are usually out of your control, sometimes you might structure your app in a way that causes the framework to run inefficiently. Restructuring your app to use the framework efficiently is a way to do less main thread work. However, this requires a deep understanding of how your framework works, and what kind of changes you make in your own code in order to use the framework more efficiently.
2. Expand the Bottom-Up section. This tab breaks down what activities took up the most time. If nothing is displayed in the Bottom-Up section, click the label for Main section. The Bottom-Up section only
mineBitcoinshows information for whatever activity, or group of activity, you have currently selected. For example, if you chose one of the  activities, the Bottom-Up section is only going to show information for that one activity.

mineBitcoinThe Self Time column shows you how much time was spent directly in each activity. For example, in the following figure, about 63% of main thread time was spent on the  function.
It's time to see whether using production mode and reducing JavaScript activity may speed up the page load. Start with production mode:
webpack.config.js1. In the editor tab, open .
"mode":"development" to "mode":"production"2. Change .
3. Wait for the new build to deploy.
4. Audit the page again.

mineBitcoinReduce JavaScript activity by removing the request to :
src/App.jsx1. In the editor tab, open .
this.mineBitcoin(1500) in the constructor2. Comment out the request to .
3. Wait for the new build to deploy.
4. Audit the page again.

Looks like that last change caused a massive jump in performance!
This section provided a rather brief introduction to the Performance tool. To learn more about how to analyze page performance, see Performance features reference).
 Doing less main thread work in the real world 
The Performance tool is the most common way to understand what activity your site does as it loads, and to find ways to remove unnecessary activity.
console.log()If you prefer an approach that feels more like , the User Timing API enables you to arbitrarily mark up certain phases of your app lifecycle, in order to track how long each of those phases takes.
 Summary
Whenever you set out to optimize the load performance of a site, always start with an audit. The audit establishes a baseline, and gives you tips on how to improve.
Make one change at a time, and audit the webpage after each change in order to display how that isolated change affects performance.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Performance features reference
 	6/21/2022 • 15 minutes to read • Edit OnlineThis page is a comprehensive reference of DevTools features that are related to analyzing performance.
For a step-by-step tutorial on how to analyze the performance of a page using the Performance tool, see Get started analyzing runtime performance.
 Record performance
 Record runtime performance 
Record runtime performance when you want to analyze the performance of a page as it is running, as opposed to loading.
1. Go to the page that you want to analyze.
2. Click the Performance tool in DevTools.
3. Click the Record () button.

4. Interact with the page. DevTools records all page activity that occurs as a result of your interactions.
5. Click Record again or click Stop to stop recording.
 Record load performance 
Record load performance when you want to analyze the performance of a page as it is loading, as opposed to running.
1. Go to the page that you want to analyze.
2. In DevTools, open the Performance tool.
3. Click the Refresh page () button. DevTools records performance metrics while the page refreshes and then automatically stops the recording a couple seconds after the load finishes.

DevTools automatically zooms in on the portion of the recording where most of the activity occurred.

 Capture screenshots while recording 
To capture a screenshot of every frame while recording, select the Screenshots checkbox.

To learn how to interact with screenshots, see View a screenshot.
 Force garbage collection while recording 
While you are recording a page, click Collect garbage () to force garbage collection.

 Show recording settings 
Click Capture settings () to expose more settings related to how DevTools captures performance recordings.

 Disable JavaScript samples 
By default, the Main section of a recording displays detailed call stacks of JavaScript functions that were called during the recording. To disable these call stacks:
1. Open the Capture settings menu. See Show recording settings.
2. Turn on the Disable JavaScript Samples checkbox.
3. Take a recording of the page.
The following two figures show the difference between disabling and enabling JavaScript samples. The Main section of the recording is much shorter when sampling is disabled, because it omits all of the JavaScript call stacks.
An example of a recording when JS samples are disabled:

An example of a recording when JS samples are turned on:

 Throttle the network while recording 
To throttle the network while recording:
1. Open the Capture settings menu. See Show recording settings.
2. Set Network to the desired level of throttling.
 Throttle the CPU while recording 
To throttle the CPU while recording:
1. Open the Capture settings menu. See Show recording settings.
2. Set CPU to the desired level of throttling.
Throttling is relative to the capabilities of your computer. For example, the 2x slowdown option makes your CPU operate 2 times slower than normal. DevTools don't truly simulate the CPUs of mobile devices, because the architecture of mobile devices is very different from that of desktops and laptops.
 Turn on advanced paint instrumentation To view detailed paint instrumentation:
1. Open the Capture settings menu. See Show recording settings.
2. Check the Enable advanced paint instrumentation (slow) checkbox.
To learn how to interact with the paint information, see View layers and View paint profiler.
 Save a recording
To save a recording, right-click the recording and then select Save Profile.

 Load a recording
To load a recording, right-click the recording and then select Load Profile.

 Clear the previous recording
After making a recording, click Clear recording () to clear that recording from the Performance tool.

 Analyze a performance recording
After you record runtime performance or record load performance, the Performance panel provides a lot of data for analyzing the performance of what just happened.
 Select a portion of a recording 
Drag your mouse left or right across the Overview to select a portion of a recording. The Overview is the section that contains the FPS, CPU, and NET charts.

To select a portion using the keyboard:
1. Select the background of the Main section, or any of the sections next to it, such as Interactions, Network, or GPU. This keyboard workflow only works when one of these sections is in focus.
W, A, S, D2. Use the  keys to zoom in, move left, zoom out, and move right, respectively.
To select a portion using a trackpad:
1. Hover your mouse over the Overview section or the Details section. The Overview section is the area containing the FPS, CPU, and NET charts. The Details section is the area containing the Main section, the Interactions section, and so on.
2. Using two fingers, swipe up to zoom out, swipe left to move left, swipe down to zoom in, and swipe right to move right.
To scroll a long flame chart in the Main section or any of the neighbors, click and hold while dragging up and down. Drag left and right to move what portion of the recording is selected.
 Search activities 
Ctrl+F (Windows, Linux) or Command+FPress  (macOS) to open the search box at the bottom of the
Performance panel.

To navigate activities that match your query:
1. Click the Previous () and Next () buttons.
Enter. To select the previous activity, press Shift+Enter2. To select the next activity, press .
To modify query settings:
To make the query case-sensitive, click the Case sensitive () button.
To use a regular expression in your query, click the Regex () button.
To hide the search box, click Cancel.
 View main thread activity 
Use the Main section to view activity that occurred on the main thread of the page.

Select an event to view more information about it in the Summary panel. DevTools outlines the selected event.

DevTools represents main thread activity with a flame chart. The x-axis represents the recording over time. The y-axis represents the call stack. The events on top cause the events below it.

click event caused a Function Call in activitytabs.jsIn the previous figure, a  on line 53. Below 
Function Call, review that an anonymous function was run. The anonymous function requested a, which
wait, which requested Minor GCrequested .
DevTools assigns scripts random colors. In the previous figure, function requests from one script are colored light green. Requests from another script are colored beige. The darker yellow represents scripting activity, and the purple event represents rendering activity. These darker yellow and purple events are consistent across all recordings.
If you want to hide the detailed flame chart of JavaScript requests, see Disable JavaScript samples, above. When
Event: click and Function CallJS samples are disabled, only high-level events such as  from the previous figure are displayed.
 View activities in a table 
After recording a page, you don't need to rely solely on the Main section to analyze activities. DevTools also provides three tabular views for analyzing activities. Each view gives you a different perspective on the activities:
To view the root activities that cause the most work, use the Call Tree tab.
To view the activities where the most time was directly spent, use the Bottom-Up tab.
To view the activities in the order in which they occurred during the recording, use the Event Log tab.
 Root activities 
Open the Activity Tabs Demo webpage in a new window or tab.
Here's an explanation of the root activities concept that is mentioned in the Call Tree panel, Bottom-Up panel, and Event Log panel.
Event activity as the root activity. That EventRoot activities are those which cause the browser to do some work. For example, when you click a webpage, the browser runs an  may cause a handler to run, and so on.
In the flame chart of the Main section, root activities are at the top of the chart. In the Call Tree and Event Log panels, root activities are the top-level items.
For an example of root activities, see the next section, "The Call Tree tab".
 The Call Tree tab 
Open the Activity Tabs Demo webpage in a new window or tab.
Use the Call Tree tab to view which root activities cause the most work.
The Call Tree tab only displays activities during the selected portion of the recording. See Select a portion of a recording to learn how to select portions.

Evaluate Script and Parse HTMLParse HTMLEvaluate Script which caused Compile Script and (anonymous)In the previous figure, the top-level of items in the Activity column, such as are root activities. The nesting represents the call stack. For example, in the previous figure,  which caused .
Self Time represents the time directly spent in that activity. Total Time represents the time spent in that activity or any of the children.
Click Self Time, Total Time, or Activity to sort the table by that column.
Use the Filter text box to filter events by activity name.
By default the Grouping menu is set to No Grouping. Use the Grouping menu to sort the activity table based on various criteria.
Click Show Heaviest Stack () to reveal another table to the right of the Activity table. Click on an activity to populate the Heaviest Stack table. The Heaviest Stack table displays which children of the selected activity took the longest time to run.
	 The Bottom 	-Up panel
Open the Activity Tabs Demo webpage in a new window or tab.
Use the Bottom-Up panel to view which activities directly took up the most time in aggregate.
The Bottom-Up panel only displays activities during the selected portion of the recording. See Select a portion of a recording to learn how to select portions.

In the Main section flame chart of the previous figure, you can see that almost practically all of the time was
Parse HTML. The top activity in the Bottom-Up panel of the previous figure is Parse HTMLspent running . In the
LayoutBottom-Up tab, the next most expensive activity is .
The Self Time column represents the aggregated time spent directly in that activity, across all of the occurrences.
The Total Time column represents aggregated time spent in that activity or any of the children.
 The Event Log panel 
Use the Event Log panel to view activities in the order in which they occurred during the recording.
The Event Log panel only displays activities during the selected portion of the recording. See Select a portion of a recording to learn how to select portions.

The Start Time column represents the point at which that activity started, relative to the start of the recording.
175.7 msFor example, the start time of  for the selected item in the previous figure means that activity started 175.7 ms after the recording started.
The Self Time column represents the time spent directly in that activity.
The Total Time columns represents time spent directly in that activity or in any of the children.
Click Start Time, Self Time, or Total Time to sort the table by that column.
Use the Filter text box to filter activities by name.
Use the Duration menu to filter out any activities that took less than 1 ms or 15 ms. By default the Duration menu is set to All, meaning all activities are shown.
Disable the Loading, Scripting, Rendering, or Painting checkboxes to filter out all activities from those categories.
 View GPU activity 
View GPU activity in the GPU section.

 View raster activity 
View raster activity in the Raster section.

 View interactions 
Use the Interactions section to find and analyze user interactions that happened during the recording.

A red line at the bottom of an interaction represents time spent waiting for the main thread.
Click an interaction to view more information about it in the Summary panel.
	 Analyze frames per second  	(FPS)
DevTools provides numerous ways to analyze frames per second:
Use the FPS chart to get an overview of FPS over the duration of the recording.
Use the Frames section to view how long a particular frame took.
Use the FPS meter for a realtime estimate of FPS as the page runs. See View frames per second in realtime with the FPS meter.
 The FPS chart 
The FPS chart provides an overview of the frame rate across the duration of a recording. In general, the higher the green bar, the better the frame rate.
A red bar above the FPS chart is a warning that the frame rate dropped so low that it probably harmed the user's experience.

 The Frames section 
The Frames section tells you exactly how long a particular frame took.
Hover over a frame to view a tooltip with more information about it.

Select a frame to view more information about the frame in the Summary panel. DevTools outlines the selected frame in blue.

 View network requests 
Expand the Network section to view a waterfall of network requests that occurred during the recording.

Requests are color-coded as follows:
HTML: Blue
CSS: Purple
JS: Yellow
Images: Green
Click on a request to view more information about it in the Summary tab. For example, in the previous figure, the Summary tab is displaying more information about the blue request that is selected in the Network section.
A darker-blue square in the top-left of a request means it's a higher-priority request. A lighter-blue square means lower-priority. For example, in the previous figure, the blue, selected request is higher-priority, and the green one below it is lower-priority.
www.bing.comIn the first figure below, the request for  is represented by a line on the left, a bar in the middle with a dark portion and a light portion, and a line on the right. The second figure below shows the corresponding representation of the same request in the Timing tab of the Network tool.
Here's how these two representations map to each other:
Connection StartRequest Sent The left line is everything up to the 	 group of events, inclusive. In other words, it's everything before , exclusive.
Request Sent and Waiting (TTFB)Content DownloadThe light portion of the bar is .
The dark portion of the bar is .
The right line is essentially time spent waiting for the main thread. This isn't represented in the Timing tab.
www.bing.comThe line-bar representation of the  request:

The Network tool:

 View memory metrics 
Turn on the Memory checkbox to view memory metrics from the last recording.

DevTools displays a new Memory chart, above the Summary panel. There is also a new chart below the NET chart, called HEAP. The HEAP chart provides the same information as the JS Heap line in the Memory chart.

The colored lines on the chart map to the colored checkboxes above the chart. Clear a checkbox to hide that category from the chart.
The chart only displays the region of the recording that is currently selected. For example, in the previous figure, the Memory chart is only showing memory usage from around the 400 ms mark to the 1750 ms mark.
 View the duration of a portion of a recording 
ShiftWhen analyzing a section like Network or Main, sometimes you need a more precise estimate of how long certain events took. Hold , click and hold, and drag left or right to select a portion of the recording. At the bottom of your selection, DevTools shows how long that portion took.

 View a screenshot 
See Capture screenshots while recording to learn how to turn on screenshots.
Hover over the Overview to view a screenshot of how the page looked during that moment of the recording.
The Overview is the section that contains the CPU, FPS, and NET charts.

You can also view screenshots by selecting a frame in the Frames section. DevTools displays a small version of the screenshot in the Summary panel.

Click the thumbnail in the Summary panel to zoom in on the screenshot.

 View layers information 
To view advanced layers information about a frame:
1. Turn on advanced paint instrumentation.
2. Select a frame in the Frames section. DevTools displays information about the layers in the new Layers tab, next to the Event Log tab.

Hover over a layer to highlight it in the diagram.

To move the diagram:
Select Pan Mode () to move along the X and Y axes.
Select Rotate Mode () to rotate along the Z axis.
Select Reset Transform () to reset the diagram to the original position.
 View paint profiler 
To view advanced information about a paint event:
1. Turn on.
2. Select a Paint event in the Main section.
The Paint Profiler panel:

 Analyze rendering performance with the Rendering tool
Use the features of the Rendering panel to help visualize the rendering performance of your page.
To open the Rendering tool:
1. Open the Command Menu.
Rendering and select Show Rendering2. Start typing . DevTools displays the Rendering tool at the bottom of your DevTools window.

 View frames per second in realtime with the FPS meter 
The FPS meter is an overlay that appears in the top-right corner of your viewport. It provides a realtime estimate of FPS as the page runs. To open the FPS meter:
1. Open the Rendering tool. Analyze rendering performance with the Rendering tool.
2. Select the FPS Meter checkbox.

 View painting events in realtime with Paint Flashing 
Use Paint Flashing to get a realtime view of all paint events on the page. Whenever a part of the page gets repainted, DevTools outlines that section in green.
To turn on Paint Flashing:
1. Open the Rendering tool. See Analyze rendering performance with the Rendering tool.
2. Select the Paint Flashing checkbox.

 View an overlay of layers with Layer Borders 
Use Layer Borders to view an overlay of layer borders and tiles on top of the page.
To turn on Layer Borders:
1. Open the Rendering tool. See Analyze rendering performance with the Rendering tool.
2. Select the Layer Borders checkbox.

See the comments in debug_colors.cc for an explanation of the color-codings.
 Find scroll performance issues in realtime 
Use Scrolling Performance Issues to identify elements of the page that have event listeners related to scrolling that may harm the performance of the page. DevTools outlines the potentially problematic elements in teal.
To view scroll performance issues:
1. Open the Rendering tool. See Analyze rendering performance with the Rendering tool.
2. Select the Scrolling Performance Issues checkbox.

See also:
 Slow scroll rects (checkbox) in Navigate webpage layers, z-index, and DOM using the 3D View tool.
 Disable local fonts
local() sources in @font-faceIn Rendering tool, use the Disable local fonts checkbox to emulate missing rules.
Rubik font is installed on your device and the @font-face src rule uses it as a local()For example, when the font, Microsoft Edge uses the local font file from your device.
local()When Disable local fonts is selected, DevTools ignores the  fonts and fetches each font from the network:

This feature is useful if you use two different copies of the same font during development, such as:
A local font for your design tools. A web font for your code.
Use Disable local fonts to make it easier to:
@font-faceDebug and measure loading performance and optimization of web fonts.
Verify accuracy of your CSS  rules.
Discover differences between local versions installed on your device and a web font.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Timeline event reference
 	6/21/2022 • 4 minutes to read • Edit OnlineThe timeline events mode displays all events triggered while making a recording. Use the timeline event reference to learn more about each timeline event type.
 Common timeline event properties
Certain details are present in events of all types, while some only apply to certain event types. This section lists properties common to different event types. Properties specific to certain event types are listed in the references for those event types that follow.
PROPERTYWHEN IS IT SHOWNAggregated timeFor events with nested events, the time taken by each category of events.Call StackFor events with child events, the time taken by each category of events.CPU timeHow much CPU time the recorded event took.DetailsOther details about the event.Duration (at time-stamp)How long it took the event with all of its children to complete; timestamp is the time at which the event occurred, relative to when the recording started.Self timeHow long the event took without any of its children.Used Heap SizeAmount of memory being used by the application when the event was recorded, and the delta (+/-) change in used heap size since the last sampling. Loading events
This section lists events that belong to Loading category and their properties.
EVENTDESCRIPTIONParse HTMLMicrosoft Edge ran the HTML parsing algorithm.Finish LoadingA network request completed.Receive DataData for a request was received. There are one or more Receive Data events.Receive ResponseThe initial HTTP response from a request.Send RequestA network request has been sent. Loading event properties 
PROPERTYDESCRIPTIONResourceThe URL of the requested resource.PreviewPreview of the requested resource (images only).Request MethodGET or POSTHTTP method used for the request (, for example).Status CodeHTTP response code.MIME TypeMIME type of the requested resource.Encoded Data LengthLength of requested resource in bytes. Scripting events
This section lists events that belong to the Scripting category and their properties.
EVENTDESCRIPTIONAnimation Frame FiredA scheduled animation frame fired, and its callback handler invoked.Cancel Animation FrameA scheduled animation frame was canceled.GC EventGarbage collection occurred.DOMContentLoadedThe DOMContentLoaded event was fired by the browser. This event is fired when all of the DOM content of the page is loaded and parsed.Evaluate ScriptA script was evaluated.Eventmousedown, or keyA JavaScript event (for example, ).Function CallA top-level JavaScript function call was made (only appears when browser enters JavaScript engine).Install TimerA timer was created with setInterval() or setTimeout().Request Animation FramerequestAnimationFrame()A  call scheduled a new frame.Remove TimerA previously created timer was cleared.TimeA script called console.time().Time EndA script called console.timeEnd().Timer FiredsetInterval()A timer fired that was scheduled with  or 
setTimeout().EVENTDESCRIPTIONXHR Ready State ChangeThe ready state of an XMLHTTPRequest changed.XHR LoadXMLHTTPRequestAn  finished loading. Scripting event properties 
PROPERTYDESCRIPTIONTimer IDThe timer ID.TimeoutThe timeout specified by the timer.RepeatsBoolean that specifies if the timer repeats.Function CallA function that was invoked. Rendering events
This section lists events that belong to Rendering category and their properties.
EVENTDESCRIPTIONInvalidate layoutThe page layout was invalidated by a DOM change.LayoutA page layout was completed.Recalculate styleMicrosoft Edge recalculated element styles.ScrollThe content of nested view was scrolled. Rendering event properties 
PROPERTYDESCRIPTIONLayout invalidatedFor Layout records, the stack trace of the code that caused the layout to be invalidated.Nodes that need layoutFor Layout records, the number of nodes that were marked as needing layout before the relayout started. These are normally those nodes that were invalidated by developer code, plus a path upward to relayout root.Layout tree sizeFor Layout records, the total number of nodes under the relayout root (the node that Microsoft Edge starts the relayout).Layout scopePartialWhole documentPossible values are  (the re-layout boundary is a portion of the DOM) or .Elements affectedFor Recalculate style records, the number of elements affected by a style recalculation.PROPERTYDESCRIPTIONStyles invalidatedFor Recalculate style records, provides the stack trace of the code that caused the style invalidation. Painting events
This section lists events that belong to Painting category and their properties.
EVENTDESCRIPTIONComposite LayersThe composited image layers for the Microsoft Edge rendering engine.Image DecodeAn image resource was decoded.Image ResizeAn image was resized from its native dimensions.PaintComposited layers were painted to a region of the display. Hovering over a Paint record highlights the region of the display that was updated. Painting event properties 
PROPERTYDESCRIPTIONLocationFor Paint events, the x and y coordinates of the paint rectangle.DimensionsFor Paint events, the height and width of the painted region.NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Meggin Kearney (Technical Writer) and Flavio Copes (Full Stack Developer).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 
Display original function names in performance profiles
 	6/21/2022 • 3 minutes to read • Edit OnlineIf your build process compiles and minifies your code and combines it into a single file, the names of the functions displayed in a performance profile might be hard to understand. Source maps map your compiled, minified code to your original source code files. The Performance tool can use source maps to map minified function names after a recording has been made, back to their original names found in your original code.
To learn more about how DevTools uses source maps, see Map the processed code to your original source code, for debugging.
To see your original function names in the flame chart in the Performance tool, use the Unminify () button.
Source mapping is used in DevTools to keep your client-side code readable and debuggable. By clicking the Unminify button in the Performance tool, you can use source maps to create an unminified version of the performance profile you recorded.
An example of a performance profile flame chart, with hard-to-read function names:

An example of a performance profile flame chart, with some more meaningful function names restored:

When recording a performance profile in the Performance tool, the Main section of the profile displays detailed flame charts of JavaScript functions that were called during the recording.
Ideally, in this flame chart view, you want to see the meaningful function names that are shown in your original source code. However, if your production code is compiled, minified, or bundled, the Performance tool initially displays the function names that are extracted from your transformed, production code. These production function names might be obscure and might not easily map to function names in your original source code.
To unminify a performance profile, so that some more meaningful function names are shown in addition to the minified identifiers, follow the steps below.
 Step 1 - Set up source maps
Host your source maps side-by-side with your production code. When unminifying, the Performance tool expects to find your source maps along with your production code.
For details, see Map the processed code to your original source code, for debugging.
 Step 2 - Record a performance profile
1. In the Performance tool, click the Record button, to record a performance profile for the page you want to analyze. For details, see Record runtime performance.

A performance profile is recorded, in the Performance tool.
2. In the Performance tool, click in the main area (the flame chart), and use the mouse wheel to zoom in. Click and drag left and right. Look at the function names in the flame chart.
The flame chart in the Performance tool shows minified function names, such as XI, Gi, d, o, an, c, co, and a from your production code:

 Step 3 - Unminify the code
1. Click the Unminify () button:

In DevTools, a popup briefly appears, reading: Status: creating unminfied file. Then the Save As
yymmddThhmmssProfile-20220307T164948-unminified.jsondialog box opens. The default filename is a pattern starting with date and time like , such as: . The default directory is the Downloads directory.
2. Select a filename and directory and then click the Save button.
The Performance tool creates a new version of the recorded performance profile, with some function names from the flame chart replaced by more meaningful function names by using your source maps. Some of the minified production names might still appear, because source maps don't always provide the necessary information for the Performance tool to map all function names.
 Step 4 - Load the unminified profile
1. In the Performance tool, click the Load profile () icon button. Or, right-click a blank area of the Performance tool, and then select Load profile.

.json2. In the Open dialog box, select the unminified performance profile  file that you just downloaded. If needed, for details, see Load a recording in Performance features reference, and then continue below.
Some function names are now unminified. The unminified flame chart in the Performance tool now shows those functions labeled with more meaningful names taken from your source maps, such as useObserver (d), useQueuedForceUpdateBlock (o), trackDerivedFunction (an), initializeIconColorMap (c), getExtraToolControls (co), and isToggleEnabled (a).

 See also
Get started analyzing runtime performance - An introduction to analyzing runtime performance in DevTools.
Performance features reference, - A reference for many of the features offered in the Performance tool.
 
 
Measure runtime performance of a page using the Performance monitor tool
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the Performance monitor tool to get a real-time view of the runtime performance of a webpage.
The Performance monitor tool helps determine where performance problems come from. There are various reasons why a website might run slowly. This tool provides clues to understand whether the problems are related to causes such as the following:
High memory or CPU usage.
Too frequent layout and style calculations.
Too many DOM nodes and event listeners.
 Open the Performance monitor tool
To open the Performance monitor:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
2. In DevTools, on the main toolbar, select the Performance monitor tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools ( ) button.

The Performance monitor shows graphs of various performance metrics that update in real time.

 Select performance metrics to monitor
The Performance monitor tool shows three performance metrics by default, and additional metrics are available.
PERFORMANCE METRICDESCRIPTIONCPU usageThe percentage of CPU used by the web page. Shown by default.JS heap sizeThe amount of memory used by the JavaScript program on the page. Shown by default.DOM NodesThe number of DOM nodes in the browser (across tabs). Shown by default.JS event listenersThe number of JavaScript event listeners in the browser (across tabs).DocumentsThe number of document objects in the browser (across tabs).Document FramesThe number of document frames in the browser (across tabs).Layouts / secThe number of times per second the browser engine constructs the layout of the page.Style recalcs / secThe number of times per second the browser engine calculates the CSS style of the page.To enable or disable any of the available performance metrics, click the labels in the side bar.



 
 
Display or edit source files using the Quick source tool
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the Quick source tool to display or edit source files when using a tool other than the Sources tool.
The main place to view source files in the DevTools is within the Sources tool. But sometimes you need to access other tools, such as Elements or Console, while viewing or editing your source files. You use the Quick
source tool in the Drawer, which appears at the bottom of DevTools.
See:
Displaying source files when using a different tool in Sources tool overview
Step 4: Save a JavaScript change to disk in Edit files with Workspaces (Filesystem tab)

 
 
Rendering tool, to see what a webpage looks like with different display options or vision deficiencies
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the Rendering tool to see what your webpage looks like with different display options or vision deficiencies:

See Emulate dark or light schemes in the rendered page.
 
 Emulate dark or light schemes in the rendered page
 	6/21/2022 • 3 minutes to read • Edit OnlineUse the Rendering tool to see what your webpage looks like with different display options or vision deficiencies.
Many operating systems have a way to display any application in darker or lighter colors. Having a website that has a light scheme in a dark-mode operating system can be hard to read and can be an accessibility issue for some users.
To test how a webpage will render when the user has selected dark or light mode, instead of changing your own machine's dark-mode or light-mode setting, you can select Emulate CSS prefers-color-scheme: dark or light in Microsoft Edge DevTools. You can do this from the Rendering tool or from the Command Menu, as described below.
Alternatively, you can make your webpage automatically select dark or light mode based on your own preferred settings on your machine, by selecting No emulation, which is the default.
To specify the CSS to use for both light and dark schemes, use the prefers-color-scheme CSS media query to detect whether the user prefers to display your product in a dark or light color scheme, and then automatically select your own custom light- or dark-mode CSS. Example CSS code is shown in Check for contrast issues with dark theme and light theme.
This article is about changing the appearance of the webpage under development. To instead change how DevTools appears, see Apply color themes to DevTools.
 Emulating dark or light mode using the Rendering tool
1. In DevTools, open the Rendering tool. To do this, click the More Tools (+) icon on the main toolbar or on the Drawer, and then select Rendering.
Or, if the Rendering tool is already open, but is hidden, click the More tabs (>>) icon on the toolbar, and then select Rendering.
2. In the Emulate CSS media feature prefers-color-scheme dropdown list, select prefers-colorscheme: dark or prefers-color-scheme: light.

3. Refresh the page to display the rendered result.
Now you can modify your CSS and view the rendered result the same way as for any other web page. See Get started viewing and changing CSS.
4. To restore the setting, in the Rendering tool, in the Emulate CSS media feature prefers-colorscheme dropdown list, select No emulation. When you refresh the page, your own operating system or browser setting for light or dark mode preference will be applied.
 Emulating dark or light mode using the Command Menu
Ctrl+Shift+PCommand+Shift+P1. When DevTools has focus, open the Command Menu by selecting  (Windows, Linux) or  (macOS).
2. Type dark, light, or emulate, select Rendering: Emulate CSS prefers-color-scheme: dark or Rendering: Emulate CSS prefers-color-scheme: light, and then press Enter.

Select a Rendering command rather than an Appearance command. The Rendering commands affect the rendered webpage under development. The Appearance commands instead affect the DevTools part of the window.
3. Refresh the page to display the rendered result.
Now you can modify your CSS and view the rendered result the same way as for any other web page. See Get started viewing and changing CSS.
4. To restore the setting, in the Command Menu, type emulate or scheme and then select Rendering: Do not emulate CSS prefers-color-scheme. When you refresh the page, your own operating system or browser setting for light or dark mode preference will be applied.
 See also
 Analyze rendering performance with the Rendering tool in Performance features reference
The Rendering tool is also used for the following:
Check for contrast issues with dark theme and light theme
Verify that a page is usable by people with color blindness
Verify that a page is usable with blurred vision
Verify that a page is usable with UI animation turned off
Emulate vision deficiencies
Simulate reduced motion
 
 Force print preview mode
 	6/21/2022 • 2 minutes to read • Edit OnlineThe print media query controls how a page looks when printed. To force a page into print preview mode:
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P1. Press  (macOS) to open the Command
Menu.

rendering, select Show Rendering, and then press Enter2. Type .
The Rendering panel opens in the Drawer.
3. Under Emulate CSS media type, select print.

From here, you can display and change your CSS, like any other web page. See Get started viewing and changing CSS.
 See also
 Analyze rendering performance with the Rendering tool in Performance features reference
The Rendering tool is also used for the following:
Check for contrast issues with dark theme and light theme
Verify that a page is usable by people with color blindness
Verify that a page is usable with blurred vision
Verify that a page is usable with UI animation turned off
Emulate vision deficiencies
Emulate dark or light schemes in the rendered page Simulate reduced motion
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Find source files for a page using the Search tool
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the Search tool to find specific source files for a webpage, including HTML, CSS, JavaScript, and image files.
A webpage is mainly an HTML file that's used by the browser to display content. But webpages commonly require other resources in addition to the HTML file, such as CSS, JavaScript, or image files, to provide richer content.
In the Sources tool, the Page tab of the Navigator pane shows all the resources that are downloaded by a webpage. But when there are many resources, it can become useful to search through them. To do text and regular expression searches across all the resources of a webpage, use the Search tool.
 Open the Search tool by using a keyboard shortcut
To quickly open the Search tool:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
Esc2. In DevTools, press  to open the Drawer, and then on the Drawer toolbar, select the Search tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
Ctrl+Shift+F (Windows, Linux) or Command+Option+FOr, press  (macOS).
The Search tool appears in the Drawer, with a search toolbar:

See also Global keyboard shortcuts.
 Open the Search tool by using the Command Menu
To open the Search tool from the Command Menu:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P2. Open the Command Menu, by pressing (macOS).
search, and then press Enter3. Type .

 Search for text
To search for text in the current webpage and its resource files:
1. Put focus the search input field.
Enter2. Enter the text that you want to search for, and then press .
The Search tool shows the list of matching resources, and highlights the corresponding lines of text. The number of matching files and lines is also indicated at the bottom of the tool.

 Match case (lowercase or uppercase characters)
By default, the Search tool isn't case-sensitive. A search for a term matches occurrences of that term, regardless of lowercase or uppercase characters.
AaTo only find results that match a particular case (lowercase or uppercase characters), click the Match Case () button in the search toolbar.
 Search for regular expressions
.*You can use regular expressions, including JavaScript regular expressions, to find matching results. To use a regular expression, click the Use Regular Expression () button in the toolbar and enter a valid regular expression in the search input field.

 Open a found file in the Sources tool
After doing a search, click a result line to open the corresponding file. The Sources tool opens in the main panel and loads the resource file, scrolled to the matching line.

 Update search results
A webpage can continue to request resources after it has finished loading, so the results displayed in the Search panel may become stale after a while.
To update the search results, do either of the following:
Search again by typing a term in the search input field. Click the Refresh () button in the toolbar.
 Clear a search
To clear the search results, click the Clear () button in the toolbar.

 
 Understand security issues using the Security tool
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the Security panel to inspect the security of a page.
Ctrl+Shift+I1. To open DevTools, right-click a webpage, and then select Inspect. Or, press  (Windows,
Command+Option+ILinux) or  (macOS). DevTools opens.
2. In DevTools, on the main toolbar, click the Security tab. If that tab isn't visible, click the More tabs () button, or else the More Tools () button.
The Security tool (or panel) opens:

 Common problems
	 Non 	-secure main origins
When the main origin of a page isn't secure, the Security Overview says This page is not secure.

This problem occurs when the URL that you visited was requested over HTTP. To make it secure you need to
request it over HTTPS. For example, if you look at the URL in your address bar, it probably looks similar to 
http://example.com. To make it secure the URL should be https://example.com.
If you already set up HTTPS on your server, all you need to do to fix this problem is configure your server to redirect all HTTP requests to HTTPS.
If you haven't set up HTTPS on your server, Let's Encrypt provides a free and relatively easy way to start the process. Or, you might consider hosting your site on a CDN. Most major CDNs host sites on HTTPS by default now.
TIP
The Use HTTPS hint in webhint can help automate the process of making sure that all HTTP requests are directed to HTTPS.
 Mixed content 
Mixed content means that the main origin of a page is secure, but the page requested resources from nonsecure origins. Mixed content pages are only partially protected because the HTTP content is accessible to sniffers and vulnerable to man-in-the-middle attacks.

mixed-content:displayedIn the previous figure, select View 1 request in Network panel to open the Network tool and apply the  filter so that the Network Log only shows non-secure resources.

 View details
 View main origin certificate 
From the Security Overview, click View certificate to quickly inspect the certificate for the main origin.

 View origin details 
Click one of the entries in the left-hand nav to view the details of the origin. From the details page you can view connection and certificate information. Certificate transparency information is also shown when available.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

Override geolocation with the Sensors tool
6/21/2022 • 2 minutes to read • Edit Online
Many websites take advantage of user location in order to provide a more relevant experience for the users. For example, a weather website may show the local forecast in a user's area, after the user has granted the website permission to access the current user location.
If you are building a UI that changes depending on where the user is located, you probably want to make sure that the site behaves correctly in different places around the world. To override your geolocation in Microsoft Edge DevTools:
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P1. Press  (macOS) to open the Command
Menu.

sensors, select Panel: Show Sensors, and then press Enter2. Type . The Sensors tool opens at the bottom of the DevTools window.
3. Click the Location dropdown list, and then:
TokyoSelect a city, such as .
Click Other to enter custom longitude and latitude coordinates.
Click Location unavailable to see how your site behaves when the user's location isn't available.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

Simulate device orientation with the Sensors tool
6/21/2022 • 2 minutes to read • Edit Online
Simulate different device orientations from within DevTools.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P1. Press  (macOS) to open the Command
Menu.

sensors, select Show Sensors, and then press Enter2. Type . The Sensors tool opens in the bottom of the DevTools window.
Portrait upside down3. From the Orientation list, select one of the preset orientations, such as , or select Custom orientation to provide your own exact orientation.

alpha, beta, and gammaIf you select Custom orientation, the  rotational axis fields are enabled.
alpha axis, press and hold ShiftYou can also set a custom orientation by dragging the Orientation Model. For example, to rotate along the  before dragging:

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
Source Maps Monitor tool
6/21/2022 • 2 minutes to read • Edit Online
Use the Source Maps Monitor tool to monitor which source files on your webpage requested loading of source maps, and whether the source maps were loaded. This tool is useful if your webpage uses source maps to map your reprocessed code to your original source code. Source mapping enables you to see and debug your original source code, rather than having to work with the reprocessed version of your code that's returned by the server.
To try this feature:
1. In a new tab or window, follow the instructions in Map the processed code to your original source code, for debugging, and then continue below.
2. Close the popup dialog box that the demo opens.
3. In the Sources tool, in the Page tab, select the file that the demo created for you, such as Coffee2.js.
4. In DevTools, on the main toolbar, click the More Tools () button, and then select the Source Maps Monitor tool.

 See also
Map the processed code to your original source code, for debugging
Securely debug original code by publishing source maps to the Azure Artifacts symbol server
Securely debug original code by using Azure Artifacts symbol server source maps
Sources tool now notifies you when sourcemaps can't be loaded in What's new in DevTools (Microsoft Edge 96).

WebAudio tool
6/21/2022 • 2 minutes to read • Edit Online
Use the WebAudio tool to monitor the graph of WebAudio nodes that get created when a webpage uses the WebAudio API.
To open the WebAudio tool:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
2. In DevTools, on the main toolbar, click the More Tools () button, and then select WebAudio.
3. Go to a webpage that uses the WebAudio API, such as https://bpmtech.no.
Data about the page is displayed:

Emulate authenticators and debug WebAuthn
6/21/2022 • 2 minutes to read • Edit Online
Instead of debugging Web Authentication in your website or app with physical authenticators, use the WebAuthn tool to create and interact with software-based virtual authenticators.
By using the WebAuthn tool, you can do the following without relying on physical authenticators:
Emulate authenticators.
Customize attributes of authenticators. Inspect states of authenticators.
You can emulate authenticators and debug the Web Authentication API by using the WebAuthn tool.
 Set up the WebAuthn tool
1. Go to a webpage that uses WebAuthn. For example, open the following demo website in a new browser window or tab: try-webauthn.appspot.com.
2. Sign into the website.
Ctrl+Shift+I3. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
4. In DevTools, on the main toolbar, select the WebAuthn tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools () button.
The WebAuthn tool opens:

5. In the WebAuthn tool, select the Enable virtual authenticator environment checkbox. A new section named New authenticator is displayed:

6. In the New authenticator section, configure the following options:
OPTIONVALUEDETAILS
Protocolctap2 or u2fThe protocol the virtual
authenticator uses for encoding and decoding
Transport
usb, nfc, ble, or internalThe virtual authenticator simulates the selected transport for communicating with clients in order to obtain an assertion for a specific credential. See Authenticator
Transport Enumeration
Supports resident keysTurn on (or off) using the checkboxTurn on if your web app relies on resident keys (also known as clientside discoverable credentials). See Resident Key Requirement Enumeration.
Supports user verificationTurn on (or off) using the checkboxTurn on if your web app relies on local authorization using gesture modalities like touch plus pin code, password entry, or biometric recognition. See User Verification7. Click the Add button.
8. A new section of your newly created authenticator is displayed:


The Authenticator section includes a Credentials table. The table is empty until a credential is registered to the authenticator:

 Register a new credential
To register a new credential:
1. On the demo website, click Register new credential.
2. A new credential is now added to the Credentials table in the WebAuthn tool:

On the demo website, click the Authenticate button. Verify that the Sign Count of the credential in the Credentials table increased by 1, which marks a successful authenticatorGetAssertion operation.
For more information about what the Web Authentication API is doing when registering a new credential, see Create a New Credential.
 Export and remove credentials
To export or remove a credential, click the Export or Remove button.

 Rename an authenticator
To rename an authenticator:
1. Next to the authenticator name, click the Edit button.
2. Edit the name, then press Enter to save the changes.

 Set the active authenticator
A newly created authenticator is automatically activated. To use another virtual authenticator, click the Active radio button next to the authenticator.
DevTools supports only one active virtual authenticator at any point of time. If you remove the active authenticator, another authenticator isn't automatically activated.

 Remove a virtual authenticator
To remove a virtual authenticator, next to the authenticator, click the Remove button.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Jecelyn Yeen (Developer advocate, Chrome DevTools).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Welcome tool
 	6/21/2022 • 2 minutes to read • Edit OnlineThe Welcome tool opens when you first open DevTools. It displays:
Links to developer docs.
Latest features.
Release notes.
Option to contact the Microsoft Edge DevTools team.
The Welcome tool opens automatically after each update to Microsoft Edge.
To prevent the display of the Welcome tool after each update, clear the checkbox next to Open tab after each update under the Welcome tool title.

 
 Run commands in the Command Menu
 	6/21/2022 • 2 minutes to read • Edit OnlineThe Command Menu provides a fast way to navigate the Microsoft Edge DevTools UI and accomplish common tasks. The Command Menu is similar to the Command Palette in Visual Studio Code:

 Open the Command Menu

Ctrl+Shift+P (Windows, Linux) or Command+Shift+POr, press  (macOS).
 Display other available actions
>The Command Menu initially opens with a  character prepended to its text box:

>To show other actions that are available from the Command Menu, delete the  character and then type ?:

 See also
Keyboard shortcuts
Navigate DevTools with assistive technology
Customize keyboard shortcuts
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Keyboard shortcuts
 	6/21/2022 • 8 minutes to read • Edit OnlineThese are the default keyboard shortcuts for Microsoft Edge DevTools.
In DevTools, when you hover over an icon, often the tooltip shows a keyboard shortcut.
See also Navigate DevTools with assistive technology and Customize keyboard shortcuts.
 Keyboard shortcuts for opening DevTools
To open DevTools, press the following keyboard shortcuts while your cursor is focused on the browser viewport:
ACTIONWINDOWS/LINUXMACOSOpen whatever panel you used last
F12 or Ctrl+Shift+I
Command+Option+IOpen the Console tool
Ctrl+Shift+J
Command+Option+JOpen the Elements tool
Ctrl+Shift+CCommand+ShiftOption+CC or Command++ Global keyboard shortcuts
The following keyboard shortcuts are available in most DevTools panels.
ACTIONWINDOWS/LINUXMACOSShow Settings
? or F1
? or Function+F1Focus the next panel
Ctrl+]
Command+]Focus the previous panel
Ctrl+[
Command+[Switch back to whatever docking position you last used. If DevTools has been in the default position for the entire session, then this shortcut undocks DevTools into a separate window.
Ctrl+Shift+D
Command+Shift+DToggle Device emulation
Ctrl+Shift+M
Command+Shift+MToggle Inspect Element Mode
Ctrl+Shift+C
Command+Shift+COpen the Command Menu
Ctrl+Shift+P
Command+Shift+PToggle the Drawer
Escape
EscapeNormal refresh
F5 or Ctrl+R
Command+RACTIONWINDOWS/LINUXMACOSHard refresh
Ctrl+F5 or Ctrl+Shift+R
Command+Shift+RSearch for text within the current panel. Not supported in the Audits,
Application, and Security tools
Ctrl+F
Command+FOpens the Search tab in the Drawer, which lets you search for text across all loaded resources
Ctrl+Shift+F
Command+Option+FOpen a file in the Sources tool
Ctrl+O or Ctrl+P
Command+O or Command+PZoom in
Ctrl+Shift++
Command+Shift++Zoom out
Ctrl+-
Command+-Restore default zoom level
Ctrl+0
Command+0Run snippetCtrl+OPress  to open the
!Command Menu, type  followed by
the name of the script, then press 
EnterCommand+OPress  to open the
!Command Menu, type  followed by
the name of the script, then press 
Enter Elements tool keyboard shortcuts
ACTIONWINDOWS/LINUXMACOSUndo change
Ctrl+Z
Command+ZRedo change
Ctrl+Y
Command+Shift+ZSelect the element above / below the currently selected element
Up Arrow / Down Arrow
Up Arrow / Down ArrowExpand the currently selected node. If the node is already expanded, this shortcut selects the element below it
Right Arrow
Right ArrowCollapse the currently selected node. If the node is already collapsed, this shortcut selects the element above it
Left Arrow
Left ArrowExpand or collapse the currently selected node and all of the childrenCtrl+AltHold , then click the
arrow icon next to the name of the
elementOptionHold , then click the arrow
icon next to the name of the elementToggle Edit Attributes mode on the currently selected element
Enter
EnterSelect the next / previous attribute after entering Edit Attributes mode
Tab / Shift+Tab
Tab / Shift+TabACTIONWINDOWS/LINUXMACOSHide the currently selected element
H
HToggle Edit as HTML mode on the currently selected element
Function+F2
F2 Styles pane keyboard shortcuts 
ACTIONWINDOWS/LINUXMACOSGo to the line where a property value is declaredControlHold , then click the
property valueCommandHold , then click the
property valueCycle through the RBGA, HSLA, and Hex representations of a color valueShiftHold , then click the Color Preview box next to the valueShiftHold , then click the Color Preview box next to the valueSelect the next / previous property or valueTab / Shift+TabClick a property name or value, then press Tab / Shift+TabClick a property name or value, then press Increment / decrement a property value by 0.1Alt+Down ArrowUp Arrow / AltClick a value, then press 
+OptionUp ArrowClick a value, then press +  / Option+Down ArrowIncrement / decrement a property value by 1Up ArrowClick a value, then press  / 
Down ArrowUp ArrowClick a value, then press  / 
Down ArrowIncrement / decrement a property value by 10Click a value, then press Shift +
Up Arrow / Shift+ Down ArrowClick a value, then press Shift +
Up Arrow / Shift+ Down ArrowIncrement / decrement a property value by 100Ctrl+Down ArrowUp Arrow / CtrlClick a value, then press 
+Command+Down ArrowUp Arrow / CommandClick a value, then press 
+Cycle through the degrees (deg), gradians (grad), radians (rad) and turns (turn) representations of an angle valueShiftHold  then click the Angle Preview box next to the valueShiftHold  then click the Angle Preview box next to the valueIncrement / decrement an angle value by 1Up ArrowClick the Angle Preview box next to the value then press  / 
Down ArrowUp ArrowClick the Angle Preview box next to the value then press  / 
Down ArrowIncrement / decrement an angle value by 10Click the Angle Preview box next to the value then press Shift +
Up Arrow / Shift + Down ArrowClick the Angle Preview box next to the value then press Shift +
Up Arrow / Shift + Down ArrowIncrement / decrement an angle value by 15ShiftClick the Angle Preview box next to the value then press , click / mouse slide on the Angle Clock
OverlayShiftClick the Angle Preview box next to the value then press , click / mouse slide on the Angle Clock
Overlay Sources tool keyboard shortcuts
ACTIONWINDOWS/LINUXMACOSPause script runtime (if currently running) or resume (if currently paused)
F8 or Ctrl+\
F8 or Command+\Step over next function call
F10 or Ctrl+'
F10 or Command+'Step into next function call
F11 or Ctrl+;
F11 or Command+;Step out of current function
Shift+F11 or Ctrl+Shift+;Shift;F11 or Command+Shift++Continue to a specific line of code while pausedControlHold , then click the line of codeCommandHold , then click the line of codeSelect the call frame below / above the currently selected frame
Ctrl+. / Ctrl+,
Ctrl+. / Ctrl+,Save changes to local modifications
Ctrl+S
Command+SSave all changes
Ctrl+Alt+S
Command+Option+SNavigate to line
Ctrl+G
Ctrl+GJump to a line number of the currently open fileCtrl+OPress  to open the
:EnterCommand Menu, type  followed by the line number, then press Command+OPress  to open the
:EnterCommand Menu, type  followed by the line number, then press Jump to a column of the currently open file (for example line 5, column 9)Ctrl+OPress  to open the
::Command Menu, type , then the line number, then another , then the column number, then press 
EnterCommand+OPress  to open the
::Command Menu, type , then the line number, then another , then the column number, then press 
EnterNavigate to a function declaration, if the current file is HTML or a script. Navigate to a rule set, if the current file is a stylesheet.Ctrl+Shift+OPress , then type
in the name of the declaration / rule set, or select it from the list of optionsCommand+Shift+Opress , then
type in the name of the declaration /
rule set, or select it from the list of optionsClose the active tab
Alt+W
Option+W Code Editor keyboard shortcuts 
ACTIONWINDOWS/LINUXMACOSDelete all characters in the last word, up to the cursor
Ctrl+Delete
Option+DeleteAdd or remove a line-of-code breakpointCtrl+BFocus your cursor on the line, then press Command+BFocus your cursor on the line, then press Navigate to matching bracket
Ctrl+M
Ctrl+MACTIONWINDOWS/LINUXMACOSToggle single-line comment. If multiple lines are selected, DevTools add a comment to the start of each line
Ctrl+/
Command+/Turn on or off the next occurrence of whatever word the cursor is on. Each occurrence is highlighted simultaneously
Ctrl+D / Ctrl+U
Command+D / Command+U Performance tool keyboard shortcuts
ACTIONWINDOWS/LINUXMACOSStart / stop recording
Ctrl+E
Command+ESave recording
Ctrl+S
Command+SLoad recording
Ctrl+O
Command+O Memory tool keyboard shortcuts
ACTIONWINDOWS/LINUXMACOSStart / stop recording
Ctrl+E
Command+E Console tool keyboard shortcuts
ACTIONWINDOWS/LINUXMACOSAccept autocomplete suggestion
Right Arrow or Tab
Right Arrow or TabReject autocomplete suggestion
Escape
EscapeGet previous statement
Up Arrow
Up ArrowGet next statement
Down Arrow
Down ArrowFocus the Console
Ctrl+ `
Ctrl+`Clear the Console
Ctrl+L
Command+K or Option+LForce a multi-line entry. This shortcut is mostly unnecessary, because DevTools should detect multi-line scenarios by default
Shift+Enter
Command+ReturnRun
Enter
ReturnACTIONWINDOWS/LINUXMACOSExpand all subproperties of an object that are logged to the ConsoleAltHold 	, then click Expand (	)AltHold 	, then click Expand (	). See also
Navigate DevTools with assistive technology
Customize keyboard shortcuts
Run commands in the Command Menu
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Customize DevTools
 	6/21/2022 • 2 minutes to read • Edit OnlineThis page lists the ways to customize Microsoft Edge DevTools.
 Settings
Settings > Preferences contains many options for customizing DevTools.
F1	To open Settings, in DevTools, click the Settings icon (). Or, while DevTools has focus, press 	.

 Drawer
In the Drawer toolbar in the bottom of DevTools, you can select which tools to display.
EscapeTo open (or close) the Drawer, press .

You can move tools between the main panel and the drawer.
To move a tool from the drawer to the main panel, right-click a tool, and then select Move to top.


 Reorder tools
Click and drag a tool to change the ordering. Your custom tool order persists across DevTools sessions.
By default, the Network tool is usually the fifth tab on the main toolbar. In the following figure, the Network tool is being moved to become the first tab in the main toolbar.

 Open and close tools
To keep the DevTools interface streamlined, many of the tools aren't opened by default. To open a tool in the main panel or the Drawer, click the More Tools () button to the right of the tabs, and then select a tool from the list.


 Change where DevTools is docked in the browser
See Change DevTools placement (Undock, Dock to bottom, Dock to left).

 Zoom DevTools in or out
See Zoom DevTools in or out in Overview of DevTools.
 Color themes
See Apply a color theme to DevTools.

 Restore default settings
To restore the default theme, placement, tools order, and any other customized settings, select Settings > Preferences > Restore defaults and refresh.

 Customize keyboard shortcuts
See Customize keyboard shortcuts.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Apply a color theme to DevTools
 	6/21/2022 • 2 minutes to read • Edit OnlineYou can apply various color themes to Microsoft Edge DevTools, including several themes from Visual Studio Code, such as Monokai and Solarized Dark. Themes affect the color of panes, buttons, and code syntax highlighting.

This article is about changing the appearance of DevTools. To instead change how the webpage under development is displayed, see Emulate dark or light schemes in the rendered page.
 Available themes
By default, the DevTools theme is set to System preference (also called system preferred color theme). If your operating system is set to Light theme, DevTools uses the Light+ theme. If your operating system is set to Dark theme, DevTools uses the Dark+ theme. However, you can change DevTools to any of several other themes, so that DevTools isn't affected when you set the operating system to Light or Dark theme.
Light themes:
Light+ (Default)
Chromium Light
Quiet Light
Solarized Light
Dark themes:
Dark+ (Default)
Abyss
Chromium Dark
Kimbie Dark
Monokai
Monokai Dimmed
Red
Solarized Dark
Tomorrow Night Blue
 Changing the color theme from Settings
1. Open DevTools, and then select Settings (the gear icon).

2. Select Preferences, and then in the Appearance section, select a theme from the Theme dropdown list.

 Changing the color theme from the Command Menu
To use the Command Menu to change which color theme is applied to DevTools:
1. Open the Command Menu.
theme2. Type , and then select an Appearance command, such as Appearance: Switch to Abyss theme or Appearance: Switch to Light+ (Default) theme.
Enter3. Press .

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 
Change DevTools placement (Undock, Dock to bottom, Dock to left)
 	6/21/2022 • 2 minutes to read • Edit OnlineYou can change where DevTools is docked in the browser. By default, Microsoft Edge DevTools is docked to the right of the browser window. You can also dock DevTools to the bottom or left of the window, or undock DevTools to a separate window.

Dock to left or Dock to right keeps DevTools side-by-side with your webpage, and is excellent when you Emulate mobile devices (Device Emulation). The Dock to left and Dock to right options work best with highresolution displays.
 Undock DevTools into a separate window
Undock DevTools into its own, separate window, when you want to work with several monitors, or if you need to work on a full-screen app and want a lot of space for the DevTools UI. The following image shows DevTools undocked into its own, dedicated window:

Since WebTools now has its own dedicated window, the WebPage that's being designed now occupies an entire browser window:

See also Change DevTools placement (Undock, Dock to bottom, Dock to left).
 Dock DevTools in the left side of the browser
The following image shows DevTools docked in the left side of the browser window:

 Dock DevTools in the bottom of the browser
Dock to bottom helps you when you don't have enough horizontal display space, or you want to debug long text in the DOM or Console. The following image shows DevTools in the bottom of the browser window:

 Dock DevTools in the right side of the browser
The following image shows DevTools in the right side the browser window, which is the default location:

 Change where DevTools is docked by using the Command Menu
Shift+Ctrl+P on Windows/Linux or Command+Shift+P1. Open the Command Menu. To do this, click the Customize and control DevTools () menu button, and then click Run command. Or, press on macOS.
2. Type dock, and then select a dock command:
Dock to bottom
Dock to left
Dock to right
Restore last dock position
Undock into separate window
 
 Change DevTools language settings
 	6/21/2022 • 2 minutes to read • Edit OnlineYour Developer Tools matches your browser language by default, if it is one of the supported languages:
Czech - Čeština
German - Deutsch
English - English
Spanish - español
French - français Italian - italiano
Japanese - 日本語
Korean - 한국어
Portuguese - português Russian - русский
Vietnamese - Tiếng Việt
Chinese (Simplified) - 中文（简体）
 Chinese (Traditional) - 中文（繁體） The DevTools UI in Chinese:

 Reverting the DevTools UI to English
To revert the UI text of DevTools to English:
F11. In DevTools, click the Settings () button, or press 	.
2. On the left, make sure the Preferences page is selected.
3. In the Preferences page, in the Appearance section, locate the Language dropdown list, which is the first item at the top of the page.
4. In the Language dropdown list, select Browser UI language, which is the first menuitem in the dropdown list. Or, select English.
What the dropdown list looks like if your DevTools UI is currently English:

What the dropdown list looks like if your DevTools UI is currently Japanese:

5. Click the Close (x) button in the upper right of the Settings panel, and then click the Reload DevTools button that temporarily appears at the top of DevTools.
What the Reload DevTools button looks like when changing the DevTools UI from Japanese to English:

 Reverting all DevTools settings to the defaults
Caution: This removes all of your customizations of DevTools.
To revert all DevTools settings to the defaults, including the UI language:
F11. In DevTools, click the Settings () button, or press 	.
2. On the left, make sure the Preferences page is selected.
3. At the bottom of the Preferences page, click the Restore defaults and refresh button.
4. Re-apply any custom settings and layout of DevTools that you want to restore.
 
 Customize keyboard shortcuts
 	6/21/2022 • 2 minutes to read • Edit OnlineIn the Shortcuts page of Settings, you can view the defined shortcuts for Microsoft Edge DevTools, define your own shortcut for a specific action, or use a preset to match the default shortcuts from Microsoft Visual Studio Code.
For the default keyboard shortcuts, see Keyboard shortcuts.
 Match keyboard shortcuts from Visual Studio Code
To match the keyboard shortcut in the Microsoft Edge DevTools for an equivalent action in Visual Studio Code:
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
Shift+?2. In DevTools, on the main toolbar, click the Settings () button. Or, press 	.
3. In the Settings panel, select the Shortcuts page.
4. In the upper right, in the Match shortcuts from preset dropdown list, select Visual Studio Code instead of DevTools (Default).

F5F8F5For example, to pause or continue running a script in Visual Studio Code, you select . But with the DevTools (Default) preset, to pause or continue running a script, you press . When you change the preset to Visual Studio Code, you now also press  in DevTools, just like in Visual Studio Code.
 See also 
Microsoft Visual Studio Code
Visual Studio Code Keyboard shortcuts for Windows (PDF file)
 Edit the keyboard shortcut for a DevTools action
Ctrl+Shift+I1. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
Shift+?2. In DevTools, on the main toolbar, click the Settings () button. Or, press 	.
3. In the Settings panel, select the Shortcuts page.
4. Select the action you want to customize. For example, in the Debugger section, select the Pause script execution action.
5. Click the Edit (
6. To bind the shortcut keys to the action, ensure the text box next to the action has focus, and then use the keyboard to select the shortcut keys.
7. To bind more than one shortcut combination to an action, select Add a shortcut, make sure the text box next to the action has focus, and then use the keyboard to select the shortcut keys.

8. To save your new keyboard shortcut, select the checkmark () icon.

9. Select your new keyboard shortcut to trigger the action in DevTools.
 Icons and buttons 
 If there's a Custom Keyboard Shortcut () icon displayed next to a checkbox, it indicates that you have customized the keyboard shortcut.
 To remove a keyboard shortcut for an action while you are editing the keyboard shortcuts for an action, click the Delete shortcut () icon.
 To add an additional keyboard shortcut for an action while you are editing the keyboard shortcuts for an action, click the Add a shortcut link, or click the Custom Keyboard Shortcut () icon.
 To save a modified or added keyboard shortcut while you are editing the keyboard shortcuts for an action, click the checkmark () icon.
To discard your changes while you are editing the keyboard shortcuts for an action, click the X () icon.
To reset all shortcuts, click the Restore default shortcuts button.
If a keyboard shortcut is currently assigned to one action, it can't be assigned to another action. Instead, delete the keyboard shortcut from the previous action, and then add that keyboard shortcut to the new action.
 See also
Keyboard shortcuts
Navigate DevTools with assistive technology
Run commands in the Command Menu
Customize DevTools
 
 Remotely debug Android devices
 	6/21/2022 • 4 minutes to read • Edit OnlineRemote debug live content on an Android device from your Windows or macOS computer. The following tutorial page teaches you how to:
Set up your Android device for remote debugging, and discover it from your development machine.
Inspect and debug live content on your Android device from your development machine.
Screencast content from your Android device onto a DevTools instance on your development machine.
NOTE
Remote debugging the Microsoft Edge app on iOS devices isn't currently supported. The following guide is specifically focused on remote debugging Microsoft Edge on Android devices. If you have a macOS device, follow the Brightcove Debugging guide to remotely debug Microsoft Edge on an iOS device using Safari. For more information about the Web Inspector tool in Safari, see Safari Web Development Tools.
 Step 1: Discover your Android device
The workflow below works for most users. For more help, see Troubleshooting: DevTools isn't detecting the Android device, below.
1. Open the Developer Options screen on your Android. See Configure On-Device Developer Options.
2. Select Enable USB Debugging.
3. On your development machine, open Microsoft Edge.
edge://inspect4. In the Address bar, go to .

5. Connect your Android device directly to your development machine using a USB cable. The first time you
try to connect, a prompt should be displayed about DevTools detecting an unknown device. Accept the Allow USB Debugging permission prompt on your Android device.


6. If the model name of your Android device is displayed, then Microsoft Edge has successfully established the connection to your device. Continue to the Step 2 section.
 Troubleshooting: DevTools isn't detecting the Android device 
Use the following tips to help you troubleshoot the correct settings for your hardware.
If you are using a USB hub, try connecting your Android device directly to your development machine. Try unplugging the USB cable between your Android device and development machine, and then re-plugging your USB cable. Complete the task while your Android and development machine screens are unlocked. Make sure that your USB cable works. You should be able to inspect files on your Android device from your development machine.
Use the following tips to help you verify that your software is set up correctly.
If your development machine is running Windows, try manually installing the USB drivers for your Android device. For more information, see Install OEM USB Drivers.
Some combinations of Windows and Android devices (especially Samsung) require additional settings. For more information, see DevTools Devices does not detect device when plugged in.
If the Allow USB Debugging prompt isn't displayed on your Android device, try:
 Disconnecting and then re-connecting the USB cable while DevTools is in focus on your development machine and your Android homescreen is showing. Sometimes the prompt isn't displayed when your Android or development machine screens are locked.
Updating the display settings for your Android device and development machine so that they never go to sleep.
Setting the USB mode for Android to PTP. See Galaxy S4 does not show Authorize USB debugging dialog box. Select Revoke USB Debugging Authorizations from the Developer Options screen on your Android device to reset it to a fresh state.
If you find a solution that isn't mentioned on this page or in DevTools Devices does not detect device when plugged in on Stack Overflow, please add your solution to that Stack Overflow question.
 Step 2: Debug content on your Android device from your development machine
1. Open Microsoft Edge on your Android device.
edge://inspect2. Go to . The model name of your Android device is displayed, followed by the device serial number. Below that, the version of Microsoft Edge running on the device should be displayed, with the version number in parentheses. Each open Microsoft Edge tab gets a unique section. You can interact with that tab from a section.

1. In the Open tab with url text box, enter a URL and then click Open. The page opens in a new tab on your Android device.
2. Click inspect next to the URL that you just opened. A new DevTools instance opens.
 More actions: focus, refresh, or close a tab 
Select focus tab, reload, or close next to the tab that you want to focus, refresh, or close.

 Inspect elements 
Go to the Elements tool of your DevTools instance, and hover over an element to highlight it in the viewport of your Android device.
You can also tap an element on your Android device screen to select it in the Elements tool. Click Select Element () icon on your DevTools instance, and then select the element on your Android device screen.
NOTE
Select Element is disabled after the first selection, so you need to re-enable it every time you want to use this feature.
 Screencast your Android screen to your development machine 
Click the Toggle Screencast () icon to view the content of your Android device in your DevTools instance.
You can interact with the screencast in multiple ways:
ShiftClicks are translated into taps, firing proper touch events on the device.
Keystrokes on your computer are sent to the device.
To simulate a pinch gesture, hold  while dragging.
To scroll, use your trackpad or mouse wheel, or fling with your mouse pointer.
Use the following tips to help you screencast:
Screencasts only display page content. Transparent portions of the screencast represent device interfaces, such as the Microsoft Edge Address bar, the Android status bar, or the Android keyboard.
Screencasts negatively affect frame rates. Disable screencasting while measuring scrolls or animations to get a more accurate picture of the performance of your page.
If your Android device screen locks, the content of your screencast disappears. Unlock your Android device screen to automatically resume the screencast.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Access local servers
 	6/21/2022 • 4 minutes to read • Edit OnlineHost a site on a development machine web server, then access the content from an Android device.
With a USB cable and Microsoft Edge DevTools, run a site from a development machine and then view the site on an Android device.
 Summary 
 Port forwarding enables you to view content hosted by the web server running in your development machine on your Android device.
 If your web server is using a custom domain, set up your Android device to access the content at that domain with custom domain mapping.
 Set up port forwarding
Port forwarding enables your Android device to access content that is being hosted on the web server running in your development machine. Port forwarding works by creating a listening TCP port on your Android device that maps to a TCP port on your development machine.
Traffic between the ports travel through the USB connection between your Android device and development machine, so the connection doesn't depend on your network configuration.
To enable port forwarding:
1. Set up remote debugging between your development machine and your Android device. When you are finished, your Android device should be displayed in the left-hand menu of the Inspect Devices dialog and a Connected status indicator.
2. In the Inspect Devices dialog in DevTools, enable Port forwarding.
3. Click Add rule.

localhost4. In the Device port text box on the left, enter the  port number from which you want to be able to access the site on your Android device. For example, if you wanted to access the site from 
localhost:5000 enter 5000.
localhost:7331 enter localhost:73315. In the Local address text box on the right, enter the IP address or hostname on which your site is hosted on the web server running in your development machine, followed by the port number. For example, if your site is running on .
6. Click Add.
Port forwarding is now set up.
You can see the status indicator for the port forward at the top, as well as beside the device name. The indicator for the port forward is on the tab on your device within the Inspect Devices dialog.

localhost5000 in the field, visit localhost:5000To view the content, open up Microsoft Edge on your Android device and go to the  port that you specified in the Device port field. For example, if you entered .
 Map to custom local domains
Custom domain mapping enables you to view content on an Android device from a web server on your development machine that is using a custom domain.
For example, suppose that your site uses a third-party JavaScript library that only works on the domain 
microsoft-edge.devtools. So, you create an entry in your hosts file on your development machine to map this
localhost (for example, 127.0.0.1 microsoft-edge.devtoolsmicrosoft-edge.devtoolsdomain to ). After setting up custom domain mapping and port forwarding, view the site on your Android device at the URL .
 Set up port forwarding to proxy server 
To map a custom domain you must run a proxy server on your development machine. Examples of proxy servers are Charles, Squid, and Fiddler.
To set up port forwarding to a proxy:
1. Run the proxy server and record the port that it is using.
NOTE
The proxy server and your web server must run on different ports.
localhost:80002. Set up port forwarding to your Android device. For the local address field, enter  followed by the port that your proxy server is running on. For example, if it is running on port , go to 
localhost:8000. In the device port field enter the number that you want your Android device to listen
3333on, such as .
 Configure proxy settings on your device 
Next, you need to configure your Android device to communicate with the proxy server.
1. On your Android device, navigate to Settings > Wi-Fi.
2. Long-press the name of the network to which you are currently connected.
NOTE
Proxy settings apply per network.
3. Click Modify network.
4. Click Advanced options. The proxy settings display.
5. Click the Proxy menu and then select Manual.
localhost6. For the Proxy hostname field, enter .
7. For the Proxy port field, enter the port number that you entered for device port in the previous section.
8. Click Save.
With these settings, your device forwards all of its requests to the proxy on your development machine. The proxy makes requests on behalf of your device, so requests to your customized local domain are properly resolved.
Now access custom domains on your Android device just like on the development machine.
If your web server is running off of a non-standard port, remember to specify the port when requesting the content from your Android device. For example, if your web server is using the custom domain 
microsoft-edge.devtools on port 7331, when you view the site from your Android device you should be using
microsoft-edge.devtools:7331the URL .
TIP
To resume normal browsing, remember to revert the proxy settings on your Android device after you disconnect from the development machine.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse) and Meggin Kearney (Technical Writer).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Remotely debug Android WebViews
 	6/21/2022 • 2 minutes to read • Edit OnlineDebug Android WebViews in your native Android apps using Microsoft Edge Developer Tools.
On Android 4.4 (KitKat) or later, use DevTools to debug WebView content in native Android apps.
Android WebView is not related to Microsoft Edge WebView2.
 Summary 
edge://inspectTurn on Android WebView debugging in your native Android app; debug Android WebViews in Microsoft Edge DevTools.
To display the list of the Android WebViews with debugging turned on, go to .
Debug Android WebViews in the same way you debug a webpage through remote debugging.
 Configure Android WebViews to debug
WebViewAndroid WebView debugging must be turned on within your app. To turn on Android WebView debugging, run the setWebContentsDebuggingEnabled static method on the  class.
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    WebView.setWebContentsDebuggingEnabled(true); }The setting applies to all of the Android WebViews of the app.
TIP
debuggabledebuggable flag is trueAndroid WebView debugging isn't affected by the state of the  flag in the manifest of the app. If you want to turn on Android WebView debugging only when the , test the flag at runtime.
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
    if (0 != (getApplicationInfo().flags & ApplicationInfo.FLAG_DEBUGGABLE))    { WebView.setWebContentsDebuggingEnabled(true); } } Open an Android WebView in DevTools
edge://inspectTo display a list of the Android WebViews with debugging turned on that run on your device, go to .
To start debugging, under the Android WebView you want to debug, click inspect. Use DevTools in the same way that you use a remote browser tab.
 Troubleshoot
edge://inspectIf your Android WebViews aren't displayed on the  page:
Verify that Android WebView debugging is turned on for your app.
On your device, open the app with the Android WebView you want to debug. Then, refresh 
edge://inspect.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Meggin Kearney (Technical Writer).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Remotely debug Surface Duo emulators
 	6/21/2022 • 2 minutes to read • Edit OnlineIn this article, you walk through the process of remotely debugging your web content in the Microsoft Edge app on a Surface Duo emulator from a desktop instance of Microsoft Edge. For information on debugging on a Surface Duo device, follow our guide for remote debugging Android devices.
 Before you begin
 Install the Surface Duo SDK before running the Surface Duo emulator. See Get the Surface Duo SDK.

edge://inspectIf the  page doesn't recognize the Surface Duo emulator, restart the emulator.
 Step 2: Launch the Surface Duo emulator
 Launch the Surface Duo emulator. The emulator displays two different screens running on the emulator:

 Step 3: Load your web content in Microsoft Edge on the Surface Duo emulator
1. On either screen, swipe up on the Favorites Tray of the Surface Duo emulator to display the Apps Drawer.
2. Click Edge to launch the Microsoft Edge app:

3. In the Microsoft Edge app, go to the website or app that you want to debug.
 Step 4: Debug your web content from the Surface Duo emulator
1. Switch back to the desktop instance of Microsoft Edge.
edge://inspectThe  page now shows the SurfaceDuoEmulator with a list of the open tabs or PWAs that are running on the Surface Duo emulator:

2. From the list of open tabs running on the emulator, click inspect on the tab that has the web content to be debugged. DevTools opens in a new window.
3. Click Toggle Screencast () to view the web content from your Surface Duo emulator in the DevTools window.
You can now use the Microsoft Edge DevTools to debug your web content on the Surface Duo emulator:

 Troubleshooting 
edge://inspectIf SurfaceDuoEmulator isn't displayed on the  page, try opening or closing tabs in the Microsoft Edge app on the Surface Duo Emulator.
For additional troubleshooting steps, see troubleshooting section for Android devices.
 How the hinge impacts the layout of your web content 
If you span the Microsoft Edge app across both screens in the emulator, the screencast will reflect the new size of the app but not the hinge.
To understand how the hinge impacts the layout of your web content, use the Surface Duo emulator instead of the screencast.
 Additional Resources
The web is a great platform for the new class of foldable and dual-screen devices, because you can write your HTML, CSS, and JavaScript once, and have it look great across single-screen, dual-screen, and foldable devices. See the following additional resources to get started building web content for these new devices.
Surface Duo developer documentation - Documentation for creating apps on dual-screen devices.
Web Platform Primitives for Enlightened Experiences on Foldable Devices - Microsoft Edge web platform explainer for new APIs, to build web experiences on foldable and dual-screen devices.
 How to build dual-screen experiences for the website and web apps - Recording of Microsoft 365 Developer Day session.

 
 Remotely debug Windows devices
 	6/21/2022 • 8 minutes to read • Edit OnlineRemote debug live content on a Windows 10 or later device from your Windows or macOS computer.
This tutorial teaches you the following tasks:
Set up your Windows device for remote debugging and connect to it from your development machine.
Inspect and debug live content on your Windows device from your development machine.
Screencast content from your Windows device onto a DevTools instance on your development machine.
 Step 1: Set up the host (debuggee machine)
The host or debuggee machine is the Windows 10 or later device that you want to debug. It may be a remote device that is hard for you to physically access or it may not have keyboard and mouse peripherals, making it difficult to interact with the Microsoft Edge DevTools on that device.
To set up the host (debuggee) machine:
1. Install and configure Microsoft Edge
2. Install the Remote Tools for Microsoft Edge (Beta) from the Microsoft Store
3. Activate Developer Mode and enable Device Portal
 Install and configure Microsoft Edge 
1. If you haven't already, on the Windows 10 or later device that you want to debug, install Microsoft Edge from this page.
edge://settings/help2. If you're using a pre-installed version of Microsoft Edge on the host (debuggee) machine, verify that you have Microsoft Edge (Chromium) and not Microsoft Edge (EdgeHTML). A quick way to check is to load  in the browser and confirm that the version number is 75 or higher.
edge://flags3. Go to  in Microsoft Edge.
4. In Search flags, type in Enable remote debugging through Windows Device Portal. Set that flag to Enabled. Then, click the Restart button to restart Microsoft Edge.

	 Install the Remote Tools for Microsoft Edge  	(Beta)
Install the Remote Tools for Microsoft Edge (Beta) from the Microsoft Store.
NOTE
The Get button for the Remote Tools for Microsoft Edge (Beta) may be disabled if you are on Windows 10 or later version 1809 or earlier. To set up the host (debuggee) machine, it must be running Windows 10 version 1903 or later. Update the host (debuggee) machine to acquire the Remote Tools for Microsoft Edge (Beta).

Launch the Remote Tools for Microsoft Edge (Beta) and, if prompted, accept the permissions dialog in the app.
You can now close the Remote Tools for Microsoft Edge (Beta) and you don't need to have it open for future remote debugging sessions.
 Activate Developer Mode and enable Device Portal 
If you are on a WiFi network, make sure the network is marked as either Domain or Private. You can verify the state by opening the Windows Security app, selecting Firewall & network protection and checking if your network is listed as a Domain network or Private network.
If your network is listed as Public, go to Settings > Network & Internet > Wi-Fi, click on your network, and toggle the Network profile button to Private.
Developer settingsNow, open the Settings app. In Find a setting, enter  and select it. Toggle on Developer Mode. You can now turn on the Device Portal by setting Turn on remote diagnostics over local area network connections to On. You can then optionally turn Authentication on so that the client (debugger)
device must provide the correct credentials to connect to this device.
NOTE
If Turn on remote diagnostics over local area network connections. was previously turned on, you must turn it off and turn it on again for Device Portal to work with the Remote Tools for Microsoft Edge (Beta). If a For developers section isn't displayed in Settings, Device Portal may already be turned on, so try restarting the Windows 10 or later device instead.

192.168.86.78 and the connection port is 50080Note the machine IP address and connection port displayed under Connect using:. The IP address in the image below is :

You enter the information on the client (debugger) device in the next section. Open tabs in Microsoft Edge and Progressive Web Apps (PWAs) on the host (debuggee) machine that you want to debug from the client (debugger) machine.
 Step 2: Set up the client (debugger machine)
The client or debugger machine is the device you want to debug from. This device may be your daily development machine, or it may just be your PC or MacBook when working from home.
1. To set up the client (debugger) machine, install Microsoft Edge from this page if you haven't already.
edge://settings/help2. If you're using a pre-installed version of Microsoft Edge on the host (debuggee) machine, verify that you have Microsoft Edge (Chromium) and not Microsoft Edge (EdgeHTML). A quick way to check is to load  in the browser and confirm that the version number is 75 or higher.
edge://inspect3. Go to the  page in Microsoft Edge. By default, you should be on the Devices section.
connection portIP address4. Under Connect to a remote Windows device, enter the IP address and the connection port of the host (debuggee) machine in the text box following this pattern: http://:.
5. Click Connect to Device.

6. If you set up authentication for the host (debuggee) machine, you are prompted to enter the Username and Password for the client (debugger) machine to connect successfully.
 Using https instead of http 
https instead of httpIf you want to connect to the host (debuggee) machine using :
http://IP address:50080/config/rootcertificaterootcertificate.cer1. Go to  in Microsoft Edge on the client (debugger) machine. This automatically downloads a security certificate named .
rootcertificate.cer2. Select . This opens the Windows Certificate Manager tool.
3. Click Install certificate..., make sure Current User is turned on, and then click Next.
4. Click Place all certificates in the following store and click Browse....
5. Select the Trusted Root Certification Authorities store and then click OK.
6. Click Next and then click Finish.
7. If prompted, confirm that you want to install this certificate to the Trusted Root Certification Authorities store.
edge://inspect page, you must use a different connection port8. Now, when connecting to the host (debuggee) machine from the client (debugger) machine using the  value. By default, for desktop Windows,
50080 as the connection port for http. For https, the Device Portal uses 50043the Device Portal uses 
IP address: 50043 on the edge://inspectso follow this pattern: https:// page. Read more about the default ports used by Device Portal.
NOTE
http is 50080 and the default port for https is 50043The default port for , but this isn't always the case, because
Device Portal on desktop claims ports in the ephemeral range (>50,000) to prevent collisions with existing port claims on the device. To learn more, see the Port Settings section for Device Portal on Windows desktop. Step 3: Debug content on the host from the client
If the client (debugger) machine successfully connects to the host (debuggee) machine, the edge://inspect page on the client now displays a list of the tabs in Microsoft Edge and any open PWAs on the host.

Determine the content you want to debug, and then click inspect. The Microsoft Edge DevTools opens in a new tab and screencast the content from the host (debuggee) machine to the client (debugger) machine. You can now use the full power of Microsoft Edge DevTools on the client for content running on the host. Learn more about how to use the Microsoft Edge DevTools here.

 Inspect elements 
For example, try inspecting an element. Go to the Elements tool of your DevTools instance on the client, and hover on an element to highlight it in the viewport of the host device.
You can also tap an element on your host device screen to select it in the Elements tool. Select Select Element on your DevTools instance on the client, and then tap the element on your host device screen.
NOTE
Select Element is disabled after the first touch, so you need to turn it on again every time you want to use this feature.
IMPORTANT
The Event Listeners pane in the Elements tool is blank on Windows 10 version 1903. This is a known issue and the team plans to fix the Event Listeners pane in a servicing update to Windows 10 version 1903.
 Step 4: Screencast your host screen to your client device
By default, the DevTools instance on the client have screencasting turned on, which allows you to view the content on the host device in your DevTools instance on your client device. Click Toggle Screencast to turn this feature on or off.

You can interact with the screencast in multiple ways:
ShiftClicks are translated into taps, firing proper touch events on the device.
Keystrokes on your computer are sent to the device.
To simulate a pinch gesture, hold  while dragging.
To scroll, use your trackpad or mouse wheel, or fling with your mouse pointer.
Some notes on screencasts:
 Screencasts only display page content. Transparent portions of the screencast represent device interfaces, such as the Microsoft Edge Address bar, the Windows 10 or later taskbar, and the Windows 10 or later keyboard.
 Screencasts negatively affect frame rates. Disable screencasting while measuring scrolls or animations to get a more accurate picture of the performance of your page.
 If your host device screen locks, the content of your screencast disappears. Unlock your host device screen to automatically resume the screencast.
 Known Issues
The Event Listeners pane in the Elements tool is blank on Windows 10 version 1903. The team plans to fix the Event Listeners pane in a servicing update to Windows 10 version 1903.
The Cookies pane in the Application panel is blank on Windows 10 version 1903. The team plans to fix the Cookies pane in a service update to Windows 10 version 1903.
The Audits tool, the 3D View tool, the Emulated Devices section in Settings, and the Accessibility tree pane in the Elements tool aren't currently working as expected. The team plans to fix the listed tools in a future update of Microsoft Edge.
The file explorer doesn't launch from the DevTools in the Sources tool or in the Security panel when you remote debug. The team plans to fix the tools in a future update of Microsoft Edge.

 
 Accessibility-testing features
 	6/21/2022 • 3 minutes to read • Edit OnlineTo test your webpages for accessibility, first make a checklist of accessibility aspects to test, and then use the relevant DevTools features to check each aspect.
 Alt-text for images
ACCESSIBILITY ASPECT TO CHECKFEATURE OF DEVTOOLSARTICLE OR SUBHEADINGVerify that images have alt textIssues tool > Accessibility section of reportVerify that images have alt text Keyboard support
ACCESSIBILITY ASPECT TO CHECKFEATURE OF DEVTOOLSARTICLE OR SUBHEADINGVerify keyboard supportInspect tool > Accessibility section of overlayUse the Inspect tool to detect
accessibility issues by hovering over the webpage and Analyze HTML pages using the Inspect toolVerify keyboard supportTab, Shift+Tab, and Enter keysCheck for keyboard support by using the Tab and Enter keysVerify keyboard support: verify that focus is indicatedInspect tool, Styles tab, and Sources toolAnalyze the lack of indication of keyboard focus in a sidebar menuVerify keyboard support: verify that form buttons can be used with the keyboardInspect tool, DOM tree in the Elements tool, and Event Listeners tabAnalyze the lack of keyboard support in a formTabVerify keyboard support: verify key orderElements tool > Accessibility tab > Source Order ViewerTest keyboard support using the Source Order Viewer Text contrast
ACCESSIBILITY ASPECT TO CHECKFEATURE OF DEVTOOLSARTICLE OR SUBHEADINGVerify that text has enough contrast (automatically, for the entire page)Issues tool > Accessibility section of reportVerify that text colors have enough contrastVerify that text has enough contrastElements tool > Styles tab > Color PickerTest text-color contrast using the Color PickerVerify that text has enough contrastInspect tool > Accessibility section of overlay > Contrast rowUse the Inspect tool to detect
accessibility issues by hovering over the webpage and Analyze HTML pages using the Inspect toolACCESSIBILITY ASPECT TO CHECKFEATURE OF DEVTOOLSARTICLE OR SUBHEADINGVerify that text has enough contrast: in the hover stateElements tool > Styles tab > Toggle Element State (shows Force element state checkboxes)Verify accessibility of all states of elementsVerify that text has enough contrast: with dark theme (dark mode) and light themeRendering tool > Emulate CSS
media feature prefers-colorschemeCheck for contrast issues with dark theme and light theme Screen reader support
ACCESSIBILITY ASPECT TO CHECKFEATURE OF DEVTOOLSARTICLE OR SUBHEADINGVerify screen reader support: Verify that input fields have labelsIssues tool > Accessibility section of reportVerify that input fields have labelsVerify screen reader supportInspect tool > Accessibility section of overlay > Name and RoleUse the Inspect tool to detect
accessibility issues by hovering over the webpage and Analyze HTML pages using the Inspect toolVerify screen reader supportElements tool > Accessibility tab > Accessibility TreeCheck the Accessibility Tree for keyboard and screen reader support, and Test accessibility using the
Accessibility tab Vision deficiencies
ACCESSIBILITY ASPECT TO CHECKFEATURE OF DEVTOOLSARTICLE OR SUBHEADINGVerify that the webpage is usable by people with color blindnessRendering tool > Emulate vision deficiencies dropdown listVerify that a page is usable by people with color blindnessVerify that the webpage is usable with blurred visionRendering tool > Emulate vision deficiencies dropdown listVerify that a page is usable with blurred visionVerify that the webpage is usable with UI animation turned off (reduced motion)Rendering tool > Emulate CSS media feature prefers-reducedmotionVerify that a page is usable with UI animation turned off Usable when narrow
ACCESSIBILITY ASPECT TO CHECKFEATURE OF DEVTOOLSARTICLE OR SUBHEADINGVerify that the webpage layout is usable when narrowDevice Emulation toolVerify that the webpage layout is usable when narrow, and Emulate mobile devices (Device Emulation) See also
Overview of accessibility testing using DevTools
Navigate DevTools with assistive technology Accessibility testing
Accessibility principles and best practices
Screen reader

 
 Overview of accessibility testing using DevTools
 	6/21/2022 • 21 minutes to read • Edit OnlineIn this article, we cover some of the features you can use in DevTools to test for accessibility problems. We go through using different features of DevTools to detect the accessibility problems in a demo page, and we discuss how to fix them.
1. Open the accessibility testing demo page in a new window or tab:

2. Right-click anywhere in the demo webpage and then select Inspect. DevTools opens next to the webpage.
 Automated testing by using the Issues tool
When you open the demo page in the browser and open DevTools, notice that some issues are automatically detected in the Issues counter. Click the Issues counter () to open the Issues tool to view the issues and more information:

For this article, we'll focus on the Accessibility section of the Issues tool:

For detailed walkthrough steps, see View the Accessibility section of the Issues tool.
 Automatically checking that input fields have labels 
The first warning displayed is 
Form elements must have labels: Element has no title attribute. Element has no placeholder attribute. When you expand this section and then click the Open in Elements link, the Elements tool opens, with the element highlighted in the DOM tree. The Styles tab shows the CSS that's applied to the element.
For detailed walkthrough steps, see Verify that input fields have labels:

labelIn this case, the HTML has a  element that doesn't work.
<label>Search</label>
<input type="search">
<input type="submit" value="go">
label element here is wrong, because there's no connection between the labelThe use of the  element and
inputthe  element. A valid HTML label would put focus on the search input text box when you click the Search label.
input element in a label element, or adding a forid attribute of the inputYou can solve this problem by either nesting the  attribute that points to an  element. To view a correct connection, click the Other label on the donation form.
You can also click the explanatory links in the Issues tool to get this information:

 Automatically checking that images have alt text 
The other automatically detected problem is that many of the images in the page don't have any alternative text.
Images must have alternate text: Element has no title attributeIf you expand the  warning, you get four instances of images with that problem:

For detailed walkthrough steps, see Verify that images have alt text.
 Automatically checking that text colors have enough contrast 
The Issues tool also reports when two elements on the page don't have enough contrast:

The Issues tool provides detailed explanations of the warning. When you drill down, you get a list of the elements that have this issue. In the Issues tool, clicking a link that points to an element highlights that element on the rendered page:

For detailed walkthrough steps, see Verify that text colors have enough contrast.
 Verify that the webpage layout is usable when narrow 
An important part of accessibility is to make sure that your website works well on a narrow viewport. Many users need to zoom the page to be able to use it, and this means that there isn't much space left. When there isn't enough space, your multi-column layout should turn into a single-column layout, with content placed in an understandable order. This means placing the most important content at the top of the page, and placing additional content further down the page.
By making the browser window narrow and using the arrow keys to scroll the page, you can see that the top navigation bar of the demo page has some accessibility issues. The top navigation bar overlaps the Search form, as shown in the previous image, and that issue needs to be fixed.
 Device Emulation tool to test narrow viewports 
You can simulate a narrow viewport by resizing the browser window, but a better way to test the responsiveness of your design is to use the Device Emulation tool. Here are some features of the Device Emulation tool that help you find accessibility issues of any website:
 Without resizing the browser window, resize the page and test whether your CSS media queries trigger a change in layout.
 Check for dependencies that use a mouse. By default, Device Emulation assumes a touch device. This means that any functionality of your product that relies on hover interaction will not work.
Do visual testing by simulating different devices, zoom levels, and pixel ratios.
Test how your product behaves on unreliable connections or when the user is offline. Showing the most important interactions to a user on a slow connection is also an accessibility consideration.
To learn more about the Device Emulation tool, see Emulate mobile devices (Device Emulation).
 Wavy underlines in the DOM tree indicate automatically detected issues 
Shift+clickThe DOM tree in the Elements tool automatically flags issues directly in the HTML by adding a wavy underline. If you  any element that has a wavy underline, the Issues tool opens:

These issues that were found by the Issues tool are some relatively obvious accessibility problems that can be avoided. Using the Issues tool and its guided explanations to fix them sets you on the way towards an accessible product.
 Limits of automated testing
The Issues tool, Accessibility Insights, and Lighthouse are tools that automatically generate an accessibility report for a webpage. Getting an automated report from such tools is only the beginning of your accessibilitytesting journey.
Accessibility is about human interaction-people with different needs using your products within various technical environments. This testing can't be fully automated, but needs verification by a human navigating the product. In the best scenario, you'd have access to testers with different accessibility needs, and testers using various environments. But you can already do a lot yourself by using the keyboard to navigate and by inspecting different parts of the page.
On the demo page, there are additional issues that automated testing can't detect including:
Issues that arise after you interact with the page.
Issues related to changes in display, such as making the window narrow.
One of those issues is the donation form. When you use a mouse, you can click the different options to donate money. But when you try to use the keyboard to access the donation form, nothing happens. To solve this issue, you need to use the Inspect tool:

 Using the Inspect tool to detect accessibility issues
Use the Inspect tool to detect accessibility issues by hovering over parts of the webpage. The Inspect () tool is in the top-left corner of DevTools. Turn on the Inspect tool by clicking the Inspect tool button:

After you click the Inspect tool button, you can move your pointer over any element on the rendered page. The Inspect tool shows the element's layout as a multicolored flexbox overlay, and shows element details as an information overlay similar to a tooltip:

The Inspect tool's Accessibility section includes a Contrast line, when applicable:

For detailed walkthrough steps, see Identify nested regions using color highlighting. The main article about the Inspect tool is Analyze HTML pages using the Inspect tool.
The upper section of the Inspect tool's information overlay displays the following information:
#336699Layout type; if the element is positioned using a flexbox or grid, you see an appropriate icon (). The name of the element, such as a, h1, or div.
The dimensions of the element, in pixels.
The color, as a color swatch (a small, colored square) and as a formatted value (such as ).
Font information (size and font families). Margin and padding, in pixels.
The Accessibility part of the Inspect overlay is described in the following section.
 Checking individual elements for text contrast, screen reader text, and keyboard support 
The Accessibility section of the Inspect overlay contains the following rows:
Contrast defines whether an element can be understood by people with low vision.
The contrast ratio as defined by the WCAG Guidelines indicates whether there is enough contrast between text and background colors. A green check mark icon indicates there's enough contrast, and an orange exclamation-point icon indicates there's not enough contrast.
 Name and Role indicate what information assistive technology, such as screen readers, will report about the element.
a element. For the element <a href="/">About Us</a>article, img , linkThe Name is the text content of an , the Name shown in the Inspect tool is "About Us".
The Role of the element. The Role is usually the element name, such as , or 
heading. The div and span elements are represented as generic.
 Keyboard-focusable indicates whether users can reach the element using input devices other than a mouse.
A green check mark icon indicates that the element is keyboard-focusable.
A gray circle with diagonal line indicates that the element isn't keyboard-focusable.
For detailed walkthrough steps, see Check individual elements for text contrast, screen reader text, and keyboard support.
 Using the Inspect tool to hover over the webpage to highlight the DOM and CSS 
When using the Inspect tool, clicking an element on the rendered page opens the Elements tool. The DOM tree shows the HTML of the element, and Styles shows the CSS properties that are applied to the element:

When using the Inspect tool, as you hover over different parts of the rendered page with Elements open, you'll notice that the DOM tree automatically refreshes.
For detailed walkthrough steps, see Use the Inspect tool to hover over the webpage to highlight the DOM and CSS. The main article about the Inspect tool is Analyze HTML pages using the Inspect tool.
 Verify keyboard support by using the Tab and Enter keys
Not all people use pointer or touch devices, and some people may have low vision. To cater for these scenarios, ensure that UIs work with keyboards.
Tab or Shift+TabTabEnterYou can test using a keyboard to navigate the page, by using  to jump from element to element. If you press  on the demo page, the first thing that receives focus is the Search form in the page header. Pressing  even allows you to submit the form, so that works, despite the label issue we discovered earlier when using the Issues tool.
For detailed walkthrough steps, see Check for keyboard support by using the Tab and Enter keys.
Tab instead of EnterWhen you press , the next element that gets focus is the first More link in the content section of the page, as indicated by an outline:

After you go past the last More link, the page scrolls up, and it's unclear which element has focus.
#catsIf you look to the bottom left of the screen or if you use a screen reader, you can tell that the blue Cats link in the sidebar navigation menu has focus, because the browser shows the URL :

TabEnterPressing  again takes you to the input text box of the donation form. However, you can't reach the 50, 100 or 200 buttons above the input text box. Also, when focus is on that input text box, pressing  doesn't submit the form:

Tab again puts focus on the top navigation bar, where you can press EnterPressing  to go to a different
Tab or Shift+Tabsection of the page or a different page of the site. You know which element you are on, because there's a focus outline. To click a link in the top navigation bar, use  to put focus on a link, and then press 
Enter:

We found some issues here to fix:
TabTabThe sidebar navigation menu doesn't show users where the  focus is, when using keyboards to move around on the page.
On the donation form, the **50, 100, ** and 200 buttons and form submit functionality doesn't work when using the keyboard.
TabThe keyboard tab order is incorrect. The  key navigates through all the More links on the page before the sidebar navigation menu. This  order isn't helpful because the sidebar navigation is intended to take you to the different sections of that page.
Let's analyze these problems using DevTools.
 Analyze keyboard accessibility issues using DevTools
 Analyzing the lack of indication of keyboard focus in the sidebar menu 
aTo find out why the sidebar navigation isn't optimized as expected for use with keyboards, start by using the Inspect tool to highlight a link in the sidebar navigation menu, and then drill down in the DOM tree to the element:

styles.cssIn the Styles tab, you can see the CSS that's applied to the link, and if you click the link to , the file opens in the Sources tool:

hoverfocusIn the above example, the styles of the page include a  state on the menu item when you use a mouse, but there's no  state in the CSS for keyboard users.
outline: noneAlso, in this example, the links use . This style is used to remove the outline that's automatically added by browsers to elements when they have focus and keyboards are used. To avoid this problem, don't use 
outline: none.
For detailed walkthrough steps, see Analyze the lack of indication of keyboard focus in a sidebar menu.
 Analyzing the lack of keyboard support in the donation form 
divThe buttons on the donation form are implemented using the  element, which isn't recognized by automated testing tools as a control on a form.
generic (representing div or spanTo investigate this, you can use the Inspect tool to hover over the donation form's buttons. The result is that none of them are keyboard-accessible, as indicated by the gray ring on the Keyboard-focusable line of the information overlay. As shown in the Name and Role lines of the information overlay, the buttons of the donation form also have no name, and have a role of  elements), which means they aren't accessible to assistive technology:

For detailed walkthrough steps, see Analyze the lack of keyboard support in a form.
If you click the Donate button, the Inspect tool takes you to the Elements tool and shows you the form's HTML.
<div class="donationrow">
    <div class="donationbutton">50</div>     <div class="donationbutton">100</div>
    <div class="donationbutton">200</div>
</div>
<div class="donationrow">
    <label for="freedonation">Other</label>
    <input id="freedonation" class="smallinput">
</div>
<div class="donationrow">
    <div class="submitbutton">Donate</div>
</div>
label and inputinput text box is keyboard-accessible. The rest of the form uses divThe use of the  elements are valid, which result in the label working as intended and the  elements, which are easy to style but have
no semantic meaning.
Next, let's analyze the form's JavaScript functionality. In Elements, click the Event Listeners tab to analyze the form's JavaScript:

buttons.js:18On the Event Listeners tab, click the  link to open the Sources tool, and then inspect the JavaScript that's responsible for the form's functionality:

click events with buttons is recommended because clickUsing  events work with both mouse pointers and
divdivkeyboards. However, because a  element isn't keyboard-accessible, and the Donate button is implemented as a  element, this JavaScript only runs when a mouse is used.
divbuttonUsing a  as a button is a classic example where extra JavaScript is needed to create functionality that  elements provide. As a result, this leads to an experience that is inaccessible.
 Checking the Accessibility Tree for keyboard and screen reader support 
Using the Inspect tool to individually check each element on the page is time-consuming. Instead, use the Accessibility tab to navigate the page's Accessibility Tree. The Accessibility Tree indicates what information the page provides to assistive technology such as screen readers:

genericAny element in the tree that doesn't have a name, or that has a role of , is a problem, because that element won't be available to keyboard users or to people using assistive technology.
For detailed walkthrough steps, see Check the Accessibility Tree for keyboard and screen reader support.
 Analyzing the order of keyboard access to sections of the page 
Another issue is the unclear tab order on the page. Keyboard users reach the sidebar navigation menu only after tabbing through all the More links throughout the entire page. In this example, the sidebar navigation menu is intended to be a shortcut to different sections of that page. This tab order leads to a poor user experience.
TabtabindexThe reason for the confusing  order is that it is determined by the source order of the document. The tab order can also be modified by using the  attribute on an element which takes that element out of the default source order.
In the source code of the document, the sidebar navigation menu appears after the main content of the page. The sidebar navigation menu appears above the main content of the page only because the sidebar navigation menu has been positioned using CSS.
The source order of a document is important for assistive technology, and can be different than the order in which elements appear on the rendered page. Using CSS, you can re-order page elements in a visual way, but that doesn't mean that assistive technology such as screen readers would represent page elements in the same order as that CSS.
headerYou can test the order of page elements by using the Source Order Viewer in the Accessibility tab. Scroll down all the way and select the Show Source Order checkbox. Now, when you navigate the DOM tree in the Elements tool, such as clicking the  element, numeric overlays are displayed on sections of the rendered page which represent the source order:

For detailed walkthrough steps, see Test keyboard support using the Source Order Viewer.
 Testing contrast of text colors in various states
The Inspect tool reports accessibility issues for one state at a time. First, we'll describe the limitation of using the Inspect tool to view only the static state of a page element. Then we'll explain how to inspect other states of a page element, by clicking :hov (Toggle Element State) on the Styles tab, to show the section of checkboxes labeled Force element state.
 Checking text color contrast in the default state 
In addition to the automatic color-contrast tests in the Issues tool, you can also use the Inspect tool to check whether individual page elements have enough contrast. If contrast information is available, the Inspect overlay shows the contrast ratio and a checkbox item.
A green check mark icon indicates there's enough contrast, and an orange alert icon indicates not enough contrast. For example, the links in the sidebar navigation menu have enough contrast, as indicated by a green check mark icon:

An element that doesn't have enough contrast is flagged by a warning in the Inspect overlay. For example, the green Dogs list item in the Donation status section doesn't have enough contrast, as indicated in the Inspect overlay. The overlay shows an orange circled exclamation mark:

Using the Inspect tool in this way doesn't fully test your elements. Elements on the page may have different states, all of which need to be tested. For example, if you hover the mouse over the sidebar navigation menu, notice the animation which changes the color of the links:

 Verify accessibility of all states of elements, such as the contrast on hover 
When using DevTools, you'll need to simulate all states of your element, because the Inspect tool doesn't display information for all states at the same time.
hoverhover state, because the hoverIn this example, when using the Inspect tool, you can't reach the  state of the Cats link on the sidebar navigation menu to analyze the contrast ratio in a  state in your styles isn't
triggered. Instead, you need to simulate the state of the Cats menu item, by using the state simulation in the Styles tab.
For detailed walkthrough steps, see Verify accessibility of all states of elements.
ahover state in the CSS. In this case, the a element has a hoverTurn on the Inspect tool and then in the rendered page, click the blue Cats link in the sidebar navigation menu. The Elements tool opens, with the  element selected in the DOM tree. If needed, in the DOM tree, navigate to the element that has a  state:

On the Styles tab, click the :hov (Toggle Element State) button. Then use the Force element state checkboxes to select which state to simulate:

Select the :hover checkbox. A yellow dot now appears next to the DOM element, indicating that the DOM element has a simulated state. Also, the Cats link in the sidebar navigation menu is now highlighted in the page, as if the mouse pointer were hovering over it:

After the simulated state is applied, you can use the Inspect tool again to check the contrast of the element when the user hovers over it. In this case, the contrast isn't high enough:

:focusState simulation is also a good way to check whether you considered different user needs. For the sidebar navigation menu, you can detect that the  state has a contrast issue.
 Use the Rendering tool to test accessibility for visual impairment
 Check contrast issues with dark theme and light themes 
Another consideration when it comes to color accessibility is that there could be different themes that you need to test for contrast issues. Most operating systems have a dark mode and a light mode. Your webpage can react to these different settings using CSS media queries.
This demo page has a light and a dark theme. You can test both themes without changing your operating system, by using Dark or light color scheme simulation in the Rendering tool. So far, this article looked at the demo page with an operating system using a dark theme setting. If we instead simulate a light scheme and then refresh the page, the Issues tool shows six color contrast problems instead of two.
For detailed walkthrough steps, see Check for contrast issues with dark theme and light theme.
When switching to a light theme in the Rendering tool, the following issues are reported:

 Verify that the webpage is usable by people with color blindness 
The different donation states use color (red, green, yellow) as the only means to differentiate between the states of funding. You can't expect all of your users to experience these colors as intended, though. If you use the vision deficiencies emulation feature of DevTools, you can find out that this isn't good enough, by simulating how people with different vision would perceive your design. For detailed walkthrough steps, see Verify that a page is usable by people with color blindness:

 Verify that the webpage is usable with blurred vision 
Another interesting feature of the Rendering tool is that you can simulate blurred vision. If we select the Blurred vision option from the Emulate vision deficiencies dropdown list, we can see that the drop shadow on the text in the upper menu makes it hard to read the menu items. For detailed walkthrough steps, see Verify that a page is usable with blurred vision:

	 Verify that the page is usable with UI animation turned off  	(reduced motion)
Another setting that operating systems come with these days are a way to turn off animations. Animations can help the usability of a product, but they can also cause a lot of problems, ranging from confusion to nausea. That's why your products should not show animations to users who turned them off in the operating system. By using a CSS media query, you can check whether the user wants to see animations, and turn them off accordingly. And, much like with dark and light mode, there is a way to simulate reduced motion using DevTools.
In the demo page here, turning off animations will stop the smooth scrolling of the page when you click different parts of the sidebar navigation menu. This is achieved by wrapping the smooth scrolling setting in CSS in a media query:

@media (prefers-reduced-motion: no-preference) {   html {
    scroll-behavior: smooth;
  }
}
This CSS media query conditionally runs the "smooth scrolling" animation. But the animation of the top navigation bar, sidebar navigation menu, and More links still run, even when the user doesn't want to see animations. Those other animations need to be conditionally run, such as by adding additional media queries.
For detailed walkthrough steps, see Verify that a page is usable with UI animation turned off.
 What to do next?
We've covered quite a few tools you can use to make sure that you catch accessibility problems in your products. Such tools range from automated checks and manual detail checks to simulation of different states and environments. These tools are summarized in Accessibility-testing features. Automated tools can't find all the problems in a product, because many of the accessibility barriers show up only during interactive use.
None of these tools can replace a proper round of testing your products with people that use assistive technologies and following a plan to check for all the required tests. You can also use the Assessments feature of Accessibility Insights. You may need to perform additional checks such as:
Testing when zoomed-in.
Testing with screen readers.
Testing with voice recognition.
Testing in high-contrast mode.
Another way to find out what to do to improve your webpage is to use the webhint extension for Visual Studio Code. This extension flags the readily detectable accessibility problems in your source code and gives insights on how to fix them:



 
 
Use the Inspect tool to detect accessibility issues by hovering over the webpage
 	6/21/2022 • 4 minutes to read • Edit OnlineThe Inspect tool displays information about individual elements as you hover over the rendered webpage, including accessibility information. In contrast, the Issues tool automatically reports issues for the entire webpage.
The Inspect tool button () is in the upper-left corner of DevTools. When you click the Inspect tool button, the button turns blue, indicating that the Inspect tool is active.
When the Inspect tool is active, hovering over any element on the rendered webpage displays the Inspect overlay. This overlay displays general information and accessibility information about that element. The Accessibility section of the Inspect overlay displays information about text-color contrast, screen reader text, and keyboard support.

The main article about the Inspect tool is Analyze HTML pages using the Inspect tool.
 Check individual elements for text contrast, screen reader text, and keyboard support
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. Click the Inspect () button in the top-left corner of DevTools so that the icon is highlighted (blue).

4. Hover over any element in the rendered demo webpage. The Inspect tool shows an information overlay below the element within the rendered webpage.

The bottom part of the Inspect overlay has an Accessibility section that contains the following information:
 Contrast defines whether an element can be understood by people with low vision. The contrast ratio as defined by the WCAG Guidelines indicates whether there is enough contrast (a green check mark icon) or not enough (an orange exclamation-point icon).
a element. For the element <a href="/">About Us</a>article, img , link, or headingName and Role are what assistive technology such as screen readers will report about the element.
The Name is the text content of an , the Name shown in the Inspect tool is "About Us".
The Role of the element. This is usually the element name, such as .
div and span elements are referred to as genericThe .
Keyboard-focusable indicates whether users can reach the element regardless of input device.
A green check mark icon indicates that the element is keyboard-focusable.
A gray circle with diagonal line indicates that the element isn't keyboard-focusable.
 Additional information in the Inspect overlay
The top part of the Inspect overlay, which is above the Accessibility section, lists the following details of the element.
h1, h2, or div#336699Layout type. If the element is positioned using a flexbox or grid, an icon () is displayed.
Name of the element, such as .
The dimensions of the element in pixels.
The color as a color swatch (or a small, colored square) and as a string (such as ).
Font information, such as size and font families. Margin and padding in pixels.
 Identify nested regions using color highlighting
In addition to the information overlay, the Inspect tool also provides region-coloring that's similar to hovering in the DOM tree in the Elements tool.
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. Click the Inspect button () in the top-left corner of DevTools, so that the button is highlighted (blue).
4. Hover over different parts of the rendered demo webpage.
Each element in the webpage is now displayed with a multicolor overlay. This multicolor overlay can display nested regions inside of an element.
5. For example, hover over the left margin of Cats.
The Inspect tool highlights several rectangular portions of the Cats section with different colors, showing the layout that results from the CSS flexbox definitions on your webpage:

If you want to configure the grid overlay or flexbox overlay, in the Elements tool, select the Layout tab. See Inspect CSS Grid.
 Use the Inspect tool to hover over the webpage to highlight the DOM and CSS
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. In DevTools, click the Inspect button () in the top-left corner, so that the button is highlighted (blue).
4. Select the Elements tool.
5. With the Inspect tool active, hover over different parts of the rendered webpage. In the Elements tool, the HTML DOM tree automatically expands to show information about the element you hover over. Hovering doesn't cause the Styles pane to update.
6. In the rendered webpage, click any element.
The Elements tool automatically opens and displays the HTML of the element in the DOM tree. The Elements tool also displays the applied CSS on the element, in the Styles pane. Clicking an element on the rendered webpage turns off the Inspect tool.

After clicking an element in the rendered webpage, you can then use the Accessibility tab (near the Styles tab) to view the Accessibility Tree and use the Source Order Viewer.
 See also
Analyze HTML pages using the Inspect tool
Inspect a node
Check text-color contrast in the default state using the Inspect tool
Overview of accessibility testing using DevTools
 
 Test accessibility using Lighthouse
 	6/21/2022 • 2 minutes to read • Edit OnlineYou can use Lighthouse from within DevTools to audit the accessibility of a page and generate a report. You can use the Lighthouse tool to determine:
Whether a page is properly marked up for screen readers.
Whether the text elements on a page have sufficient contrast ratios using the Color Picker. See Test textcolor contrast using the Color Picker.
The Lighthouse tool provides links to content hosted on third-party websites. Microsoft is not responsible for and has no control over the content of these sites and any data that may be collected.
To audit a page using the Lighthouse tool:
1. Go to the URL that you want to audit.
2. In DevTools, select the Lighthouse tool. Configuration options are displayed:

3. For Device, select Mobile if you want to simulate a mobile device. This option changes your user agent string and resizes the viewport. This option can affect the audit results.
4. In the Categories section, select Accessibility.
5. Click Generate report. After 10 to 30 seconds, DevTools displays a report. The report gives tips on how to improve the accessibility of the page:

6. Select an item in the report to learn more about it.

7. Click the Learn more link to view the documentation of the issue:

+8. To return to the configuration options, in DevTools, click Perform an audit ().
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Navigate DevTools with assistive technology
 	6/21/2022 • 13 minutes to read • Edit OnlineThis article helps you use DevTools through the keyboard and through assistive technology such as screen readers. This guide walks you through the tools and tabs which are the most accessible, and highlights issues you may encounter.
For DevTools features related to improving the accessibility of a web page, see Accessibility-testing features and Overview of accessibility testing using DevTools.
 Tabbed tool panels containing tabs and pages 
For the terminology of tabs, tools, and panels, see Tabbed tool panels containing tabs and pages in Overview of DevTools.
Technically, the tabs are an ARIA tablist.
 Keyboard shortcuts
For the default keyboard shortcuts for DevTools, see Keyboard shortcuts. Be sure to bookmark it and refer back to it as you explore the different tools.
 Open DevTools
In Microsoft Edge, you can open DevTools by using the mouse or keyboard, in any of the following ways. Which tool is opened depends on how you open DevTools.
Main ways:
ACTIONRESULTING TOOLRight-click any item on a webpage, and then select Inspect.The Elements tool, with the DOM tree expanded to show the right-clicked page element.Shift+I (Windows, Linux) or CommandPress Ctrl ++
Option + I (macOS).The previously used tool, or the Welcome tool.F12Press .The previously used tool, or the Welcome tool.Additional ways:
ACTIONRESULTING TOOLOn the Microsoft Edge toolbar, select Settings and more ( ) > More tools > Developer tools.The previously used tool, or the Welcome tool.Shift+J (Windows, Linux) or CommandPress Ctrl ++
Option + J (macOS).The Console tool.Shift+C (Windows, Linux) or CommandPress Ctrl ++
Option + C (macOS).<body>The Elements tool, with the DOM tree expanded to show the  element.ACTIONRESULTING TOOLShift+F10Up Arrow and then EnterPress  to open the right-click menu. To select the Inspect command, press .<html>The Elements tool, with the DOM tree expanded to show the  element.TabUp ArrowEnterPress  and Shift + Tab to put focus on a page element. Then press Shift + F10 to open the right-click menu. To select the Inspect command, press and then .The Elements tool, with the DOM tree expanded to show the focused page element. Navigate between tools
You can move among the tools by using the keyboard navigation keys or by using the Command Menu.
 Navigate by keyboard 
Ctrl+] (Windows, Linux) or Command+]Ctrl+[ (Windows, Linux) or Command+[Tab or Shift+TabWith DevTools open, press  (macOS) to move focus to the next tool on the main toolbar.
Press  (macOS) to move focus to the previous tool on the main toolbar.
Press  repeatedly until focus moves to the tabs of the main toolbar or drawer toolbar, and then use the arrow keys to move among the tools.
 Known issues 
 Some tools, such as the Console and Performance tools, may move focus into the tool's content area as soon as the tool is selected. This may make navigating by arrow keys difficult.
 The name of the selected tool is announced, but only after announcing the focused content in the tool. This sequence of announcements may make it easy to miss the name of the tool.
 Navigate by Command Menu 
To select a specific tool, use the Command Menu. In the Command Menu, a tool is called a panel or drawer item.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P1. With DevTools open, press  (macOS) to open the Command Menu.
The Command Menu is a fuzzy-search autocomplete combobox.
Down Arrow2. Type the name of a panel (tool), and then use the  on the keyboard to navigate to the correct option.
Enter3. Press  to run a command.
To open the Elements tool:
1. Open the Command Menu.
elements, select the Panel > Show Elements command, and then press Enter2. Start typing .
Opening a tool this way puts focus in the content area of the tool. In the case of the Elements tool, focus moves into the DOM Tree.
 The Elements tool
 Inspect an element on the page 
1. Go to the element you want to inspect, using the cursor in the screen reader.
2. Right-click the element and then select the Inspect option. This opens the Elements tool and focuses the element in the DOM Tree.
The DOM Tree is laid out as an ARIA tree. For an example, see Navigate the DOM Tree with a keyboard.
 Copy the code for an element in the DOM Tree 
1. Right-click a node in the DOM Tree.
2. Expand the Copy option.
3. Select Copy outerHTML.
 Known issues 
outerHTML Copy outerHTML often doesn't select the current node, but instead selects the parent node. However, the contents of the element should still be in the copied .
 Modify the attributes of an element in the DOM Tree 
EnterTabWith focus on a node in the DOM Tree, press  to make it editable.
Press  to move between attribute values. When you hear "space", you're inside of an empty text input, and can type a new attribute value.
Ctrl+Enter (Windows, Linux) or Command+Enter Press 	 (macOS) to accept the change and hear the entire contents of the element.
 Known issues 
 When you type into the text input, you get no feedback. If you make a typo and use the arrow keys to explore your input, you also get no feedback. The easiest way to check your work is to accept the change, then listen for the entire element to be announced.
 Edit the HTML of an element in the DOM Tree 
EnterTab to move between attribute values. When you hear the name of the element, for instance, h2With focus on a node in the DOM Tree, press  to make it editable.
Press , you're inside of a text input, and you can change the type of the element.
Ctrl+Enter (Windows, Linux) or Command+Enter	 Press 	 (macOS) to accept the change.
Ctrl+Enter (Windows, Linux) or Command+Enterh3For example, when you type h3 and then press  (macOS), the start and end tags of the  element change.
 Tabs in the Elements tool
The Elements tool contains additional tabs for inspecting things like the CSS applied to an element or the relevant place in the accessibility tree.
TabRight ArrowWith focus on a node in the DOM Tree, press  until you hear that the Styles pane is selected.
Press  to explore other available tabs.
href attributes into focusable links, so you may need to press TabThe DOM Tree turns elements with  more than once to reach the Styles pane.
 Known issues 
The DOM Breakpoints and Properties tabs aren't keyboard-accessible.
 Styles pane 
The Styles pane has controls to filter styles, toggle element states (such as :active and :focus), toggle classes, and add new classes. There's also a powerful style inspection tool to explore and modify styles currently applied to the element that has focus in the DOM Tree.
<header>The key concept to understand about the Styles pane is that it only shows styles for the currently selected node in the DOM Tree. For example, suppose you're done inspecting the styles of a  node, and now you
<footer> node. To do that, you first need to select the <footer>want to look at the styles for a  node in the
DOM Tree.
footerYou might find it faster to use the Inspect workflow to inspect a node that is in the general vicinity of the node (such as a link within the footer), which focuses the DOM Tree, and then use your keyboard to navigate to the exact node in which you're interested.
 Navigate the Styles pane 
Because all of the style tools connect in one way or another back to the Styles pane, it makes sense to become an expert in this tool first.
TabTabWith focus on the Styles pane, press  to move focus inside and explore the contents.
element.style {}Press  until the first style becomes active. If you're using a screen reader, this first style is announced as .
Down Arrowmain.css:233 .card__img {} Press  to navigate the list of styles in order of specificity. A screen reader announces each style starting with the name of the CSS file, the line number on which the style appears, and the name of the style. For example, .
EnterTabPress  to inspect a style in more detail. Focus begins on an editable version of the style name.
Press  to move between editable versions of each CSS property and the corresponding values. At the end of each style block is a blank editable text field which you can use to add additional CSS properties.
Tab to move through the list of styles, or press Escape You can continue to press 	 to exit the mode and go back to navigating by arrow keys.
For additional shortcuts, see Styles pane keyboard reference.
 Kn ow n issu es 
 If you use the Filter editable text field, you can't navigate the list of styles.
 Toggle element state 
:active or :focusTo toggle the state of an element, such as :
Tab1. Go to the Styles pane and press  until the Toggle Element State button has focus.
Enter2. Press  to display the Force element state section, which contains checkboxes.
Tab until the first state, :active3. Press , has focus.
Spacebar to enable it. If the currently selected element in the DOM Tree has an :active4. Press  style, it is now applied.
Tab5. Hold  to explore all of the available states.
 Add an existing class 
The Element Classes button is next to the Toggle Element State button. To move the focus to the Element
Tab and then press EnterClasses button, press . Focus moves into an edit text field labeled Add new class.
The Element Classes button is primarily used for adding existing classes to an element. For example, if your
.clearfix, you can press .Down Arrow to find the .clearfixEnterstylesheet contained a helper class named  inside of the edit text field to display a suggestion list of classes and use the  suggestion. Or type the class name out yourself and press  to apply it.
 Add a new style rule 
TabEnterTabAdjacent to the Element Classes button is the New Style Rule button. To move the focus to it, press  and then press . Focus moves into an editable text field inside of the style inspector. The initial text content of the field is the tag name of the element that is selected in the DOM Tree. You can type any class name you want into this field and then press  to assign CSS properties to it.
 Computed tab 
TabWith focus on the Computed tab, press  to move focus inside and explore the contents. Within the
Computed tab there are controls for exploring which CSS properties are actually applied to an element in order of specificity.
 Explore all computed styles 
TabPress  until you reach the collection of computed styles. Computed styles are presented as an ARIA tree. Expanding a listbox reveals which CSS selectors are applying the computed style. These selectors are organized by specificity. A screen reader announces the computed value, which CSS selector is currently matching, the filename of the stylesheet that contains the selector, and the line number for the selector. Known issues
 If you use the Filter text field, you're no longer able to inspect styles.
 Event Listeners tab 
To inspect the event listeners that are applied to an element, select the Elements tool and then select the Event Listeners tab (grouped with the Styles tab).
Right ArrowWhen focus is on the Styles tab, press  to navigate to the Event Listeners tab.
 Explore event listeners 
Event listeners are presented as an ARIA tree. You can use the arrow keys to navigate them. A screen reader announces the name of the DOM object that the event listener is attached to, as well as the file name where the event listener is defined and the line number.
 Accessibility tab 
TabSelect the  key to move around within the Accessibility tab in the Elements tool.
The Accessibility tab is near the Styles tab. On the Accessibility tab, there are controls for exploring the accessibility tree, the ARIA attributes applied to an element, and the computed accessibility properties. See Test accessibility using the Accessibility tab.
 Accessibility Tree 
treeitemdiv and spanThe Accessibility Tree is presented as an ARIA tree where each  corresponds to an element in the DOM. The tree announces the computed role for the selected node. Generic elements like  are announced as "GenericContainer" in the tree. Use the arrow keys to traverse the tree and explore parent-child relationships.
Known issues
 The type of ARIA tree used by the Accessibility tab may not be properly exposed in Microsoft Edge for macOS screen readers like VoiceOver. Subscribe to Chromium issue #868480 to be informed about progress on this issue.
 Each of the ARIA Attributes and Computed Properties sections are marked up as an ARIA tree, but each section doesn't currently have focus management, and isn't keyboard-operable.
 Persisting the Inspect tool's tooltip and grid color overlay
When you click the Inspect tool button and move around in the rendered webpage, the Inspect tooltip changes.
Ctrl+AltCtrl+OptionTo keep the current tooltip and grid color overlay displayed, press and hold  (Windows, Linux) or  (macOS) while you move around in the rendered webpage.
This technique can be helpful when using a screen magnifier or other assistive technologies. If you don't make the Inspect tool's tooltip persist, the hover overlay constantly changes when you use the Inspect tool ().
See Analyze pages using the Inspect tool.
 The Lighthouse tool
Lighthouse runs a series of tests against a site to check for common issues related to performance, accessibility, SEO, and a number of other categories.
 Configure and generate a report 
1. When the Lighthouse tool is first opened in DevTools, focus is placed on the Generate report button. By default, the form is configured to run reports for every category using mobile emulation on a simulated 3G connection.
Shift+Tab2. To change the report settings, use  to put focus on Lighthouse settings, or navigate back in Browse mode.
Enter3. When you're ready to run the report, navigate back to the Generate report button and press .
4. Focus moves into a modal window with a Cancel button which allows you to exit the audit. You may hear a series of earcons as the audit runs and refreshes the page multiple times.
 Known issues 
fieldsetThe different sections of the configuration form aren't currently marked up with a  element. It may be easier to navigate them in Browse mode to figure out which controls are associated with each section.
There is no earcon or live region announcement when the audit is finished running. Generally the audit takes about 30 seconds, after which you should be able to navigate to the results. Using Browse mode may be the easiest way to reach the results.
 Navigate the Lighthouse report 
detailsdetailsThe Lighthouse report is organized into sections that correspond with each of the audit categories. The report opens with a list of scores for each category. These scores are also links which you can use to skip to the relevant sections. Within each section are expandable  elements, which contain information relating to passed or failed audits. By default, only failing audits are shown. Each section ends with a final  element which contains all of the passed audits.
Shift+TabTo run a new audit, use  to exit the report and select the Generate report button.
 See also
Keyboard shortcuts
Customize keyboard shortcuts
Run commands in the Command Menu
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Rob Dodson (Contributor, Google WebFundamentals).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Track which element has focus
 	6/21/2022 • 2 minutes to read • Edit OnlineTab and Shift+TabSuppose that you're testing the keyboard navigation accessibility of a page. When you navigate the rendered webpage by pressing , the focus ring indicator in the webpage sometimes disappears,
because the element that has focus is hidden. The solution is to create a Live Expression in the DevTools Console, and watch that, and right-click it to expand the DOM tree in the Elements tool.
TabThat's how you can determine which item in the page you have navigated to using the  key, even when the element that has focus is hidden and not displayed on the rendered page.
TabTabAs you  through the page, the DOM tree doesn't automatically update to select the corresponding DOM tree node. But the Live Expression output changes, at least when you go from one kind of page element to another. To see which exact element the  key has focused (not just what kind of element), you right-click the result of the Live Expression (below the Live Expression), to go to the particular node of the DOM tree in the Elements tool.
 Defining a Live Expression to be able to determine which DOM node has focus
TabTo track the -focused element in the Console in DevTools by using a Live Expression:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. In DevTools, open the Console.
4. Click Create live expression ().

5. Type the following: document.activeElement
6. Click outside of the Live Expression UI to save the Live Expression.
Tab or Shift+Tab7. Click in the rendered webpage to put focus on it, and then press  to move focus around in the rendered webpage.
document.activeElementTabThe value that's displayed below  is the result of the expression. It doesn't visibly change every time you  to a new UI item in the webpage; it visibly changes when you move to a new type of page element.
document.activeElementSince that expression  is updated live in realtime, so that its output result always represents the currently focused element, you now have a way to always keep track of which element has focus, in the DevTools Console. You need to right-click the Live Expression output, as follows:
document.activeElement8. In the DevTools Console, hover on the result of the Live Expression (below the Live Expression).
The focused element is highlighted in the viewport (that is, in the rendered webpage).
document.activeElement9. In the DevTools Console, right-click the result of the Live Expression (below the Live Expression), and then select Reveal in Elements panel.
Tab and Shift+TabIn the Elements tool, the DOM tree automatically expands and selects the active element (DOM tree node). The active element is the DOM tree representation of the webpage item that you navigated to by pressing .
10. To create a variable reference to the node that you can use in the Console, right-click the Live Expression result and then select Store outerHTML as global variable.
<a href="#alpacas">Alpacas</a>In the Console, new output is produced, such as .
11. Right-click the new output, and then select Copy > Copy element.
 See also
 Analyze the lack of indication of keyboard focus in a sidebar menu
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Automatically test a webpage for accessibility issues
 	6/21/2022 • 4 minutes to read • Edit OnlineThe Issues tool includes an Accessibility section that automatically reports issues such as missing alternative text on images, missing labels on form fields, and insufficient contrast of text colors. The Issues tool is within the Drawer at the bottom of DevTools. This article uses the accessibility-testing demo webpage to step through using the Accessibility section of the Issues tool.
There are several ways to open the Issues tool, such as:
ShiftEnterClick the Issues counter () in the upper right of DevTools.
In the Elements tool, in the DOM tree, press  while clicking a wavy underline on an element.
 In the Command Menu, type issues, select Show Issues, and then press .  View the Accessibility section of the Issues tool
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
In the upper right, the Issues counter () appears. The Issues counter is a speech-bubble icon along with the number of automatically detected issues.

3. Refresh the page, because some issues are reported based on network requests. Notice the updated count in the Issues counter.
4. Click the Issues counter. The Issues tool opens, in the Drawer at the bottom of DevTools.

5. On the Issues tab, expand the Accessibility section.
 Verify that input fields have labels
To check whether input fields have labels connected to them, use the Issues tool, which automatically checks the entire webpage and reports this issue in the Accessibility section.
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. In the upper right, click the Issues counter (). The Issues tool opens, in the Drawer at the bottom of DevTools.
4. On the Issues tab, expand the Accessibility section.
5. Expand the Warning 
Form elements must have labels: Element has no title attribute Element has no placeholder attribute.
6. Click the Open in Elements link.

The Elements tool opens, with the element highlighted in the DOM tree. The Styles pane displays the applied CSS rules for the element.
The following code is now displayed:
<label>Search</label>
<input type="search">
<input type="submit" value="go">
labelIn the above code, the  element is used incorrectly, because there is no connection between the 
label element and a particular input element. To connect the label element to a specific inputelement, use any of the following options:
input element within the labellabel element, add a for attribute that matches an id attribute of the inputNest the  element.
In the  element.
There's also another way to test for lack of connections between elements:
<label>Search</label>1. In the Elements tool, select the  element in the DOM tree.
searchOn the webpage, notice that focus only appears on the Search label, and not the input text box. The correct implementation would put focus on the  input text box and the Search label.
2. As an example of a correct connection, select the Other label on the donation form.
for and idA focus-indicator box correctly appears on the input text box next to the Other label, because there are matching  attribute values.
Ctrl (Windows, Linux) or Command3. In the Issues tool, click the Further reading to learn more about the issue. To open the link in a new tab, press  (macOS) while clicking the link.

 Verify that images have alt text
Basic accessibility testing requires making sure alternative text (also called alt text) is provided for images.
To automatically check whether alt text is provided for images, use the Issues tool, which has an Accessibility section. The Issues tool is located in the Drawer at the bottom of DevTools.
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. In the upper right of DevTools, click the Issues counter. The Issues tool opens.
Images must have alternate text: Element has no title attribute4. On the Issues tab, expand the warning 
. There are four instances of images that lack alt text:

See Images must have alternate text.
 Verify that text colors have enough contrast
To automatically check whether text colors have enough contrast, use the Issues tool, which has an Accessibility section. The Issues tool is located in the Drawer at the bottom of DevTools.
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. In the upper right of DevTools, click the Issues counter. The Issues tool opens.
There might be warnings that two elements on the demo webpage don't have enough contrast.

4. Depending on your settings, the Issues tab might have a warning like Users may have difficulties reading text content due to insufficient color contrast. You can expand that warning, and then expand Affected resources. A list of elements appears with a list of elements that don't have enough contrast.
li.high5. Click the  element. In the rendered webpage, the Dogs link in the Donate section is highlighted, displaying a small information overlay. This is the same overlay that appears when you hover over an element in the DOM tree in the Elements tool.

 Wavy underlines in the DOM tree indicate automatically detected issues 
ShiftThe DOM tree in the Elements tool flags issues directly in the HTML with wavy underlines. These issues are reported by the Issues tool. When you press  while clicking any element with a wavy underline, the Issues tool opens.
Shift while clicking the element <input type="search">1. In the Elements tool, in the DOM tree, press ,
inputwhich has a wavy line under . The Issues tool is displayed, and shows the issue for that element.

 See also
Find and fix problems using the Issues tool
Overview of accessibility testing using DevTools
 
 
Check for keyboard support by using the Tab and Enter keys
 	6/21/2022 • 3 minutes to read • Edit OnlineTabEnterNot all users have a pointer or touch device, and not all users can see the web projects we create. This is why it is important that the user interface works at least with a keyboard. Ensure you can use the  key to move the focus to each form control on a webpage, and ensure you can use the  key to submit forms.
You can test the usability of a webpage for keyboard users in several ways:
Tab, Shift+Tab, and EnterBy using the keyboard, particularly the  keys. This approach is described in this article.
Check for keyboard support for an individual element by using the Inspect tool. The Inspect tool's information overlay includes an Accessibility section that includes a Keyboard-focusable row. Check the Issues report's Accessibility section for keyboard support issues.
To check the demo page for accessibility issues by using a keyboard rather than a mouse:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
Tab and Shift+TabTabheader3. Use a keyboard to navigate the demo document, using the  keys to jump from element to element. On the demo webpage, the  key first moves focus to the search form in the  section.
Tab to put focus on a button, and then press EnterTab to put focus on the Search field, and then press EnterEnter4. Press  to click the focused button. For example, in the demo page, press  to submit the search. This approach produces the same result as selecting the go button. Selecting  to send the Search form works correctly.
Tab again. The next element you put focus on is the first More link in the content5. Press  section of the webpage, as indicated by an outline.

Tab6. Press  several more times until you pass the last More link. The page scrolls up and you seem to be
on an element of the page, but there's no way to tell which element it is.
#cats7. Notice the URL in the bottom left. If you look to the bottom left of the screen (or if you use a screen reader), you realize that you are on the sidebar navigation menu with blue links, because the browser shows the URL that the Cats link points to ().

TabTabEnter8. Press  again, to get to the entry field in the donation form. However, you can't reach the buttons above the text box by selecting . You can't use the keyboard to put focus on the 50, 100, or 200 buttons and then select them. Also, selecting  doesn't submit the donation form.

TabTab or Shift+TabEnter9. Selecting  again puts focus on the top navigation bar of the page, with menu buttons for Home, Adopt a Pet, Donate, Jobs, and About Us. Press  to put focus on a menu button, as indicated by a focus outline. Then press  to access that section of the webpage.

Based on the above walkthrough, we found the following issues that need to be fixed.
 When using a keyboard, the blue links of the sidebar navigation menu don't visually indicate which link has focus. See Analyze the lack of indication of keyboard focus in a sidebar menu.
 In the donation form, the amount buttons and the Donate button don't work with a keyboard. See Analyze the lack of keyboard support in a form.
Tab The order of the keyboard access through sections of the page isn't correct. You navigate through all the More links in the document before you reach the sidebar navigation menu. By the time the  key puts focus on the sidebar navigation menu, you've already traversed all the page content. The sidebar navigation menu was intended to provide easy access to the page content.
For more information on how to solve this issue, see Test keyboard support using the Source Order Viewer.
 See also
 Overview of accessibility testing using DevTools
 
 
Analyze the lack of indication of keyboard focus in a sidebar menu
 	6/21/2022 • 2 minutes to read • Edit Onlinehover and focusIn the accessibility-testing demo page, the sidebar navigation menu with blue links doesn't visually indicate which link has focus, when using a keyboard. To find out why the sidebar menu is confusing to keyboard users, we'll look for CSS pseudo-class rules for the  states, along with the CSS property for link outlines.
This analysis finds that the lack of indication of keyboard focus in the links of the page's sidebar navigation menu is because:
a links have a CSS property setting of outline: nonea links lack a CSS pseudo-class rule for the :focusThe .
The  state.
aTo navigate to the CSS, we'll use the Inspect tool to highlight a blue link on the page's sidebar navigation menu, and then view the DOM tree and CSS for the  element that defines that link.
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. Click the Inspect () button in the top-left corner of DevTools so that the button is highlighted (blue).
a4. Hover over the blue Cats link in the page's sidebar navigation menu. The Inspect overlay appears, showing that the  element is keyboard-focusable. But the overlay doesn't show that there's no visual indication when the link has focus.
Next, we'll inspect the CSS styling of this link.
a5. Click the Cats link in the sidebar navigation menu. The Inspect tool turns off, and the Elements tool opens, highlighting the  node in the DOM tree.
#sidebar nav li astyles.css6. In DevTools, select the Styles tab. The CSS rule  appears, along with a link to a line number in .

styles.css7. Click the  link. The CSS file opens within the Sources tool.

hover#sidebar nav li a:hoverThe styles of the page have a CSS pseudo-class rule for the  state that indicates which menu item you're on when you use a mouse: . However, there is no CSS pseudo-class rule
focusfor the  state to visually indicate which menu item you're on when you use a keyboard, such as 
#sidebar nav li a:focus.
outline: nonefocusAlso, notice that the links have a CSS property setting of . This is a common practice, to remove the outline which browsers automatically add to elements when you focus on them using a keyboard. Not using  styling causes confusion for your users.
 See also
Track which element has focus
Overview of accessibility testing using DevTools
 
 Analyze keyboard support on forms
 	6/21/2022 • 2 minutes to read • Edit OnlinedivThis article uses the Inspect tool and Event Listeners tab to analyze the lack of keyboard support on a demo page which has buttons that use the  element.
divOn the Donate form, the amount buttons and Donate button doesn't work with a keyboard. Debugging the donation form requires understanding why the lack of focus styling isn't flagged as a problem with automatic testing tools like the Issues tool. In this example, the buttons are implemented using  elements, which aren't recognized by these tools as a control on a form.
To use the Inspect tool and Event Listeners tab to analyze the lack of keyboard support on the demo page:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. Click the Inspect () button in the top-left corner of DevTools so that the button is highlighted (blue).
4. Hover over the 50, 100, and 200 donation buttons. The Inspect tool appears on the webpage, as an overlay. The keyboard-focusable row of the Inspect overlay shows that none of the donation amount buttons are keyboard-accessible, as indicated by a gray circle with diagonal line. The buttons have no
generic because they are divname, and have a role of  elements, which means that the buttons aren't accessible to assistive technology.

<input id="freedonation" class="smallinput">5. When the Inspect tool is active, on the webpage, select the Other input text box, above the Donate button. The Elements tool opens, showing the DOM tree for the webpage. The element  is selected.
<div class="donationrow">
    <div class="donationbutton">50</div>
    <div class="donationbutton">100</div>
    <div class="donationbutton">200</div>
</div>
<div class="donationrow">
    <label for="freedonation">Other</label>
    <input id="freedonation" class="smallinput">
</div>
<div class="donationrow">
    <div class="submitbutton">Donate</div>
</div>
label and inputThe use of the  elements on the Other text box is valid, which means that the Other
inputdivlabel is correctly linked with the input text box. The  text box is also keyboard-accessible. The rest of the form's markup are  elements, which are easy to style, but have no semantic meaning.
The form's functionality is created with JavaScript, and you can test this by checking the Event Listeners tab, as follows.
<input id="freedonation" class="smallinput">6. With the element  still selected in the DOM tree, select the
clickEvent Listeners tab to the right of the Styles tab, and then expand the  event listener.

buttons.js:187. Select the  link. The Sources tool opens, showing the applied JavaScript.

Here's a code listing of the applied JavaScript:
donations.addEventListener('click', e => {   let t = e.target;
  if (t.classList.contains('donationbutton')) {
    if (currentbutton) { currentbutton.classList.remove('current'); }
    t.classList.add('current');     currentbutton = t;
    e.preventDefault();   }
  if (t.classList.contains('submitbutton')) {     alert('Thanks for your donation!')
  }
})click event to read the buttons is good practice, because a clickdivUsing a  event fires both on mouse pointer and keyboard interaction. However, because a  element isn't keyboard-accessible, and this
div element (<div class="submitbutton">Donate</div>Donate button is implemented as a ), this
clickJavaScript functionality never runs unless you use a mouse or another source of a  event, such as a special button available on some keyboards.
buttondivThis is a classic example where JavaScript was added to create functionality that  elements provide natively. Simulating the functionality of buttons with  elements ended up producing an inaccessible experience.
 See also
 Overview of accessibility testing using DevTools

 
 
Test keyboard support using the Source Order Viewer
 	6/21/2022 • 3 minutes to read • Edit OnlineThe source order of a document is important for assistive technology, and can be different than the order in which elements appear on the rendered page. Using CSS, you can re-order page elements in a visual way, but that doesn't mean that assistive technology such as screen readers would represent page elements in the same order.
To ensure that the document has a logical order, you can use the Source Order Viewer to label different page elements with numbers that specify the order in the source code of the document. The Source Order Viewer is in the Accessibility tab (near the Styles tab).
 Analyzing the order of keyboard access through sections of the page
The accessibility-testing demo webpage has a counterintuitive tabbing order, where keyboard users access the sidebar navigation menu only after tabbing through all the More links. The sidebar navigation menu is meant to be a shortcut to reach deep into the page content. But because you need to go through the entire page before you reach the sidebar navigation menu, that navigation menu is ineffective for keyboard users.
TabThe  key order on the demo page is:
1. The Search field, then the go button for the Search field.
2. The More button in the Cats section, to go to a "Cats" webpage. Then the other More buttons, for Dogs, Sheep, Horses, and then Alpacas.
3. The blue links of the sidebar navigation menu: Cats, Dogs, Sheep, Horses, and then Alpacas.
4. The donation text box in the donation form.
5. The buttons in the top navigation bar: Home, Adopt a pet, Donate, Jobs, and then About Us.
6. The browser's top-of-window interface.
TabtabindexThe reason for the confusing  key order is that the order experienced when using a keyboard is determined by the source order of the document. The order experienced using a keyboard can be modified using the  attribute on elements, which takes that element out of the source order.
In the source code of the document, the sidebar navigation menu appears after the main content of the webpage. CSS was used to position the sidebar navigation menu above most of the main content of the webpage.
You can test the order of page elements by using the Source Order Viewer in the Accessibility tab.
 Turning on the Source Order Viewer To turn on the Source Order Viewer:
1. In DevTools, in the upper right, select the Settings () button.
2. Below Settings, select Experiments.
3. Select the Source Order Viewer checkbox.
4. In the upper-right corner of the Settings page, click X to close the Settings page. At the top of DevTools, the message One or more settings have changed which require a reload to take effect. is displayed. Click the Reload DevTools button.
 Activating and using the Source Order Viewer 
To activate and use the Source Order Viewer, with the demo page:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. In the Elements tool, to the right of the Styles tab, select the Accessibility tab.
Tab4. In the Source Order Viewer section, select the Show source order checkbox. In the rendered webpage, numbers appear, indicating the  order as controlled by the order of lines of code in the source file.
header5. In the DOM tree in the Elements tool, select a major layout element, such as the  element. Numeric overlays are now displayed on sections of the rendered page, which indicate the source order of the different elements.

6. Scroll the page to see all of the numeric overlays, including on the page footer section.
 See also
 Overview of accessibility testing using DevTools
 
 Test text-color contrast using the Color Picker
 	6/21/2022 • 2 minutes to read • Edit OnlinePeople with low vision might not see areas that are very bright or very dark. Everything tends to appear at about the same level of brightness, which makes it hard to distinguish outlines and edges.
Contrast ratio measures the difference in brightness between the foreground and background of text. If your text has a low contrast ratio, then people with low vision might experience your site as a blank screen.
In DevTools, one way to view the contrast ratio of a text element is to use the Color Picker, from the Styles tab of the Elements tool. The Color Picker helps you verify that your text meets recommended contrast ratio levels.
To check the text-color contrast using the Color Picker:
1. In DevTools, select the Elements tool.
2. In the DOM Tree, select the text element that you want to inspect.

3. On the Styles tab, locate the color property that's applied to the element, and then select the color square next to the color property.

4. Examine the Contrast Ratio section of the Color Picker. One check mark means that the element meets the minimum recommendation. Two check marks means that it meets the enhanced recommendation.

5. For more information, select the Contrast ratio section to expand it. In the visual picker at the top of the Color Picker, two lines appear, running across the visual picker, along with a circle for the current color. If the current color meets recommendations, then anything on the same side of the line also meets recommendations. If the current color doesn't meet recommendations, then anything on the same side also doesn't meet recommendations.

6. To try different colors, click within the visual picker, or select a color swatch at the bottom of the Color Picker.
 See also
 Change colors with the Color Picker in CSS features reference
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 
Check text-color contrast in the default state using the Inspect tool
 	6/21/2022 • 2 minutes to read • Edit OnlineCheck text color contrast in the default state by using the Inspect tool. The Inspect tool's information overlay on the webpage has an Accessibility section that includes Contrast information.
For elements that have text, the Inspect tool's information overlay shows the following:
The contrast ratio of text versus background colors.
A green check mark icon for elements with enough contrast.
A yellow alert icon for elements that don't have enough contrast.
In some cases, contrast is affected by setting the browser to light theme or dark theme.
As an example, on the demo page, the blue links of the sidebar navigation menu have enough contrast, but the green Dogs link in the Donation status section doesn't have enough contrast. Review those elements using the Inspect tool, as follows:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. Click the Inspect () button in the top-left corner of DevTools so that the icon is highlighted (blue).
4. In the rendered webpage, hover over the blue Cats link of the sidebar navigation menu. The Inspect tool's information overlay appears. In the Accessibility section of the information overlay, a green checkmark appears on the Contrast row, indicating that this element has enough contrast of text color versus background color.

5. In the rendered webpage, in the Donation Status section, hover over the Dogs link. The Inspect tool's information overlay shows an orange exclamation point on the Contrast row, indicating that this element doesn't have enough contrast of text versus background colors.

 Different options to inspect text-color contrast in DevTools
Use the following DevTools features to inspect text-color contrast.
 Use the Inspect tool (as an information overlay on the webpage) to check whether an individual page element has enough text-color contrast. The Inspect tool's information overlay includes an Accessibility section that has a Contrast information row. The Inspect tool only shows text-contrast information for the current state. This approach is described in the current article.
 The Issues tool automatically reports any color-contrast issues for the entire webpage, when text and background color don't contrast enough. This approach is described in Verify that text colors have enough contrast.
hover Emulate a non-default state, such as the  state. To do this, click the Toggle Element State button in the Styles pane, which displays the Force element state checkboxes section. This feature is described in Verify accessibility of all states of elements.
 See also
Verify accessibility of all states of elements
Use the Inspect tool to detect accessibility issues by hovering over the webpage
Overview of accessibility testing using DevTools
 
 Verify accessibility of all states of elements
 	6/21/2022 • 4 minutes to read • Edit OnlinehoverCheck the accessibility of all states of elements, such as text color contrast during the  state. The Inspect tool reports accessibility issues for one state at a time. To check accessibility of the various states of elements, in the Styles tab, select :hov (Toggle Element State), as described in this article.
We first show why state simulation is necessary using the Inspect tool, and then we show how to use state simulation.
 Checking text color contrast in the default state
In addition to the automatic color-contrast tests in the Issues tool, you can also use the Inspect tool to check whether individual page elements have enough contrast. If contrast information is available, the Inspect overlay shows the contrast ratio and a checkbox item. A green check mark icon indicates there's enough contrast, and a yellow alert icon indicates that there's not enough contrast.
For example, the links in the sidebar navigation menu have enough contrast, as shown in the Inspect overlay:

The green Dogs list item in the Donation status section doesn't have enough contrast, and so is flagged by a warning in the Inspect overlay:

 Hovering when the Inspect tool is active doesn't show the text-color contrast for the hover state
The Inspect tool's information overlay only represents a single state. Elements on the page can have different states, all of which need to be tested. For example, when you hover the mouse pointer over the menu of the accessibility-testing demo page, you get an animation that changes the colors.
First, confirm that your animations run when not using the Inspect tool:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. In the rendered webpage, hover over the blue menu items in the sidebar navigation menu. Notice that each item has an animation.

Next, confirm that your animations don't run when using the Inspect tool:
1. Click the Inspect tool () button in the top-left corner of DevTools.
The Inspect tool icon is highlighted; for example, it changes from gray to blue.
When the Inspect tool is used, animations on the menu items won't run when you hover over them.
hoverhoverWhen using the Inspect tool, you can't reach the  state on menu items to test the contrast ratio, because the  state in your styles isn't triggered.
2. In the rendered webpage, hover over the blue links on the sidebar navigation menu. The animations for the menu items don't run. Instead, the menu items are displayed using color highlighting for the flexbox overlay.
Checking for sufficient text contrast this way isn't enough, because the elements on the page could have different states.
 Use state simulation to simulate the hover state of an animated menu item
When the Inspect tool is active, instead of hovering over an animated element, you need to simulate the state of the menu item. To simulate the state of a menu item, use the state simulation in the Styles pane. The Styles pane has a :hov (Toggle Element State) button, which displays a group of checkboxes labeled Force element
state.
To turn on the hover state while using the Inspect tool:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. Click the Inspect () button in the top-left corner of DevTools so that the icon is highlighted (blue).
<a href="#cats">Cats</a>4. In the rendered webpage, select the blue Cats link in the sidebar navigation menu. The Elements tool opens, with the element  selected.

a element has a hover5. Select the Styles tab. The selected  state in the CSS that is applied to it, but that's not visible in the Styles pane.
#sidebar nav li a, select the styles.css6. In the Styles pane, to the right of the style rule  link. The
#sidebar nav li a:hoverSources tool opens. Then find the CSS pseudo-class rule . This rule doesn't run when the Inspect tool is active. We'll simulate running this state rule in the next steps.
7. Select the Elements tool. Then in the Styles pane, select the :hov (Toggle Element State) button. The Force element state checkboxes section is displayed.

<a href="#cats">Cats</a>8. Click the :hover checkbox. In the DOM, to the left of the element , a yellow dot appears, indicating that the element has a simulated state. The Cats menu item now appears in the webpage as if the pointer were hovering over it. The animation on the menu item might run.

After the simulated state is applied, you can use the Inspect tool again to check the contrast of the element when the user hovers over it, as follows.
9. Select the Inspect () button in the top-left corner of DevTools so that the icon is highlighted (blue).
10. Hover over the blue Cats link in the sidebar navigation menu. The link is now light blue, because of the simulated hover animation. The Inspect tool's information overlay appears, showing an orange exclamation point in the Contrast row, indicating that the contrast isn't high enough.

:focusState simulation is also a good way to check whether you considered different user needs, such as the needs of keyboard users. By using the Force element state checkboxes, you can simulate the  state to discover that the UI remains unchanged when it has focus. This lack of an indicator when an element has focus is a problem.
 See also
 Overview of accessibility testing using DevTools

 
 
Check for contrast issues with dark theme and light theme
 	6/21/2022 • 2 minutes to read • Edit OnlineWhen testing color accessibility, there could be different display color themes that you need to test for contrast issues.
prefers-color-schemeMost operating systems come with a dark mode and a light mode. Your webpage can react to this operating system setting, by using a CSS media query. You can test these themes and test your CSS media query without having to change your operating system setting, by using the  CSS options in the Rendering tool.
As an example, the accessibility-testing demo page includes a light theme and a dark theme. The demo page inherits the dark or light theme setting from the operating system. If we use DevTools to simulate the operating system being set to a light scheme and then refresh the demo webpage, the Issues tool shows six color-contrast problems instead of two. (You might see different numbers.) To emulate a user's selection of preferred color theme:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. Press Esc to open the Drawer at the bottom of DevTools. Click the + icon at the top of the Drawer to see the list of tools, and then select Rendering. The Rendering tool appears.
light-theme.css4. In the Emulate CSS media feature prefers-color-scheme dropdown list, select prefers-colorscheme: light. The webpage is re-rendered using .

Insufficient color contrast5. Select the Issues tool, and then expand the Accessibility section. Depending on various factors, you might get  warnings. Notice in AFFECTED RESOURCES there are 6 elements with insufficient color contrast.

On our demo page, the Donation status section of the page is unreadable in light mode, and needs to change:

Ctrl+F on Windows/Linux or Command+F6. In DevTools, select the Elements tool, and then press  on macOS. The Find text box appears, to search within the HTML DOM tree.

scheme7. Enter . The following CSS media queries are found, and the corresponding CSS files can now be updated.
<link rel="stylesheet" href="css/light-theme.css" media="(prefers-color-scheme: light), (preferscolor-scheme: no-preference)">
<link rel="stylesheet" href="css/dark-theme.css" media="(prefers-color-scheme: dark)">
 See also
Emulate dark or light schemes in the rendered page
Overview of accessibility testing using DevTools
 
 Test accessibility using the Accessibility tab
 	6/21/2022 • 2 minutes to read • Edit OnlineThe Accessibility tab is where you view the accessibility tree, ARIA attributes, and computed accessibility properties of DOM nodes.
To open the Accessibility tab:
1. In a rendered webpage, right-click an element and then select Inspect.
DevTools opens, with the Elements tool selected. The DOM tree opens to show the element that you right-clicked.
2. In the DOM Tree, click the element that you want to inspect. You can use the arrow keys to move through the DOM tree.
3. Click the Accessibility tab, to the right of the Styles tab. You might need to first click the More tabs ( ) button to the right of the Styles tab.

 View the position of an element in the Accessibility Tree
The accessibility tree is a subset of the DOM tree. The accessibility tree only contains elements from the DOM tree that are relevant and useful for displaying the contents of a page through assistive technologies such as screen readers.
Inspect the position of an element in the accessibility tree from the Accessibility tab.

 View the ARIA attributes of an element
ARIA attributes ensure that assistive technologies such as screen readers have all of the information that they need in order to properly represent the contents of a page.
View the ARIA attributes of an element in the Accessibility tab.

 View the computed accessibility properties of an element
Some accessibility properties are dynamically calculated by the browser. These properties are displayed in the Computed Properties section of the Accessibility tab.
View the computed accessibility properties of an element in the Accessibility tab.
NOTE
For computed CSS properties, use the Computed tab.

NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here and is authored by Kayce Basques (Technical Writer, Chrome DevTools & Lighthouse).
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 
Check the Accessibility Tree for keyboard and screen reader support
 	6/21/2022 • 2 minutes to read • Edit OnlineSeveral DevTools features check for keyboard and screen reader support. Using the Inspect tool to check the accessibility of each page element individually can become pretty time-consuming. An alternative way to check a webpage is to use the Accessibility Tree. The Accessibility Tree indicates what information the page provides to assistive technology such as screen readers.
The Accessibility Tree is a subset of the DOM tree, which contains elements from the DOM tree that are relevant and useful for displaying the contents of a page in a screen reader. The Accessibility Tree is in the Accessibility tab of the Elements tool (near the Styles tab).
To explore using the Accessibility Tree:
F121. Open the accessibility-testing demo webpage in a new tab. Then press  to open DevTools.
2. Select the Inspect () button in the top-left corner of DevTools so that the button is highlighted (blue).
3. In the rendered webpage, in the Donation section, hover over the 100 button. The Inspect tool overlay appears.
div4. In the rendered webpage, select the 100 button. In DevTools, the Elements tool is displayed. The DOM tree shows the  element for the 100 button. The Styles pane shows the CSS settings for the element.
5. To the right of the Styles tab, select the Accessibility tab. The Accessibility Tree for the element is displayed, and is expanded.

generic (such as the divAny element in the tree that doesn't have a name, or has a role of  element) is a
problem, because that element won't be available to keyboard users, or to users who are using assistive technology.
 See also
 View the position of an element in the Accessibility Tree
 Overview of accessibility testing using DevTools

 
 Emulate vision deficiencies
 	6/21/2022 • 2 minutes to read • Edit OnlineTo better meet the needs of your users with color vision deficiency (color blindness) or blurred vision, Microsoft Edge DevTools allows you to simulate blurred vision and specific color vision deficiencies. The Emulate vision deficiencies tool simulates the following categories:
COLOR VISION DEFICIENCYDETAILSBlurred visionThe user has difficulty focusing on fine details.ProtanopiaThe user is unable to perceive any red light.DeuteranopiaThe user is unable to perceive any green light.TritanopiaThe user is unable to perceive any blue light.AchromatopsiaThe user is unable to perceive any color, which reduces all color to a shade of grey.The Emulate vision deficiencies tools simulate approximations of how a person with each deficiency may see your product. Each person is different, therefore vision deficiencies vary in severity from person to person. To better meet the needs of your users, avoid any color combination that may be an issue. The Emulate vision
deficiencies tools don't provide a full accessibility assessment of your product, but provide a good first step to
avoid problems.
 Open the Rendering tool
To simulate how a person with a vision deficiency would see your web page, open the Rendering Tools.
...1. Click Customize and control DevTools () in the toolbar.
2. Go to More tools > Rendering to open the Rendering panel in the drawer.

3. Scroll down to the Emulate vision deficiencies section, click the No emulation dropdown list, and then select an option.

4. The browser window simulates the selected vision deficiency on the current page.

 Use the Command Menu
As an alternative approach, you can use the Command Menu to access the different simulations.
Ctrl+Shift+P (Windows, Linux) or Command+Shift+P1. Press  (macOS) to open the Command
Menu.
Enter2. Type emulate, select the type of vision deficiency you want to simulate, and then press .

 See also
 Verify that a page is usable with blurred vision
 
 
Verify that a page is usable by people with color blindness
 	6/21/2022 • 2 minutes to read • Edit OnlineTo check that a webpage is usable by people with color blindness, in the Rendering tool, use the Emulate vision deficiencies dropdown list.
On the accessibility-testing demo webpage, the different donation states use color as the only means of differentiation:
Green means a high amount of donations have been received.
Yellow means a medium amount of donations have been received. Red means a low amount of donations have been received.
But you can't expect all of your users to experience these colors as intended. By using the Emulate vision deficiencies feature of the Rendering tool, you can find out that this design isn't good enough, by simulating how people with different vision would perceive your design.
To check whether a webpage is usable by people with color blindness:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. Press Esc to open the Drawer at the bottom of DevTools. Click the + icon at the top of the Drawer to see the list of tools, and then select Rendering.
4. In the Emulate vision deficiencies dropdown list, select Protanopia. Protanopia is reduced sensitivity to red light, making it hard to differentiate green, red, and yellow.

5. In the Rendering tool, below Emulate vision deficiencies, select No emulation to remove the simulation.
 See also
Emulate vision deficiencies - Defines the items in the Emulate vision deficiencies dropdown list, including Protanopia, Deuteranopia, Tritanopia, and Achromatopsia.
Overview of accessibility testing using DevTools

 
 Verify that a page is usable with blurred vision
 	6/21/2022 • 2 minutes to read • Edit OnlineTo simulate blurred vision, in the Rendering tool, use the Emulate vision deficiencies menu. When you use this feature with the demo webpage, you can see that the drop shadow on the text in the upper menu makes it hard to read the menu items.
To check whether a webpage is usable with blurred vision:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. Press Esc to open the Drawer at the bottom of DevTools. Click the + icon at the top of the Drawer to display the list of tools, and then select Rendering.
4. In the Emulate vision deficiencies dropdown list, select Blurred vision.

text-shadowNotice that the  CSS property makes the text of the menu items difficult to read on the upper menu. For example, see the Home, Adopt a Pet, and other menu items.
5. In the Rendering tool, in Emulate vision deficiencies, select No emulation to remove the blurred vision simulation.
 See also
Emulate vision deficiencies
Overview of accessibility testing using DevTools
 
 Simulate reduced motion
 	6/21/2022 • 2 minutes to read • Edit OnlineCSS animation can be an accessibility problem. Operating systems deal with this problem by including an option to turn off animations to avoid user confusion and potential health-related problems, such as triggering seizures.
On a webpage, you can use the prefers-reduced-motion CSS media query to detect whether the user prefers to display any animations. Then wrap your animation code in a test, to conditionally run animations.
@media (prefers-reduced-motion: reduce) {
  /* in case the .header element has an animation, turn it off */
  .header {     animation: none;
  }
}
Then test your code, as follows.
To simulate the operating system's reduced motion setting, without having to change your operating system setting:
Ctrl+Shift+P on Windows/Linux or Command+Shift+P1. Press  on macOS to open the Command
Menu.

Enter2. Type reduced, to turn the simulation on and off. Select the Emulate CSS prefers-reduced-motion option, and then press .

3. Refresh the webpage and check whether your animations run.
 See also
 Verify that the page is usable with UI animation turned off - A walkthrough using a demo page, with explanations.

 
 
Verify that a page is usable with UI animation turned off
 	6/21/2022 • 2 minutes to read • Edit OnlineA webpage should not show animations to a user who turned off animations in the operating system.
Animations can help the usability of a product, but they can also cause distraction, confusion, or nausea.
To check that a webpage is usable with UI animation turned off (reduced motion), in the Rendering tool, use the Emulate CSS media feature prefers-reduced-motion dropdown list.
In the accessibility-testing demo webpage, when you turn off animations in the operating system, or emulate that settings by using DevTools, the webpage doesn't use smooth scrolling when you select the links of the sidebar navigation menu. This is achieved by wrapping the smooth-scrolling setting in CSS in a media query, and then using the Rendering tool to emulate the operating system setting for reduced animation.
To check whether the page is usable with animations turned off:
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
styles.css3. At the top of DevTools, select the Sources tool, and then in the Navigation pane on the left, select . The CSS file appears in the Editor pane.
Ctrl+F on Windows/Linux or Command+F on macOS, and then enter @media4. Press . The following
CSS media query is displayed, which confirms that it is used on the webpage.
@media (prefers-reduced-motion: no-preference) {   html {
    scroll-behavior: smooth;
  }
}
Next, emulate the operating system setting to reduce animation, as follows.
Esc5. Press  to open the Drawer at the bottom of DevTools. Click the More tools (+) button at the top of the Drawer to see the list of tools, and then select Rendering.
6. In the Emulate CSS media feature prefers-reduced-motion dropdown list, select prefersreduced-motion: reduced.

7. In the webpage, click the blue menu items, such as Horses or Alpacas. Now the webpage instantly scrolls to the selected section, rather than using the smooth-scrolling animation.
8. In the Rendering tool, below Emulate CSS media feature prefers-reduced-motion, select No emulation to remove this setting.
Notice that the demo webpage still runs the following animations, even with the above media query and emulation settings. When building your website, make sure you fix all similar animations:
Animation of the blue menu items when you hover over them.
Animation of the circles on the More links when you hover over them.
 See also
Reduced motion simulation
Overview of accessibility testing using DevTools
 
 
Verify that the webpage layout is usable when narrow
 	6/21/2022 • 2 minutes to read • Edit OnlineAn important part of accessibility is to make sure that your website works well on a narrow viewport. Many users need to zoom the page to be able to use it, and this means that there isn't much space left.
When there isn't enough space, your multi-column layout should turn into a single-column layout, with content placed in an understandable order. This means placing the most important content at the top of the page, and placing additional content further down the page.
1. Open the accessibility-testing demo webpage in a new window or tab.
F122. Right-click anywhere in the webpage and then select Inspect. Or, press . DevTools opens next to the webpage.
3. Make the browser window narrow.
4. Use the arrow keys to scroll the page.
The top navigation bar of the webpage has some accessibility issues. The top navigation bar overlaps the Search form, and that issue needs to be fixed:

 Device Emulation tool to test narrow viewports
You can simulate a narrow viewport by resizing the browser window, but a better way to test the responsiveness of your design is to use the Device Emulation tool. Here are some features of the Device Emulation tool that help you find accessibility issues of any website:
 Without resizing the browser window, resize the page and test whether your CSS media queries trigger a change in layout.
 Check for dependencies that use a mouse. By default, Device Emulation assumes a touch device. This means that any functionality of your product that relies on hover interaction will not work.
 Do visual testing by simulating different devices, zoom levels, and pixel ratios.
 Test how your product behaves on unreliable connections or when the user is offline. Showing the most important interactions to a user on a slow connection is also an accessibility consideration.
To learn more about the Device Emulation tool, see Emulate mobile devices (Device Emulation).

 
 Sample code for DevTools
 	6/21/2022 • 2 minutes to read • Edit OnlineThe sample code that's used by the DevTools documentation is mainly in the MicrosoftEdge/Demos repo at GitHub.
 Demo webpage with accessibility issues
This demo webpage is useful for exploring various DevTools features, such as the Elements tool.
1. Open the Demo webpage with accessibility issues in a new window or tab.
2. Right-click anywhere in the rendered webpage and then select Inspect. DevTools opens next to the demo webpage.

 Articles 
These articles walk you through using this demo webpage:
 Overview of accessibility testing using DevTools - Long article with sections that demonstrate using various DevTools features to do accessibility testing, by using the "Demo webpage with accessibility issues".
 Use the Inspect tool to detect accessibility issues by hovering over the webpage - One of several short articles that are derived from sections of the above article.
 Accessibility-testing features - A list of accessibility testing features of DevTools, with links to several articles that use the "Demo webpage with accessibility issues".
 Source code repo 
This is the source code repo and its directory which stores the files for this demo webpage:
index.htmlbuttons.jsMicrosoftEdge/Demos > devtools-a11y-testing - Contains files including:
- The demo webpage, including page sections and input forms that send data to the  JavaScript file. To view the rendered webpage, use the demo webpage link above.
buttons.jsstyles.css, light-theme.css, and dark-theme.css- Contains the JavaScript code that's used by the demo webpage.
- CSS files that control the presentation of the
demo webpage.
 Image files that are used in the demo webpage.
 Demo webpage: Debugging JavaScript with DevTools
This demo webpage is useful for exploring the Sources tool, especially the JavaScript debugger.
1. Open the demo webpage Get started Debugging JavaScript with DevTools in a new window or tab.
2. Right-click anywhere in the rendered webpage and then select Inspect. DevTools opens next to the demo webpage.

 Articles 
These articles or article sections walk you through using this demo webpage:
 The basic approach to using a debugger in Sources tool overview. This article section briefly walks you through the steps to use the JavaScript debugger in the Sources tool, to find the bug in the demo webpage. To fix the bug, you convert the input strings to numbers before adding them.
 Get started debugging JavaScript - A more in-depth walkthrough of using the demo webpage along with the debugger, demonstrating various features of the debugger, and setting different kinds of breakpoints.
 Source code repo 
This is the source code repo and its directory which stores the files for this demo webpage:
 MicrosoftEdge/Demos > devtools-js-get-started - Contains the files:
README.md	 - Contains links to the rendered demo webpage and the in-depth tutorial article about using the demo webpage.
index.html		 - The webpage with an input form that sends data to the JavaScript file, and that
displays the result of the JavaScript.
get-started.js		 - The JavaScript file that's used by the form in the demo webpage.
 URL patterns for rendered demo webpages and source code
To convert between the URL for a rendered demo webpage and the URL for the source code at GitHub, the patterns are as follows.
 Pattern 
https://[org].github.io/[repo]/[path]https://github.com/[org]/[repo]/tree/main/[path]URL for the rendered demo webpage: 
URL for the webpage's source code: 
Not case-sensitive.
 Example 
https://MicrosoftEdge.github.io/Demos/devtools-a11y-testing/URL for the rendered demo webpage: 
URL for the webpage's source code: 
https://github.com/MicrosoftEdge/Demos/tree/main/devtools-a11y-testing/
MicrosoftEdgeDemos/devtools-a11y-testing/Org = 
Repo = 
Path = 
 
 Use DevTools in Internet Explorer mode (IE mode)
 	6/21/2022 • 3 minutes to read • Edit OnlineInternet Explorer mode (IE mode) integrates with Microsoft Edge DevTools. IE mode allows enterprises to specify a list of websites that only work in Internet Explorer 11. When you navigate to these websites in Microsoft Edge, an instance of Internet Explorer 11 runs and renders the site in a tab.
IE mode allows enterprises to manage compatibility with technologies that are currently not compatible with any modern web browsers.
Support for the following technologies is included in IE mode:
IE document modes.
ActiveX controls.
Other legacy components.
In IE mode, the rendering process is based on Internet Explorer 11. The Microsoft Edge process manager handles the lifetime of the rendering process. The rendering process is constrained to the lifetime of the tab for a specific site (or app). When a tab renders in IE mode, the IE mode indicator icon appears in the address bar for the specific tab.

IE mode is available on Windows 10 Version 1903 (May 2019 Update), and is coming to all supported Windows platforms.
 Open DevTools on a tab in IE mode
The IE mode indicator icon appears in the address bar if the Enterprise admin has configured the website to appear in IE mode. To view the document mode of a website in IE mode, select the IE mode indicator icon in the address bar.

If a tab uses IE mode, the tab has the following limitations:
 Some DevTools panels don't work, such as Network and Performance, because the rendering engine switches from Chromium to Internet Explorer 11.
F12 or Ctrl+Shift+IInspect Element isn't visible on the right-click menu.
Right-clicking and then selecting View Source launches Notepad.
Pressing  opens a blank instance of the Microsoft Edge DevTools and displays the following message: Developer Tools aren't available in Internet Explorer mode. To debug the page, open it in Internet Explorer 11.

If Internet Explorer isn't available on your computer, to debug the content of an IE mode tab, use IEChooser to open Internet Explorer DevTools, as follows:
Windows logo key + R1. In Windows, open the Run dialog box. For example, press the .
%systemroot%\system32\f12\IEChooser.exe2. Enter , and then click OK.
3. In IEChooser, select the entry for the IE mode tab.
 Remote debugging in IE mode
9222Launch Microsoft Edge with remote debugging turned on from the command-line interface. Microsoft Visual Studio, Microsoft Visual Studio Code, and other development tools typically run a command to launch Microsoft Edge. The following command launches Microsoft Edge with the remote debugging port set to .
start msedge --remote-debugging-port=9222
After you launch Microsoft Edge using a command-line argument, IE mode is unavailable. You can still navigate to websites (or apps) that are otherwise displayed in IE mode. The website (or app) content renders using Chromium, not Internet Explorer 11. Parts of the webpages that rely on Internet Explorer 11, such as ActiveX controls, might not render correctly. The IE mode indicator icon doesn't appear in the address bar.
IE mode remains unavailable until you close and restart Microsoft Edge.
 Replace Internet Explorer automation
If you have an existing application that uses the InternetExplorer object to automate Internet Explorer 11, but the Internet Explorer 11 desktop application isn't available, your application won't work. Internet Explorer 11 will be retired on June 15, 2022. See The future of Internet Explorer on Windows 10 is in Microsoft Edge.
InternetExplorerMicrosoft Edge doesn't support automating IE mode through the  object, so applications that rely on this object will need to be updated, by using one of the recommended alternatives below. Applications that use the WebBrowser control will continue to work, and won't be affected by the removal of Internet Explorer 11.
If your automation application doesn't require IE mode for the website (or app) content to function correctly, we recommend updating your application to use Microsoft Edge instead of Internet Explorer 11. Many available automation tools support Microsoft Edge, including WebDriver and Playwright.
To learn more about automating Microsoft Edge using WebDriver, see Use WebDriver to automate Microsoft Edge.
To learn more about using Playwright, see Use Playwright to automate and test in Microsoft Edge.
WebBrowser control. The WebBrowserApplications that require IE mode for the website (or app) content to function correctly should use the  control uses the Internet Explorer platform (MSHTML/Trident) to render
web content, and will work even if the Internet Explorer 11 desktop application isn't available.
 See also
What is Internet Explorer (IE) mode?
Configure IE mode policies
Fix web compatibility issues using document modes and the Enterprise Mode site list

 
 Microsoft Edge DevTools Protocol
 	6/21/2022 • 3 minutes to read • Edit OnlineUse the DevTools Protocol to instrument, inspect, debug, and profile browsers including Microsoft Edge. The Microsoft Edge DevTools Protocol matches the APIs of the Chrome DevTools Protocol. For reference documentation, go to Chrome DevTools Protocol Viewer.
NOTE
With the shift in the underlying web platform of Microsoft Edge to Chromium, the Microsoft Edge (EdgeHTML) DevTools Protocol won't be receiving any further updates. Going forward, the Microsoft Edge DevTools Protocol will match the APIs of the Chrome DevTools Protocol.
msAny methods that were prefixed with  in the Microsoft Edge (EdgeHTML) DevTools Protocol are no longer supported in the Microsoft Edge DevTools Protocol. Using the DevTools Protocol
To attach a custom tooling client to the DevTools Server in Microsoft Edge:
1. Close all instances of Microsoft Edge.
2. Launch Microsoft Edge with the remote debugging port.
msedge.exe --remote-debugging-port=9222
3. Optionally, you can start a separate instance of Microsoft Edge using a distinct user profile.
msedge.exe --user-data-dir=<some directory>
list4. Next, use the HTTP  endpoint to get a list of attachable page targets.
http://localhost:9222/json/list
webSocketDebuggerUrl5. Finally, connect to the  of the desired target and issue commands/subscribe to event messages through the DevTools web socket server.
 DevTools Protocol HTTP endpoints
The Microsoft Edge DevTools Protocol supports the following HTTP endpoints.
 /json/version
Provides information on the browser of the host machine and which version of the DevTools Protocol it supports. Parameters None.
Return object
{
   "Browser": "Edg/75.0.115.0",
   "Protocol-Version": "1.3",
   "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) 
Chrome/75.0.3739.0 Safari/537.36 Edg/75.0.115.0",
   "V8-Version": "7.5.98",
   "WebKit-Version": "537.36 (@68a98f73c7d0f766fb5a013ea7f8dbb41089bc1b)",
   "webSocketDebuggerUrl": "ws://localhost:9222/devtools/browser/a9d0e8cf-476a-4a89-bba9-0fc27ce691cd"
}
 /json/protocol
Provides the entire protocol API surface serialized as JSON.
Parameters None.
Return object
JSON object which represents the available API surface for current version of the protocol.
 /json/list
Provides a candidate list of page targets for debugging.
Parameters None.
Return object
[{
   "description": "",
   "devtoolsFrontendUrl": "/devtools/inspector.html? ws=localhost:9222/devtools/page/AB07C11A262D1EC8634EB12E2DCA4989",
   "id": "AB07C11A262D1EC8634EB12E2DCA4989",    "title": "localhost:9222/json/protocol",
   "type": "page",
   "url": "http://localhost:9222/json/list",
   "webSocketDebuggerUrl": "ws://localhost:9222/devtools/page/AB07C11A262D1EC8634EB12E2DCA4989" }, ...  ] /json/close
Closes down the target process. For example, in Microsoft Edge, closes the page tab.
Parameters
Target ID
Return object
String("Target is closing")
 Remote Tools for Microsoft Edge (Beta)
You can install the Remote Tools for Microsoft Edge (Beta) from the Microsoft Store. This app enables you to remotely debug Microsoft Edge running on a Windows 10 or later device from your development machine.
To learn how to set up your Windows device and connect to it from your development machine, see Get started with remote debugging Windows devices.
The Remote Tools for Microsoft Edge (Beta) uses the same Microsoft Edge DevTools Protocol as DevTools to communicate with Microsoft Edge running on the Windows 10 or later device you want to debug. This app just
/msedge/ and a process ID (pidprepends ) before each call to the protocol. It supports the following HTTP endpoints.
The following Reference sections are for Remote Tools for Microsoft Edge.
 /msedge/json/list
msedge.exeProvides a candidate list of all  processes (including PWAs and all tabs in all instances of Microsoft Edge) on the Windows 10 or later device for debugging.
Parameters None.
Return object
[{
   "description": "",
    "devtoolsFrontendUrl": "http://172.17.75.195:80/msedge/7264/devtools/inspector.html?
ws=172.17.75.195:80/msedge/7264/devtools/page/ED4FFDB4529723A0FAFCBDB9B45851BB",
    "faviconUrl": "https://docs.microsoft.com/favicon.ico",
    "id": "ED4FFDB4529723A0FAFCBDB9B45851BB",
    "title": "Get Started with Remote Debugging Windows Devices - Microsoft Edge Development | Microsoft 
Docs",
    "type": "page",
    "url": "https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/remote-debugging/windows",
    "webSocketDebuggerUrl": 
"ws://172.17.75.195:80/msedge/7264/devtools/page/ED4FFDB4529723A0FAFCBDB9B45851BB",
    "browserProcessId": 7264
}, ...  ]
 /msedge/
Functionally equivalent to /msedge/json/list.
 /msedge/[pid]/json/list
[pid]Provides a candidate list of page targets for the Microsoft Edge instance that matches the provided  for debugging. Parameters None.
Return object
[{
    "description": "",
    "devtoolsFrontendUrl": "http://172.17.75.195:80/msedge/7264/devtools/inspector.html?
ws=172.17.75.195:80/msedge/7264/devtools/page/ED4FFDB4529723A0FAFCBDB9B45851BB",
    "faviconUrl": "https://docs.microsoft.com/favicon.ico",
    "id": "ED4FFDB4529723A0FAFCBDB9B45851BB",
    "title": "Get Started with Remote Debugging Windows Devices - Microsoft Edge Development | Microsoft 
Docs",
    "type": "page",
    "url": "https://docs.microsoft.com/microsoft-edge/devtools-guide-chromium/remote-debugging/windows",
    "webSocketDebuggerUrl": 
"ws://172.17.75.195:80/msedge/7264/devtools/page/ED4FFDB4529723A0FAFCBDB9B45851BB" }, ...  ]
 /msedge/[pid]/json/version
[pid]Provides information about the Microsoft Edge instance that matches the provided  and which version of the DevTools Protocol it supports.
Parameters None.
Return object
{
    "Browser": "Edg/82.0.452.0",
    "Protocol-Version": "1.3",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) 
Chrome/82.0.4080.0 Safari/537.36 Edg/82.0.452.0",
    "V8-Version": "8.2.263",
    "WebKit-Version": "537.36 (@fe0232051787ca94ac8edfc0084c3488b7d9bdb2)",
    "webSocketDebuggerUrl": "172.17.75.195:80/msedge/7264/devtools/browser/7a67c8c4-138b-48e3-bfe0cb7af34d559a"
}
 /msedge/[pid]/json/protocol/
[pid]Provides the entire protocol API surface serialized as JSON for the Microsoft Edge instance that matches the provided .
Parameters None.
Return object
[pid]JSON object which represents the available API surface for the version of the protocol that the Microsoft Edge instance that matches the provided  is using.
 See also
 Use the Chrome DevTools Protocol in WebView2 apps
 
 Contact the Microsoft Edge DevTools team
 	6/21/2022 • 2 minutes to read • Edit OnlineSend your feedback to help improve Microsoft Edge DevTools. Contact the Microsoft Edge DevTools team to submit feature requests or bug reports, or ask questions about Microsoft Edge DevTools.
There are several ways to get in touch with the Microsoft Edge DevTools team:
To quickly report bugs from DevTools, use the Send feedback window.
To submit feature requests, questions, and have longer conversations with the team, use the DevTools repo.
To submit cross-browser suggestions, use the Web Web Want initiative. To submit documentation issues, use the edge-developer repo.
 Use the Send feedback window
To report a bug or request a feature while you are using DevTools:
Alt+Shift+I on Windows and Linux or Option+ShiftI1. Click the Send Feedback () icon (or press 	+  on macOS) to open the Send feedback window.
2. In the Send feedback window, describe your bug or feature request. You can also attach a screenshot to help the team understand the problem better and add your email address so we can follow-up with you.
3. Press Send to create a tracked issue for the Microsoft Edge development team.

 Use the DevTools repo
To have longer discussions with the DevTools team and community about bugs or features, use the DevTools repository on GitHub.
You can create a new issue on the repo or search for existing issues and join conversations.
Use the DevTools repo to have longer conversations, especially when you need to do more than report a bug. In
the repo, you can share ideas and tips with others, explain your workflows and use cases in detail with the team, and generally have more meaningful interactions with the community.
 Submit a cross-browser suggestion to the Web We Want
To make a feature request across browser teams or standards bodies, submit a request at The Web We Want initiative.
The Web We Want is a cross-browser initiative to identify missing features for web standards or browsers. Use this communication channel to let browser vendors and standards groups know your request.
Submit web platform or developer tool features.
View the list of submitted Wants, and vote on them.
Participate in discussions.
Use the links to resources.
You can follow the Web We Want initiative on Twitter or LinkedIn, and participate in surveys to prioritize submitted Wants.
 File a documentation issue
To enter a GitHub issue from within a documentation article, in the Feedback section at the bottom of an article, select the This page button.
edge-developerOr you can file an issue against the Microsoft Edge Developer documentation, directly in the repo.

 
 Overview of Microsoft Edge extensions
 	6/21/2022 • 5 minutes to read • Edit OnlineA Microsoft Edge extension is a small program that developers use to add or modify features of Microsoft Edge. An extension improves a user's browsing experience. It usually provides a niche function that is important to a target audience.
You can create a Microsoft Edge extension if you have an idea or product that is based upon either a specific web browser, or improvements to features of specific webpages. Examples of companion experiences include ad blockers and password managers.
An extension is structured similar to a regular web app. An extension should include at least the following features:
An app manifest JSON file that contains basic platform information.
A JavaScript file that defines the function.
HTML and CSS files that define the user interface.
To work directly with part of the browser, such as a window or tab, you must send API requests and must often reference the browser by name.

 Basic guidance
Some of the most popular browsers to build extensions for include Safari, Firefox, Chrome, Opera, Brave, and Microsoft Edge. Great places to begin your extension development tutorials and documentation research are sites hosted by the browser organizations. The following table isn't exhaustive or definitive. It is just a starting point for your research.
WEB BROWSERCHROMIUM-BASED?EXTENSION DEVELOPMENT WEBPAGESafariNoSafari App ExtensionsFirefoxNoBrowser ExtensionsChromeYesAPI ReferenceWEB BROWSERCHROMIUM-BASED?EXTENSION DEVELOPMENT WEBPAGEOperaYesExtensions DocumentationBraveYesUses Chrome Web StoreMicrosoft EdgeYesMicrosoft Edge Add-ons DeveloperIMPORTANT
Many of the tutorials of the sites use browser-specific APIs that might not match the browser for which you develop. In most cases, a Chromium extension works as-is in different Chromium browsers and the APIs work as expected. Some less-common APIs might be browser-specific. Links to the tutorials are in the See also section, below.
 Why Chromium?
If your goal is to publish your extension in the extensions store for each browser, your extension must be modified for each version to target and run in each distinct browser environment. For example, Safari extensions can use both web and native code to communicate with counterpart native applications. The last four browsers in the previous table use the same code package and minimize the need to maintain parallel versions. These browsers are based on the Chromium open-source project.
Benefits of creating a Chromium extension include writing the fewest lines of code. It also targets the maximum number of extension stores and ultimately the maximum number of users who can find and acquire your extension.
The following content focuses mostly on Chromium extensions.
 Browser compatibility and extension testing
Occasionally, API parity doesn't exist between Chromium browsers. For example, there are differences in the identity and payment APIs. To make sure your extension meets customer expectations, review API status through the following official browser documentation:
Chrome APIs
Extension APIs supported in Opera
Port Chrome extension to Microsoft Edge
The APIs that you require define the changes that you must make to address the differences between each browser. You might need to create slightly different code packages with small differences for each store.
To test your extension in different environments before you submit the extension to a browser store, side-load the extension into your browser while you develop it.
 Publish your extension to browser stores
You can submit and seek browser extensions in the following browser stores.
Firefox Browser Add-ons
Chrome Web Store
Opera addons
Microsoft Edge Add-ons
Some stores allow you to download listed extensions from other browsers. However, cross-browser access isn't guaranteed by browser stores. To make sure your users find your extension in different browsers, you should maintain a listing on each browser extension store.
Users might need to install your extension in different browsers. In this scenario, you can migrate existing Chromium extensions from one browser to another.
 Migrate an existing extension to Microsoft Edge 
If you've already developed an extension for another Chromium-based browser, you can submit it to the
Microsoft Edge Add-ons website. You don't need to rewrite your extension or verify that it works in Microsoft Edge. When you migrate an existing Chromium extension to other Chromium browsers, make sure the same APIs or alternatives are available for your target browser.
For more information on porting your Chrome extension to Microsoft Edge, see Port Chrome extensions to Microsoft Edge. After you port your extension to the target browser, the next step is to publish it.
	 Publish to the Microsoft Edge Add 	-ons website
@outlook.com, @live.com, or @hotmail.comTo start publishing your extension to Microsoft Edge, you must register for a developer account with a Microsoft account (MSA) email account to submit your extension listing to the store. The email address of a Microsoft account (MSA) includes . When you choose an email address to
register, consider whether you must transfer or share ownership of the Microsoft Edge extension with other people in your organization. After registration is complete, you can create a new extension submission to the store.
To submit your extension to the store, you need to provide the following items:
.zipAn archive () file that contains your code files.
All required visual assets, which include a logo and small promotional tile.
Optional promotional media, such as screenshots, promotional tiles, and a video URL.
Information that describes your extension such as the name, short description, and a privacy policy link.
NOTE
Different stores might have different submission requirements. The above list summarizes the requirements to publish an extension for Microsoft Edge.
After you've successfully submitted your extension, your extension undergoes a review process and either passes or fails the certification process. Owners are notified of the outcome and given next steps as required. If you submit an extension update to the store, it begins a new review process.
 See also
Extension concepts and architecture
Manage Microsoft Edge extensions in the enterprise
External links:
Port a Google Chrome extension
Build a Safari App extension
Your first extension (Firefox)
Get started tutorial (Chrome) Get started (Opera)
Extensions for Visual Studio Code rather than for Microsoft Edge:
 Microsoft Edge DevTools extension for Visual Studio Code
 webhint extension for Visual Studio Code

 
 Released features for Microsoft Edge Add-ons
 	6/21/2022 • 3 minutes to read • Edit OnlineThe following features have been launched on Partner Center for developers of Microsoft Edge extensions.
 Developers can respond to user reviews about their Microsoft Edge Add-on
Developers can reply via Partner Center to reviews and feedback received about their extension on the Microsoft Edge Add-ons product page. To share your feedback and comments, see GitHub discussion topic - Reply to user reviews on your Microsoft Edge Add-on product page.
Released May 2022
 Publish and update extensions using the Microsoft Edge Add-ons API
You can integrate APIs directly into your Continuous Integration / Continuous Delivery (CI/CD) pipeline. You can also publish extension package updates to the Microsoft Edge Add-ons website without using Partner Center. For more information, see Using the Microsoft Edge Add-ons API
Released March 2022
 Addition of breadcrumbs to Microsoft Partner Center
Developers can view the navigation bar / tree path while using Partner Center to track the exact Partner Center path users are visiting. Developers can maintain awareness of their location within Microsoft Partner Center.
Released March 2022
 Microsoft Edge extensions developer portal
The new edition of the developer portal contains relevant resources and documentation for Microsoft Edge extensions. For more information, see Microsoft Edge Add-ons Developer.
Released January 2022
 Extension Analytics Dashboard on Microsoft Partner Center
The Extensions Analytics Dashboard enables extension developers to view their extension's usage, adoption, and in-market performance. Developers can also track active user installs, weekly users, total downloads, and usage distribution over a period from Partner Center.
Released September 2021
 Add team members to your Partner Center account
Developers can add members from their organization and manage the settings on their Partner Center Account. For more information, see Add users to the Microsoft Edge program. Released August 2021
 
Sign into Microsoft Partner Center using your GitHub account
Developers can use their personal GitHub account credentials to sign into Microsoft Partner Center to submit your Microsoft Edge Extension. You can read more at Publish Microsoft Edge extensions by using a GitHub account.
Released August 2021
 Manage your extension submissions on Partner Center
This feature allows extension developers to view their extension submission from the Partner Center dashboard and overview pages. Developers can easily track their extension submission review status, view past updates, view the status of submissions, and manage extensions on Partner Center.
Released May 2021
 Support for Manifest V3 extensions
Microsoft Edge Add-ons now support extensions with Manifest V3. For more information, see the blog Manifest V3 changes are now available in Microsoft Edge for more details.
Released April 2021
 Request to get your extension featured
Developers can request the Collection where their extension should be featured on the Microsoft Edge Add-ons store. You can submit your request at the Submit a request to add an extension to the collections on the Microsoft Edge Add-ons home page.
Released April 2021
 Extension store listing localization
Developers can choose a subset of languages instead of manually entering each language in the listing details on Microsoft Partner Center. Developers can also elect to use the same marketing assets across all marketplaces. For mor information, see the blog Partner Center improvements related to Microsoft Edge extensions store listing and certification for more details.
Released February 2021
 Extension certification report link
By clicking the extension certification report link, an extension developer can view and download the extension certification report from their Partner Center dashboard. The link to the extension certification report is displayed after the extension submission review is complete. The certification report contains the result of the extension review and relevant details.
Released January 2021
 See also
For more information about upcoming updates and feature releases, see Microsoft Edge Add-ons roadmap.
 
 Microsoft Edge Add-ons roadmap
 	6/21/2022 • 2 minutes to read • Edit OnlineThis article describes the latest updates about new Partner Center features for Microsoft Edge extensions.
 Features in development
The following features are actively being developed by our engineers.
	 Retirement of submitting new Microsoft Edge Add 	-ons with Manifest V2
Microsoft Partner Center will no longer accept new Manifest V2 Microsoft Edge extension submissions, with visibility set as Hidden or Public. To share your feedback and comments, see GitHub discussion topic - Update your extensions from Manifest V2 to V3.

 Features in backlog
The following features are currently in our backlog.
 Developers can add their contact information 
For users to report extension specific issues through the extension webpage on the Microsoft Edge Add-ons website. Developer support information will be shown on the product page of an extension. This information will allow users to directly reach out to the extension developer for extension-specific support.
	 Manifest V2 Microsoft Edge Add 	-ons deprecation
Microsoft Partner Center will not accept updates to existing Manifest V2 Microsoft Edge Add-ons. Microsoft
Edge will no longer support or run Manifest V2 Microsoft Edge Add-ons. Note that by using Microsoft Edge Enterprise Policies, Enterprise Accounts can allow Manifest V2 Microsoft Edge Add-ons to run and operate on Microsoft Edge.
	 Manifest V2 Microsoft Edge Enterprise Add 	-ons cease to function
Microsoft Edge Enterprise Add-ons with Manifest V2 will not be functional on Microsoft Edge.
NOTE
Released features for Microsoft Partner Center change often. Partner Center continues to evolve based on market changes and customer feedback. The features described in this article are also subject to change.
 See also
For more information about recently released features for Partner Center, see Released features for Microsoft Edge Add-ons.
To view the consumer roadmap, go to Microsoft Edge Insider Roadmap and scroll down to the Feature Roadmap section.
To view the full roadmap for Microsoft Edge, see the Microsoft 365 roadmap.
 
 Extension concepts and architecture
 	6/21/2022 • 3 minutes to read • Edit OnlineThis article introduces concepts about building a Microsoft Edge extension. Follow along to understand how multi-tab browsers work.
A Microsoft Edge extension is a small program that adds or modifies features of Microsoft Edge. For an introduction, see Overview of Microsoft Edge extensions.
 Understand how browsers work
The following list outlines helpful information to understand before building your extension.
 Browser tabs are isolated threads 
Each browser tab is isolated from every other tab. Each tab runs in a separate thread that is isolated from other browser tabs and threads.

 Each tab handles one GET request 
Each tab handles one GET request. Each tab uses a URL to get a single stream of data, which is normally an
HTML document. That single stream or page, includes instructions like JavaScript include tags, image references, CSS references, and more. All resources are downloaded to that one tab page, and then the page is rendered in the tab.
 Communication occurs between each tab and a remote server 
Communication occurs between each tab and a remote server. Each tab runs in an isolated environment. Each tab is still connected to the internet, but each is isolated from other tabs. A tab can run JavaScript to communicate with a server. The server is the originating server for the first GET request that was entered into the URL bar of the tab.
 Communication model 
The extension model uses a different communication model. Similar to a tab page, an extension runs in an individual thread that is isolated from other tab page threads. A tab sends single GET requests to remote servers, and then renders the page. However, an extension works similar to a remote server. Installing an extension in a browser creates a standalone web server in the browser. The extension is isolated from all tab pages.

 Extension architecture
The following list outlines helpful information as it relates to the architecture of an extension.
 Extension web server bundle 
An extension is a bundle of web resources. The web resources are similar to other resources that you (the web developer) publish to web servers. You bundle the web resources into a zip file when building an extension.
manifest.jsonThe zip file includes HTML, CSS, JavaScript, and image files. One more file is required in the root of the zip file. The other file is the manifest file that is named . The manifest file is the blueprint of your extension and includes the version of your extension, the title, permissions needed for the extension to run, and so on.
 Launching the extension server 
index.htmlWeb servers contain your web bundle. A browser navigates to URLs on the server, and downloads the file to render in the browser. A browser navigates using certificates, configuration files, and so on. If an  file is specified, the file is stored at a special location on the web server.
extension://{some-long-unique-identifier}/index.html, where {some-long-unique-identifier}When you use an extension, the tab page of your browser gets to the web bundle of your extension using the extension runtime. The extension runtime serves the files from the URL  is a unique identifier assigned to the extension when during installation. Each extension uses a different unique identifier. Each identifier points to the web bundle that is installed in your browser.
 Communication with tabs and browser toolbar 
An extension can communicate with tabs and the browser toolbar. An extension can interact with the toolbar of your browser. Each extension manages running tab pages in separate threads, and DOM manipulation on each tab page is isolated. An extension uses the extensions API to communicate between the extension and tab pages. The extensions API provides extra capabilities that include notification management, storage management, and so on.
Just like web servers, an extension waits for notifications when the browser is open. An extension and tab pages run in threads that are isolated from each other. To allow an extension to work with any tab page, use the extensions API and set the permissions in the manifest file.
	 Opt 	-in permissions at install time
manifest.jsonAn extension provides opt-in permissions at install time. You specify the extension permissions in the  file. When a user installs an extension, information about the permissions that the extension
requires is displayed. Based on the type of permission required, the extension can extract and use information from the browser.
 Next steps
For information on getting started with your extension, see Create an extension tutorial, part 1.

 
 Create an extension tutorial, part 1
 	6/21/2022 • 2 minutes to read • Edit Online Overview
The goal for this tutorial is to build a Microsoft Edge extension, starting with an empty directory. You are building an extension that pops up the NASA picture of the day. In this tutorial, you'll learn how to create an extension by:
manifest.jsonCreating a  file.
Adding icons.
Opening a default pop-up dialog.
 Before you begin
To test out the completed extension that you are building in this tutorial, download the source code.
 Step 1: Create a manifest.json file
manifest.jsonEvery extension package must have a  file at the root. The manifest provides details of your extension, the extension package version, the extension name and description, and so on.
manifest.jsonThe following code snippet outlines the basic information needed in your  file.
{
    "name": "NASA picture of the day viewer",
    "version": "0.0.0.1",
    "manifest_version": 2,
    "description": "An extension to display the NASA picture of the day." }
 Step 2: Add icons
iconsStart by creating the  directory in your project to store the icon image files. The icons are used for the background image of the button that users select to launch the extension.

For icons:
PNG format, but you can also use BMP, GIF, ICO or JPEGWe recommend using  formats.
We recommend using images that are 128 x 128 px, which are resized by the browser if necessary.
The directories of your project should be similar to the following structure.
└── part1
    ├── _manifest.json
    └── icons
        ├── nasapod16x16.png
        ├── nasapod32x32.png
        ├── nasapod48x48.png
        └── nasapod128x128.png
manifest.json file. Update your manifest.jsonNext, add the icons to the  file with the icons information so that
pngit matches the following code snippet. The  files listed in the following code are available in the download file mentioned earlier in this article.
{
    "name": "NASA picture of the day viewer",
    "version": "0.0.0.1",
    "manifest_version": 2,
    "description": "An extension to display the NASA picture of the day.",     "icons": {
        "16": "icons/nasapod16x16.png",
        "32": "icons/nasapod32x32.png",
        "48": "icons/nasapod48x48.png",         "128": "icons/nasapod128x128.png"     }
} Step 3: Open a default pop-up dialog
HTML file to run when the user launches your extension. Create the HTML file named popup.htmlNow, create a 
popup. When users select the icon to launch the extension, popup/popup.htmlin a directory named  is displayed as a modal dialog.
popup.htmlAdd the code from the following code snippet to  to display the stars image.
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <title>NASA picture of the day</title>     </head>
    <body>
        <div>
            <img src="/images/stars.jpeg" alt="Display the stars image" />
        </div>
    </body>
</html>images/stars.jpegEnsure that you add the image file  to the images folder. The directories of your project should be similar to the following structure.
└── part1
    ├── _manifest.json
    ├── icons
    │   ├── nasapod16x16.png
    │   ├── nasapod32x32.png
    │   ├── nasapod48x48.png     │   └── nasapod128x128.png
    ├── images
    │   └── stars.jpeg     └── popup
        └── popup.htmlmanifest.json under browser_actionFinally, ensure you register the pop-up in , as shown in the following code snippet.
{
    "name": "NASA picture of the day viewer",
    "version": "0.0.0.1",
    "manifest_version": 2,
    "description": "An extension to display the NASA picture of the day.",     "icons": {
        "16": "icons/nasapod16x16.png",
        "32": "icons/nasapod32x32.png",
        "48": "icons/nasapod48x48.png",         "128": "icons/nasapod128x128.png"
    },
    "browser_action": {
        "default_popup": "popup/popup.html"
    }
} Next steps
That's everything you need to develop a working extension. Now, continue on to sideload and test your extension. For more information, see Sideload an extension.
 
 Create an extension tutorial, part 2
 	6/21/2022 • 6 minutes to read • Edit OnlineCompleted extension package source for this part
 Overview
This tutorial covers the following extension technologies:
Injecting JavaScript libraries into an extension.
Exposing extension assets to browser tabs.
Including content pages in existing browser tabs.
Having content pages listen for messages from pop-ups and respond.
You'll learn to update your pop-up menu to replace your static stars image with a title and a standard HTML button. That button, when selected, passes that stars image, which is embedded in the extension, to the content page. That image, is inserted into the active browser tab. Follow the below steps for further details.
1. Remove the image from the pop-up and replace it with a button.
popup.htmlpopup.jsFirst, update your  file with some straightforward markup that displays a title and a button. You'll program that button shortly, but for now, just include a reference to an empty JavaScript file . Here is the updated HTML:
<html>
    <head>
        <meta charset="utf-8" />
        <style>             body {
                width: 500px;
            }             button {
                background-color: #336dab;                 border: none;                 color: white;                 padding: 15px 32px;                 text-align: center;                 font-size: 16px;
            }
        </style>
    </head>
    <body>
        <h1>Display the NASA picture of the day</h1>
        <h2>(select the image to remove)</h2>
        <button id="sendmessageid">Display</button>
        <script src="popup.js"></script>
    </body>
</html>After updating and opening the extension, a pop-up opens with a display button.

2. Update strategy to display image at the top of the browser tab
images/stars.jpegAfter adding the button, the next task is to make it bring up the  image file at the top of the active tab page.
Remember, each tab page runs in its own thread. Also, the extension uses a different thread. First, create a content script that is injected into the tab page. Then, send a message from your pop-up to that content script running on the tab page. The content script receives the message, which describes which image should be displayed.
3. Create the pop-up JavaScript to send a message
popup/popup.jsonclickFirst, create  and add code to send a message to your not-yet-created content script that you must momentarily create and inject into your browser tab. To do that, the following code adds an  event to your pop-up display button.
const sendMessageId = document.getElementById("sendmessageid"); if (sendMessageId) {
  sendMessageId.onclick = function() {
    // do something
  };
}
onclick event, find the current browser tab. Then, use the chrome.tabs.sendmessageIn the  Extension API to send a message to that tab.
popup.jsIn that message, you must include the URL to the image you want to display. Also, send a unique ID to assign to the inserted image. You could let the content insertion JavaScript generate that image ID, but for reasons that become apparent later, you'll generate that unique ID here in , and then pass that ID to the not-yetcreated content script.
popup/popup.jsThe following code outlines the updated code in . You also pass in the current tab ID, which is used later in this article.
const sendMessageId = document.getElementById("sendmessageid"); if (sendMessageId) {
    sendMessageId.onclick = function() {
        chrome.tabs.query({ active: true, currentWindow: true }, function(tabs) {             chrome.tabs.sendMessage(                 tabs[0].id,
                {
                    url: chrome.extension.getURL("images/stars.jpeg"),                     imageDivId: `${guidGenerator()}`,                     tabId: tabs[0].id
                },
                function(response) {                     window.close();
                }             );
            function guidGenerator() {                 const S4 = function () {
                    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
                };
                return (S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4());
            }
        });
    };
}4. Make your stars.jpeg available from any browser tab
images/stars.jpegYou're probably wondering why, when you pass the  must you use the 
chrome.extension.getURL chrome Extension API instead of just passing in the relative URL without the extra
getUrlprefix like in the previous section. By the way, that extra prefix, returned by  with the image attached looks something like the following.
extension://inigobacliaghocjiapeaaoemkjifjhp/images/stars.jpeg
src attribute of the imgThe reason is that you're injecting the image using the  element into the content page.
The content page is running on a unique thread that isn't the same as the thread running the Extension. You must expose the static image file as a web asset for it to work correctly.
manifest.jsonmanifest.jsonAdd another entry in the  file to declare that the image is available to all browser tabs. That entry is as follows (you should see it in the full  file below when you add the content script declaration coming up).
"web_accessible_resources": [
    "images/*.jpeg"
]
popup.jsYou've now written the code in your  file to send a message to the content page that is embedded on the current active tab page, but you haven't created and injected that content page. Do that now.
5. Update your manifest.json for content and web access
manifest.json that includes the content-scripts and web_accessible_resourcesThe updated  is as follows.
{
    "name": "NASA picture of the day viewer",
    "version": "0.0.0.1",
    "manifest_version": 2,
    "description": "An extension to display the NASA picture of the day.",     "icons": {
        "16": "icons/nasapod16x16.png",
        "32": "icons/nasapod32x32.png",
        "48": "icons/nasapod48x48.png",         "128": "icons/nasapod128x128.png"     },
    "browser_action": {
        "default_popup": "popup/popup.html"     },
    "content_scripts": [         {
            "matches": [
              "<all_urls>"
            ],
            "js": ["lib/jquery.min.js","content-scripts/content.js"]
        }
    ],
    "web_accessible_resources": [
        "images/*.jpeg"
    ]
}content_scripts. The matches attribute is set to <all_urls>content_scriptslib\jquery.min.jsThe section you added is , which means that all files in  are injected into all browser tab pages when each tab is loaded. The allowed files types that can be injected are JavaScript and CSS. You also added . You're able to include that from the download mentioned at the top of the section.
6. Add jQuery and understanding the associated thread
$lib\jquery.min.jspopup.jsIn the content scripts that you're injecting, plan on using jQuery (). You added a minified version of jQuery and put it in your Extension package as . These content scripts run in individual sandboxes, which means that the jQuery injected into the  page isn't shared with the content.
Keep in mind that even if the browser tab has JavaScript running on it on the loaded web page, any content injected doesn't have access to that. That injected JavaScript just has access to the actual DOM loaded in that browser tab.
7. Add the content script message listener
content-scripts\content.js
manifest.json
content-scriptsHere is that  file that gets injected into every browser tab page based on your   section.
chrome.runtime.onMessage.addListener(function(request, sender, sendResponse) {     $("body").prepend(
        `<img  src="${request.url}" id="${request.imageDivId}"                class="slide-image" /> `     );
    $("head").prepend(
        `<style>
          .slide-image {               height: auto;               width: 100vw;
          }
        </style>`
    );
    $(`#${request.imageDivId}`).click(function() {
        $(`#${request.imageDivId}`).remove(`#${request.imageDivId}`);
    });
    sendResponse({ fromcontent: "This message is from content.js" });
});listenerNotice that all the above JavaScript does is to register a  using the 
chrome.runtime.onMessage.addListener Extension API method. This listener waits for messages like the one you
popup.js described earlier with the chrome.tabs.sendMessagesent from the  Extension API method.
addListenerThe first parameter of the  method is a function whose first parameter, request, is the details of the
popup.js, when you used the sendMessageurl and imageDivIdmessage being passed in. Remember, from  method, those attributes of the first parameter are .
sendMessageWhen an event is processed by the listener, the function that is the first parameter is run. The first parameter of that function is an object that has attributes as assigned by . That function simply processes the three jQuery script lines.
img element right below the bodyslide-image class assigned as well as the imageDivIdslide-image class to your imgclickThe first script line appends an  of your browser tab that has the 
 as the ID of that image element.
The second script line dynamically inserts into the DOM header a <style> section that you must assign as a  element.
The third script line adds a  event that covers the entire image allowing the user to select anywhere on the image and that image is removed from the page (along with it is event listener).
8. Add functionality to remove the displayed image when selected
Now, when you browse to any page and select your Extension icon, the pop-up menu is displayed as follows.

Display button, you get what is below. If you select anywhere on the stars.jpegWhen you select the  image, that image element is removed and tab pages collapses back to what was originally displayed.

.jpegYou've created an Extension that successfully sends a message from the extension icon pop-up, and dynamically inserted JavaScript running as content on the browser tab. The injected content sets the image element to display your static stars  file.
 
 Sideload an extension
 	6/21/2022 • 2 minutes to read • Edit OnlineDuring development, you can use the Microsoft Edge browser to run and debug your extension safely. By sideloading your extension locally in your browser, you can run and test your extension. This article explains how to sideload extensions into Microsoft Edge.
To sideload an extension:
edge://extensions1. Open the  page by choosing the three dots at the top of your browser, and then selecting Extensions.



edge://extensions2. On the extension management page at , turn on Developer mode using the toggle at the bottom left of the page.

3. When installing your extension for the first time, choose Load Unpacked. You'll be prompted for the directory with your extension source files. Your extension is installed in your browser, similar to extensions installed from the store.

During development, you may also need to do the following:
edge://extensionsedge://extensions, and then select RemoveUpdate the extension. Go to , and then select Reload to update your extension.
Remove the extension from your browser. Go to  on your extension.
 
 Supported APIs for Microsoft Edge extensions
 	6/21/2022 • 5 minutes to read • Edit OnlineWhen building extensions for the Microsoft Edge browser, you can use the following APIs.
APIDESCRIPTIONalarmsSchedule code to run periodically or at a specified time in the future.bookmarksCreate, organize, and manipulate bookmarks.browserActionUse browser actions to place icons on the toolbar in Microsoft Edge. You can also use browser actions to add a tooltip, badge, or popup.browsingDataRemove browsing data from a user's local profile.commandsAdd keyboard shortcuts that trigger actions in your extension. For example, an action to open the browser or send a command to the extension.contentSettingsIn general, content settings allow you to customize the behavior of Microsoft Edge on each site, instead of globally. Change settings that control whether websites can use features such as cookies, JavaScript, and plugins.contextMenusAdd items to the context menu in Microsoft Edge. Menu items may apply to different objects, such as images, hyperlinks, and pages.cookiesQuery and modify cookies, and receive notifications when they change.debuggerAttach to one or more tabs to instrument network interaction, debug JavaScript, change the DOM, change CSS, and so on. Use the debugger tabId to target tabs with sendCommand, and route events by tabId from onEvent callbacks.declarativeContentTake actions depending on the content of a page, without requiring permission to read the page content.declarativeNetRequestProvides more privacy by blocking or modifying network requests by specifying declarative rules. Allow extensions to modify network requests without intercepting the request and viewing the content.desktopCaptureCapture the content of a screen, individual windows, or tabs.devtools.inspectedWindowInteract with the inspected window. For example, obtain the tab ID of pages, evaluate code, refresh pages, or obtain resources on a page.
APIDESCRIPTIONdevtools.networkRetrieve information about network requests displayed by the Developer Tools in the Network panel.devtools.panelsIntegrate your extension into the Developer Tools window UI by creating your own panels, accessing existing panels, or adding sidebars.downloadsProgrammatically start, monitor, manipulate, and search for downloads.enterprise.hardwarePlatformGet the manufacturer and model of the hardware platform where the browser runs. This API is only available to extensions installed by enterprise policy.eventsCommon types used by APIs that raise events to notify you when an interesting event occurs.extensionAny extension page can use the utilities of this API. It includes support for exchanging messages between extensions and content scripts, which is described in Message Passing.extensionTypesContains type declarations for Microsoft Edge extensions.fontSettingsManage font settings in Microsoft Edge.historyInteract with the browser's record of visited pages. You can add, remove, or query for URLs in the browser's history. To override the history page with your own version, navigate to Override Pages.i18nImplement internationalization across your whole app or extension.idleDetect when the machine's idle state changes.managementManage the list of installed or running extensions. It's useful for extensions that override the built-in New Tab page.notificationsCreate rich notifications using templates and display them in the system tray.omniboxRegister keywords in the Microsoft Edge address bar, also known as the omnibox.pageActionAdd icons to the Microsoft Edge toolbar, to the right of the address bar. Page actions are actions that can be taken on the current page, and aren't applicable to all pages. Page actions appear grayed out when inactive.pageCaptureSave tabs as MHTML files.
APIDESCRIPTIONpermissionsRetrieve declared, optional permissions at runtime, instead of at install time. You can use this API to display needed and approved permissions to your users.powerOverride the system's power management features.printerProviderUse events to query printers, their capabilities, and to submit print jobs.privacyControl features in Microsoft Edge that affects a user's
EdgeSettingprivacy. This API depends on the  prototype of
types to get and set the configuration of Microsoft Edge.proxyManage proxy settings for Microsoft Edge. This API depends
EdgeSetting prototype of the typeson the  API to get and set the proxy configuration of Microsoft Edge.runtimeRetrieve the background page, return details about the manifest, and listen for and respond to events in the app or extension lifecycle. You can also convert the relative path of URLs to fully qualified URLs.sessionsQuery and restore tabs and windows from a browsing session.storageStore, retrieve, and track changes to user data.system.memorysystem.memoryThe  API.system.storageQuery information about storage devices. You can also receive notifications when storage devices are attached or detached.tabCaptureInteract with tab media streams.tabsInteract with the browser's tab system to create, modify, and rearrange tabs.topSitesAccess the top sites, also called most visited sites, that are displayed on the new tab page. These sites don't include shortcuts customized by the user.ttsPlay synthesized text-to-speech (TTS).ttsEngineImplement a text-to-speech (TTS) engine using an extension. Extensions that register to use this API receive events that contain utterances to be spoken and other parameters. Extensions can then use any available web technology to synthesize and output speech, and send events back to the calling function to report the status.typesType declarations for Microsoft Edge.webNavigationReceive notifications about the status of navigation requests.APIDESCRIPTIONwebRequestObserve and analyze traffic. Intercept, block, or modify requests.windowsInteract with browser windows to create, modify, and rearrange windows in the browser. Unsupported extension APIs
Microsoft Edge doesn't support the following Extension APIs:
chrome.gcmchrome.identity.getAccountschrome.identity.getAuthToken - As an alternate, you can use launchWebAuthFlowchrome.instanceID.
.
 to fetch an OAuth2 token to
authenticate users.
.
 Additional considerations for supported APIs
 The user must be signed into Microsoft Edge using a Microsoft account (MSA) or Azure Active Directory
chrome.identity.getProfileUserInfonullaccount to use . If the user is signed into Microsoft Edge using an onpremises Active Directory account, the API returns  for the email and ID values.
A Microsoft account (MSA) is an Outlook.com, Live.com, or Hotmail.com account.
identity.getAuthtoken Microsoft Edge doesn't support extensions that use Chrome Web Store payments because it uses  to request tokens for signed-in users. These tokens are sent to the REST-based
licensing API.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here.
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Declare API permissions in extension manifests
 	6/21/2022 • 4 minutes to read • Edit Onlinechrome.* APIs, your extension must declare its intent in the permissionsTo use most of the  fields of the
manifest. An extension can declare permissions using a permission string from the table that follows, or use a pattern to match similar strings. Permissions help to constrain your extension if it gets compromised by malware. Some permissions are displayed to users for their consent before installation of the extension, or at runtime, as needed; these are Permission Warnings.
storageIf an API requires you to declare permissions in the manifest, see the documentation for that API to understand the needed permissions. For example, the Storage API page describes how to declare the  permission.
The following code outlines how to declare permissions in the manifest file:
"permissions": [
  "tabs",
  "bookmarks",
  "http://www.blogger.com/",
  "http://*.google.com/",
  "unlimitedStorage"
]
The following table lists the currently available permission strings to use in your manifest, and the descriptions.
PERMISSION STRINGDETAILS
activeTabactiveTabRequests that the extension is granted permissions according to the  specification.
alarmschrome.alarmsGives your extension access to the  API.
backgroundMakes Microsoft Edge start up early and shut down late, so that extensions may have a longer life. When any installed
backgroundextension has  permission, Microsoft Edge runs
backgroundinvisibly as soon as the user logs into the user's computer, and before the user launches Microsoft Edge. The  permission also makes Microsoft Edge
continue running, even after its last window is closed, until the user explicitly quits Microsoft Edge. This permission doesn't affect extensions that are turned off in the browser.
backgroundThe  permission is normally used on a background page.
bookmarkschrome.bookmarksGives your extension access to the  API.
browsingDatachrome.browsingDataGives your extension access to the API.
certificateProviderchrome.certificateProviderGives your extension access to the  API.
PERMISSION STRINGDETAILS
clipboardReadRequired if the extension uses 
document.execCommand('paste').
clipboardWriteIndicates the extension uses document.execCommand('copy') or document.execCommand('cut') .
contentSettingschrome.contentSettingsGives your extension access to the  API.
contextMenuschrome.contextMenusGives your extension access to the API.
cookieschrome.cookiesGives your extension access to the  API.
debuggerchrome.debuggerGives your extension access to the  API.
declarativeContentchrome.declarativeContentGives your extension access to the  API.
declarativeNetRequestchrome.declarativeNetRequestGives your extension access to the  API.
declarativeNetRequestFeedbackchrome.declarativeNetRequestGrants the extension access to events and methods within the  API, which returns information on declarative rules matched.
declarativeWebRequestchrome.declarativeWebRequestGives your extension access to the  API.
desktopCapturechrome.desktopCaptureGives your extension access to the  API.
documentScanchrome.documentScanGives your extension access to the API.
downloadschrome.downloadsGives your extension access to the  API.
enterprise.deviceAttributesGives your extension access to the 
chrome.enterprise.deviceAttributes API.
enterprise.hardwarePlatformGives your extension access to the 
chrome.enterprise.hardwarePlatform API.
enterprise.networkingAttributesGives your extension access to the 
chrome.enterprise.networkingAttributes API.
enterprise.platformKeyschrome.enterprise.platformKeysGives your extension access to the  API.
experimentalchrome.experimental.*Required if the extension uses any API.
PERMISSION STRINGDETAILS
fileBrowserHandlerchrome.fileBrowserHandlerGives your extension access to the  API.
fileSystemProviderchrome.fileSystemProviderGives your extension access to the  API.
fontSettingschrome.fontSettingsGives your extension access to the API.
geolocationAllows the extension to use the geolocation API without prompting the user for permission.
historychrome.historyGives your extension access to the  API.
identitychrome.identityGives your extension access to the  API.
idlechrome.idleGives your extension access to the  API.
loginStatechrome.loginStateGives your extension access to the API.
managementchrome.managementGives your extension access to the API.
nativeMessagingGives your extension access to the native messaging API.
notificationschrome.notificationsGives your extension access to the API.
pageCapturechrome.pageCaptureGives your extension access to the API.
platformKeyschrome.platformKeysGives your extension access to the API.
powerchrome.powerGives your extension access to the  API.
printerProviderchrome.printerProviderGives your extension access to the  API.
printingchrome.printingGives your extension access to the  API.
printingMetricschrome.printingMetricsGives your extension access to the  API.
privacychrome.privacyGives your extension access to the  API.
processeschrome.processesGives your extension access to the  API.
proxychrome.proxyGives your extension access to the  API.
PERMISSION STRINGDETAILS
scriptingchrome.scriptingGives your extension access to the  API.
searchchrome.searchGives your extension access to the  API.
sessionschrome.sessionsGives your extension access to the  API.
signedInDeviceschrome.signedInDevicesGives your extension access to the  API.
storagechrome.storageGives your extension access to the  API.
system.cpuchrome.system.cpuGives your extension access to the API.
system.displaychrome.system.displayGives your extension access to the  API.
system.memorychrome.system.memoryGives your extension access to the API.
system.storagechrome.system.storageGives your extension access to the  API.
tabCapturechrome.tabCaptureGives your extension access to the API.
tabGroupschrome.tabGroupsGives your extension access to the  API.
tabsTabGives your extension access to privileged fields of the objects that can be used by several APIs, including 
chrome.tabs and chrome.windows. In many
tabscircumstances, your extension doesn't need to declare the  permission, to make use of these APIs.
topSiteschrome.topSitesGives your extension access to the  API.
ttschrome.ttsGives your extension access to the  API.
ttsEnginechrome.ttsEngineGives your extension access to the  API.
unlimitedStorageProvides an unlimited quota for storing client-side data, such as databases and local storage files. Without this permission, the extension is limited to 5 MB of local storage.
vpnProviderchrome.vpnProviderGives your extension access to the API.
wallpaperchrome.wallpaperGives your extension access to the  API.
webNavigationchrome.webNavigationGives your extension access to the API.PERMISSION STRINGDETAILS
webRequestchrome.webRequestGives your extension access to the API.
webRequestBlockingchrome.webRequestRequired if the extension uses the  API to block requests.NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here.
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Port a Chrome extension to Microsoft Edge
 	6/21/2022 • 2 minutes to read • Edit OnlineMicrosoft Edge allows you to port your Chrome extension to Microsoft Edge with minimal changes. The Extension APIs and manifest keys supported by Chrome are code-compatible with Microsoft Edge. For a list of APIs supported by Microsoft Edge, see API support.
To port your Chrome extension:
1. Review the Chrome extension APIs used in your extensions with the Microsoft Edge extensions supported
APIs list.
NOTE
If your extension uses APIs that aren't supported by Microsoft Edge, it might not port directly.
update_URL field to https://edge.microsoft.com/extensionwebstorebase/v1/crx2. In the manifest file, set the .
.crxThe value points to the  file of your extension in the Microsoft Edge Add-ons website and allows Microsoft Edge to check for extension updates.
ChromeMicrosoft Edge3. If  is used in either the name or the description of your extension, rebrand your extension using . To pass the certification process, the changes are required.
4. Test your extension to check if it works in Microsoft Edge by sideloading your extension.
5. If you face any issues, you can debug your extensions in Microsoft Edge by using the DevTools, or contact us.
6. Follow the publishing guidelines to publish your extension on Microsoft Edge Add-ons website.
 Setting allowed_origins for a native app
chrome.runtime.connectNativeallowed_origins to chrome-extension://[Microsoft-Catalog-extensionID]If your extension exchanges messages with a native app by using , make sure that you set  in your native messaging host manifest file. The setting allows the app to identify your extension.
 Next steps
After your extension package is ready to publish in the Microsoft Edge Add-ons website, create a developer account and publish your extension.
 
 Alternative ways to distribute extensions
 	6/21/2022 • 4 minutes to read • Edit OnlineGenerally, extensions are distributed through the Microsoft Edge Add-ons website. There are some scenarios where developers may need to distribute extensions using alternate methods. For example:
1. The extension is associated with other software, and it should be installed together with the rest of the bundled software.
2. Network administrators want to distribute an extension throughout their organization.
Extensions that aren't loaded from the Edge Add-ons store are referred to as externally installed extensions. The following are alternate methods of distributing externally installed extensions:
Use the Windows registry (Windows only).
Use a preferences JSON file (macOS and Linux).
 Before you begin
.crx.crx file using the update_URLMake sure that you publish your extension in the Microsoft Edge Add-ons website, or package a  file and ensure that it installs successfully on your computer. If you install the , make sure you can go to your extension at that URL.
Also, make sure that you have the following information:
.crx file, or the update_URLThe file path of the  of your extension.
edge://extensionsThe version of your extension. The version information is available in your manifest file, or in Microsoft Edge at  after you load the packed extension.
edge://extensions The ID of your extension. The ID information is available in Microsoft Edge at  after you load the packed extension.
1.0 as the version, and aaaaaaaaaabbbbbbbbbbccccccccccThe following examples use  for the ID.
 Use the Windows registry (Windows only)
To distribute your extension using the Windows registry:
1. Find or create the following key in the registry:
HKEY_LOCAL_MACHINE\Software\Microsoft\Edge\ExtensionsHKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Edge\Extensions32-bit Windows: .
64-bit Windows: .
aaaaaaaaaabbbbbbbbbbcccccccccc2. Create a new key, or folder, under Extensions with the same name as the ID of your extension. For example, create the key with the name .
update_url3. In the Extensions key, create the  property, and set the value to 
https://edge.microsoft.com/extensionwebstorebase/v1/crx. The update_url property points to the .crxfile of your extension in the Microsoft Edge Add-ons website.
{
    "update_url": "https://edge.microsoft.com/extensionwebstorebase/v1/crx"
}
NOTE
update_urlIf you want to install an extension from the Chrome Web Store, set the value of  to 
https://clients2.google.com/service/update2/crx.edge://extensions4. Verify that your extension is listed in Microsoft Edge, by going to .
 Use a preferences JSON file (macOS and Linux)
To distribute your extension using a preferences JSON file:
.crx.crx1. When using Linux, ensure your  extension file is available on the machine that the extension will be installed on. Copy the  extension file to a local directory, or use a network share that is reachable from the machine.
aaaaaaaaaabbbbbbbbbbcccccccccc.json2. Create a JSON file where the name of the file corresponds to the ID of your extension. For example, create a JSON file with the file name .
~USERNAME/Library/Application Support/Microsoft Edge/External Extensions//Library/Application Support/Microsoft/Edge/External Extensions/3. Depending on your operating system, save the JSON file to one of the following folders: macOS
User-specific: For all users: 
To prevent unauthorized users from installing extensions for all users, make sure your extension file is read-only.
Also make sure that the following conditions are met:
admin or wheel~/.config/microsoft-edge/External Extensions//usr/share/microsoft-edge/extensions/Every directory in the path is owned by the user root.
Every directory in the path is assigned to the  group.
Every directory in the path isn't world writable.
The path must also be free of symbolic links.
Linux
User-specific: For all users: 
4. Depending on your scenario, copy the appropriate code that follows, into your JSON file.
external_crx	 Applies to Linux only. If you install from a file, specify the location and version in 	 and
external_version:
{
    "external_crx": "/home/share/extension.crx",
    "external_version": "1.0" }update_URL	 Applies to macOS and Linux. If you install from an 	, specify the update URL in 
external_update_url.
.crxCopy the following code into your JSON file when installing from local  files on Linux only:
{
    "external_update_url": "http://myhost.com/mytestextension/updates.xml" }
 Copy the following code to your JSON file when installing from the Microsoft Edge Add-ons website on macOS and Linux:
{
    "external_update_url": "https://edge.microsoft.com/extensionwebstorebase/v1/crx" }
supported_locales5. To install extensions for specific locales, list the supported locales, in .
You can specify parent locales, to install your extension for all language locales that use that parent. For
en, your extension installs for all English locales, such as en-USexample, when using the parent locale , 
en-GBsupported_locales, and so on. When users change their locale in their browser, externally installed extensions are uninstalled. To install your extension for any locale, don't use .
{
    "external_update_url": "https://edge.microsoft.com/extensionwebstorebase/v1/crx",
    "supported_locales": [ "en", "fr", "de" ] }edge://extensions6. Verify that your extension is installed in Microsoft Edge, by going to .
 Update and uninstall externally installed extensions
Microsoft Edge scans the metadata entries in the registry each time the browser starts, and makes any changes to the externally installed extensions.
To update your extension to a new version, update the version in the manifest file, and then update the version in the registry.
You may need to uninstall externally installed extensions, which were installed as part of a bundle of software that was previously installed on the machine. To uninstall your extension, remove your preferences JSON file or remove the key from the registry.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here.
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Native messaging
 	6/21/2022 • 6 minutes to read • Edit OnlineTo communicate with a native Win32 app that's installed on a user's device, an extension uses the messagepassing APIs. The native app host sends and receives messages with extensions using standard input and standard output.
Extensions that use native messaging are installed in Microsoft Edge similar to any other extension. However, native apps aren't installed or managed by Microsoft Edge.
To acquire the extension and native app host, there are two different distribution models:
 Package your extension and the host together. When a user installs the package, both the extension and the host are installed.
 Or, install your extension using the Microsoft Edge Add-ons website, and your extension prompts users to install the host.
To create your extension to send and receive messages with native app hosts, do the following steps.
 Step 1 - Add permissions to the extension manifest
nativeMessagingAdd the  permission to the manifest.json file of the extension.
The following is an example manifest.json file:
{
    "name": "Native Messaging Example",
    "version": "1.0",
    "manifest_version": 2,
    "description": "Send a message to a native app.",     "app": {
        "launch": {
            "local_path": "main.html"
        }
    },
    "icons": {
        "128": "icon-128.png"
    },
    "permissions": ["nativeMessaging"] } Step 2 - Create your native messaging host manifest file
Native apps must provide a native messaging host manifest file. The manifest file contains the following information:
The path to the native messaging host runtime.
The method of communication with the extension.
A list of allowed extensions to which it communicates.
The browser reads and validates the native messaging host manifest. The browser doesn't install or manage the native messaging host manifest file.
Example of a native messaging host manifest file:
{
    "name": "com.my_company.my_app",
    "description": "My App",
    "path": "C:\\Program Files\\My App\\chrome_native_messaging_host.exe",     "type": "stdio",
    "allowed_origins": [
        "chrome-extension://knldjmfmopnpolahpmmgbagdohdnhkik/"
    ]
}
The host manifest file must be a valid JSON file that contains the following keys:
KEYDETAILS
namepass the string to runtime.connectNativeruntime.sendNativeMessage.Specifies the name of the native messaging host. Clients  or 
The value must only contain lowercase alphanumeric characters, underscores, and dots.
The value must not start or end with a dot, and a dot must not be followed by another dot.
descriptionDescribes the app.
pathSpecifies the path to the native messaging host binary. On Windows devices, you can use relative paths to the directory that contains the manifest file.
On macOS and Linux, the path must be absolute.
The host process starts with the current directory set to the directory that contains the host binary. For example
C:\App\nm_host.exeC:\App\(Windows), if the parameter is set to , the binary is started using the current directory (	).
typeSpecifies the type of the interface used to communicate with the native messaging host. The value instructs Microsoft
stdoutstdiostdinEdge to use  and  to communicate with the host. The only acceptable value is .
allowed_originsSpecifies the list of extensions that have access to the native messaging host. To turn on your app to identify and communicate with an extension, in your native messaging host manifest file, set the following value:
"allowed_origins": ["chrome-
extension://{microsoft_catalog_extension_id}"]microsoft_catalog_extension_idSideload your extension to test native messaging with the host. To sideload your extension during development and retrieve :
edge://extensions1. Go to , and then turn on the Developer mode toggle button.
2. Select Load unpacked, and then select your extension package to sideload.
3. Click OK.
edge://extensions4. Go to the  page and verify that your extension is listed.
microsoft_catalog_extension_id5. Copy the key from  (ID) from the extension listing on the page.
allowed_originsWhen you're ready to distribute your extension to users, publish your extension to the Microsoft Edge Add-ons website. The extension ID of the published extension might differ from the ID that's used while sideloading your extension. If the ID changed, update  in the host manifest file with the ID of your published extension.
 Step 3 - Copy the native messaging host manifest file to your system
The final step involves copying the native messaging host manifest file to your computer, and ensuring the manifest file is correctly configured. To ensure your manifest file is placed in the expected location, do the following steps. The location varies by platform.
NOTE
Make sure that you provide read permissions on the manifest file, and run permissions on the host runtime.
 	Windows macOS
Linux
The manifest file may be located anywhere in the file system.  	The app installer must create a registry key and set the default value of the key to the full path of the manifest file. The following locations are examples of registry keys:
HKEY_CURRENT_USER\SOFTWARE\Microsoft\Edge\NativeMessagingHosts\com.my_company.my_app
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Edge\NativeMessagingHosts\com.my_company.my_app
To add a registry key to the directory with the manifest key, do either of the following:
 Run a command in the command prompt:
REG ADD "HKCU\Software\Microsoft\Edge\NativeMessagingHosts\com.my_company.my_app" /ve /t REG_SZ /d "C:\path\to\nmh-manifest.json" /f
.reg	 Or, create a 	 file and run it, as follows:
.reg1. Copy the following command into a  file:
Windows Registry Editor Version 5.00
[HKEY_CURRENT_USER\Software\Microsoft\Edge\NativeMessagingHosts\com.my_company.my_app] @="C:\\path\\to\\nmh-manifest.json"
.reg file. If you run your created .reg2. Run the  file as part of a batch script, make sure you run it using an administrator command prompt.
HKEY_CURRENT_USER root key, followed by HKEY_LOCAL_MACHINEMicrosoft Edge queries the . In both of the keys, the
32-bit registry is searched first, and then the 64-bit registry is searched to identify native messaging hosts. The registry key specifies the location of the native messaging host manifest.
If the registry entries for Microsoft Edge don't have the location of the host manifest, the Chromium and Chrome registry locations are used as fallback options.
If Microsoft Edge finds the registry key at any of the previously listed locations, it doesn't query the locations that are listed in the following code snippet.
The search order for the registry locations is:
HKEY_CURRENT_USER\SOFTWARE\WOW6432Node\Microsoft\Edge\NativeMessagingHosts\
HKEY_CURRENT_USER\SOFTWARE\WOW6432Node\Chromium\NativeMessagingHosts\
HKEY_CURRENT_USER\SOFTWARE\WOW6432Node\Google\Chrome\NativeMessagingHosts\
HKEY_CURRENT_USER\SOFTWARE\Microsoft\Edge\NativeMessagingHosts\
HKEY_CURRENT_USER\SOFTWARE\Chromium\NativeMessagingHosts\
HKEY_CURRENT_USER\SOFTWARE\Google\Chrome\NativeMessagingHosts\
HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Edge\NativeMessagingHosts\
HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Chromium\NativeMessagingHosts\
HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Google\Chrome\NativeMessagingHosts\
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Edge\NativeMessagingHosts\
HKEY_LOCAL_MACHINE\SOFTWARE\Chromium\NativeMessagingHosts\
HKEY_LOCAL_MACHINE\SOFTWARE\Google\Chrome\NativeMessagingHosts\
NOTE
allowed_originsIf you have extensions on the Microsoft Edge Add-ons and the Chrome Webstore, you must add the extension IDs corresponding to both the stores in the  of the host manifest file because only the host manifest corresponding to the first registry location found is read.NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here.
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 
Overview and timelines for migrating to Manifest
V3
 	6/21/2022 • 2 minutes to read • Edit OnlineA manifest file is the blueprint of an extension. It includes information such as the version number of the extension, the title of the extension, and permissions needed to run the extension. Migrating from Manifest V2 to V3 will bring several structural changes to how extensions are handled by the browser.
In October 2020, Microsoft announced the decision to embrace Manifest V3 to help reduce fragmentation of the web for all developers and enhance privacy, security, and performance for end users.
Manifest V3 is an initiative of the Chromium project. Manifest V2 support ends in June of 2023 for all Chromium-based browsers.
An overview of the changes involved, as described in Overview of Manifest V3 - Chrome Developers:
declarativeNetRequestService workers will replace background pages.
Network request modifications will be handled by the new  API.
Remotely hosted code will no longer be allowed. An extension will only be able to execute JavaScript that is included within its own package.
Promise support will be added to many methods. Callbacks will still be supported as an alternative.
A number of minor feature improvements will also be introduced in Manifest V3.
To help you plan, consider the following schedule for Microsoft Partner Center and Microsoft Edge changes.
This timeline is subject to change. This article will be updated to share exact details as the milestones draw nearer.
TIMEFRAMEMICROSOFT PARTNER CENTER CHANGESMICROSOFT EDGE CHANGESJuly 2022Microsoft Partner Center will no longer accept new Manifest V2 extensions
Hiddenwith visibility set as  or 
Public.No change.January 2023Microsoft Partner Center will no longer accept updates to existing Manifest V2 extensions. Developers can submit updates for migrating a V2 extension to V3.Microsoft Edge stops running Manifest
V2 extensions. Enterprises can allow
Manifest V2 extensions to run on Microsoft Edge using Enterprise policies.June 2023No change.Manifest V2 extensions will no longer function in Microsoft Edge even with the use of Enterprise policy.Microsoft continues to iteratively improve the platform and address the feedback shared by extension developers.
Share your questions, comments, and concerns with the team on Twitter @MSEdgeDev or via theMicrosoft Edge Insider forums on TechCommunity.
 
 
Prepare to update your extensions from Manifest V2 to V3
 	6/21/2022 • 2 minutes to read • Edit OnlineThis article lists important changes being implemented as part of Manifest V3, which is the next version of the Chromium Extensions platform. For guidance on migrating your extension to Manifest V3, see Overview of Manifest V3 - Chrome Developers.
 Remotely hosted code
Today, some parts of the extensions code are hosted remotely, and aren't included as part of the extension package during the validation process. While this offers flexibility to change code without resubmitting the extension to the store, it's possible to exploit the code after installation. To ensure that Microsoft Edge Add-ons lists validated extensions, the Microsoft Edge extensions team disallows extensions from using remotely hosted code. This change makes extensions more secure.
eval()Developers will need to package and submit all code that is used by the extension, for validation. Alternatively, you can use the  function in a sandboxed environment.
 Run-time host permissions
At installation time, it's possible for extensions to request blanket permissions to access all sites and content. These permissions allow extensions to operate with minimum intervention, and so present a risk for user privacy and security. To improve transparency, the Microsoft Edge extensions team provides controls that enable users to allow or restrict access to websites at runtime.
 Cross-origin requests in content scripts
Today, content scripts can request access to any origin, including origins that aren't allowed by the website. The behavior breaks cross-origin principles. Going forward, the Microsoft Edge extensions team requires content scripts to have the same permissions as the webpage into which the scripts are injected. This requirement closes a potential security loophole.
To perform cross-origin requests, you need to use background scripts to relay responses back to content scripts. These changes are available and are behind a flag. For more information, see Changes to Cross-Origin Requests in Chrome Extension Content Scripts.
 Web Request API
The Microsoft Edge extensions team replaces the Web Request API by the Declarative Net Request API, but we continue to keep the observational capabilities of the Web Request API. We recommend using the Declarative Net Request (DNR) APIs only, rather than the Web Request API, except in some specific scenarios where observational capabilities of the Web Request API are required by the extension.
This change will have positive impact on extensions that use feature-rich declarative capabilities. As more extensions transition to the Declarative Net Request APIs, this change will improve user privacy, which contributes to trust in the use of extensions.
Enterprises can continue to use the blocking behavior of the Web Request API for extensions that are managed through enterprise policies. For more information about extension policies, see Extensions in Microsoft Edge -
Policies.
 Background service workers
Service workers are available for testing in the Canary preview channel of Microsoft Edge. To migrate your extensions from background pages to service workers, see Migrating from Background Pages to Service Workers. The Microsoft Edge extensions team is evaluating and investigating the impact that this change brings to both developers and users.
 When are these changes available in Microsoft Edge
The current Declarative Net Request API implementation is available in the Microsoft Edge Stable and Beta channels. Please test the changes and provide feedback.
The Microsoft Edge extensions team publishes updates at our blog. You can provide feedback on the changes through Microsoft Tech Community; see Manifest V3 changes are now available in Microsoft Edge.

 
 Manifest file format for extensions
 	6/21/2022 • 2 minutes to read • Edit Onlinemanifest.jsonEvery extension for Microsoft Edge has a JSON-formatted manifest file, named . The manifest file is the blueprint of your extension. The manifest file includes information such as:
The version number of the extension.
The title of the extension.
The permissions that are needed for the extension to run.
manifest.jsonThe format for  for extensions is moving from Manifest V2 to Manifest V3. Both formats are shown here. To migrate a Manifest V2 extension to Manifest V3, see Prepare to update your extensions from Manifest V2 to V3.
 Format of manifest.json for extensions using Manifest V3
manifest.jsonThe following code shows the fields that are supported in  for extensions, for a Manifest V3 package.
For reference information about each field, see Manifest file format (V3) and then select the links on the fields.
{
  // Required
  "manifest_version": 3,
  "name": "My V3 Extension",   "version": "versionString",
  // Recommended
  "action": {...},
  "default_locale": "en",
  "description": "A plain-text description",
  "icons": {...},
  // Optional
  "action": ...,
  "author": ...,
  "automation": ...,
  "background": {
    // If `background` is included, `service_ worker` is required
    "service_worker": ...
  },
  "chrome_settings_overrides": {...},
  "chrome_url_overrides": {...},
  "commands": {...},
  "content_capabilities": ...,
  "content_scripts": [{...}],
  "content_security_policy": "policyString",
  "converted_from_user_script": ...,
  "current_locale": ...,
  "declarative_net_request": ...,
  "devtools_page": "devtools.html",
  "differential_fingerprint": ...,
  "event_rules": [{...}],
  "externally_connectable": {
    "matches": ["*://*.contoso.com/*"]
  },
  "file_browser_handlers": [...],
  "file_system_provider_capabilities": {    "configurable": true,
    "configurable": true,
    "multiple_mounts": true,
    "source": "network"
  },
  "homepage_url": "http://path/to/homepage",
  "host_permissions": [...],
  "import": [{"id": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}],
  "incognito": "spanning, split, or not_allowed",
  "input_components": ...,
  "key": "publicKey",
  "minimum_chrome_version": "versionString",
  "nacl_modules": [...],
  "natively_connectable": ...,
  "oauth2": ...,
  "offline_enabled": true,
  "omnibox": {
    "keyword": "aString"
  },
  "optional_permissions": ["tabs"],   "options_page": "options.html",
  "options_ui": {
    "chrome_style": true,     "page": "options.html"   },
  "permissions": ["tabs"],
  "platforms": ...,
  "replacement_web_app": ...,
  "requirements": {...},
  "sandbox": [...],
  "short_name": "Short Name",
  "storage": {
    "managed_schema": "schema.json"
  },
  "system_indicator": ...,
  "tts_engine": {...},
  "update_url": "http://path/to/updateInfo.xml",
  "version_name": "aString",
  "web_accessible_resources": [...] } Format of manifest.json for extensions using Manifest V2
manifest.jsonThe following code shows the fields that are supported in  for extensions, for a Manifest V2 package.
For reference information about each field, see Manifest file format (V2) and then select the links on the fields.
{
  // Required
  "manifest_version": 2,
  "name": "My V2 Extension",   "version": "versionString",
  // Recommended
  "default_locale": "en",
  "description": "A plain-text description",
  "icons": {...},
  // Pick one or none
  "browser_action": {...},
  "page_action": {...},
  // Optional
  "action": ...,
  "author": ...,
  "automation": ...,
  "background": {
    // If `background` is included, `persistent` is recommended     "persistent": false,
    // If `background` is included, `service_worker` is optional
    "service_worker": ...
  },
  "chrome_settings_overrides": {...},
  "chrome_url_overrides": {...},
  "commands": {...},
  "content_capabilities": ...,
  "content_scripts": [{...}],
  "content_security_policy": "policyString",
  "converted_from_user_script": ...,
  "current_locale": ...,
  "declarative_net_request": ...,
  "devtools_page": "devtools.html",
  "differential_fingerprint": ...,
  "event_rules": [{...}],
  "externally_connectable": {
    "matches": ["*://*.contoso.com/*"]
  },
  "file_browser_handlers": [...],
  "file_system_provider_capabilities": {
    "configurable": true,
    "multiple_mounts": true,
    "source": "network"
  },
  "homepage_url": "http://path/to/homepage",
  "host_permissions": ...,
  "import": [{"id": "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}],
  "incognito": "spanning, split, or not_allowed",
  "input_components": ...,
  "key": "publicKey",
  "minimum_chrome_version": "versionString",
  "nacl_modules": [...],
  "natively_connectable": ...,
  "oauth2": ...,
  "offline_enabled": true,
  "omnibox": {
    "keyword": "aString"
  },
  "optional_permissions": ["tabs"],   "options_page": "options.html",
  "options_ui": {
    "chrome_style": true,     "page": "options.html"   },
  "permissions": ["tabs"],
  "platforms": ...,
  "replacement_web_app": ...,
  "requirements": {...},
  "sandbox": [...],
  "short_name": "Short Name",
  "storage": {
    "managed_schema": "schema.json"
  },
  "system_indicator": ...,
  "tts_engine": {...},
  "update_url": "http://path/to/updateInfo.xml",
  "version_name": ...,
  "web_accessible_resources": [...] }NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here.
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Register as a Microsoft Edge extension developer
 	6/21/2022 • 6 minutes to read • Edit OnlineIf you're new to Partner Center, this article will help you create a Partner Center account through which you can submit Microsoft Edge extensions to the Microsoft Edge Add-ons website.
If you have a Partner Center account, but the Primary Owner of the account isn't a Microsoft account (MSA), this article will help you create and link a suitable account. This article will help you create a Microsoft account (MSA) if you don't have one, and will help you link the Microsoft account (MSA) to your Partner Center account.
To add and manage users in the Microsoft Edge program to manage extensions, you can associate your Partner Center account with your organization's Azure Active Directory (Azure AD) tenant.
 Types of accounts related to publishing Microsoft Edge extensions
TYPE OF ACCOUNTDESCRIPTIONMicrosoft account (MSA)An Outlook.com, Live.com, or Hotmail.com account.GitHub accountA user account at GitHub.com. You can use your personal GitHub account to login to Partner Center-a Microsoft account (MSA) will be created for you.Partner Center account, Partner Center developer accountA Partner Center account is an account on partner.microsoft.com. To submit Microsoft Edge extensions, you need a Partner Center developer account, which is a Partner Center account that has a Microsoft account (MSA) as the Primary Owner.Microsoft Edge Program accountEnables multiple users to work with Microsoft Edge extensions at Partner Center.Azure Active Directory, AD account, Azure ADAn Azure Active Directory account.Azure Active Directory tenant, AAD tenantA tenant represents an organization. A tenant is a dedicated instance of Azure AD that an organization or app developer receives at the beginning of a relationship with Microsoft. Before you begin
To submit an extension to the Microsoft Edge Add-ons website, you must be registered as a developer with the
Microsoft Edge program. You register for the Microsoft Edge program at Partner Center. To register for the Microsoft Edge program, you need a Microsoft account (MSA). If you don't have a Microsoft account (MSA), create one. One way to create a Microsoft account (MSA) is to use your existing GitHub account to log in to Partner Center. Follow the prompts displayed in the dialog boxes to automatically create a Microsoft account (MSA).
NOTE
There is no registration fee for submitting extensions to the Microsoft Edge program.
If you don't have a Partner Center account, or you have a Partner Center account but its Primary Owner isn't a Microsoft account (MSA), you must either:
Use an existing Microsoft account (MSA) to register with the Microsoft Edge program.
Create a new Microsoft account (MSA). A Microsoft account (MSA) is an Outlook.com, Live.com, or Hotmail.com account.
To create a Microsoft account (MSA):
1. Decide if you want to use your existing GitHub account to create a Microsoft account (MSA). See Publish Microsoft Edge extensions by using a GitHub account.
2. If you aren't using your GitHub account to create the Microsoft account (MSA), see account.microsoft.com.
3. Select Create a Microsoft account.
4. Complete the registration steps.
If you have a Partner Center account for which the Primary Owner is a Microsoft account (MSA), use that Microsoft account (MSA) to sign into your Partner Center account. Then enroll in the Microsoft Edge program.
Note that The Microsoft Edge program doesn't currently support registering with a work or school account. You must register using a Microsoft account (MSA) and then link your Azure AD tenants with that account, to be able to manage extensions.
 Enroll in the Microsoft Edge program on Partner Center
1. Navigate to the Partner Center developer login page, and then select Partner Center.
2. If you have a Microsoft account (MSA), use it to sign into Partner Center. A Microsoft account (MSA) is an Outlook.com, Live.com, or Hotmail.com account. Then fill in the Microsoft Edge program registration form, using the table below.
3. If you don't have a Microsoft account (MSA), either create a new Microsoft account (MSA) directly, or login to Partner Center by using your GitHub account using the next step. The Partner Center account must have a Primary Owner that's a Microsoft account (MSA). If you want to login to Partner Center by using your existing personal GitHub account, open the article Publish Microsoft Edge extensions by using a GitHub account in a new tab or window, and follow the steps. Your GitHub account will be linked to an automatically created Microsoft account (MSA) whose credentials you can use to register for the Microsoft Edge program.
4. After you sign in, a registration form is displayed, to enroll in the Microsoft Edge program. To help you fill in the registration form, see the next section.
5. Before submitting your registration form, read and accept the terms and conditions of the Microsoft Edge Developer Agreement.
6. To complete your enrollment, select Finish.
 Filling in the registration form
Fill in the fields of the registration form as follows.
 Account country/region 
This field is either where you live, or where your business is located.
IMPORTANT
After enrollment, the value of this field is read-only.
 Account type 
The Microsoft Edge program in Partner Center offers both individual and company accounts. The accounts are described in detail in the following sections. Both account types enable you to publish extensions to the Microsoft Edge Add-ons website.
IMPORTANT
After enrollment, you aren't able to change the value of this field.
 Individual account 
An individual account is appropriate for a developer not associated with a company. The account verification process is shorter and involves verifying that the publisher display name is available.
 Company account 
A company account is associated with an organization or business. The account verification process is longer and involves confirmation that you are authorized to create the account for your company. The duration of the process can range from a few days to a few weeks. Your company might receive phone calls from Microsoft verification partners.
For a company account, it is crucial to verify your Microsoft Edge program information when you enroll into a new Partner Center program. This is required to publish extensions to the Microsoft Edge Add-ons store. See Verify your Microsoft Edge Partner Center program information.
 Publisher display name 
This field contains the name that's displayed in the Microsoft Edge Add-ons website. To use a particular name, that name must be available, and you must have the rights to use it. Company accounts must use the registered business name of your organization.
The maximum length for this field is fifty (50) characters.
 Contact details 
This field contains any contact information that Microsoft uses to contact you about any account issues. After registration is complete, you receive an email confirmation. For a company account, you must use the registered email address associated with your organization.
 Company approver 
For a company account, you must provide the contact information of your company approver. The contact information includes name, email address, and phone number. As a part of the verification process, Microsoft contacts the specified company approver, to make sure that your extension belongs to your organization.
 Next steps
To display your verification status, go to Partner Center and then select Account settings. Continue to build, test, and prepare your submissions while you wait for the verification process to complete.
Publish an extension
Extension concepts and architecture
Add users to the Microsoft Edge program - Adding additional users to your Microsoft Edge program and your Partner Center developer account. To enable adding users, you associate your organization's Azure Active Directory account with your Microsoft account (MSA) on Partner Center.
 See also
 Quickstart: Set up a tenant - General information about Azure Active Directory (Azure AD) tenants, in the Active Directory documentation.

 
 
Verify the company account information associated with your Microsoft Partner Center account
 	6/21/2022 • 5 minutes to read • Edit OnlineWhen you enroll in the Microsoft Edge program on Partner Center to publish extensions or change legal details in your profile, Microsoft verifies the information that you provide. Information can include your company name, company address, and primary contact details. During this process, Microsoft may send email to your primary contact to request verification.
You can go to Legal info in Partner Center to monitor verification status for the Microsoft Edge Developer program.
When account verification is complete, you can use your Partner Center dashboard to publish your extension to the Microsoft Edge Add-ons website.
Verification usually takes three to five business days. If more than five days have passed, you can contact Microsoft Edge Extensions support for assistance.
 What is verified and what is required for a company account?
This section describes the types of verification, what is verified, and suggestions for meeting verification requirements.
 Verify Email ownership 
Email ownership verifies that the primary contact (primary email) address is valid.
The primary contact email address must be a work account that is monitored and can send and receive email.
Avoid using a personal email address not associated with the company domain, such as <alias>@contoso.com.
Avoid using a tenant user credential that's not associated with email, such as <alias>@contoso on microsoft.com.
 Suggestions 
Be sure to flag email from Microsoft.com as a safe domain, and check junk email folders.
If you don't receive the email ownership verification email message within one business day, you can ask us to send the email again. On to your Partner Center account, go to Home > Account settings. On the Account
settings | My profile page, select Resend verification email.
 Verify Employment 
Employment verification confirms that your primary contact is an employee of the enrolling company and that the domain entered in the registration form belongs to the enrolling company.
The company's public website has the same domain as entered in the registration form. The contact has an active email address on an email domain owned by the company.
 Suggestions 
For verification proof, you may submit a screenshot of the website showing name, address, contact information, and domain of the organization.
If employment verification is rejected, or if the domain of the registered email is not the same as the employer's
public domain, you must provide documentation confirming your email domain is under the ownership
of your employer, in the form of:
Assignment letter from an authorized representative of the organization.
Domain ownership records, such as whois.
Domain purchase invoices or registry confirmation records.
 Verify Business 
Business verification confirms that the enrolling company is a legitimate business entity and at the stated address.
 Suggestions 
Submit one of the following documents for business verification:
Formation documents, such as articles of incorporation, partnership deed.
Franchise or agency appointment letters.
Government issued letter, license, business registration, or tax registration certificate.
Lease or tenancy documents.
Letter or statement from a financial institution or a utility company.
Record on a Government registry website. The site/link must be displayed.
Stock exchange filings or tax filing records.
External company databases, such as Dun & Bradstreet (DUNS ID) or state registry. Receipt from the company's home country, municipality.
Confirm that the company name and address in your Legal business profile have no spelling errors or abbreviations. They must match your formal company business registration records exactly. If appropriate, select the match found in external company databases, such as Dun & Bradstreet (DUNS ID) or state registry.
Microsoft uses this documentation to verify that the company is authorized to do business under that name, and that it is located at the address provided. For further assistance, go to your profile page to upload additional proofs through the interactive vetting experience; see the next section, Checking your verification status.
 Checking your verification status
You can check verification status at Partner Center in Account Settings | Legal Info, where you can see:
1. One or more tabs such as Partner, Developer, or Reseller, depending on the programs in which your organization is enrolled.
2. The Developer tab includes the Account details progress bar showing the stages of verification and any pending stages.
3. Your verification status: Pending, Authorized/Accepted, or Action Required/Rejected, with a status icon.
4. The Legal business profile progress bar with an information icon you can select to get more information.
5. A Fix now button to begin resolving verification issues.
 Verification status
There are three possible results when you check your verification status:
 Authorized/Accepted: The information you submitted was verified, and you're notified of your acceptance into the program. No further action is required.
 Pending: The verification process has started but isn't complete. If you have completed the email verification step, no additional action is required on your part. You can monitor verification status at Account Settings | Legal Info. Verification usually takes three to five business days.
 Action Required/Rejected: The information you submitted couldn't be verified. The reason, and instructions for how to appeal, appear in the Account Verification pane. See Appealing a rejected application, below.
 Appealing a rejected application
To appeal a rejected application:
1. At Account Settings | Legal Info, select Fix now.
2. In Account Verification, from Select document type to upload, select the type of document that you want to upload for verification.
3. In Enter your comment, you can enter more information about your appeal.
4. Select Upload.
The amount of time required to review an appeal varies. You can return to Account Settings | Legal Info to check verification status at any time. Verification status is Pending during the review.

NOTE
Switching back to an individual account from an enterprise account is not possible. Refer to the documentation to make an informed decision.
 Next steps
To view your verification status, go to Partner Center and then select Account settings. Continue to build, test, and prepare your submissions while you wait for the verification process to complete.
Publish an extension
Extension concepts and architecture
Add users to the Microsoft Edge program - Adding additional users to your Microsoft Edge program and your Partner Center developer account. To enable adding users, you associate your organization's Azure Active Directory account with your Microsoft account (MSA) on Partner Center.
 
 
Publish Microsoft Edge extensions by using a GitHub account
 	6/21/2022 • 2 minutes to read • Edit OnlineIf you are a GitHub user, you don't need to create a new Microsoft account (MSA) and remember additional passwords. You can just use GitHub authentication to sign into Partner Center and publish your Microsoft Edge extensions to the Microsoft Edge Add-ons website.
NOTE
Currently, you can only use your personal GitHub account to login to Partner Center. You cannot use your work account on GitHub to log in; that isn't currently supported.
An Microsoft account (MSA) is an Outlook.com, Live.com, or Hotmail.com account. This article discusses several types of accounts; for an overview, see Types of accounts related to publishing Microsoft Edge extensions.
To begin submitting extensions by using GitHub, register for the Microsoft Edge program in Partner Center by using your GitHub credentials. You'll need to link your GitHub account to a Microsoft account (MSA), as follows.
The Microsoft account (MSA) will be created for you if necessary.
 Step 1: Go to Partner Center to sign in
Go to the Partner Center dashboard. You'll be taken to the Sign-in page, with an option to sign in with your Microsoft account (MSA).
 Step 2: Select "Sign-in options" to view alternative sign-in options
Select Sign-in options at the bottom of the page, and then select Sign in with GitHub. Enter your GitHub account credentials that you want to use to publish Microsoft Edge extensions.
 Step 3: Authorize Microsoft to access your GitHub account
Microsoft requires your permission to access your GitHub account. Select Authorize Microsoft-corp.
 Step 4: Microsoft links your GitHub credentials with your Microsoft account (MSA)
Microsoft checks whether your GitHub account is already linked to a Microsoft account (MSA). If your GitHub account isn't linked to a Microsoft account (MSA), Microsoft will create a new Microsoft account (MSA) and link it to your GitHub credentials.
 Step 5: Register for Microsoft Edge Program on Partner Center using the newly linked GitHub account
After your GitHub account is linked to a Microsoft account, you can start using your GitHub account to register as a Microsoft Edge extension developer to publish extensions free of charge. See Register as a Microsoft Edge extension developer.
After you are registered for the Microsoft Edge program, you can port your Chrome extensions to Microsoft
Edge. To help manage your Microsoft Edge extensions, you can add more users to the Partner Center account by linking an Azure Active Directory (Azure AD) account with your Partner Center account. See Add users to the Microsoft Edge program.
 Contact us
Let us know if this was helpful or if you have any feedback. For help with signing into Partner Center using GitHub or other related questions, see Contact Microsoft Edge extensions support.
 See also
 Publish a Microsoft Edge extension

 
 Add users to the Microsoft Edge program
 	6/21/2022 • 5 minutes to read • Edit OnlineTo help manage Microsoft Edge extensions, you can add more users to an existing Partner Center account. To manage Microsoft Edge extensions, the Primary Owner of the Partner Center account must be a Microsoft account (MSA).
A Microsoft account (MSA) is an Outlook.com, Live.com, or Hotmail.com account. For an overview, see Types of accounts related to publishing Microsoft Edge extensions.
 Making sure you have a Partner Center account with a Microsoft account (MSA) as the Primary Owner
To create a Partner Center account that can publish Microsoft Edge extensions, you must have a Microsoft account (MSA), either by creating one directly or by using your personal GitHub account credentials.
After your Partner Center account is able to publish Microsoft Edge extensions, you can link the Partner Center account to an Azure Active Directory (Azure AD) tenant. A linked Active Directory tenant enables the added users to login to your Partner Center developer account by using their work accounts.
Different programs on Partner Center require different types of accounts:
 The Microsoft Edge program (like the Windows developer program) requires a Partner Center developer account. A Partner Center developer account has a Primary Owner that's a Microsoft account (MSA).
 In contrast, Azure marketplace requires a Partner Center commercial account. (To enroll, the user has to login with their work account.)
Also see these articles in the Partner Center documentation:
Manage your Partner Center account
Microsoft Partner Network membership benefits
 Step 1: Enroll in the Microsoft Edge program on Partner Center
First, determine whether you have a Partner Center account. If you have a Partner Center account, determine whether the Primary Owner is a Microsoft Account (MSA), which is required for joining the Microsoft Edge program, to manage Microsoft Edge extensions. Then follow the steps in the section that applies to your type of Partner Center account.
 If you don't have a Partner Center account 
1. Use a Microsoft account (MSA)to register with the Microsoft Edge program, by following the steps in the article Register as a Microsoft Edge extension developer. As mentioned in that article, you can use your GitHub account to create a Microsoft account (MSA).
Next, do Step 2: Associate Azure Active Directory with your Microsoft Edge Program account below.
	 If the Primary Owner of your Partner Center account isn't a Microsoft account  	(MSA)
For a Partner Center account to manage Microsoft Edge extensions, the Primary Owner of the Partner Center account must be a Microsoft account (MSA).
To determine whether the Primary Owner of your Partner Center account is a Microsoft account (MSA):
1. Use the Microsoft account (MSA) which corresponds with your Partner Center commercial account to sign in to your Partner Center commercial account.
2. Navigate to Account settings > User management at Partner Center.
3. Check whether the Primary Owner of the Partner Center account is a Microsoft account (MSA). If the Primary Owner isn't a Microsoft account (MSA), that means that this is a Partner Center commercial account rather than a Partner Center developer account.
4. Use a Microsoft account (MSA) (not a work Microsoft account (MSA) or a school Microsoft account (MSA))to register with the Microsoft Edge program, by following the steps in Register as a Microsoft Edge extension developer.
Next, do Step 2: Associate Azure Active Directory with your Microsoft Edge Program account below.
	 If the Primary Owner of your Partner Center account is a Microsoft account  	(MSA)
1. If you are already signed in to Partner Center using your work Microsoft account (MSA), sign out. The Microsoft Edge program on Partner Center doesn't support enrolling by using a work Microsoft account (MSA) or a school Microsoft account (MSA).
2. Use the Microsoft account (MSA) which corresponds with your Partner Center developer account to sign in to your Partner Center developer account.
3. Navigate to Account settings > User management at Partner Center.
4. Find out who is the Primary Owner of the Partner Center developer account.
5. Verify that the Primary Owner of the Partner Center developer account is a Microsoft account (MSA) user. This must not be a work Microsoft account (MSA) or a school Microsoft account (MSA).
6. Have the Primary Owner of the Partner Center developer account register for the Microsoft Edge program by following the steps in Register as a Microsoft Edge extension developer.
Next, do Step 2: Associate Azure Active Directory with your Microsoft Edge Program account below.
 Step 2: Associate Azure Active Directory with your Microsoft Edge Program account
Next, you'll link your Azure Active Directory tenants (Azure AD tenants) with your Microsoft Edge Program account, to enable managing Microsoft Edge extensions. You can use Azure Active Directory to add users to your Microsoft Edge Program account and manage those users in that account. You can add individual users, groups of users, or Azure Active Directory applications.
To be able to add users to your Microsoft Edge Program account, and to manage those users in that account, you must first associate your Microsoft Edge Program account with your organization's Azure Active Directory tenant (Azure AD tenant). If your organization already uses Office 365 or other business services from Microsoft, you already have an Azure AD tenant. Otherwise, you can create a new Azure AD tenant for free.
To create an AD tenant, see Create a brand new Azure AD to associate with your Partner Center account in the article Associate Azure Active Directory with your Partner Center account.
Also see Associate Azure Active Directory with your Partner Center account, in the Windows UWP documentation. Associating an Azure AD tenant with a Microsoft Edge Program account at Partner Center works the same way as associating a tenant with the Windows apps developer program.
IMPORTANT
If you have added users after associating your Azure AD tenant with your Microsoft account on Partner Center, note that changing roles or permissions of users isn't currently supported. However, you can continue to add as many users as you require and use the filter option of the user management section to locate admins of specific roles.
 Step 3: Add users, groups, and Azure Active Directory applications to your account
After you've set up the Azure Active Directory association, on the Partner Center you can add users at Account settings > User management. Each user has full access the extensions available in the program. You can also add groups of users, or add Azure Active Directory applications, to grant them access to your Partner Center account.
For more information about adding users, see Add users, groups, and Azure AD applications in the Windows UWP documentation.
 Contact us
If you need help or assistance with associating your Azure Active Directory account or other related queries, Contact Microsoft Edge extensions support.
 See also
 Quickstart: Set up a tenant - General information about Azure Active Directory (Azure AD) tenants, in the Active Directory documentation.

 
 Publish a Microsoft Edge extension
 	6/21/2022 • 10 minutes to read • Edit OnlineAfter you develop and test your Microsoft Edge extension, you're ready to distribute your extension. Use the Microsoft Edge Add-ons website to distribute your extension. To release your existing Chromium extension for Microsoft Edge users, see port your existing Chromium extension.
Publish your extension to the Microsoft Edge Add-ons website to increase its reach and make it available to other Microsoft Edge users. This article provides the process to submit your extension to the Microsoft Edge Add-ons website.
 Before you begin
You should have a working prototype of your extension ready. For information on how to create an extension, see Extension concepts and architecture.
To publish your extension to the Microsoft Edge Add-ons website, use your active developer account on Partner Center. If you don't have a developer account, create a new developer account. To open a new developer account and register to the Microsoft Edge add-ons program, see Developer registration.
Create a zip file that represents your extension package. Your extension package must include the following files:
 The extension manifest that specifies details such as the name of the extension, short description, permissions, and default language.
 Images and other files required by your extension.
The following fields in the manifest are automatically included in your store listing details. The fields are readonly on the Store listings webpage. The store listings webpage is described later in this article. Before uploading your package to Partner Center, make sure that the field values match your preferred display on the store details webpage, as follows.
In the manifest file, review these fields:
NameDescriptionThe  field, which populates the Display name on the store details webpage.
The  field, which populates the Short description on the store details webpage.
DescriptionFill in the  field, to explicitly provide a catchy description that will be displayed at the top of the listing for your extension.
short description If you include a 	 in the extension manifest file, that short description is displayed in your store listing.
short description in the manifest file, the first few lines of the Description If you don't include a 
short descriptionare displayed in your store listing. We recommend providing a , to avoid content repetition on your store listing webpage.
 Submit your extension to the Microsoft Edge Add-ons website
To submit your extension to Partner Center:
1. Start a new submission.
2. Upload the extension package.
3. Provide Availability details.
4. Select Properties for your extension.
5. Add Store listing details for your extension.
6. Complete your submission.
The rest of the article provides details about these steps.
 Step 1: Start a new submission
Go to the developer dashboard and then select Create new extension on the Overview webpage.
 Step 2: Upload the extension package
1. Go to the Packages webpage to upload the zip file of your extension package.
You can only upload one package at a time. Your submission is blocked if the package upload isn't successful on the Packages webpage.
2. To upload your package, drag and drop the zip file to the Drag your package here (.zip) section of the webpage. Or you can select Browse your files to open a dialog box to select the package to upload.
After your package is uploaded, it is validated. If there is a validation error, resolve the issue and try uploading your package again.
3. When validation succeeds, review the extension details, and then select Continue to proceed.
 Step 3: Provide Availability details
On the Availability webpage, enter the following information about the availability of your extension.
 Visibility 
Select one of the following visibility options to define whether your extension is discoverable in the Microsoft Edge Add-ons website.
Public (default) - Allows everyone to discover your extension through search, browsing in the Microsoft Edge Add-ons website, or using the listing URL to your extension in the Microsoft Edge Add-ons website. The listing URL is available on your Partner Center dashboard on the Extension Overview webpage.
Hidden - Removes extensions from search results or browsing in the Microsoft Edge Add-ons website. To distribute hidden extensions in the Microsoft Edge Add-ons website, you must share the listing URL to the extension with your customers.
You can change the visibility of your extension from Public to Hidden. Users who installed your extension while the visibility was set to public retain access to your extension and receive any updates you make available through the Microsoft Edge Add-ons website.
 Markets 
Define the specific markets in which you plan to offer your extension. The default setting for markets is all markets and that includes any future markets that are added later.
1. To choose specific markets, select Change markets.
2. Toggle individual markets to exclude each one or select Unselect all and then add individual markets of your choice.
You can change the markets where your extension is offered. A user who installs your extension while it is available in the user's market retains access to your extension. However, the user doesn't have access to any future updates that are submitted to the Microsoft Edge Add-ons website.
3. Click Save & Continue to continue to the Properties section.
 Step 4: Select Properties for your extension
On the Properties webpage, enter the following information to specify properties of your extension. The properties are displayed to users at the Microsoft Edge Add-ons website.
EXTENSION PROPERTY NAMEDESCRIPTIONCategory (required)The category that best describes your extension. Listing your extension in the right category helps users find your extension easily and understand more about it.Privacy policy requirements (required)Indicate if your extension accesses, collects, or transmits any personal information. Your extension might fail the certification step if you select Yes and you don't provide a 
Privacy policy URL.Privacy policy URLA valid privacy policy URL to communicate how your extension follows privacy laws and regulations. You're responsible for ensuring your extension follows privacy laws and regulations. You're also responsible for providing a privacy policy URL if any personal information is being accessed, transmitted, or collected by your extension. To determine if your extension requires a privacy policy, see Microsoft Edge Developer Agreement and Microsoft Edge Add-ons website developer policies.Website URLWebsite URLWebsite URLA webpage that provides additional information about your extension. The  must point to a webpage on your own website, not the web listing for your extension in the Microsoft Edge Add-ons website. The helps users learn more about your extension, its features, and any other relevant information.Support contact detailsThe URL to your support webpage, or the email address to contact your support team.Mature contentCheckbox to specify if your extension includes mature content. Extension rating helps determine the appropriate age group of the target audience of your extension. To help determine if your extension has mature content, see Microsoft Edge Add-ons website developer policies.Select Save & Continue to continue to the Store listings section.
IMPORTANT
Your developer/organization name, website URL, and support contact details that you submitted during registration are displayed to users on the Microsoft Edge Add-ons website.
 Step 5: Add Store listing details for your extension
The information provided in the following section is displayed to users who review your listing on the Microsoft Edge Add-ons website. Even though some fields are optional, you should provide as much information as possible. To list your extension in the store, the following details are required.
Description for each language in your extension package. To support multiple languages, you can use the internationalization API (chrome.i18n).
Extension Store logo for each language in your extension package.
NOTE
The minimum required store listing details must be filled-out for at least one of the languages mentioned in your extension zip package. To add or remove languages in your store listing on the Microsoft Edge Add-ons website, use the Add a language dropdown list on the Store listings webpage. Additionally, you can duplicate your assets from one language across others using the Duplicate functionality button on the Language details webpage.
LANGUAGE DETAILS PROPERTY NAMEDESCRIPTIONDisplay name (required)nameThe  of your extension specified in the manifest file of your extension. To change the store display name after submission, you can update the name in the manifest file, create a new extension package, and then reupload it.Description (required)descriptionThe  field focuses on explaining what your
extension does, why users should install it, or other relevant information that users need to know. It should be less than 10,000 characters.Extension Store logo (required)extension logoAn image that represents your company or  with an aspect ratio of 1, and
recommended size of 300 x 300 pixels. Additionally, you can copy the asset from one language to all other languages using the Duplicate button. This button is found following the field after you upload your logo for the language.Small promotional tile (optional)Small promotional tileThe  image is used to display
your extension alongside other extensions in the store. The size of the image should be 440 x 280 pixels. Additionally, you can copy the asset from one language to all other languages using the Duplicate button. The button is found following the field after you upload a promotional tile for the language.Screenshots (optional)screenshotsYou can submit a maximum of 10  describing the functionality of your extension in detail. The size of the screenshots must be either 640 x 480 pixels or 1280 x 800 pixels. Additionally, you can copy the asset from one language to all other languages using the Duplicate button. The button is found following the field after you upload at least one for the language.Large promotional tile (optional)Large promotion tiles are used in the store to feature
extensions more prominently in the Microsoft Edge Add-ons website. The images, if submitted, are visible to the users.
The size of the PNG files must be 1400 x 560 pixels.
Additionally, you can copy the asset from one language to all other languages using the Duplicate button. The button is found following the field after you upload a promotional tile for the language.LANGUAGE DETAILS PROPERTY NAMEDESCRIPTIONYouTube video URL (optional)You can include a promotional YouTube video of your
YouTube video URLextension. The  video is displayed on the store listing webpage of your extension.Short description (required)short descriptionTo edit the , you must update the
description field in your manifest file of your extension package and re-upload it.Search terms (optional)Search terms are single words or phrases that help
discover your extension when a user searches in the Microsoft Edge Add-ons website. The search terms aren't displayed to users. YouTube video URL requirements 
Make sure your video meets the following requirements.
 Verify that the content of the YouTube video follows the Microsoft Edge Add-ons website developer policies.
 Turn off advertisements on your video. For more information, see Set your default ad formats and Ads on embedded videos.
 Turn on embedding for your videos. For more information, see Embed videos & playlists.
To submit the YouTube video URL of your video:
1. On YouTube, locate the video that you want to add to your store listing webpage.
2. Under the video, select Share > Embed.
3. Copy the HTML code that is displayed.
YouTube video URL4. On the store listing details webpage, paste the HTML code in the  field.
 Search terms requirements 
Search terms must meet the following requirements:
 You can enter search terms to use up to a maximum of 21 words. Whether used as single words, phrases, or a combination of both, you're only allowed a maximum of 21 words.
 Up to a maximum of seven search terms: single word or phrases. Each search term has a character limit of 30 characters.
 Step 6: Complete your submission
On the Submit your extension webpage, add notes for certification to help test your extension.
	 Notes for certification  	(optional)
When you submit your extension, use the Notes for certification webpage to provide additional information to the certification testers. The additional information helps ensure that your extension is tested correctly. If your extension isn't fully tested, it might fail certification.
Make sure you include the following information, as necessary:
Usernames and passwords for test accounts.
Steps to access hidden or locked features.
Expected differences in functionality based on region or other user settings.
If your submission is an update to an existing extension, include information about the changes made to the extension.
 Any additional information that testers must understand about your submission.
After you provide the information, select Publish to submit your extension to the Microsoft Edge Add-ons website. Your submission proceeds to the certification step. The certification process can take up to seven business days after your submission.
In the StoreAfter your submission passes certification, your extension is published in the Microsoft Edge Add-ons website. The status of your extension in the Partner Center dashboard changes to .
NOTE
If you encounter any issues in the submission or registration process, file a support ticket on Extensions New Support Request or send an email to ext_dev_support@microsoft.com.

 
 Update a Microsoft Edge extension
 	6/21/2022 • 2 minutes to read • Edit OnlineYou can update a submitted extension or remove a published extension listing from the Microsoft Edge Add-ons website at any time.
NOTE
The certification process for an update to an extension can take from a few hours to a few days.
 Update an existing extension in the Microsoft Edge Add-ons website
To update your extension on the store:
1. Navigate to your developer dashboard and select the extension that you want to update.
2. Update either the extension package or the metadata of the extension. If you update the extension package, make sure that you increase the version in the manifest file.
3. After you make the changes, select Publish to update your extension listing, and start the certification process.
Status column displays In the store4. After the , your extension update is available on the Microsoft
Edge Add-ons website.
After your extension has been initially created, you will be able to update it programmatically Using the Microsoft Edge Add-ons API (Beta).
 Update your extension during the certification step
While your extension is still in the certification stage, and before it gets published to the Microsoft Edge Add-ons website, you can update it. If your extension fails the certification process, you might also need to update your extension.
To check the status of your extension, navigate to the dashboard associated with your listing on Partner Center.
To edit your submission:
1. Navigate to your developer dashboard and select the extension that you wish to update. The information you filled out during the previous submission is displayed.
2. To open the Extension overview section, use the left navigation bar. To cancel the current submission, select Cancel submission.
3. Move to other sections and update either the extension package or the metadata of the extension. If you update the extension package, make sure that you increase the version in the manifest file to match changes since the previous package version.
4. After making changes, select Publish.
IMPORTANT
The process stops and removes your current submission from the Microsoft Edge extensions certification pipeline and a new review starts with the latest submission.
 Update your extension after it failed the certification
After your extension failed the certification process, you need to update your extension and resubmit your extension that incorporates the feedback.
To edit your extension:
1. Navigate to your developer dashboard and select the extension that failed the certification process.
2. Update either the extension package or the metadata incorporating the feedback received from the certification process. If you update the extension package, make sure that you increase the version in the manifest file.
3. After making changes, select Publish.
 Remove an extension from the Microsoft Edge Add-ons website
To remove an extension from the Microsoft Edge Add-ons website:
1. Navigate to your developer dashboard. From the Dashboard page, select the listing to remove.
2. Select Extension Overview on your listing.
3. Select Unpublish to remove the listing from the Microsoft Edge Add-ons website.
The extension is now removed from the Microsoft Edge Add-ons website. Users who already installed your extension can continue to use it, but new users don't find it.
 
 
Submission states for extensions in the Microsoft
Edge Add-ons website
 	6/21/2022 • 2 minutes to read • Edit OnlineThe overview page on the Partner Center displays the state of your extension in the overall submission flow. This article describes the different states your extension can be in at any time during the submission and certification process.
#STATEDETAILS1In draftYou create your submission and save a draft to your account. You have not submitted your extension package and your submission form details to publish to the Microsoft Edge Add-ons website. Your extension isn't available to users in this state.2In reviewYou have submitted your extension. Your extension package and your submission form details are reviewed by Microsoft. Your extension isn't available to users in this state.3Waiting to publishYour submission is in this state after your extension review is complete, and your extension is being prepared for publishing in the Microsoft Edge Addons website. This state is an
intermediate state between 
In review and In the store. This
state might not appear for all submissions.4In the storeThe review is now complete, and your extension is published on the
Microsoft Edge Add-ons website. Your extension is available on the Microsoft Edge Add-ons website in the markets that you specified.5In the store. Update in reviewYour extension is published to the Microsoft Edge Add-ons website and you have submitted an update that is under review by Microsoft.6Review failedYour submission is in this state if your extension fails a review. A failed review might occur during the initial review or during an update. You need to take corrective action and resubmit your extension.
#STATEDETAILS7Unavailable in storeThere are three possible scenarios when your extension displays this state: Unpublished from store,
Removed from store, and Blocked. The description of each of the three states is specified in 8, 9, and 10.8Unpublished from storeYou unpublished your extension from the Microsoft Edge Add-ons website in Partner Center. In Partner Center, you chose unpublish on the extension submission page. After un-publishing your extension, it is no longer available in the Microsoft Edge Add-ons website for new users to download, but existing users can continue to use their copies of your extension.9Removed from storeIf your extension is found to violate the terms and conditions of Microsoft Edge Add-ons website, Microsoft might remove it from the Microsoft Edge Add-ons website, and the state then changes to this state. 
After removal of your extension by Microsoft, your extension is no longer available on Microsoft Edge Add-ons website for new users to download, but existing users can continue to use their copies of your extension.10BlockedIf your extension is found to be malicious and compromises the security and privacy of users, Microsoft has the right to block your extension from the Microsoft Edge Add-ons website, and the state changes to this state. If your extension is blocked, it is removed from the Microsoft Edge Add-ons website and from all user devices. 
 View Microsoft Edge extensions analytics dashboard
 	6/21/2022 • 2 minutes to read • Edit OnlineMicrosoft announced the launch of Extensions Analytics Dashboard on September 8, 2021. For more information see the blog Track your add-on's performance: extension analytics now available on Partner center.
You can view extension metrics from your Partner Center dashboard and evaluate an extension's performance from Microsoft Edge Add-ons.
For instance, you can identify regions in which the number of installations for your extension has increased in the past 3 months. You can also export this report as a CSV file.
Follow these steps to view your extension's analytics dashboard:
1. Navigate to your Partner Center account and select an extension.
2. From the left panel, click Extension overview > Analytics to view your extension metrics.
 Analytics dashboard metrics
From the analytics dashboard you can view metrics for the Last month, 3 months, 6 months, or All time (the period since your extension has been published to the Microsoft Edge Add-ons store).
 Weekly users 
The Weekly users metric tracks the number of users that have your extension turned on, turned off and status unknown on Microsoft Edge over the past seven days.
The following image shows the Weekly users from the date the extension was published until today.

 Enabled vs Disabled 
The Enabled vs Disabled report shows the number of instances of the extension which are enabled or disabled per user.
The following image shows the Weekly users who have enabled and disabled the extension over the same time period. You can choose from Select all / Unselect all, Disabled, and Enabled views.

 Installs 
The Installs metric displays the total number of successful installs of your extensions per day from the Microsoft Edge Add-ons store.
The following image shows daily successful installations for the last month.

 Impressions 
The Impressions metric captures the total number of page views and user visits to your extension product page on Microsoft Edge Add-ons store. The data points are based on weekly or daily totals depending on the selected time range.
The following image shows Impressions for your extension page over the past 3 months.

 Refine by Region, OS, and Language
You can further refine views of your extension's Weekly users, Installs, and Impressions by Region, OS, and Language.
 Region 
The Region filter covers the geographical distribution of users for your extension, indicating the user base in each region.
The following image shows total user visits.

 OS 
The OS (operating system) filter highlights the OS usage distribution of all the install requests for your extension.
The following image shows Weekly Users by Operating System over the past 30 days.

 Language 
The Language filter shows the language distribution for users of your extension.
The following image shows Installs per Language over the past 6 months.

The Analytics Dashboard helps you better understand and engage with your extension users. For information about other features launched on Partner Center, see Released features for Microsoft Edge Add-ons - Microsoft Edge Development | Microsoft Docs.
Share your feedback, questions, and comments with the team on Twitter @MSEdgeDev or via theMicrosoft Edge Insider forums on TechCommunity.

 
 
Reply to user reviews about your Microsoft Edge extension
 	6/21/2022 • 2 minutes to read • Edit OnlineRespond to user reviews that are posted on the Microsoft Edge Add-ons product page. To view your extension's reviews and ratings and engage with user reviews, use the Partner Center dashboard.
To view your extension's Reviews page:
1. Go to your Partner Center account.
2. Select an extension, and then click Extension overview > Reviews.
Or, on the Home > Edge breadcrumb path, in the Overview page, click the star rating of an extension.

 Features of the Reviews page
From the Reviews page, you can do the following:
View your extension's Average Rating.
View the total number of ratings received for your extension.
Reply to reviews.
View the list of all reviews received for your extension and your responses.
Edit your previous responses.
Apply filters to the reviews based on the extension rating and response status.
 Reply to user reviews
To reply to a user review:
1. At Partner Center, go to the extension's Review page, as described above.
2. On a review, click the Reply link.
A response must be between one and one thousand (1-1000) characters long.
When you post a reply using the Partner Center dashboard, your reply appears on your Microsoft Edge Add-ons product page within 15 to 20 minutes.
 See also
Microsoft Edge Add-ons | NEW Feature to manage user reviews on your extension - blog post.
Released features for Microsoft Edge Add-ons - recently released features at Partner Center.
Share your feedback, questions, and comments with the team on Twitter @MSEdgeDev or via ourGitHub community's Discussion topic.

 
 Manage account settings
 	6/21/2022 • 2 minutes to read • Edit OnlineManage your account settings and profile details for your Microsoft Edge Developer account at Partner Center.
 Account settings
To display your account settings, select the gear icon in the upper right-hand corner of Partner Center > Developer settings. In Developer settings, review and update the following information.
Review information about your account.
Links to other pages to review information. Edit your account information.
In the Account details section, review the status and type of your account. Your Seller ID and other publisher ID info are also displayed in the Account details section. The values are assigned by Microsoft to uniquely identify your developer account and are read-only.
 Contact Details
The Contact info section displays the details you provided when you created your account. The Microsoft Edge extension team uses the contact details information to contact you about your account. The publisher display name displayed in the Microsoft Edge Add-ons website is also displayed is the Contact info section.
If your contact information changes edit the Contact info section. Select Update, make your changes, and then select Save. You can also select Contact info in the left navigation menu to open the Contact info section.
PendingIf you need to change any of your contact details, the Microsoft Edge extension team might verify your account again, especially if you have a company account. Your verification status returns to  while the review is in process. The verification process ranges from a few days to a couple of weeks, and your company might receive a phone call from our verification partner.
 Other settings
Review the following settings in the Account settings section.
ACCOUNT SETTINGSDESCRIPTIONVerification statusReview your verification status when your account is going through the verification process. For example, your account is verified when you first create an account, or after you update your contact information.ProgramsReview information about enrolled programs or other programs that might be of interest to you.AgreementsReview the agreements that your account accepted. 
 Contact Microsoft Edge extensions support
 	6/21/2022 • 2 minutes to read • Edit Online Request help or submit feedback
1. After you submit your extension using Partner Center and you have a question about the review or certification status of it, see New Support Request and complete the form.
2. If your extension isn't working with Microsoft Edge as you expect, or you have a question about how to develop an extension, see Supported APIs for Microsoft Edge extensions and Port Chromium extensions to Microsoft Edge.
3. If you have any issues while you submit your extension to Partner Center, see Publish your extension.
4. To feature your extension in a collection on the Microsoft Edge Add-ons website, see Submit a request to add an extension to the collections on the Microsoft Edge Add-ons home page and complete the form.
 Report copyright or trademark infringement
If you think an item in the Microsoft Edge Add-ons website violates a copyright or trademark, see Notices of Infringement and complete the form. The Microsoft Edge extensions team reviews your report and then takes the necessary action.

 
 Content Security Policy (CSP)
 	6/21/2022 • 8 minutes to read • Edit OnlineIn order to mitigate a large class of potential cross-site scripting issues, the Microsoft Edge Extension system has incorporated the general concept of Content Security Policy (CSP). This introduces some fairly strict policies that make Extensions more secure by default, and provides you with the ability to create and enforce rules governing the types of content that can be loaded and run by your Extensions and applications.
In general, CSP works as a block/allowlisting mechanism for resources loaded or run by your Extensions.
Defining a reasonable policy for your Extension enables you to carefully consider the resources that your Extension requires, and to ask the browser to ensure that those are the only resources your Extension has access to. The policies provide security over and above the host permissions your Extension requests; they are an additional layer of protection, not a replacement.
metamanifest.jsonOn the web, such a policy is defined via an HTTP header or  element. Inside the Microsoft Edge Extension system, neither is an appropriate mechanism. Instead, an Extension policy is defined using the file for the Extension as follows:
{
    ...,
    "content_security_policy": "[POLICY STRING GOES HERE]"
    ... }For full details regarding the CSP syntax, please take a look at the W3C Content Security Policy specification , and An Introduction to Content Security Policy at HTML5Rocks.
 Default Policy Restrictions
manifest_versionmanifest_versionPackages that don't define a  don't have a default content security policy. Packages that use  2 have the following default content security policy:
script-src 'self'; object-src 'self'
The policy adds security by limiting Extensions and applications in three ways:
Eval and related functions are disabled Code like the following doesn't work:
alert(eval("foo.bar.baz")); window.setTimeout("alert('hi')", 10); window.setInterval("alert('hi')", 10); new Function("return foo.bar.baz");
Evaluating strings of JavaScript like this is a common XSS attack vector. Instead, you should write code like:
alert(foo && foo.bar && foo.bar.baz);
window.setTimeout(function() { alert('hi'); }, 10); window.setInterval(function() { alert('hi'); }, 10); function() { return foo && foo.bar && foo.bar.baz };
Inline JavaScript aren't run
<script>Inline JavaScript aren't run. This restriction bans both inline  blocks and inline event handlers, such as 
<button onclick="...">.
pop-up.htmlThe first restriction wipes out a huge class of cross-site scripting attacks by making it impossible for you to accidentally run the script provided by a malicious third-party. It does, however, require you to write your code with a clean separation between content and behavior. An example might make this clearer. You could try to write a Browser Action pop-up as a single  containing the following:
<!doctype html>
<html>
    <head>
        <title>My Awesome Pop-up!</title>
        <script>
            function awesome() {
                // do something awesome!
            }
            function totallyAwesome() {
                // do something TOTALLY awesome!
            }
            function clickHandler(element) {
                setTimeout("awesome(); totallyAwesome()", 1000);
            }
            function main() {
                // Initialization work goes here.             }
        </script>
    </head>
    <body onload="main();">
        <button onclick="clickHandler(this)">
            Click for awesomeness!
        </button>
    </body>
</html>But three things must change in order to make this work the way you expect it to:
clickHandler definition must be moved into an external JavaScript file (popup.js The 	 may be a good target).
addEventListener	 The inline event handler definitions must be rewritten in terms of 	 and extracted into 
popup.js. If you're currently starting your program using code like <body onload="main();">, consider
DOMContentLoaded event of the document, or the loadreplacing it by hooking into the  event of the window, depending on your requirements. Use the former, since it generally triggers more quickly.
setTimeout call must be rewritten to avoid converting the string "awesome(); totallyAwesome()"	 The 	 into
JavaScript for running.
Those changes could look something like the following:
function awesome() {
    // Do something awesome!
}
function totallyAwesome() {
    // do something TOTALLY awesome!
}
function awesomeTask() {     awesome();     totallyAwesome();
}
function clickHandler(e) {
    setTimeout(awesomeTask, 1000);
}
function main() {
    // Initialization work goes here. }
// Add event listeners once the DOM has fully loaded by listening for the // `DOMContentLoaded` event on the document, and adding your listeners to
// specific elements when it triggers. document.addEventListener('DOMContentLoaded', function () {
    document.querySelector('button').addEventListener('click', clickHandler);     main();
});<!doctype html>
<html>
    <head>
        <title>My Awesome Pop-up!</title>         <script src="popup.js"></script>
    </head>
    <body>
        <button>Click for awesomeness!</button>
    </body>
</html>
Only local script and object resources are loaded
Script and object resources are only able to be loaded from the Extension package, not from the web at large. This ensures that your Extension only runs the code you specifically approved, preventing an active network attacker from maliciously redirecting your request for a resource.
Instead of writing code that depends on jQuery (or any other library) loading from an external CDN, consider including the specific version of jQuery in your Extension package. That is, instead of:
<!doctype html>
<html>
    <head>
        <title>My Awesome Pop-up!</title>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
    </head>
    <body>
        <button>Click for awesomeness!</button>
    </body>
</html>
Use the following approach instead. Download the file, include it in your package, and write:
<!doctype html>
<html>
    <head>
        <title>My Awesome Pop-up!</title>         <script src="jquery.min.js"></script>
    </head>
    <body>
        <button>Click for awesomeness!</button>
    </body>
</html>
 Relaxing the default policy
Inline Script
Inline scripts can be allowed by specifying the base64-encoded hash of the source code in the policy. This hash must be prefixed by the used hash algorithm (sha256, sha384 or sha512). For an example, see W3C > Hash usage for <script> elements.
Remote Script
If you require some external JavaScript or object resources, you can relax the policy to a limited extent by allowlisting secure origins from which scripts should be accepted. Verify that runtime resources loaded with with elevated permissions of an Extension are exactly the resources you expect, and aren't replaced by an active network attacker. As man-in-the-middle attacks are both trivial and undetectable over HTTP, those origins aren't accepted.
blob, filesystem, https, and extensionCurrently, you can allowlist origins that have the following schemes: .
https and extensionThe host part of the origin must explicitly be specified for the  schemes. Generic wildcards
https://* and https://*.comsuch as https:,  aren't allowed; subdomain wildcards such as 
https://*.example.comhttps://*.cloudfront.net is not valid, but https://XXXX.cloudfront.net and https://*.XXXX.cloudfront.net are allowed. Domains in the Public Suffix list are also viewed as generic top-level domains. To load a resource from these domains, the subdomain must explicitly be listed. For example,  can
allowlistedbe .
allowlistedhttp://127.0.0.1 or http://localhostFor development ease, resources loaded over HTTP from servers on your local machine can be . You can allowlist script and object sources on any port of either .
NOTE
XMLHTTPRequestconnect-srcThe restriction against resources loaded over HTTP applies only to those resources which are directly run. You are still free, for example, to make  connections to any origin you like; the default policy doesn't restrict  or any of the other CSP directives in any way.example.comA relaxed policy definition which allows script resources to be loaded from  over HTTPS may look like:
"content_security_policy": "script-src 'self' https://example.com; object-src 'self'"
NOTE
script-src and object-srcselfBoth  are defined by the policy. Microsoft Edge doesn't accept a policy that doesn't limit each of these values to (at least) ''.Evaluated JavaScript
eval() and related functions like setTimeout(String), setInterval(String)new Function(String) can be relaxed by adding unsafe-evalThe policy against , and  to your policy:
"content_security_policy": "script-src 'self' 'unsafe-eval'; object-src 'self'"
However, you should avoid relaxing policies. These types of functions are notorious XSS attack vectors.
 Tightening the default policy
default-src 'self'You can tighten this policy to whatever extent your Extension allows, in order to increase security, at the expense of convenience. To specify that your Extension can only load resources of any type (images, and so on) from the associated Extension package, for example, a policy of  might be appropriate.
 Content Scripts
The policy being discussing applies to the background pages and event pages of the Extension. How the content scripts apply to the content scripts of the Extension is more complicated.
Content scripts are generally not subject to the CSP of the Extension. Since content scripts aren't HTML, the main
eval even if the CSP of the Extension doesn't specify unsafe-evalimpact of this is that they can use , although
<script>this is not recommended. Additionally, the CSP of the page doesn't apply to content scripts. More complicated are  tags that content scripts create and put into the DOM of the page they are running on. These are referenced as DOM injected scripts going forward.
DOM injected scripts that run immediately upon injection into the page run as you would expect. Imagine a content script with the following code as a simple example:
document.write("<script>alert(1);</script>");
alert immediately upon the document.write()This content script causes an . Note that this runs regardless of
the policy a page specifies. However, the behavior becomes more complicated both inside that DOM injected script and for any script that doesn't immediately run upon injection.
script-src 'self'Imagine that your Extension is running on a page that provides an associated CSP that specifies . Now imagine the content script runs the following code:
document.write("<button onclick='alert(1);'>click me</button>'");
onclickclickunsafe-inlineIf a user clicks that button, the  script doesn't run. This is because the script didn't immediately run, and code that isn't interpreted until the  event occurs isn't considered part of the content script, so the CSP of the page (not of the Extension) restricts the behavior. And since that CSP doesn't specify , the inline event handler is blocked.
onclickThe correct way to implement the desired behavior in this case is to add the  handler as a function from the content script, as follows:
document.write("<button id='mybutton'>click me</button>'"); var button = document.getElementById('mybutton'); button.onclick = function() {       alert(1);
};
Another similar issue arises if the content script runs the following:
var script = document.createElement('script'); script.innerHTML = 'alert(1);' document.getElementById('body').appendChild(script);
In this case, the script runs, and the alert appears. However, consider this case:
var script = document.createElement('script'); script.innerHTML = 'eval("alert(1);")';
=document.getElementById('body').appendChild(script);
evalWhile the initial script runs, the call to  is blocked. That is, while the initial script runtime is allowed, the behavior within the script is regulated by the CSP of the page. Thus, depending on how you write DOM injected scripts in your Extension, changes to the CSP of the page might affect the behavior of your Extension.
Since content scripts aren't affected by the CSP of the page, this a great reason to put as much behavior as possible of your Extension into the content script, rather than DOM injected scripts.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here.
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 
App Developer Agreement Addendum for
Microsoft Edge program users
 	6/21/2022 • 2 minutes to read • Edit Online Exhibit G: Terms and Conditions for Microsoft Edge Extensions
These Terms and Conditions for Microsoft Edge Extensions (the "Extensions Addendum") is a supplement to the terms and conditions of the App Developer Agreement, the current version of which can be found at https://go.microsoft.com/fwlink/p/?LinkID=221922. This Addendum applies if you have submitted or are making available Microsoft Edge Extensions (each, an "Extension") through Microsoft Edge Add-ons. Except as expressly modified by this Extensions Addendum, all of the terms and conditions in the App Developer Agreement, which is incorporated by reference herein, apply to the offering and distribution of your Microsoft
Edge Extensions. Except where expressly modified by this Addendum, the terms and conditions that apply to an
"Application" or "App" under the App Developer Agreement will apply to an Extension as defined in this Addendum and all references to "Store" or "Microsoft Store" under the App Developer Agreement will apply to Microsoft Edge Add-ons as defined in this Addendum.
1. DEFINITIONS. Capitalized terms not defined herein will have the meanings provided in the App Developer Agreement.
a. "Certification Requirements" means the technical, functional, content, and other policy requirements provided by Microsoft (at https://go.microsoft.com/fwlink/?linkid=2104222, or another location(s) specified by Microsoft) for Extensions offered through Microsoft Edge Add-ons.
b. "Microsoft Edge Add-ons" means a Microsoft owned or operated platform, however named, through which Microsoft Edge Extensions may be offered to or acquired by Customers.
2. SUBMISSION, CERTIFICATION, AND DISTRIBUTION OF APPS. Section 3 of the App Developer Agreement is hereby deleted and replaced by the following:
a. Submission. You must submit to Microsoft each Extension that you wish to make available through Microsoft Edge Add-ons, including any updates to each Extension. You are solely responsible and liable for the Extensions you submit. You are responsible for supporting your extension. Microsoft will retain (or destroy) all copies of the Extension and other materials you submit. Microsoft will not return them, so you must maintain your own backup copies.
b. Updates to Extensions. You may submit updates to Extensions for Certification and distribution through Microsoft Edge Add-ons. Those updates are subject to all of the requirements of this Agreement. You understand that end users may receive updates automatically. You may not add any new functionality to your Extension via an update which requires written consent from the Customer without first providing notice to the Customer and obtaining any consents as may be required by law in the markets where you choose to distribute your Extension.
c. Initial Certification. Microsoft will test each Extension (including any updates) you submit for compliance with this Agreement (which includes the applicable Certification Requirements) and other policies made available to you (if any). Microsoft will not make any Extension available through Microsoft Edge Add-ons unless and until the Extension is Certified.
3. AFFIRMATIVE DECLINE NOT REQUIRED. Notwithstanding Section 4(i) of the App Developer Agreement, you aren't required to affirmatively decline participation in Microsoft Store for Business and Microsoft Store for Education. Your Extension will only be available through the Microsoft Edge Add-ons.
4. APP PRICING, PAYMENTS, TRANSACTIONS AND TAXES. Section 6 of the App Developer Agreement does not apply to Extensions and is hereby deleted in its entirety.

 
 Microsoft Edge Add-ons store developer policies
 	6/21/2022 • 17 minutes to read • Edit Online Introduction and Objective of this document
Thank you for your interest in developing extensions for the Microsoft Edge Add-ons store. The Microsoft Edge Add-ons store developer policies (Add-ons store developer policies) apply to your extensions, including your submission of extensions through Partner Center and the provision of such extensions through the Microsoft Edge Add-ons.
The Microsoft Edge Add-ons store is also called the Microsoft Edge Add-ons website. The Microsoft Edge Addons store developer policies are also called the Microsoft Edge Add-ons website developer policies.
 Principles
A few principles to get you started:
 You should offer unique and distinct value within your extensions for Microsoft Edge. Provide a compelling reason to download your extensions from the Microsoft Edge Add-ons store (Microsoft Edge Add-ons).
You must not mislead our joint users about what your extension does, who is offering it, and so on.
You must not attempt to cheat users, the system or the ecosystem. There is no place in our Microsoft Edge Add-ons for any kind of fraud; be it ratings and review manipulation, credit card fraud or other fraudulent activity.
Adhering to the Microsoft Edge Add-ons store developer policies should help you make choices that enhance the appeal and audience of your extension.
Your extensions are crucial to the experience of hundreds of millions of users. We look forward to experiencing what you create and are thrilled to help deliver your extensions to the world.
 1. Product Policies
	1.1  	 Distinct Function & Value; Accurate Representation
Your extension and associated metadata must accurately and clearly reflect the source, functionality, and features that you describe.
	1.1.1  	 Extensions must have a single purpose
Your extension must have a single purpose with narrow functionality.
	1.1.2  	 Describe your extension
All aspects of your extension should accurately describe the functions, features and any important limitations of your extension, including required or supported input devices. The value proposition of your extension must be clear during the first run experience. Your extension may not use a name or icon similar to that of other extensions, and must not claim to represent a company, government body, or other entity if you don't have permission to make that representation.
	1.1.3  	 Functionality
Your extension must be fully functional.
	1.1.4  	 Search and Discovery
Search terms may not exceed seven unique terms and should be relevant to your extension.
	1.1.5  	 Provide appropriate details
You must provide distinct and informative details about your extension and the functionality in listing (metadata) for your extension. Your extension must provide a valuable and quality user experience. Your extension must also have an active presence in Microsoft Edge Add-ons.
	1.1.6  	 Stability and Performance
Your extension must not negatively impact the performance or stability of Microsoft Edge.
	1.1.7  	 Obfuscation
Extensions with obfuscated code aren't allowed. This includes code within your extension package as well as any external code or resource fetched from the web. You may be asked to refactor parts of your code if it is not reviewable.
	1.1.8  	 Altering Browser Settings
Your extension must not, without appropriate user consent, alter, or appear to alter, browser functionality or settings including, but not limited to: the address bar search provider and suggestions, the start or home page, the new tab page, and adding or removing favorite.
Any alteration to the browser settings should be explicitly documented in the description of your extension.
Your extension may only revise key settings to replace a Microsoft webpage or service with that of a third-party (such as require use of a third-party search engine or set the home page to a third-party web property) if you are employed by or otherwise associated with such third-party.
	1.2  	 Security
Your extension must not jeopardize or compromise user security, or the security or functionality of the device, system or related systems.
	1.2.1  	 Content Security Policies
If you make any changes to your extension beyond the described functionality, any changes to code must be compliant with the Microsoft Edge content security policy. For example, your extension should not download a remote script and subsequently run that script in a manner that is not consistent with the described functionality.
	1.2.2  	 Unwanted and Malicious Software
Your extension must not contain or enable malware as defined by the Microsoft criteria for Unwanted and Malicious Software.
	1.2.3  	 Dependency on other software
Your extension may depend on non-integrated software (such as another product, module, or service) to deliver the primary functionality, provided you disclose the dependency in the description.
	1.2.4  	 Extensions Update
Unless otherwise permitted by Microsoft, your extensions must be updated only through Microsoft Edge Addons.
	1.3  	 Product is Testable
Your extension must be testable. If it is not possible to test your extension for any reason, including, but not limited to, the items below, your extension may fail this requirement.
	1.3.1  	 User Credentials
If your extension requires login credentials, provide a working demo account using the Notes for certification field.
	1.3.2  	 Availability of services
If your extension requires access to a server, the server must be functional to verify that it works correctly.
  
1.4 Usability
Your extension must meet Microsoft Edge Add-ons store standards for usability, including, but not limited to, those listed in the subsections below.
	1.4.1  	 Compatibility across platforms
Your extension should be compatible with Microsoft Edge on all the devices and platforms on which they may be downloaded. If an extension is downloaded on a device with which it is not compatible, it should detect that at launch and display a message to the user detailing the requirements that devices must meet in order to be compatible with your extension.
	1.4.2  	 User Experience
Your extension must start up promptly and must stay responsive to user input. Your extension must continue to run and remain responsive to user input. Your extension must shut down gracefully and not close unexpectedly. Your extension should handle exceptions and remain responsive to user input after the exception is handled.
	1.5  	 Personal Information
The following requirements apply to extensions that access Personal Information. Personal Information includes all information or data that identifies or could be used to identify a person, or that is associated with such information or data.
	1.5.1  	 Collect Personal Information only when necessary
Your extension may collect, access, use, or transmit Personal Information (including web browsing activity); only if required by and only for use in a prominently disclosed, user-facing feature.
	1.5.2  	 Maintain a privacy policy
Regardless of whether your extension accesses, collects, or transmits Personal Information; you must provide prominent notice of and comply with your privacy policy if required by law. Your privacy policy must inform users of the Personal Information accessed, collected, or transmitted by your extension, how that information is used, stored, and secured, and indicate the types of parties to whom it is disclosed.
Your privacy policy must describe the controls that users have over the use and sharing of their information, how they access their information, and it must comply with applicable laws and regulations. Your privacy policy must be kept up-to-date as you add new features and functionality to your extension.
If you provide Microsoft with your privacy policy, you agree to permit Microsoft to share such privacy policy with users of your extension.
	1.5.3  	 Sharing data with third parties
You may publish the Personal Information of users of your extension to an outside service or third-party through your extension or associated metadata only after obtaining opt-in consent from those users. Opt-in consent means the users give their express permission in the user interface of your extension for the requested activity, after you:
 Describe to your users how the information is accessed, used or shared and indicate the types of parties to whom it is disclosed.
 Provide your users a mechanism in your extension user interface through which they have the option to later rescind the permission and opt-out.
	1.5.4  	 Sharing information of non-Users
If you publish a person's Personal Information to an outside service or third-party through your extension or the metadata, but the person whose information is being shared is not a user of your extension:
1. You must obtain express written consent to publish that Personal Information.
2. You must permit the person whose information is shared to withdraw that consent at any time.
3. Your privacy policy must clearly disclose that you may collect personal information in this manner.
4. If required by applicable law you must delete the Personal Information of any individual upon request, including individuals whose information you collect in this manner.
5. If your extension provides users with access to another person's Personal Information, this requirement also applies.
	1.5.5  	 Transmit information securely
If your extension collects, stores, or transmits Personal Information; it must do so securely by using modern cryptography methods.
	1.5.6  	 Highly sensitive information
Your extension must not collect, store, or transmit highly sensitive personal information, such as health or financial data, unless the information is related to the functionality of your extension. Your extension must also obtain express user consent before collecting, storing, or transmitting such information.
	1.6  	 Permissions
Your extension must only request those permissions that are necessary for functioning. You must provide a description of how your extension works. Your extension must only perform as described. Your extension may not request permission for capabilities that go beyond the capabilities required to perform and function as declared.
	1.7  	 Localization
You should localize your extension for all languages that your extension claims to support. The text of the description of your extension should be localized in each language that you declare.
If your extension is localized such that some features aren't available in a localized version, you must clearly state or display the limits of localization in your extension description. The experience provided by an Extension must be reasonably similar in all languages that it supports.
	1.8  	 Financial Transactions
If your product includes in-product purchase, subscriptions, virtual currency, billing functionality, or captures financial information; the requirements in the following sections apply.
	1.8.1  	 Paid Features
Your extension may enable users to consume digital content or services purchased through a third-party purchase mechanism or API.
You must use a secure third-party purchase API for purchases of physical goods or services. You must use a secure third-party purchase API for payments made in connection with any other services including real world gambling or charitable contributions.
 If your extension is used to facilitate or collect charitable contributions or to conduct a promotional sweepstakes or contest, you must do so in compliance with applicable law.
You must also state clearly that Microsoft is not the fundraiser or sponsor of the promotion.
In-product offerings sold in your extension must not be converted to any legally valid currency (such as USD, Euro, and so on) or any physical goods or services.
The following requirements apply to your use of a secure third-party purchase API:
 At the time of the transaction or when you collect any payment or financial information from the user; your extension must identify the commerce transaction provider, authenticate the user, and obtain user confirmation for the transaction. A commerce transaction provider maintains a secure platform for financial exchanges.
 Your extension may offer users the ability to save this authentication, but users must have the ability to either require an authentication on every transaction or to turn off in-product transactions.
 If your extension collects credit card information or uses a third-party payment processor that collects credit card information, the payment processing must meet the current PCI Data Security Standard (PCI DSS).
	1.8.2  	 Disclosing paid features
Your extension and associated metadata must provide information about the types of in-product purchases offered and the range of prices. You must not mislead users and must be clear about the nature of your inproduct promotions and offerings including the scope and terms of any trial experiences.
If your extension restricts access to user-created content during or after a trial, you must notify users in advance. In addition, your extension must make it clear to users that they are initiating a purchase option in your extension.
	1.9  	 Notifications
Your extension must respect system settings for notifications. This means any presentation of ads and notifications to users must be consistent with user preferences, regardless of whether the notifications are provided by the Microsoft Push Notification Service (MPNS), Windows Push Notification Service (WNS), or any other service. If the user disables notifications, either on a product-specific or system-wide basis, your extension must remain functional.
If your product uses MPNS or WNS to transmit notifications, it must comply with the following requirements:
	1.9.1  	 General Guidance
Notifications provided through WNS or MPNS are considered product content and are subject to all Add-ons Catalog Developer Policies.
	1.9.2  	 Ownership of notifications
You must not obscure or try to disguise the source of any notification initiated from your extension.
	1.9.3  	 No Confidential or Sensitive Information
You must not include in a notification any information users may reasonably consider confidential or sensitive.
	1.9.4  	 Purpose of notifications
Notifications sent from your extension must relate to that extension or to other extensions you publish in Microsoft Edge Add-ons store and must not include promotional messages of any kind that aren't related to your extensions.
	1.10  	 Advertising Conduct and Content
For all advertising related activities, the following requirements apply:
	1.10.1  	 Purpose
The primary content of your extension must not be advertising, and advertising must be clearly distinguishable from other content in your extension.
	1.10.2  	 Policies and Agreements
Any advertising content your extension displays must adhere to Microsoft Creative Acceptance Policy.
If your extension displays ads, all content displayed must conform to the advertising requirements of the App Developer Agreement and this Policy.
	1.10.3  	 Quality of advertising
The primary purpose of your extension must not be to get users to click ads.
Your extension must not do anything that interferes with or diminishes the visibility, value, or quality of any ads that it does display.
	1.10.4  	 Promotions
If you purchase or create promotional ad campaigns to promote your extensions through the ad campaign functionality in Partner Center, all ad materials you provide to Microsoft, including any associated landing pages, must comply with Microsoft Creative Specifications Policy and Microsoft Creative Acceptance Policy.
	1.10.5  	 Notifying Users of Opt-Out for Interest-Based Advertising
Your privacy statement or terms of use must let users know you plan to send Personal Information to the ad service provider and must tell users how they may opt-out of interest-based advertising.
	1.10.6  	 Other guidelines
If your extension is directed at children under the age of 13, as defined in the Children's Online Privacy Protection Act; you must notify Microsoft of this fact in Partner Center and ensure that all ad content displayed in your extension is appropriate for children under the age of 13.
 2 Content Policies
The following policies apply to content and metadata (including publisher name, extension name, extension icon, extension description, extension screenshots, extension trailers and trailer thumbnails, and any other extension metadata) offered for distribution in Microsoft Edge Add-ons. Content means the images, sounds, videos and text contained in your extension, the tiles, notifications, error messages or ads exposed through your extension, and anything delivered from a server or to which your extension connects.
Because extensions and Microsoft Edge Add-ons are used around the world, these requirements are interpreted and applied in the context of regional and cultural norms.
	2.1  	 Content Requirements for Microsoft Edge Add-on Catalog Listing
Metadata and other content you submit to accompany your extension may not contain mature content. Submissions that don't meet Microsoft Edge Add-ons store listings requirements are rejected or promptly removed.
	2.2  	 Content Including Names, Logos, Original, and Third-party
All content in your extension and associated metadata must be either originally created by the you or appropriately licensed from a third-party rights holder and must be used only as permitted by the rights holder or as otherwise permitted by law.
	2.3  	 Risk of Harm
	2.3.1  	 Requirements
Your extension must not contain any content that facilitates or glamorizes the following real world activities: (a) extreme or gratuitous violence; (b) human rights violations; (c) the creation of illegal weapons; or (d) the use of weapons against a person, animal, or real or personal property.
	2.3.2  	 Responsibility
Your extension must not: (a) pose a safety risk to, nor result in discomfort, injury or any other harm to end users or to any other person or animal; or (b) pose a risk of or result in damage to real or personal property. You are solely responsible for all extension safety testing, certificate acquisition, and implementation of any appropriate feature safeguards.
You must not disable any platform safety or comfort features and you must include all applicable legally required and industry-standard warnings, notices, and disclaimers in your extension.
	2.4  	 Defamatory, Libelous, Slanderous, and Threatening
Your extension must not contain any content that is defamatory, libelous, slanderous, or threatening.
	2.5  	 Offensive Content
Your extension and associated metadata must not contain potentially sensitive or offensive content. Content may be considered sensitive or offensive in certain countries/regions because of local laws or cultural norms. In addition, your extension and associated metadata must not contain content that advocates discrimination, hatred, or violence based on considerations of race, ethnicity, national origin, language, gender, age, disability, religion, sexual orientation, status as a veteran, or membership in any other social group.
	2.6  	 Alcohol, Tobacco, and Drugs
Your extension must not contain any content that facilitates or glamorizes excessive or irresponsible use of alcohol or tobacco products or drugs.
	2.7  	 Adult Content
Your extension must not contain or display content that a reasonable person would consider pornographic or sexually explicit.
	2.8  	 Prohibited Content, Services, and Activity
Your extension must adhere to the following conditions.
 Your extension must not contain content or provide services that facilitate online gambling. Online gambling includes but is not limited to online casinos, sports betting, lotteries, or games of skill that offer prizes of cash or other value.
 Your extension must not provide unauthorized access to website content, such as by circumventing paywalls or login restrictions.
 Your extension must not provide, encourage, or enable the unauthorized access, download, or streaming of copyrighted content or media.
 Your extension must not mine cryptocurrency.
	2.9  	 Illegal Activity
Your extension must not contain content or functionality that encourages, facilitates or glamorizes illegal activity in the real world.
	2.10  	 Excessive Profanity and Inappropriate Content
Your extension must not contain excessive or gratuitous profanity.
Your extension must not contain or display content that a reasonable person considers obscene.
	2.11  	 Country/Region Specific Requirements
Content that is offensive in any country/region to which your extension is targeted is not allowed. Content may be considered offensive in certain countries/regions because of local laws or cultural norms. Examples of potentially offensive content in certain countries/regions include the following: China
Prohibited sexual content.
Disputed territory or region references.
Providing or enabling access to content or services that are illegal under applicable local law.
	2.12  	 Age Ratings
	2.12.1  	 Mature Content
When you submit your extension to Partner Center, you must indicate whether your extension displays content that should be marked "Mature". When determining the rating for your extension, consider all the content in your app, including user generated content and ads, and to the content that your extension links. If you indicate that your extension doesn't contain any "Mature" content, you are responsible for maintaining the accuracy of this rating.
Regardless of the rating given to your extension, it must still adhere to all the content requirements of Microsoft Edge Add-ons Developer policies.
	2.12.2  	 Ratings Change
If your extension provides content (such as user-generated, retail, or other web-based content) that might be appropriate for a higher age rating than the assigned rating, you must require users to opt into receiving such content by using a content filter or by signing in with a pre-existing account.
	2.13  	 Videos
If you submit a promotional video in the listing, it should follow all the content guidelines mentioned in this policy. If you choose to provide a YouTube link, you must ensure that advertisements are turned off for the specific videos that you want to embed. For more information on turning on or off ads on YouTube, see Set your default ad formats and Ads on embedded videos.
 Edge Add-ons Certification Complaint and Appeal Process
All the extensions should adhere to the store policies listed above. If your extension failed in the review process, please review the store policies to understand the reason for failure. After submitting your extension using Partner Center, to ask a question about the review or certification status of it, go to New Support Request and complete the form.
	 Microsoft Edge Add 	-ons appeal statistics for FY2021
MAIN COMPLAINT TYPE #1:
ENFORCEMENT
APPEALMAIN COMPLAINT TYPE #2:
CERTIFICATION
RESULTSOTHER COMPLAINT TYPESTOTAL COMPLAINTSOVERTURNED
COMPLAINTS824140

 
 Using the Microsoft Edge Add-ons API
 	6/21/2022 • 4 minutes to read • Edit OnlineNOTE
The Publish API page is present at Partner Center.
This article, along with the Microsoft Edge Add-ons API Reference, provides an overview of the proposed Microsoft Edge Add-ons API. Please submit your suggestions and feedback on the proposed API contracts as an Issue about the Add-ons API.
The Microsoft Edge Add-ons API provides a set of REST endpoints for programmatically publishing updates to add-ons submitted to the Microsoft Edge Add-ons website. You can use these REST endpoints to automate the process of uploading and publishing add-ons into the Microsoft Edge Add-ons website.
 Terminology
TERMDEFINITIONoperationA REST operation such as GET or PUT.operation IDThe ID of a REST operation.package.zipThe  package that contains the files for your Microsoft Edge Add-on.productA Microsoft Edge extension or theme. Also referred to as a Microsoft Edge Add-on.product IDThe product ID of the product whose draft needs to be published. The product ID is a 128-bit GUID that is associated with a product at Partner Center. For example: 
d34f98f5-f9b7-42b1-bebb-98707202b21d.submissionAn update that is being submitted to an existing product at Partner Center. Every update to a product is a submission,
In Draft, In ReviewIn the Storeregardless of whether the status is , or  (published). Before you begin
To use the Microsoft Edge Add-ons API, you need to enable the API for your project in the Microsoft Partner Center, by creating API credentials.
1. Visit Microsoft Partner Center and sign in to the account from which you have already published an addon.
2. Under the Microsoft Edge program, select Publish API.
3. In the Publish API page, click the Create API credentials button. This step may take a few minutes.

The API credentials have now been created; you've enabled or renewed the API. The Client ID, Client secret, Expiry date, and Access token URL are now displayed on the Publish APIs page.
4. Write down the Client ID, Client secret and the Access token URL. You'll use these values in the next step, to get an access token.
IMPORTANT
Be sure to write down the client secret now, because it's only visible immediately after enabling or renewing the API (that is, after creating API credentials).
 Retrieving the access token
After you've acquired the necessary authorization for your application, get access tokens for APIs. To get a token using the client credentials grant, send a POST request to the Access token URL (the OAuth token). The tenant information is available in the URL that you received in the Before you begin steps above.
Endpoint: https://login.microsoftonline.com/5c9eedce-81bc-42f3-8823-48ba6258b391/oauth2/v2.0/token Type: POST
Header Parameters: Content-Type: application/x-www-form-urlencoded
 Sample request 
> curl \
-X POST \
-H "Content-Type: application/x-www-form-urlencoded" \
-d "client_id={$Client_ID}" \
-d "scope=https://api.addons.microsoftedge.microsoft.com/.default" \
-d "client_secret={$Client_Secret}" \
-d "grant_type=client_credentials" \
-v \ https://login.microsoftonline.com/5c9eedce-81bc-42f3-8823-48ba6258b391/oauth2/v2.0/token
 Sample response 
{
  "token_type": "Bearer",
  "expires_in": 3599,
  "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik1uQ19WWmNBVGZNNXBP..." }
For more information, see OAuth 2.0 client credentials flow on the Microsoft identity platform.
 
Using the API endpoints
Once you have an access token, you can use the Microsoft Edge Add-ons API. This API exposes endpoints for getting a list of products, updating products, and publishing products.
NOTE
There is no API for creating a new product or updating a product's metadata, such as a description. You must complete these tasks manually in Microsoft Partner Center.
The API is available at the endpoint https://api.addons.microsoftedge.microsoft.com
 Uploading a package to update an existing submission
Use this API to update the package for an add-on. This API uploads a package to update an existing draft submission of an add-on product.
Endpoint: /v1/products/$productID/submissions/draft/package Type: POST
Header Parameters: Authorization: Bearer $TOKEN; Content-Type: application/zip Body content: the package file to upload$productID is the product ID of the Microsoft Edge Add-on that you want to update.
To get the product ID:
1. Sign in to Microsoft Partner Center.
2. Go to Microsoft Edge > Overview.
3. Select the extension for which you want the product ID.
microsoftedge/ and /packagesThe Extension overview page opens. The product ID is shown in the page. (The product ID is also shown as the GUID in the URL in the Address bar, between .)
4. In the Extension identity section (or from the Address bar), select and copy the Product ID.
 Sample request 
> curl \
-H "Authorization: Bearer $TOKEN" \
-H "Content-Type: application/zip" \
-X POST \
-T $FILE_NAME \
-v \ https://api.addons.microsoftedge.microsoft.com/v1/products/$productID/submissions/draft/package
202 AcceptedLocation header. This location header contains the operationIDIf the request succeeds and the update process begins, you receive a  response status code with a  which is required for checking the status of the
update operation.
 See also 
 API Reference: Upload a package to update an existing submission
 Checking the status of a package upload
Use this API to check the status of package upload.
Endpoint: /v1/products/$productID/submissions/draft/package/operations/$operationID Type: GET
Header Parameters: Authorization: Bearer $TOKEN
 Sample request 
> curl \
-H "Authorization: Bearer $TOKEN" \
-X GET \ -v \
https://api.addons.microsoftedge.microsoft.com/v1/products/$productID/submissions/draft/package/operations/$ operationID See also 
 API Reference: Check the status of a package upload
 Publishing the submission
Use this API to publish the current draft of the product to the Microsoft Edge Add-ons website.
Endpoint: /v1/products/$productID/submissions Type: POST
Header Parameters: Authorization: Bearer $TOKEN
Body content: Notes for certification, in JSON format Sample request 
> curl \
-H "Authorization: Bearer $TOKEN" \
-X POST \
-d '{ "notes"="text value" }' \
-v \ https://api.addons.microsoftedge.microsoft.com/v1/products/$productID/submissions
202 AcceptedIf the request succeeds and the publishing process begins, you receive a  response status code
Location header. This location header contains the operationIDwith a  which is required for checking the status of the publish operation.
 See also 
 API Reference: Publish the product draft submission
 Checking the publishing status
Use this API to check the status of the publish operation.
Endpoint: /v1/products/$productID/submissions/operations/$operationID
Type: GET
Header Parameters: Authorization: Bearer $TOKEN
 Sample request 
> curl \
-H "Authorization: Bearer $TOKEN" \
-X GET \ -v \
https://api.addons.microsoftedge.microsoft.com/v1/products/$productID/submissions/operations/{operationID} See also 
 Using the Microsoft Edge Add-ons API: Check the publishing status

 
 Microsoft Edge Add-ons API Reference
 	6/21/2022 • 5 minutes to read • Edit OnlineThis is the REST endpoint reference for the Microsoft Edge Add-ons API. This API automates publishing updates to add-ons that have been submitted to the Microsoft Edge Add-ons website.
For an overview, see Using the Microsoft Edge Add-ons API.
 Upload a package to update an existing submission
Uploads a package to update an existing draft submission of an add-on product.
 Request 
METHODREQUEST URI
POST
/products/{productID}/submissions/draft/package URI parameters 
URI PARAMETERDESCRIPTION
productIDRequired. The product ID of the product to which the package must be uploaded.Authorization: Bearer <auth token>Content-Type: application/zip Request headers Required. 
 Required.  Request body 

<Zip package> Response 
{operationID} Response headers  Location: 
 Status codes 
This API has the following expected status codes.
HTTP STATUS CODEDESCRIPTION202The request is accepted for processing, but the processing isn't complete.4XXSee Error codes.5XXSee Error codes. See also 
 Introduction: Uploading a package to update an existing submission
 Check the status of a package upload
Gets the status of the package upload.
 Request 

 URI parameters 
URI PARAMETERDESCRIPTION
operationIDRequired. The operation ID of the upload request submitted in the previous step. This information is available in the response header.Authorization: Bearer <auth token> Request headers  Required. 
 Request body 
None.
 Response 
There are several responses, for different scenarios.  Response when the operation is still in progress 
{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": "Date Time",
    "status": "InProgress",
    "message": null,
    "errorCode": null,
    "errors": null
}
 Response when the operation succeeds 
{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": "Date Time",
    "status": "Succeeded",
    "message": "Successfully updated package to {fileName}.zip",
    "errorCode": "",
    "errors": null
}
 Response when the operation fails with errors 
 {
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": "Date Time",
    "status": "Failed",
    "message": "Error Message.",
    "errorCode": "Error Code",     "errors": ["list of errors"]
}
 Response headers 
None.
 Status codes 
This API has the following expected status codes.
HTTP STATUS CODEDESCRIPTION200The request is OK.4XXSee Error codes.5XXSee Error codes. See also 
 Introduction: Checking the status of a package upload
 Publish the product draft submission
Publishes the current draft of the product to Microsoft Edge Add-ons.  Request 
METHODREQUEST URI
POST
/products/{productID}/submissions URI parameters 
URI PARAMETERDESCRIPTION
productIDRequired. The product ID of the product whose draft must be published.Authorization: Bearer <auth token> Request headers  Required. 
 Request body 
<Notes for certification>, in plain text format.
 Response 
{operationID} Response headers  Location: 
 Status codes 
This API has the following expected status codes.
HTTP STATUS CODEDESCRIPTION202The request is accepted for processing, but the processing isn't complete.4XXSee Error codes.5XXSee Error codes. See also 
 Introduction: Publishing the submission
 Check the publishing status
Checks the status of the publish operation.
 Request 

 URI parameters 
None.
Authorization: Bearer <auth token> Request headers  Required. 
 Request body 
None.
 Response 
GET operation status API can be called in the following scenarios. In all valid scenarios, 200 OKA  is returned, with different status messages.
 Response when a new product is published 
{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "Can't create new extension.",
    "errorCode": "CreateNotAllowed",
    "errors": null
}
 Response when there is nothing new to be published 
{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "Can't publish extension since there are no updates, please try again after updating the package.",
    "errorCode": "NoModulesUpdated",
    "errors": null
}
	 Response when there is an in 	-review submission for the same product
{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "Can't publish extension as your extension submission is in progress. Please try again later.",
    "errorCode": "InProgressSubmission",
    "errors": null    
}
 Response when there is an ongoing unpublished submission for the same product 
{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "Can't publish extension as your extension is being unpublished. Please try after you've unpublished.",
    "errorCode": "UnpublishInProgress",
    "errors": null    
}
 Response where any of the modules are invalid 
{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "Can't publish extension as your extension has modules that are not valid. Fix the modules with errors and try to publish again.",
    "errorCode": "ModuleStateUnPublishable",
    "errors": [
        {
            "message": "Invalid module : <Modules>"         }
    ]
} Response when there are validation errors in submission 
{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "Extension can't be published as there are submission validation failures. Fix these errors and try again later.",
    "errorCode": "SubmissionValidationError",
    "errors": ["{list of errors}"] } Response when the publish call succeeds 
{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": "Date Time",
    "status": "Succeeded",
    "message": "Successfully created submission with ID {submission.Id}",
    "errorCode": "",
    "errors": null
}
 Response when the publish call fails with an irrecoverable failure 
{
    "id": "{operationID}",
    "createdTime": "Date Time",
    "lastUpdatedTime": " Date Time ",
    "status": "Failed",
    "message": "An error occurred while performing the operation",
    "errorCode": null,
    "errors": null
}
 Response when the publish call fails with an unexpected failure 
{
    "id": "{operationID}",
    "message": "An error occurred while processing the request. Please contact support Correlation ID: 
{operationID} Timestamp: {timeStamp}", } Response headers 
None.
 Status codes 
This API has the following expected status codes.
HTTP STATUS CODEDESCRIPTION200The request is OK.4XXSee Error codes.5XXSee Error codes. See also 
 Introduction: Checking the publishing status
 Error codes
Here are a list of common error codes and possible reasons. For a full list, see Partner Center REST error codes or List of HTTP status codes.
4 xx: Client error
MESSAGEDESCRIPTIONEXAMPLE SCENARIO400 Bad RequestThe server didn't understand the request.There's no package (zip file) in the
Content-Typebody. Or,  header is missing or its value is incorrect.401 UnauthorizedThe request page needs an authorization.The auth token is missing, expired, or not valid.404 Not FoundThe server can't find the requested page. or 
The specified productIDoperationID          doesn't have a valid GUID, isn't valid, or doesn't belong to the developer who is making the request.408 Request TimeoutThe request took longer than the server was prepared to wait.There was a timeout while uploading a package.429 Too many requestsToo many requests were sent by the user.Too many requests were sent and they got throttled.5 xx: Server error
MESSAGEDESCRIPTIONEXAMPLE SCENARIO500 Internal Server ErrorThe request wasn't completed.The server met an unexpected condition. See also
 Using the Microsoft Edge Add-ons API
 
 Match patterns
 	6/21/2022 • 2 minutes to read • Edit Onlinehttp, https, file, or ftp*' characters. The special pattern <all_urls>Host permissions and content script matching are based on a set of URLs defined by match patterns. A match pattern is essentially a URL that begins with a permitted scheme (, and that can contain ' matches any URL that starts with a permitted scheme.
http or file or *Each match pattern has 3 parts:  scheme - for example, 
NOTE
file URLs isn't automatic. The user must visit the Extensions management page and opt in to fileAccess to  access for each Extension that requests it.; if the scheme is file, there is no host part.
_host_ - for example, www.google.com or *.google.com or *_path_ - for example, /*, /foo*, or /foo/bar. The path must be present in a host permission, but is
/*  always treated as .  Basic syntax
The basic syntax:
<url-pattern> := <scheme>://<host><path>
<scheme> := '*' | 'http' | 'https' | 'file' | 'ftp'
<host> := '*' | '*.' <any char except '/' and '*'>+
<path> := '/' <any chars>
* depends on whether it is in the scheme, host, or path part. If the scheme is *The meaning of , then it
http or https, and not file, or ftp. If the host is just **.hostname, then it matches the specified host or any of the subdomains. In the path section, each *matches either , then it matches any host. If the host is  matches
0 or more characters. The following table shows some valid patterns.
 Examples of valid patterns
PATTERNWHAT IT DOESEXAMPLES OF MATCHING URLS
http://*/*Matches any URL that uses the http scheme
http://www.google.com http://example.org/foo/bar.html
http://*/foo*/fooMatches any URL that uses the http scheme, on any host, as long as the path starts with 
http://example.com/foo/bar.htmlhttp://www.google.com/foo
_invalid_Here are some examples of  pattern matches:
BAD PATTERNWHY IT IS BAD
http://www.foo.com_path_No 
http://*foo/bar*' in the host can be followed only by a '.' or '/''
http://foo.*.bar/baz*' is in the _host_If ', it must be the first character
http:/bar_scheme_ separator ('/' should be "//Missing ")
foo://*_scheme_Invalid Some schemes aren't supported in all contexts.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here.
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 
Publish and update extensions in the Microsoft
Edge Add-ons website
 	6/21/2022 • 2 minutes to read • Edit OnlineMost extensions are published to the Microsoft Edge Add-ons website to protect users from malicious extensions.
 Publish options for extensions
.zip) file with a .crx.zip.zip file into a .crxAll extensions are distributed to users as a special archive ( suffix. Extensions published to the Microsoft Edge Add-ons website are uploaded as  files. The publishing process automatically converts the  file.
The following two scenarios don't require you to publish your extension in the Microsoft Edge Add-ons website.
Extensions distributed using Enterprise policy.
Using unpacked extension directories on a local machine when Microsoft Edge is in developer mode.
 Updates to extensions
The Microsoft Edge browser automatically checks for new versions of installed Extensions. Updates are installed without user intervention.
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here.
 This work is licensed under a Creative Commons Attribution 4.0 International License.
 
 Automatically update extensions in Microsoft Edge
 	6/21/2022 • 4 minutes to read • Edit OnlineWhen you set your extension to automatically update, your extension shares the following benefits with Microsoft Edge when set to automatically update.
Incorporate bug and security fixes.
Add new features or performance enhancements. Improve the user interface.
Previously, non-store based extensions were supported. Also, you updated the native binaries and the extension at the same time.
Now, the Microsoft Edge Add-ons website hosts your extensions and you update your extension using the same mechanism as Microsoft Edge. You don't control the update mechanism. Be careful when you update extensions that have a dependency on native binaries.
NOTE
This article doesn't apply to extensions that you publish using the Partner Center dashboard. You can use the dashboard to release updated versions to your users and to the Microsoft Edge Add-ons website. For more information, see Update a Microsoft Edge extension.
 Overview
Every few hours, Microsoft Edge checks whether each installed extension or app has an update URL. To specify
update_url field in the manifest. The update_urlupdate_url.crxan update URL for your extension, use the  field in the manifest points to a location to complete an update check. For each , it sends requests for updated manifest XML files. If the update manifest XML file lists a newer version than that installed, Microsoft Edge downloads and installs the newer version. The same process works for manual updates, where the new  file must be signed with the same private key as the currently installed version.
NOTE
CookieSet-CookieIn order to maintain user privacy, Microsoft Edge doesn't send any  headers with auto-update manifest requests, and ignores any  headers in the responses to those requests. Update URL
update_url field to your manifest.jsonupdate_urlIf you host your own extension or app, you must add the  file. Review the following code snippet for an example of the .
{
  "name": "My extension",
  ...
  "update_url": "http://contoso.com/mytestextension/updates.xml",
  ... } Update manifest
The updated manifest returned by the server should be an XML document. Review the following code snippet for an example of the updated manifest XML file.
<?xml version='1.0' encoding='UTF-8'?>
<gupdate xmlns='http://www.google.com/update2/response' protocol='2.0'>
  <app appid='aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'>
    <updatecheck codebase='http://contoso.com/mytestextension/mte_v2.crx' version='2.0' />
  </app>
</gupdate>
The following table describes attributes of the updated manifest XML file.
ATTRIBUTEDETAILS
appidThe extension ID is generated based on a hash of the public
edge://extensionskey. To find the ID of an extension, open Microsoft Edge and see .
codebase.crxA URL to the  file.
version.crxThis attribute value is used by Microsoft Edge to determine whether it should download the  file specified by 
codebase. manifest.jsonversion.crxIt should match the value of  in the  file of the  file.The update manifest XML file can contain information about multiple extensions, by including multiple <app> elements.
 Testing
edge://extensionsThe default update check frequency is several hours. To force an update, see  and choose the Update extensions now button.
 Advanced usage: request parameters
The basic mechanism is simple. To automatically update your extension:
1. Upload your static XML file on your web server, such as Apache.
2. Update the XML file as you release new versions of your extensions.
ID and version. You can use the same update URLTake advantage of the fact that some parameters added to the update manifest request indicate the extension  for all your extensions, instead of a static XML file. To use
update URLthe same  for all your extensions, point to a URL that runs dynamic server-side code that tests the parameters.
The following example demonstrates the format of the request parameters of update URL:
?x={extension_data}
{extension_data}In this example,  is a URL-encoded string that uses the following format.
id={id}&v={version}
http://contoso.com/extension_updates.phpFor example, the following two extensions both point to the same update URL .
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaahttp://contoso.com/extension_updates.php1.1bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbhttp://contoso.com/extension_updates.php0.4Extension 1
ID: update URL: 
Version: 
Extension 2
ID: update URL: Version: 
The following are the requests to update each extension.
http://contoso.com/extension_updates.php?x=id%3Daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%26v%3D1.1
http://contoso.com/extension_updates.php?x=id%3Dbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb%26v%3D0.4
You can also list multiple extensions in a single request for each unique update URL. The following example merges the previous requests into a single request:
http://contoso.com/extension_updates.php? x=id%3Daaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%26v%3D1.1&x=id%3Dbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb%26v%3D0.4
GET requests. A GETIf you send a single request and the number of installed extensions that use the same update URL is too long, the update check issues more  request URL is too long if it's approximately 2000 characters.
NOTE
GET requests, a single POSTPOSTIn the future, instead of issuing multiple  request might be issued, with the request parameters in the  body. Advanced usage: minimum browser version
As new APIs are released for the Microsoft Edge extensions system, you might want to release an updated version of your extension or app that only works with newer versions of Microsoft Edge. When Microsoft Edge is automatically updated, it can take a few days before most of your users update to that new release.
prodversionminTo ensure that a specific update applies only to Microsoft Edge versions that are current or newer than a specific version, add the  attribute in your update manifest.
prodversionmin attribute value of 3.0.193.02.0 only when the user is running Microsoft Edge 3.0.193.0For example, in the following code, the  specifies that your app is automatically updated to version  or newer:
<?xml version='1.0' encoding='UTF-8'?>
<gupdate xmlns='http://www.google.com/update2/response' protocol='2.0'>
  <app appid='aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'>
    <updatecheck codebase='http://contoso.com/mytestextension/mte_v2.crx' version='2.0' prodversionmin='3.0.193.0' />
  </app>
</gupdate>
NOTE
Portions of this page are modifications based on work created and shared by Google and used according to terms described in the Creative Commons Attribution 4.0 International License. The original page is found here.
 This work is licensed under a Creative Commons Attribution 4.0 International License.

 
 Overview of Progressive Web Apps (PWAs)
 	6/21/2022 • 5 minutes to read • Edit OnlineProgressive Web Apps (PWAs) provide access to open web technologies, to provide cross-platform interoperability. PWAs provide your users with an app-like experience that's customized for their devices.
PWAs are websites that are progressively enhanced to function like installed, native apps on supporting platforms, while functioning like regular websites on other browsers.
The qualities of a PWA combine the best of the web and compiled apps. PWAs run in browsers, like websites. But PWAs also have access to app features; for example:
A PWA can still work when the device is offline.
PWAs can be installed on the operating system.
PWAs support push notifications and periodic updates. PWAs can access hardware features.
When installed, PWAs are just like other apps on Windows. For example:
A PWA can be added to the Start menu.
A PWA can be pinned to the Taskbar.
PWAs can handle files.
PWAs can run when the user signs in.
PWAs can be submitted to the Microsoft Store where millions of Windows users can discover and easily install them alongside other Windows apps.
PWAs have the same reach as websites:
PWAs can be indexed by search engines.
A PWA can be linked to.
A PWA can work on all devices, from a single codebase.
PWAs have a much lower cross-platform development cost than compiled apps that require a specific codebase for each platform, such as a separate codebase for Android, for iOS, and for each desktop operating system.
 Characteristics of a Progressive Web App (PWA)
A fully capable Progressive Web App provides the following advantages to the user.
CHARACTERISTICDESCRIPTIONDiscoverableThe app is discoverable from web search results and supporting app stores.InstallablePin and launch the app from the home screen, Start menu, and Taskbar.Re-engageableThe app can receive push notifications, even when the app isn't active.CHARACTERISTICDESCRIPTIONNetwork-independentThe app works offline and in low-network conditions.ProgressiveThe user experience of the app scales up or down with device capabilities.SafeThe app provides a secure HTTPS endpoint and other user safeguards.ResponsiveThe app adapts to the user's screen size or orientation and input method.LinkableShare and launch the app from a standard link. PWAs on desktop
Progressive Web Apps (PWAs) aren't limited to displaying websites on mobile home screens. PWAs are based on standard, cross-browser, web technologies that allow them to be installed and to run in many different environments.
In recent years, desktop browsing has grown, and desktop computing continues to be the primary productivity environment for many users. PWAs can provide fully tailored, installable experiences on a desktop operating system that inherit the benefits of that environment. Yet PWAs still work across platform from the same code and servers that power your in-browser and mobile experiences.
Microsoft Edge and Windows have added many new web capabilities and features. These new web development capabilities provide great opportunities to build immersive experiences that deeply integrate with the desktop operating system. Using only web technologies ensures that your app will work on other browsers, operating systems, and devices.
You might not have to use proprietary technologies at all, because the web has developed capabilities to deal with many aspects of apps, such as:
File systems
Video
Audio
High-performance code
Databases
USB
Bluetooth
With a PWA, you can use a single codebase that's shared between your website, mobile app, and desktop app (across operating systems). By using a single codebase that's shared across platforms, you cut down on development costs. Your app can also be published on the Microsoft Store, making it more familiar and trustworthy for Windows users to discover and install.
Learn more about how PWAs integrate on Windows.
 Bridging the gap between web and desktop apps
Microsoft Edge has many new capabilities built in that can make your web app feel more integrated on desktop platforms. These capabilities provide more engaging experiences across web and desktop platforms. With Progressive Web Apps (PWAs), you can:
Handle files.
Share content with other apps.
Access the clipboard.
Sync data and fetch resources in the background.
Access device hardware such as Bluetooth and USB.
Store content in databases.
Take advantage of hardware accelerated graphics.
Use CSS layouts, animations, and filters to create advanced designs. Run near-compiled performance code with WebAssembly.
There isn't much you can't do today with web technologies. Thanks to Microsoft Edge, PWAs on desktop can take full advantage of web technologies to deliver what users expect desktop apps to do.
Check out Myth Busting PWAs for more information about what PWAs can do.
 The Microsoft Store
Because Progressive Web Apps (PWAs) are just like other apps in the Microsoft Store, users can fully engage with them-from discovery, to installation, to execution-without ever opening the browser.
The Microsoft Store app is the most used app on PCs. The Microsoft Store provides a trustworthy and familiar experience for your users to install your app. Additionally, you can view detailed usage statistics and charts that let you know how your apps in the Microsoft Store are doing.
Learn how to publish your PWA to the Microsoft Store.
 Success stories
Using Progressive Web App (PWA) technologies is a great way to make your app safe, discoverable, linkable, easy to install and update, responsive, and network independent. Many businesses have had success with PWAs. For example:
The Starbucks PWA has increased daily active users twice. Orders on desktop are nearly the same rate as mobile (source).
Trivago saw an increase of 150% for people who add its PWA to the home screen. The increased engagement led to a 97% increase in clockouts to hotel offers (source).
Tinder cut load times from 11.91 seconds to 4.68 seconds with their PWA. The app is 90% smaller than the compiled Android app (source).
Read more success stories on the PWA Stats website.
 See also
Progressive Web Apps at MDN Web Docs.
Microsoft Build 2020 PWA session
Myth Busting PWAs
A Progressive Roadmap for your Progressive Web App
Offline POSTs with Progressive Web Apps
PWA Q&A
Betting on the Web
Naming Progressive Web Apps
Designing And Building A Progressive Web App Without A Framework (Part 1)
Designing And Building A Progressive Web App Without A Framework (Part 2)
Designing And Building A Progressive Web App Without A Framework (Part 3) What makes a good Progressive Web App?

 
 The user experience of PWAs
 	6/21/2022 • 2 minutes to read • Edit OnlineOn Windows, Progressive Web Apps (PWAs) are just like other apps. Any device running Microsoft Edge gets full access to the technologies and characteristics of Progressive Web Apps.
 Installing a PWA
When Microsoft Edge determines that a website is an installable Progressive Web App (PWA), the App available () icon appears in the address bar.
1. Click the App available () icon to install the PWA.

2. Click Install to complete the installation and run the PWA in Windows.
Many PWAs are also present on the Microsoft Store, and can be installed directly from there, without needing to open Microsoft Edge.
To install a PWA from the Microsoft Store, select Get on the app page:

 Managing PWAs
edge://appsTo find the list of installed Progressive Web Apps (PWAs) in Microsoft Edge, go to . On this page, you can open any app by clicking Open. To learn more about an app or uninstall it, click Details.

You can also manage PWAs in the Apps & features system setting, like other Windows apps.
1. In Windows, select Start > Settings.
2. Type "apps" in the Find a setting search field, and then select Add or remove programs.
3. Find the PWA you want to manage in the list of apps and select it to find more information or remove it.

 Windows integration
Alt+TabProgressive Web Apps (PWAs) are displayed like native apps on Windows. They appear in the Taskbar (where they can be pinned), in the Start menu, or when switching between apps with .
PWAs and native apps can reside side-by-side in the Taskbar (PWAs are indicated here by a red box):

Alt+TabPWAs and native apps are displayed when switching between windows with  (PWAs are indicated here by a red box):

PWAs can also expose common tasks to users as shortcuts that appear in the app's right-click menu:

Learn more about defining shortcuts.
PWAs can also display notifications in the operating system's own notification service. This helps users reengage with your app. Learn more about using notifications, push messages, and badges.
 Starting PWAs when the user signs in 
PWAs on Windows can launch automatically when the user signs in, so they can immediately engage with the app.
To set an already installed PWA to automatically start when you sign in to Windows:
1. Open Microsoft Edge.
edge://apps2. Go to . The Apps page lists the installed apps.
3. On the app you want to configure, click the More options () button and then select Auto-start on device login.

During installing a PWA, users are also given a chance to set a PWA to automatically start.
To set a PWA to automatically start when you sign in to Windows, while installing the PWA:
1. During installing an app, in the post-installation dialog, select Auto-start on device login:

 App info menu
When a user selects the ellipses (...) button in the title bar of a Progressive Web Apps (PWA), the App info menu is displayed:

The App info menu contains useful information about the app, such as:
The app icon, name, and publisher.
The various app permissions that have been granted.
Privacy information such as the number of cookies used.
Lists of extensions and tools that can be used in the app.

 
 Get started with Progressive Web Apps
 	6/21/2022 • 5 minutes to read • Edit OnlineProgressive Web Apps (PWAs) are web apps that are progressively enhanced. The progressive enhancements include app-like features, such as installation, offline support, and push notifications.
You can also package your PWA for app stores, such as Microsoft Store, Google Play, and Mac App Store. The Microsoft Store is the commercial app store that's built into Windows 10 and later.
In this overview of PWA basics, you create a simple web app and extend it as a PWA. The finished project works across modern browsers.
TIP
You can use PWABuilder to create a new PWA, enhance your existing PWA, or package your PWA for app stores.
To install or run a PWA on Windows, see Installing a PWA in The user experience of PWAs.
 Prerequisites
Install Visual Studio Code to edit your PWA source code. Install Node.js as your local web server.
 Creating a basic web app
MySamplePwaTo create an empty web app, follow the steps in Node Express App Generator, and name your app .
In the prompt, run the following commands, which create an empty web app and install any dependencies:
npx express-generator --no-view
npm install
You now have a simple, functional web app. To start your web app, run the following command:
npm start
http://localhost:3000Now browse to  to view your new web app.

 Getting started building a PWA
Now that you have a simple web app, extend it as a Progressive Web App (PWA) by adding the three requirements for PWAs:
HTTPS.
A Web App Manifest. A Service Worker.
 Step 1 - Use HTTPS
Key parts of the Progressive Web Apps platform, such as Service Workers, require using HTTPS. When your PWA goes live, you must publish it to an HTTPS URL. Many hosts now offer HTTPS by default, but if your host doesn't, Let's Encrypt offers a free alternative for creating the necessary certificates.
http://localhosthttp://localhostFor debugging purposes, Microsoft Edge also permits  to use the PWA APIs. In this tutorial, you use  to build your PWA.
Publish your web app as a live site, but make sure your server is configured for HTTPS. For example, you can create an Azure free account. If you host your app site on the Microsoft Azure App Service, it's served over HTTPS by default.
 Step 2 - Create a Web App Manifest
A Web App Manifest is a JSON file containing metadata about your app, such as name, description, icons, and more.
To add an app manifest to the web app:
MySamplePwa1. In Visual Studio Code, select File > Open Folder and then select the  directory that you created earlier.
Ctrl+N2. Press  to create a new file.
3. Copy and paste the following code into the new file:
{
    "lang": "en-us",
    "name": "My Sample PWA",
    "short_name": "SamplePWA",
    "description": "A sample PWA for testing purposes",
    "start_url": "/",
    "background_color": "#2f3d58",
    "theme_color": "#2f3d58",
    "orientation": "any",
    "display": "standalone",
    "icons": [
        {
            "src": "/icon512.png",
            "sizes": "512x512"
        }
    ]
}
/MySamplePwa/public/manifest.json4. Save the file as .
icon512.png to /MySamplePwa/public/images5. Add a 512x512 app icon image named . You can use the sample image for testing purposes.
/public/index.html, and add the following code inside the <head>6. In Visual Studio Code, open  tag.
<link rel="manifest" href="/manifest.json">
 Step 3 - Add a Service Worker
Service workers are the key technology behind PWAs. Service workers enable scenarios that were previously limited to native apps, including:
Offline support.
Advanced caching.
Running background tasks.
Service workers are specialized Web Workers that intercept network requests from your web app. Service workers can run tasks even when your PWA isn't running, including:
Serving requested resources from a cache.
Sending push notifications.
Running background fetch tasks. Badging icons.
Service workers are defined in a special JavaScript file, described in Using Service Workers and Service Worker API.
To build a service worker in your project, use the Cache-first network Service Worker recipe from PWA Builder, as follows.
public1. Copy the source files pwabuilder-sw-register.js and pwabuilder-sw.js to the  folder in your web app project.
/public/index.html2. In Visual Studio Code, open .
<head>3. Inside the  tag, add the following code.
<script type="module" src="/pwabuilder-sw-register.js"></script>
Your web app now has a service worker that uses the cache-first strategy. The new service worker fetches resources from the cache first, and from the network only as needed. Cached resources include images, JavaScript, CSS, and HTML.
Confirm that your service worker runs, as follows:
http://localhost:30001. Go to your web app at . If your web app isn't available, run the following command:
npm start
F122. In Microsoft Edge, select  to open DevTools. Select Application, then Service Workers to view the service workers. If the service worker isn't displayed, refresh the page.

3. View the service worker cache by expanding Cache Storage and select pwabuilder-precache. All of the resources cached by the service worker should be displayed. The resources cached by the service worker include the app icon, app manifest, CSS, and JavaScript files.

4. Try your PWA as an offline app, as follows. In DevTools, select Network, and then change the status from Online to Offline.

5. Refresh your app. It should display the offline mechanism for serving the resources of your app from the cache.

The app can now be installed.
 Best practices and next steps
To build a robust, real-world PWA, consider the following best practices for web app development.
	 Cross 	-browser compatibility
Test your app for cross-browser compatibility. Make sure your PWA works, by testing it in different browsers and environments. See Tools at Microsoft Edge Developer.
 Responsive design 
Use fluid layouts and flexible images. Responsive design includes the following elements that adapt your UX to your user's device:
CSS grid.
Flexbox.
Media queries.
Responsive images.
To test your app locally, use device emulation tools from your browser. To test your app directly on a target device, create a remote debugging session on Windows or Android.
 Support deep linking 
Support Deep linking. Route each page of your site to a unique URL so existing users can help you engage an even broader audience through social media sharing.
 Provide a rich offline experience 
Provide a rich Offline experience. Make the app work even if the user's device is offline. Provide a custom offline page rather than using the browser's default offline page.
 Use validation and testing practices 
Use software validation and testing practices. Use code quality tools such as the Webhint linter to optimize the efficiency, robustness, safety, and accessibility of your app.
 See also
Progressive Web Apps on MDN web docs
Progressive Web Apps on web.dev
Hacker News readers as Progressive Web Apps - Compares different frameworks and performance patterns for implementing a sample PWA.
Myth Busting PWAs
A Progressive Roadmap for your Progressive Web App
Offline POSTs with Progressive Web Apps
PWA Q&A
Betting on the Web
Naming Progressive Web Apps
Designing And Building A Progressive Web Application Without A Framework (Part 1)
Designing And Building A Progressive Web Application Without A Framework (Part 2)
Designing And Building A Progressive Web Application Without A Framework (Part 3)
 
 
Use a Web App Manifest to integrate a Progressive
Web App into the operating system
 	6/21/2022 • 3 minutes to read • Edit OnlineA Web App Manifest of a website governs how your Progressive Web App (PWA) looks and behaves when installed on a device. The Web App Manifest provides information such as the name of your app, the file location of icons that represent your app in system menus, and the theme colors that the operating system (OS) uses in the title bar.
<head> and </head>A Web App Manifest is a JSON file that must be referenced from your website's HTML page using a manifest link. Insert the following code in between the  tags of your website's HTML page to link to your manifest file:
<link rel="manifest" href="/manifest.json">
NOTE
app_name.webmanifestThe manifest file's content must be valid JSON, but the file can also be named like . If you choose
webmanifest extension, verify that your HTTP server serves it with the application/manifest+jsonto use the  MIME type.At a minimum, a manifest file should contain the following information:
{
    "name": "My Sample PWA",
    "lang": "en-US",
    "start_url": "/"
}
A PWA can be customized further by using other manifest members, such as the following:
MEMBERDESCRIPTION
nameThe name of the app, used by the OS to display next to the app's icon.
short_namenameThis can be used to display the name of the app when there isn't enough space for .
langThe primary language of the app.
start_urlThe preferred URL that should be navigated to when the operating system launches your app.
scopeDefines the navigation scope for the app. Outside of this
scope, the visited page reverts to a normal webpage, not a
start_urlPWA. This defaults to .MEMBERDESCRIPTION
displayWhat the app should look like. This changes how much of the browser UI is shown to the user.
theme_colorThe default theme color for the app. This affects how the OS displays the site.
background_colorThe background color of the window where the app is launched, before the stylesheet is applied.
orientationOn supporting devices, this defines the default orientation for the app (such as landscape or portrait).
iconsArray of icon image objects that are used by the OS in different contexts.
descriptionWhat the app is about.The following manifest file uses the above manifest members:
{
    "name": "My Sample PWA",
    "lang": "en-us",
    "short_name": "SamplePWA",
    "description": "A sample PWA for testing purposes",
    "start_url": "/",
    "scope": "/",
    "display": "standalone",
    "theme_color": "#2f3d58",
    "background_color": "#2f3d58",
    "orientation": "any",
    "icons": [
        {
            "src": "/icon512.png",
            "sizes": "512x512"
        }
    ]
}
To learn more about manifest members, see Web app manifests at MDN.
Using a manifest also enables you to unlock powerful features that allow your app to behave like native apps, such as adding app shortcuts, or identifying as a share target.
 Use shortcuts to provide quick access to features
shortcutsMost operating systems provide quick access to key app features by using shortcuts on the right-click menu that's connected to the icon of the app. To use shortcuts in your PWA, include the  property in your Web App Manifest.
The following code shows how to define a shortcut in a web app manifest.
"shortcuts": [
    {
        "name": "Play Later",
        "description": "View the list of podcasts you saved for later",
        "url": "/play-later",
        "icons": [
            {
                "src": "/icons/play-later.svg",
                "type": "image/svg+xml",
                "purpose": "any"
            }
        ]
    },
    {
        "name": "Subscriptions",
        "description": "View the list of podcasts available in your subscription",
        "url": "/subscriptions?sort=desc"
    }
]
To learn more, see Define app shortcuts.
 Identify your app as a Share Target
share_targetTo enable users to quickly share links and files with native applications, use the  object in the Web
action page is similar to a form. In the share_target object, you define the actionactionApp Manifest. An  page and the parameters that you expect to be passed into the  page.
"share_target": {
    "action": "/share.html",
    "params": {
        "title": "name",
        "text": "description",
        "url": "link"
    }
}
share_target object establishes /share.html as the actionaction page: title, text, and urlThe above  page for a share. This example also defines three parameters that would be passed to that .
To learn more about using the Share Target feature, see Share content with other apps.
 See also
 Getting Started with Progressive Web Apps (Workshop).
 
 
Use Service Workers to manage network requests and push notifications
 	6/21/2022 • 3 minutes to read • Edit OnlineService Workers are a special type of Web Worker with the ability to intercept, modify, and respond to all
Fetch API. Service Workers can access the CacheIndexedDBnetwork requests using the  API, and asynchronous client-side data stores, such as , to store resources.
 Registering a Service Worker
Similar to other Web Workers, Service Workers must exist in a separate file. You reference this file when registering the Service Worker, as shown in the following code:
if ( "serviceWorker" in navigator ) {
    navigator.serviceWorker.register( "/serviceworker.min.js" ); }
serviceWorkerserviceworker.min.jsModern browsers provide different levels of support for Service Workers. As such, it's a good practice to test for the existence of the  object before running any Service Worker-related code. In the above code, a Service Worker is registered using the  file located at the root of the site.
Make sure to place the Service Worker file in the highest-level directory that you want it to manage. Such a directory is called the scope of the Service Worker. In the previous code, the file is stored in the root, and the Service Worker manages all pages in the domain.
js directory, the scope of the Service Worker would be the jsIf the Service Worker file was stored in a 
directory and any subdirectories. As a best practice, place the Service Worker file in the root of your site, unless you need to reduce the scope of your Service Worker.
 The Service Worker lifecycle
The lifecycle of a Service Worker consists of multiple steps, with each step triggering an event. You can add listeners to these events to run code to perform an action. The following list presents a high-level view of the lifecycle and related events of Service Workers.
1. Register the Service Worker.
installinstall2. The browser downloads the JavaScript file, installs the Service Worker, and triggers the  event. You can use the  event to pre-cache any important and long-lived files, such as CSS files, JavaScript files, logo images, offline pages, and so on from your website.
self.addEventListener( "install", function( event ){     console.log( "WORKER: install event in progress." ); });
activate3. The Service Worker is activated, which triggers the  event. Use this event to clean up outdated caches.
self.addEventListener( "activate", event => {
    console.log('WORKER: activate event in progress.'); });
self.skipWaiting()install4. The Service Worker is ready to run when the page is refreshed or when the user goes to a new page on the site. If you want to run the Service Worker without waiting, use the  method during the  event, as follows:
self.addEventListener( "install", event => {     self.skipWaiting();
    // ...
});
5. The Service Worker is now running.
 Using fetch in Service Workers
fetch event. The fetchThe main event that you use in a Service Worker is the  event runs every time the browser attempts to access content within the scope of the Service Worker.
The following code shows how to add a listener to the fetch event:
self.addEventListener( "fetch", event => {   console.log('WORKER: Fetching', event.request); });
fetchWithin the  handler, you can control whether a request goes to the network, pulls from the cache, and so on. The approach you take will likely vary, based on the type of resource being requested, how frequently it is updated, and other business logic that's unique to your application.
fetchHere are a few examples of what you can do within the  handler:
If available, return a response from the cache; otherwise, fallback to requesting the resource over the network.
Fetch a resource from the network, cache a copy, and return the response.
Allow users to specify a preference to save data.
Supply a placeholder image for certain image requests. Generate a response directly in the Service Worker.
 Push Notifications
Service Workers can push notifications to users. Push notifications can prompt users to re-engage with your application after time has elapsed. To learn more, see Re-engage users with badges, notifications, and push messages.
 See also
Making PWAs work offline with Service workers
How to make PWAs re-engageable using Notifications and Push
 
 
Offline and network connectivity support in
Progressive Web Apps
 	6/21/2022 • 5 minutes to read • Edit OnlineFor many years, organizations were reluctant to invest heavily in web-based software over native software, because web applications depended on stable network connections. Today, the Progressive Web Apps (PWA) platform offers robust options that enable users to continue working even if the network connection becomes unstable or goes offline.
 Use caching to improve PWA performance
CachewindowWith the introduction of Service Workers, the web platform added the  API to provide access to managed cached resources. This Promise-based API allows developers to store and retrieve many web resources-HTML, CSS, JavaScript, images, JSON, and so on. Usually, the Cache API is used within the context of a Service Worker, but it's also available in the main thread on the  object.
CacheOne common use for the  API is to pre-cache critical resources when a Service Worker is installed, as shown in the following code.
self.addEventListener( "install", function( event ){     event.waitUntil(
        caches.open( "static-cache" )               .then(function( cache ){             return cache.addAll([                 "/css/main.css",
                "/js/main.js",
                "/img/favicon.png",
                "/offline/"
            ]);
        })
    );
});installThe above code runs during the Service Worker  life cycle event, and opens a cache named 
static-cache. When it has a pointer to the cache, it adds four resources to the cache using the addAll()method.
fetchThe above approach is often coupled with cache retrieval during a  event, as follows:
self.addEventListener( "fetch", event => {     const request = event.request;     const url = request.url;
    // If we are requesting an HTML page.     if ( request.headers.get("Accept").includes("text/html") ) {         event.respondWith(
            // Check the cache first to see if the asset exists, and if it does, 
            // return the cached asset.
            caches.match( request )
                  .then( cached_result => {                 if ( cached_result ) {                     return cached_result;
                }
                // If the asset isn't in the cache, fall back to a network request 
                // for the asset, and proceed to cache the result.                 return fetch( request )
                       .then( response => {                     const copy = response.clone();
                    // Wait until the response we received is added to the cache.                     event.waitUntil(                         caches.open( "pages" )                               .then( cache => {
                            return cache.put( request, response );
                        });                     );
                    return response;
                })
                // If the network is unavailable to make a request, pull the offline
                // page out of the cache.
                .catch(() => caches.match( "/offline/" ));
            })
        ); // end respondWith
    } // end if HTML
});fetchmatch()The above code runs within the Service Worker whenever the browser makes a  request for this site. Within that event, there is a conditional statement that runs if the request is for an HTML file. The Service Worker checks to see whether the file already exists in any cache, by using the  method:
fetchIf the request exists in the cache, that cached result is returned.
If the request doesn't exist in the cache, a new  for that resource is run, a copy of the response is cached for later, and the response is returned.
fetch	 If the 	 fails because the network is unavailable, the offline page is returned from the cache.
This simple introduction shows how to use caching in your progressive web app (PWA). Each PWA is different and may use different caching strategies. Your code may look different, and you can use different caching strategies for different routes within the same application.
 Use IndexedDB in your PWA to store structured data
IndexedDB is an API for storing structured data. Similar to the Cache API, it's also asynchronous. This means
IndexedDByou can use it in the main thread, or with Web Workers such as Service Workers. Use the  API for storing a significant amount of structured data on the client, or binary data, such as encrypted media objects. See MDN primer on using IndexedDB.
 Understand storage options for PWAs
Sometimes you might need to store small amounts of data in order to provide a better offline experience for your users. If that is the case, you might find that the simplicity of the key-value pair system of Web Storage meets your needs.
IMPORTANT
Web Storage is a synchronous process, and isn't available for use within worker threads, such as Service Workers. Heavy usage of Web Storage may create performance issues for your application.
localStorage and sessionStorageThere are two types of Web Storage: . Each type of Web Storage is maintained as a separate data store that's isolated to the domain that created it.
 persists only for the duration of the browsing session. For example, while the browser is
sessionStoragelocalStorageopen, which includes refresh and restores.  persists until the data is removed by the code, the user, or the browser. For example, when
there is limited storage available.
localStorage, which is similar to how sessionStorageThe following code shows how to use  is used:
var data = {
    title: document.querySelector("[property='og:title']").getAttribute("content"),
    description: document.querySelector( "meta[name='description']" ).getAttribute("content")
}; localStorage.setItem( window.location, JSON.stringify(data) );
localStorage using the setItem()The above code grabs metadata about the current page and stores it in a JavaScript object. Then it stores that value as JSON in  method, and assigns a key equal to the current 
window.location URL. You can retrieve the information from localStorage by using the getItem() method.
localstorageThe following code shows how to use caching with  to enumerate cached pages and extract metadata to perform a task, such as building a list of links.
caches.open( "pages" )       .then( cache => {     cache.keys()
         .then( keys => {         if ( keys.length )
        {
            keys.forEach( insertOfflineLink );
        }
    }) });
function insertOfflineLink( request ) {
    var data = JSON.parse( localStorage.getItem( request.url ) );
    // If data exists and this page isn't an offline page (assumes that offline 
    // pages have the word "offline" in the URL).
    if ( data && request.url.indexOf('offline') < 0  )
    {
        // Build a link and insert it into the page.
    }
}insertOfflineLink() method passes the URL of the request into the localStorage.getItem()The  method to
retrieve any stored metadata. The retrieved data is checked to see if it exists, and if it does, an action can be taken on the data, such as building and inserting the markup to display it.
 Test for network connections in your PWA
In addition to storing information for offline use, it's helpful to know when a network connection is available, in order to synchronize data or inform users that the network status has changed.
Use the following options to test for network connectivity: navigator.onLine  
navigator.onLineThe  property is a boolean that lets you know the current status of the network. If the value is 
true, the user is online; otherwise, the user is offline.
 Online and Offline Events 
You can take action when your network connectivity changes. You can listen and take action in response to
window, document, and document.bodynetwork events. The events are available on the  elements, as shown below:
window.addEventListener("online",  function(){     console.log("You are online!");
});
window.addEventListener("offline", function(){
    console.log("Oh no, you lost your network connection."); });
 See also
Cache
IndexedDB
Service Worker Web Storage navigator.onLine
Online and Offline Events
Request with Intent: Caching Strategies in the Age of PWAs
 
 
Publish a Progressive Web App to the Microsoft Store
 	6/21/2022 • 6 minutes to read • Edit OnlinePublishing your Progressive Web App (PWA) to the Microsoft Store brings the following advantages:
ADVANTAGEDESCRIPTIONDiscoverabilityUsers naturally look for apps in the app store. When you publish to the Microsoft Store, millions of Windows users can discover your PWA alongside other Windows apps. The Store showcases apps through categories, curated collections, and more. App discovery portals provide an easy browsing and shopping experience for potential users of your app. You can even enhance your Store listing with screenshots, a hero image, and video trailers.TrustworthinessWindows customers know they can trust their Microsoft Store purchases and downloads, because they adhere to the rigorous Microsoft quality and safety standards.Easy installThe Microsoft Store provides a consistent and user-friendly install experience across all Windows 10 or later apps.App analyticsThe Windows Partner Center dashboard provides you with detailed analytics about your app health, usage, and more.To publish your PWA to the Microsoft Store, no code changes are required. Instead, you create an app reservation, package your PWA, and submit your package to the Store. The following sections explain the steps.
 Create an app reservation
Windows Partner Center is the hub for you to submit your app to the Microsoft Store.
To create an app reservation:
1. To display your enrolled programs:
a. Sign into Windows Partner Center with your Microsoft account and go to the Partner Center Dashboard.
b. Navigate to Windows & Xbox.
If Windows & Xbox is displayed, your app is already enrolled.
If Windows & Xbox isn't displayed, select Add program.

2. To enroll in the developer program:
a. Navigate to Windows & Xbox.
b. Select Get started.
c. Follow the prompts.
3. Now, your account is enrolled in the app developer program. To create an app reservation:
a. Navigate to Windows & Xbox.
b. Select Overview > Create a new app.
c. Type the name of your app in the prompt.
Reserve product named. Select .

4. To display your publisher details for use in the Package your PWA section, select Product management > Product Identity.

5. Copy and save the following values.
Package ID
Publisher ID
 Publisher Display Name
 Package your PWA for the Store
Now that you have your app publishing information, generate a Windows app package for your PWA.
To generate an app package:
1. Go to PWA Builder.
2. Type the URL of your PWA and click Start.
3. Once your report is complete, make sure your PWA is store-ready. If your PWA score is too low, you can visit the Manifest Options and Service Worker Options and check out the sections that need work.
4. When your PWA is ready to be published, click Next, and then select the Store Package button in the Windows section of the publish page.
5. Paste the following values, which you saved in the Create an app reservation section:

6. Select Generate.
7. To download your Windows app package, select Download.
.zip archive that contains an .msixbundle file and a .classic.appxbundleYour download is a  file. The two app
packages allow your PWA to run on a wide variety of Windows versions. For more information, see What is a classic package?.
 Submit your app package to the Store 
To submit your app to the Microsoft Store:
1. Go to Windows Partner Center
2. Select your app.
3. Select Start your Submission.

4. When you're prompted, provide information about your app, such as pricing and age rating.
.msixbundle and the .classic.appxbundle5. On the Packages prompt, select the  files you generated in the
Package your PWA section.
After you complete your submission, your app is reviewed, typically within 24 to 48 hours. After you receive approval, your PWA is available in the Microsoft Store.
 Measure usage of your PWA installed from the Microsoft Store
RefererWhen your PWA is initially launched, if the PWA was installed from the Microsoft Store, Microsoft Edge includes the following  header with the request of the first navigation of your web app.
Referer: app-info://platform/microsoft-store
document.referrerUse this feature to measure distinct traffic from your PWA that was installed from the Microsoft Store. Based on the traffic, you can adjust your app's content to improve the user experience. This feature is accessible to both client and server code. To access this information on the client side, you can query  in your JavaScript.
This feature was first introduced in Microsoft Edge version 91, and the DOM API was introduced in Microsoft Edge version 93.
 Redirect to locale-specific domains without displaying additional UI
By default, a PWA that's installed from the Microsoft Store displays an additional UI when the app is redirected to a locale-specific domain. The added UI shows the URL and page title. This UI is added because navigation to the locale-specific domain is considered "out-of-scope". However, you can prevent this UI from being displayed, by specifying locale-specific origins that are associated with the PWA.
The following figure shows the UI that is introduced when a user moves outside the scope of a PWA.

	 Domain redirection with browser 	-installed PWAs
A Web App Manifest is tied to a single domain. However, some PWAs use locale-specific domains for their customers in specific regions of the globe. When visiting the PWA in a web browser, customers are seamlessly transitioned from the principal domain (for example, contoso.com) to a locale-specific domain (for example, contoso.co.ke), because the redirect happens during initial load of that website.
Customers who install the PWA from Microsoft Edge would therefore install the PWA from the locale-specific domain. Subsequent launches of the PWA go directly to that locale-specific domain, instead of first going to the principal domain.
 Domain redirection with PWAs installed from the Microsoft Store 
PWAs that are installed from the Microsoft Store have a hard-coded start URL that is pointed at the principal domain. When the PWA is launched, the PWA initially navigates to the principal domain, and then a customer may (as necessary) be redirected to their locale-specific domain. If that redirection occurs, the navigation is considered "out of scope". As a result, the app displays the URL and page title at the top of the page.
Displaying the URL and page title is a security feature to ensure that users know they have left the context of the PWA. This added UI makes sense when a user loads a page from another website in the context of the PWA. However, that added UI may be inappropriate when a user moves among domains that are all part of the same website.
	 Prevent the locale 	-specific URL and title from being displayed
To prevent the additional UI from being shown in a PWA that's installed from the Microsoft Store, you can use URL Handlers to enable the PWA to span multiple locale-specific domains.
To prevent displaying the URL and page title:
url_handlers1. Within the PWA's Web App Manifest, use the  member to specify an array of origins that are associated with that app.
web-app-origin-association2. On each of the referenced origins, include a  file that associates the PWA with that domain.
When these domain lists are in place, Microsoft Edge no longer shows the additional UI when the principal domain is redirected to the locale-specific domains.
url_handlers feature will be replaced by scope_extensionsEventually, the , but that spec is still in development.
scope_extensions will produce the same result as url_handlers.
This feature was first introduced in Microsoft Edge version 97.
 See also
Test and submit your PWA app package
Publish a new PWA to the Store
Update an existing Store app to a PWA
Image recommendations for PWAs in the Store
App packaging explainer

 
 Experimental features and origin trials
 	6/21/2022 • 2 minutes to read • Edit OnlineSome of the PWA features in Microsoft Edge are still experimental. Experimental features can be used in two ways:
By enabling the corresponding flag in Microsoft Edge.
By enrolling your site in an origin trial to test features in production with your users.
 Toggle experimental features
To turn experimental features on or off:
1. Open Microsoft Edge.
edge://flags2. Go to .
3. Navigate to the relevant experiment.
4. Select the dropdown menu next to the experiment description and select Enabled to turn on the feature or Disabled to turn it off.

 Enroll your site in an origin trial
Microsoft Edge sometimes uses origin trials to test features for specific domains or websites. You may want to use an origin trial for your website to apply a specific feature. If you're a website owner, you can enroll in an origin trial. An origin trial provides features to a percentage of Microsoft Edge users who visit your website.
For more information about Origin Trials, see Microsoft Edge Origin Trials Developer Console.
 Features that are available to test
The following list describes experimental web app features that are available to test and validate on Microsoft Edge. To enable them, go to Toggle experimental features.
FEATUREPLATFORMURI Protocol HandlingWindows and LinuxURL Link HandlingWindowsWindow Controls Overlay for Desktop AppsAllFile HandlingAll Desktop 
 Define icons and a theme color
 	6/21/2022 • 2 minutes to read • Edit OnlinePWAs that are installed on Windows can be customized in the way they appear in the operating system (OS). A PWA can define a set of icons and a theme color for the title bar.
 Define icons
In Windows, apps are recognizable to users by their icons. Icons appear in the Taskbar, in the Start Menu, and in other places such as system settings.
A PWA can configure which image files the operating system should use to display an icon in these various places. Multiple images can be provided for the OS to choose, depending on the context.
iconsIn the web app manifest file, app icons are defined with the  member:
{
    "icons": [
        {
            "src": "/icons/icon-192x192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "/icons/icon-256x256.png",
            "sizes": "256x256",
            "type": "image/png"
        },
        {
            "src": "/icons/icon-384x384.png",
            "sizes": "384x384",
            "type": "image/png"
        },
        {
            "src": "/icons/icon-512x512.png",
            "sizes": "512x512",
            "type": "image/png"
        }
    ]
}
icons array should come with at least the src and sizestype and purposeEach icon in the  properties. An icon can also have the  properties.
PROPERTYDESCRIPTION
srcThe path to the image file, which can be a relative path from the app root folder, or an absolute URL.
sizesA space-separated list of sizes that the corresponding image can be used for.
typeAn optional hint for the OS to quickly detect the image type.PROPERTYDESCRIPTION
purposemonochromeAn optional hint to help the OS choose the right icon image, depending on the context. The value can be , 
maskable, or any.Learn more about the icons member.
 Choose a theme color
On Windows, PWAs have their own application window, with a title bar that contains the name of the app and the system close, maximize, and minimize icons.
The web content created by the PWA fills the entire surface area of the window, except for the title bar area, which can be customized with a theme color.
The following image shows what a PWA's title bar looks like when not using a theme color, and when using a theme color that matches the main color of the app:

theme_colorTo define a theme color, use the  web app manifest member:
{
    "theme_color": "#0d4c73"
}
theme-colorIndividual web pages can also define a theme color, by using the  meta tag. When this meta tag is present on the page, its defined color overrides the color that's found in the web app manifest.
NOTE
You can use the Window Controls Overlay feature to display your app content in the title bar area.
 See also
 PWABuilder Image Generator
 
 
Re-engage users with badges, notifications, and push messages
 	6/21/2022 • 7 minutes to read • Edit OnlineProgressive Web Apps (PWAs) are able to do work when the app isn't running, such as updating data in the cache, or sending messages when the device regains connectivity. To do this, use the following APIs, which are described in Synchronize and update a PWA in the background:
Background Sync API
Periodic Background Sync API
Background Fetch API
To re-engage the user with the app after a background task has been completed, you can use notifications and badges. To do this, use the following APIs:
App Badging API
Notifications API
Push API
Badges are user-friendly, and can be used frequently. Badges don't interrupt the user's workflow, and are useful for displaying a small amount of information, such as the number of messages received.
Notifications are useful for apps to take part in the system's notification center and display images and text information. Notifications are useful to alert the user about an important change of state in your app. However, notifications should be used rarely, because they tend to be disruptive to the user's workflow.
 Display a badge on the app icon
PWAs can display a badge on their app icon by using the App Badging API. The badge can be empty or it can contain a number.
 Check for support 
Before using the App Badging API, first check whether the App Badging API is supported in the browser engine that your app runs in, as follows:
if (navigator.setAppBadge) {
    console.log("The App Badging API is supported!"); }
 Displaying the badge 
To set the badge, use the following code from your app frontend or service worker.
// To display an empty badge navigator.setAppBadge();
// To display a number in the badge navigator.setAppBadge(42);

setAppBadgeThe  function returns a Promise, which can be used to know when the badge was added, and to catch potential errors, as follows:
navigator.setAppBadge(42).then(() => {     console.log("The badge was added");
}).catch(e => {
    console.error("Error displaying the badge", e); });
 Clearing the badge 
To remove the badge on the app icon, use the following code from your frontend or service worker:
navigator.clearAppBadge();
clearAppBadgeThe  also returns a Promise that can be used to handle potential errors.
setAppBadge again, but pass 0Another way to clear a badge is to call  as the value, this time:
navigator.setAppBadge(0);
 Display notifications in the action center
PWAs can display notifications by using the Notifications API.
 Check for support 
Before using the API, check that it is supported, as follows:
if ("Notification" in window) {
    console.log("The Notifications API is supported"); }
 Request permission 
requestPermissionThe Notifications API can only be used after having requested the user's permission to display messages. To request permission, use the  function, as shown below.
Requesting permission should only be done in response to a user action. This is a best practice, to avoid interrupting the user with permission prompts when the user hasn't yet interacted with a feature that uses notifications.
button.addEventListener("click", () => {
    Notification.requestPermission().then(permission => {         if (permission === "granted") {             console.log("The user accepted");
        }
    });
});
You can check the permission status again later:
if (Notification.permission === "granted") {     console.log("The user already accepted"); }
 Display the notification 
NotificationOnce you know that the API is supported and the user has accepted notifications, you can display a notification by creating a  object:
const notification = new Notification("Hello World!");

body and iconThe above code displays a text-only notification message, but you can also customize the message by including additional  properties:
const notification = new Notification("Hello World!", {     body: "This is my first notification message",     icon: "/assets/logo-192.png", });

ServiceWorkerRegistration.showNotificationYou can also display notifications from your app's service worker. This is useful because the service worker may be doing work while your app isn't running. To send a notification from your service worker, use the  function:
self.registration.showNotification("Hello from the Service Worker!");
showNotification function supports the same arguments as the NotificationThe  constructor used in the
showNotification function also supports the actionsprevious example. The  property, which is described in the following section.
 Add actions to notifications 
ServiceWorkerRegistration.showNotificationIn a notification, it's possible to add actions for the user to perform. This is only supported in persistent notifications which are shown by using the  function.
self.registration.showNotification("Your content is ready", {     body: "Your content is ready to be viewed. View it now?",     icon: "/assets/logo-192.png",     actions: [         {
            action: "view-content",             title: "Yes"
        },         {
            action: "go-home",             title: "No"
        }
    ]
});
notificationclick event. When a notificationclickWhen the user clicks one of the action buttons, your PWA can handle the click by listening for the  event is received, close the notification and execute some
code:
self.addEventListener('notificationclick', event => {
    // Close the notification.     event.notification.close();
    // React to the action.     if (event.action === 'view-content') {
        console.log("view-content action was clicked");
    } else if (event.action === 'go-home') {         console.log("go-home action was clicked");
    } else {
        console.log("main body of the notification was clicked");
    }
}, false);To learn more about notification actions, see Notification.actions at MDN.
 Add push notifications to your PWA
To create a PWA that supports push notifications:
1. Subscribe to a messaging service using the Push API.
2. Display a toast message when a message is received from the service, by using the Notifications API.
Like Service Workers, the push notification APIs are standards-based APIs. The push notification APIs work across browsers, so your code should work everywhere that PWAs are supported. For more information about delivering push messages to different browsers on your server, see Web-Push.
	 Step 1  	- Generate VAPID keys
Push notifications require VAPID (Voluntary Application Server Identification) keys in order to send push messages to the PWA client. There are several VAPID key generators available online (for example, vapidkeys.com).
After the keys are generated, you'll receive a JSON object that contains a public and private key. Save the VAPID keys for later use in the tutorial below.
For information about VAPID and WebPush, see Sending VAPID identified WebPush Notifications using the Mozilla Push Service.
	 Step 2  	- Subscribe to push notifications
Service workers handle push events and toast notification interactions in your PWA. To subscribe the PWA to server push notifications:
Make sure your service worker is installed, active, and registered.
Make sure your code for completing the subscription task is on the main UI thread of the PWA. Make sure you have network connectivity.
Before a new push subscription is created, Microsoft Edge checks whether the user has granted the PWA permission to receive notifications.
If the user has not granted the PWA permission to receive notifications, the user is prompted by the browser for permission. If the user doesn't grant permission to the browser, the request to 
registration.pushManager.subscribe throws a DOMException, which must be handled. For more on permission
management, go to Push Notifications in Microsoft Edge.
pwabuilder-sw-register.jsIn your  file, append the following code:
// Ask the user for permission to send push notifications.
navigator.serviceWorker.ready
    .then(function (registration) {
        // Check if the user has an existing subscription         return registration.pushManager.getSubscription()
            .then(function (subscription) {                 if (subscription) {                     return subscription;
                }
                const vapidPublicKey = "PASTE YOUR PUBLIC VAPID KEY HERE";                 return registration.pushManager.subscribe({                     userVisibleOnly: true,
                    applicationServerKey: urlBase64ToUint8Array(vapidPublicKey)
                });
            });     });
// Utility function for browser interoperability function urlBase64ToUint8Array(base64String) {
    var padding = '='.repeat((4 - base64String.length % 4) % 4);     var base64 = (base64String + padding)
        .replace(/\-/g, '+')         .replace(/_/g, '/');
    var rawData = window.atob(base64);
    var outputArray = new Uint8Array(rawData.length);
    for (var i = 0; i < rawData.length; ++i) {         outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
}See also PushManager and Web-Push.
	 Step 3  	- Listen for push notifications
clickAfter a subscription is created in your PWA, add handlers to the service worker to respond to push events. Push event are sent from the server to display toast notifications. Toast notifications display data for a received message. To do any of the following tasks, you must add a  handler:
Dismissing the toast notification.
Opening a window.
Putting focus on a window.
Opening and putting focus on a new window to display a PWA client page.
click handler, in your pwabuilder-sw.js file, add the following handlers for the pushTo add a  event and the 
notificationclick event:
// Respond to a server push with a user notification.
self.addEventListener('push', function (event) {     if (Notification.permission === "granted") {         const notificationText = event.data.text();
        const showNotification = self.registration.showNotification('Sample PWA', {             body: notificationText,             icon: 'images/icon512.png'
        });
        // Make sure the toast notification is displayed.
        event.waitUntil(showNotification);     }
});
// Respond to the user selecting the toast notification.
self.addEventListener('notificationclick', function (event) {     console.log('On notification click: ', event.notification.tag);     event.notification.close();
    // Display the current notification if it is already open, and then put focus on it.
    event.waitUntil(clients.matchAll({         type: 'window'
    }).then(function (clientList) {
        for (var i = 0; i < clientList.length; i++) {             var client = clientList[i];
            if (client.url == 'http://localhost:1337/' && 'focus' in client)                 return client.focus();
        }
        if (clients.openWindow)
            return clients.openWindow('/');
    }));
});	 Step 4  	- Try it out
To test push notifications for your PWA:
http://localhost:30001. Go to your PWA at . When your service worker activates and attempts to subscribe your PWA to push notifications, Microsoft Edge prompts you to allow your PWA to show notifications. Select Allow.

http://localhost:3000F122. Simulate a server-side push notification, as follows. With your PWA opened at  in your browser, select  to open DevTools. Select Application > Service Worker > Push to send a test push notification to your PWA.
The push notification is displayed near the taskbar.

If you don't select (or activate) a toast notification, the system automatically dismisses it after several seconds and queues it in your Windows Action Center.

 See also
 Web Push Notifications Demo
 
 Handle files in Progressive Web Apps
 	6/21/2022 • 3 minutes to read • Edit OnlineProgressive Web Apps that can handle files feel more native to users and better integrated in the operating system.
<input type="file">Websites can already let users upload files by using the  or drag and drop, but PWAs go one step further and can register as file handlers on the operating system.
.docxWhen a PWA is registered as a file handler for certain file types, the operating system can automatically launch the app when those files are opened by the user, similar to how Microsoft Word handles  files.
 Enable the File Handling API
The File Handling feature is experimental.
To enable the File Handling feature:
edge://flags1. Go to  in Microsoft Edge.
2. Select Search flags and type "file handling API".
3. Select Default > Enabled > Restart.

 Define which files your app handles
file_handlersThe first thing to do is to declare which types of files your app handles. This is done in your app manifest file, using the  array member.
file_handlersEach entry in the  array needs to have two properties:
actionaccept: An object of accepted file types. Keys are MIME-types (partial types, using the wildcard symbol *: The URL the operating system should navigate to when launching your PWA.
,
are accepted), and values are arrays of accepted file extensions.
Consider the following example:
{
    "file_handlers": [
        {
            "action": "/openFile",
            "accept": {
                "text/*": [
                    ".txt"
                ]
            }
        }
    ]
}
.txt/openFileIn this example, the app registers a single file handler for that accepts text files. When a  file is opened by the user by, for example, double-clicking its icon on the desktop, then the operating system launches the app using the  URL.
 Detect whether the File Handling API is available
Before handling the files, your app needs to check whether the File Handling API is available on the device and browser.
launchQueueTo check whether the File Handling API is available, test whether the  object exists, as follows:
if ('launchQueue' in window) {
    console.log('File Handling API is supported!');
} else {
    console.error('File Handling API is not supported!'); }
 Handle files on launch
launchQueueWhen your app is launched by the OS after a file was opened, you can use the  object to access the file content.
Use the following JavaScript code to process the text content:
if ('launchQueue' in window) {
    console.log('File Handling API is supported!');
    launchQueue.setConsumer(launchParams => {         handleFiles(launchParams.files);     }); } else {
    console.error('File Handling API is not supported!');
}
async function handleFiles(files) {     for (const file of files) {
        const blob = await file.getFile();         blob.handle = file;
        const text = await blob.text();
        console.log(`${file.name} handled, content: ${text}`);
    }
}launchQueue object queues all the launched files until a consumer is set with setConsumerlaunchQueue and launchParamsThe . To learn more about the  objects, go to the File Handling explainer.
 Demo
.gpxMy Tracks is a PWA demo app that uses the File Handling feature to handle  files. To try the feature with this demo app:
Enable the feature in Microsoft Edge.
Go to My Tracks and install the app.
Download a GPX file on your computer. You can use this test GPX file. Open the downloaded GPX file.
Notice that the app launches automatically and that Microsoft Edge requests your permission to handle this file.

If you allow the app to handle the file, a new entry appears in the app's sidebar, and you can click the checkbox next to it to visualize the corresponding GPS track.

The source code for this app can be accessed on the My Tracks GitHub repository.
file_handlers array to request handling .gpxlaunchQueueThe manifest.json source file uses the  files.
The file.js source file uses the  object to handle incoming files.

 
 Handle URLs in Progressive Web Apps
 	6/21/2022 • 3 minutes to read • Edit OnlineNative applications on many operating systems can be associated with URLs. They can request to be launched, instead of the browser, when associated URLs are activated.
Progressive Web Apps (PWAs) can also handle URLs in the same way, to create a more engaging experience.
NOTE
url_handlersurl_handlers manifest member is being replaced by the new handle_linkshandle_linksSupport for the experimental  manifest member, documented below, is being phased out. The  manifest member, which is currently being standardized and implemented. See the  explainer. Enable URL handling
URL handling is an experimental feature. To enable the URL handling experiment:
edge://flags1. In Microsoft Edge, go to .
2. In the Search flags text box, type "url handling". The Desktop PWA URL handling setting appears.
3. Change the setting from Default to Enabled, and then click the Restart button.

URL handling is an origin trial in Microsoft Edge. Learn how to enroll your site in an origin trial.
 Define which URLs your app handles
url_handlersThe first thing to do is declare which URLs your app handles. This is done in your app manifest file, using the  array member.
url_handlers array contains a originEach entry in the  string, which is a pattern for matching origins.
{
    "url_handlers": [
        {
            "origin": "https://contoso.com"
        },
        {
            "origin": "https://*.contoso.com"
        },
        {
            "origin": "https://conto.so"
        }
    ]
}
contoso.comconto.soIn the above example, the app is registered to handle URLs that have their origins set to  or any of its subdomains, as well as .
 Verify the origin ownership
Microsoft Edge needs to verify the Progressive Web App's ownership of the handled URLs to successfully launch the app. This is required when the handled URL and the Progressive Web App (PWA) are both on the same origin and when they're not. In most cases, the PWA will handle URLs that have the same origin, but this isn't required.
web-app-origin-associationOrigin ownership is established with the  JSON file, which is used by Microsoft Edge to validate the handshake between the PWA and the URL.
https://app.contoso.com trying to handle https://contoso.comLet's take the example of a PWA hosted at  and 
https://partnerapp.com URLs.
contoso.comhttps://contoso.com/.well-known/web-app-origin-association To establish the PWA's ownership of the 	 origin, the following JSON content needs to be available at .
{
    "web_apps": [
        {
            "manifest": "https://app.contoso.com/manifest.json",
            "details": {
                "paths": [
                    "/*"
                ]
            }
        }
    ]
}
partnerapp.comhttps://partnerapp.com/.well-known/web-app-origin-association To establish the PWA's ownership of the 	 origin, the same JSON content needs to be available at .
{
    "web_apps": [
        {
            "manifest": "https://app.contoso.com/manifest.json",
            "details": {
                "paths": [
                    "/*"
                ]
            }
        }
    ]
}
web-app-origin-associationTo learn more about the valid members in , see the URL Handlers explainer.
 Testing URL handling
Testing your app's URL handling from a web browser won't work, since in-browser page navigation doesn't trigger URL handling at the OS level.
To test the feature, send yourself a URL in a chat message app, or a desktop email client like Windows Mail. You can also use the Windows Run app:
Windows logo key+R1. Press .
2. Enter a URL that your app handles.
Enter3. Press .
NOTE
At the moment, only PWAs that were installed from the default system browser can handle URLs.
 Demo
DevTools Tips is a demo Progressive Web App (PWA) that handles URLs for its own domain, so that the app opens instead of the website when a URL for its domain is used.
To test URL handling on the DevTools Tips demo:
1. Enable URL handling in Microsoft Edge.
2. Go to the DevTools Tips PWA.
3. Click the App available. Install DevTools Tips () icon in the Address bar to install the DevTools Tips app locally.
Windows logo key + R4. Press  to open the Windows Run dialog.
5. Enter a URL for one of the tips on the site, such as https://devtoolstips.org/tips/en/find-css-changes/.
Enter6. Press .
Windows knows that your app can handle URLs, but since there may be other apps that can handle URLs, Windows asks you which app to use. Select the DevTools Tips app. If you want to avoid seeing this dialog every time, select Remember my choice.

The DevTools Tips app launches and displays the Tips page.
You can find the source code on GitHub.
The DevTools Tips app registers the handled URLs in the manifest.json file.
The website establishes the app's ownership in the web-app-origin-association file.
 See also
Handling URLs in PWAs video.
PWAs as URL Handlers.

 
 Handle protocols in Progressive Web Apps
 	6/21/2022 • 2 minutes to read • Edit OnlineTo create a more engaging experience, Progressive Web Apps can handle multiple protocols. A Uniform
http or mailtoResource Locator (URL) is a string that allows clients to identify a resource on the Web. The first part of a URL is the protocol, such as , which lets clients know how to retrieve the resource.
mailtogeoWith Protocol Handling, when a PWA is being installed, the PWA can register to handle certain allowed protocols. For example, an email client app can register to handle the  protocol, or a geolocation app can register to handle the  protocol.
web+Custom protocols can also be handled, if a PWA registers a protocol that starts with the  prefix.
To learn more about other existing protocols, see List of URI schemes.
 Register protocols to handle
protocol_handlersTo use Protocol Handling, declare which protocols your app handles. This is done in your app manifest file, by using the  array member.
protocol_handlers array contains a protocol string and a urlEach entry in the  string:
{
    "protocol_handlers": [
        {
            "protocol": "mailto",
            "url": "/newEmail?to=%s"
        }
    ]
}
mailtomailto protocol, the app navigates to the /newEmail URL, replacing the %sIn the above example, the app is registered to handle the  protocol. When the operating system launches the app in response to the placeholder with the full URL that's being handled.
 See also
Getting started with Protocol Handlers for your web app
URL protocol handler registration for PWAs
 
 Display content in the title bar
 	6/21/2022 • 5 minutes to read • Edit OnlineA PWA can define how it should be displayed on mobile platforms, by using the display property in the app manifest file. However, to create an immersive, native-like experience, desktop PWAs can't use this approach.
By default, the app area starts immediately below the reserved title bar area:

Displaying content where the title bar normally is can help PWAs feel more native. Many desktop applications, such as Visual Studio Code, Microsoft Teams, and Microsoft Edge already do this:

The Window Controls Overlay API does the following:
Allows you to display web content over the entire surface area of the app.
Moves the critical system-required window controls into an overlay. Makes it possible for your content to stay clear of this overlay.
 Enable the Window Controls Overlay API in Microsoft Edge
The Window Controls Overlay API is experimental and must be enabled in Microsoft Edge, to use it.
To enable the Window Controls Overlay API:
edge://flags1. In Microsoft Edge, go to .
2. Select Search flags and then type "window controls overlay".
3. Select Default > Enabled > Restart.

The Window Controls Overlay API is also available as an origin trials feature. For your app's users to benefit from the Window Controls Overlay without having to enable it in Microsoft Edge, you can use an origin trial.
For more information about Origin Trials, go to Microsoft Edge Origin Trials Developer Console.
 Enable the Window Controls Overlay in your app
display_overrideThe first thing to do is to enable the Window Controls Overlay feature in your app's Web App Manifest file. To do this, in the manifest file, set the  property:
{
    "display_override": ["window-controls-overlay"] }
 Toggle the title bar
When the Window Controls Overlay feature is enabled, the user can choose to have the title bar or not, by clicking the title bar toggle button:

Your code can't assume that the window controls overlay is displayed, because:
The user can choose whether to display the title bar.
Your app can also run in a web browser or on a mobile device, as well as running as a desktop app.
Therefore, your code needs to react to title bar geometry changes. To learn more, see React to overlay changes.
 Use CSS environment variables to stay clear of the overlay
env()The  CSS function can be used to access environment variables that the user agent defines.
Four environment variables are added by the Window Controls Overlay feature:
VARIABLEDESCRIPTION
titlebar-area-xpxDistance, in , of the overlay from the left side of the window
titlebar-area-ypxDistance, in , of the overlay from the top side of the window
titlebar-area-widthpxWidth of the overlay, in 
titlebar-area-heightpxHeight of the overlay, in You can use these environment variables to position and size your app's title bar:
#title-bar {     position: fixed;
    left: env(titlebar-area-x);     top: env(titlebar-area-y);     height: env(titlebar-area-height);     width: env(titlebar-area-width); }position: fixed;Using  makes sure your title bar does not scroll with the rest of the content and instead stays aligned with the window controls overlay.
Knowing where the overlay is and how big it is is important. The overlay might not always be on the same side of the window; on macOS, the overlay is on the left side, but on Windows, the overlay is on the right side. Also, the overlay might not always be the same size.
 Make regions of your app drag handlers for the window
When the title bar is hidden, only the system-critical window controls remain visible (the Maximize, Minimize, Close, and App Info icons). This means that there is very little space available for users to move the app around.
-webkit-app-regionYou can use the  CSS property to offer more ways for users to drag the app. For example, if your app has its own titlebar, you can turn its titlebar into a window drag handler:
#title-bar {
    position: absolute;     left: env(titlebar-area-x);     top: env(titlebar-area-y);     height: env(titlebar-area-height);     width: env(titlebar-area-width);
    -webkit-app-region: drag; } React to overlay changes
A user can toggle the title bar or change the window dimensions while the app is running. Knowing when these things happen can be important for your app. Your app might need to rearrange some of the content that's displayed in the title bar, or rearrange your layout elsewhere on the page.
geometrychange event. To detect whether the title bar is visible, use the visiblenavigator.windowControlsOverlayTo listen for changes, use the property on the  object.
NOTE
geometrychangedebounceThe  is fired very frequently when the user resizes the window. To avoid running layout-changing code too often and causing performance problems in your app, use a  function to limit how many times the event is handled. See The Difference Between Throttling and Debouncing.const debounce = (func, wait) => {   let timeout;
  return function executedFunction(...args) {     const later = () => {       clearTimeout(timeout);       func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  }; };
if ('windowControlsOverlay' in navigator) {
    navigator.windowControlsOverlay.addEventListener('geometrychange', debounce(e => {
        // Detect if the Window Controls Overlay is visible.
        const isOverlayVisible = navigator.windowControlsOverlay.visible;
        // Get the size and position of the title bar area.         const titleBarRect = e.titlebarAreaRect;
        console.log(`The overlay is ${isOverlayVisible ? 'visible' : 'hidden'}, the title bar width is 
${titleBarRect.width}px`);
    }, 200));
} 
Demo app
My Tracks is a PWA demo app that uses the Window Controls Overlay feature.
1. In Microsoft Edge, Enable the Window Controls Overlay.
2. Go to My Tracks and install the app.
3. Select the Hide title bar button from the app title bar.
The app now displays content all the way to the top of the window frame, where the title bar used to be. The top area of the map is a drag handler, to let the user move the window.

The source code for this app is in the My Tracks repo.
navigator.windowControlsOverlaytitlebar-area-heightThe manifest.json source file declares the app's use of the Window Controls Overlay feature.
The overlay.js source file uses the  object.
The style.css source file uses the  CSS environment variable.
 See also
Window Controls Overlay video tutorial
Customize the window controls overlay of your PWA's title bar
Breaking Out of the Box
 
 Share content with other apps
 	6/21/2022 • 7 minutes to read • Edit OnlineSharing content between apps was made popular by mobile devices where manipulating files or copying content is less intuitive than on desktop operating systems. For example, on mobile, it's common to share an image with a friend by sending a text message. But sharing content isn't reserved to mobile devices; it's possible to share between apps on Windows, too.
There are two directions to sharing content, and both directions can be handled by Progressive Web Apps (PWAs):
DIRECTIONDESCRIPTIONSharing contentTo share content, a PWA generates content (such as text, links, or files) and hands off the shared content to the operating system. The operating system lets the user decide which app they want to use to receive that content.Receiving shared contentTo receive content, a PWA acts as a content target. The PWA is registered with the operating system as a content-sharing target.PWAs that register as share targets feel natively integrated into the OS, and are more engaging to users.
 Sharing content
PWAs can use the Web Share API to trigger displaying the operating system share dialog.
NOTE
Web sharing only works on sites served over HTTPS (which is the case for PWAs), and can only be invoked in response to a user action.
navigator.sharenavigator.shareTo share content such as links, text, or files, use the  function, as shown below. The  function accepts an object that should have at least one of the following properties:
: a short title for the shared content.
titletexturlfiles: a longer description for the shared content.
: the address of a resource to be shared.
: an array of files to be shared.
function shareSomeContent(title, text, url) {   if (!navigator.share) {     return;
  }
  navigator.share({title, text, url}).then(() => {     console.log('The content was shared successfully');
  }).catch(error => {
    console.error('Error sharing the content', error);
  });
}navigator.sharenavigator.shareIn the above code, we first check whether the browser supports Web sharing, by testing if  is defined. The  function returns a Promise object that resolves when sharing is successful, and rejects when an error occurred.
asyncBecause a Promise is used here, the above code can be rewritten as an  function, as follows:
async function shareSomeContent(title, text, url) {   if (!navigator.share) {     return;
  }
  try {
    await navigator.share({title, text, url});
    console.log('The content was shared successfully');
  } catch (e) {
    console.error('Error sharing the content', e);
  }
}On Windows, the above code will trigger the share dialog, allowing the user to pick an app to receive the shared content. The share dialog is shown below:

Once the user has selected an app to receive the shared content, it is up to this app to handle it any way it
title as the email subject, and use the textchooses. For example, an email app might use the  as the email body.
 Sharing files 
navigator.share function also accepts a filesThe  array to share files with other apps.
navigator.canShareIt is important to test whether sharing files is supported by the browser before sharing them. To check whether sharing files is supported, use the  function:
function shareSomeFiles(files) {
  if (navigator.canShare && navigator.canShare({files})) {     console.log('Sharing files is supported');
  } else {
    console.error('Sharing files is not supported');
  }
}
files sharing object member must be an array of FileThe  objects. Learn more about the File interface.
FileOne way to construct  objects is:
fetch1. First, use the  API to request a resource.
File2. Then, use the returned response to create a new .
That approach is shown below.
async function getImageFileFromURL(imageURL, title) {   const response = await fetch(imageURL);   const blob = await response.blob();
  return new File([blob], title, {type: blob.type}); }
In the above code:
getImageFileFromURL1. The  function fetches an image by using a URL.
response.blob()2. The  function converts the image into a binary large object (BLOB).
File3. The code creates a  object by using the BLOB.
 Demo of sharing content 
navigator.shareDevTools Tips is a PWA that uses the  function to share text and links.
To test the feature:
1. Go to DevTools Tips.
2. Select a tip.
3. Click Share tip.
The Windows Share dialog is displayed. The user picks an app in which to share the content:

You can find the source code on GitHub. The app uses the Web Share API in the share.js source file.
 Receiving shared content
By using the Web Share Target API, a PWA can register to be displayed as an app in the system share dialog. The PWA can then use the Web Share Target API to handle shared content coming in from other apps.
NOTE
Only installed PWAs can register as share targets.
  
Register as a target
To receive shared content, the first thing to do is register your PWA as a share target. To register, use the 
share_target manifest member. Upon installation of your app, the operating system uses the share_targetmember to include your app in the system share dialog. The operating system knows what to do when your app is picked by the user, to share the content.
share_targetThe  member must contain the necessary information for the system to pass the shared content to your app. Consider the following manifest code:
{
    "share_target": {
        "action": "/handle-shared-content/",
        "method": "GET",
        "params": {
            "title": "title",
            "text": "text",
            "url": "url",
        }
    }
}
GETWhen your app is selected by the user as the target for shared content, the PWA is launched. A  HTTP
action property. The shared data is passed as the title, texturlrequest is made to the URL specified by the , and  query parameters. The following request is made: 
/handle-shared-content/?title=shared title&text=shared text&url=shared url.
title, texturl query parameters to your other names. In the following example, the title, text, and urlIf you have existing code that uses other query parameter names, you can map the default , and  query
subject, body, and addressparameters are mapped to :
{
    "share_target": {
        "action": "/handle-shared-content/",
        "method": "GET",
        "params": {
            "title": "subject",
            "text": "body",             "url": "address",
        }
    }
} Handle GET shared data 
URLTo handle the data shared over the GET request in your PWA code, use the  constructor to extract the query parameters:
window.addEventListener('DOMContentLoaded', () => {     console url = new URL(window.location);
    const sharedTitle = url.searchParams.get('title');     const sharedText = url.searchParams.get('text');     const sharedUrl = url.searchParams.get('url'); });
 Handle POST shared data 
POST method and define an encoding type with enctypeIf the shared data is meant to change your app in any way, such as by updating some of the content that's stored in the app, you must use the :
{
    "share_target": {
        "action": "/post-shared-content",         "method": "POST",
        "enctype": "multipart/form-data",
        "params": {
            "title": "title",
            "text": "text",
            "url": "url",
        }
    }
}
POST HTTP request contains the shared data, encoded as multipart/form-dataThe . You can access this data on
fetchyour HTTP server by using server-side code, but this won't work when the user is offline. To provide a better experience, you can access the data in the service worker, using a  event listener, as follows:
self.addEventListener('fetch', event => {     const url = new URL(event.request.url);
    if (event.request.method === 'POST' && url.pathname === '/post-shared-content') {         event.respondWith((async () => {
            const data = await event.request.formData();
            const title = data.get('title');             const text = data.get('text');             const url = data.get('url');
            // Do something with the shared data here.
            return Response.redirect('/content-shared-success', 303);
        })());
    }
});In the above code:
POST1. The service worker intercepts the  request.
2. Uses the data in some way (such as to store the content locally).
3. Redirects the user to a success page. This way, the app can work even if the network is down. The app can choose to only store the content locally, or can send the content to the server later, when connectivity is restored (such as by using Background Sync).
 Handle shared files 
POSTmultipart/form-dataApps can also handle shared files. To handle files in your PWA, you must use the  method and the  encoding type. Additionally, you must declare the types of files that your app can handle.
{
    "share_target": {
        "action": "/store-code-snippet",
        "method": "POST",
        "enctype": "multipart/form-data",
        "params": {
            "title": "title",
            "files": [
                {
                    "name": "textFile",
                    "accept": ["text/plain", "text/html", "text/css", 
                               "text/javascript"]
                }
            ]
        }
    }
}
.txt, can also be passed in the acceptThe above manifest code tells the system that your app can accept text files with various MIME types. File name extensions, such as  array.
formData like before and use a FileReaderTo access the shared file, use the request  to read the content, as follows:
self.addEventListener('fetch', event => {     const url = new URL(event.request.url);
    if (event.request.method === 'POST' && url.pathname === '/store-code-snippet') {         event.respondWith((async () => {
            const data = await event.request.formData();
            const filename = data.get('title');             const file = data.get('textFile');
            const reader = new FileReader();             reader.onload = function(e) {
                const textContent = e.target.result;                 // Do something with the textContent here.
            };
            reader.readAsText(file);
            return Response.redirect('/snippet-stored-success', 303);
        })());
    }
}); See also
Integrate with the OS sharing UI with the Web Share API
Receiving shared data with the Web Share Target API
 
 Define app shortcuts
 	6/21/2022 • 2 minutes to read • Edit OnlineApp shortcuts let users accomplish common tasks more quickly and easily and can increase their engagement with an app.
On mobile devices, shortcuts can usually be accessed by long-pressing an app icon. On Windows, shortcuts are integrated as Jumplists. Jumplists define popup menus that appear when you right-click a tile in the Start menu, or right-click an icon in the taskbar.
The next figure shows shortcuts on Microsoft Edge, on iOS:

The next figure shows a Jumplist on the Webboard app, on Windows:

Progressive Web Apps (PWAs) can also define common tasks as shortcuts in the Web App Manifest.
 Define shortcuts
shortcutsDefining shortcuts is done by using the  manifest member. This member is an array that can contain multiple shortcuts. Each shortcut is essentially a URL that gets requested when the shortcut is used and the app is launched.
{
    "shortcuts" : [
        {
            "name": "Today's agenda",
            "url": "/today",
            "description": "List of events planned for today"
        },
        {
            "name": "New event",             "url": "/create/event"
        },
        {
            "name": "New reminder",             "url": "/create/reminder"
        }
    ]
}The following properties can be used:
PROPERTYDETAILS
nameA string that is displayed to the user on Jumplists or the context menu.
short_nameA string that is displayed when insufficient space exists to display the full name of the shortcut.
descriptionA string that describes the purpose of the shortcut. The string can be accessed by assistive technology.
urlThe URI in the web app that opens when the shortcut is activated.
iconsA set of icons that represents the shortcut.To learn more, see shortcuts at MDN.
 Debug shortcuts
You can test that your shortcuts are configured correctly by using the Application panel of DevTools.
To test that your shortcuts are configured correctly:
1. In Microsoft Edge, go to your app.
Ctrl+Shift+I2. To open DevTools, right-click the webpage, and then select Inspect. Or, press 
Command+Option+I(Windows, Linux) or  (macOS). DevTools opens.
3. In DevTools, on the main toolbar, select the Application tab. If that tab isn't visible, click the More tabs ( ) button, or else the More Tools () button.
4. In the Application tool, select Manifest.
5. Scroll down to reveal the list of shortcuts.

To learn more about using the Application panel to debug PWAs, see Debug Progressive Web Apps (PWAs).

 
 Synchronize and update a PWA in the background
 	6/21/2022 • 9 minutes to read • Edit OnlineUsing a service worker, a Progressive Web App (PWA) can do work in the background, even when the user isn't using the app. Service workers used to be reserved for native apps, but they are now also available to PWAs, providing a better offline experience.
Consider the following use cases:
An email app that lets users compose messages and send them at any time, even when offline.
A news app that fetches new articles every day, for the user to read later when they open the app. A music app that lets users download songs for listening offline.
All three of these use cases are possible with PWAs, by using the following APIs:
Background Sync API
Periodic Background Sync API Background Fetch API
Although these APIs have similar names, they are different in nature.
 Use the Background Sync API to synchronize data with the server
Use the Background Sync API to allow users to continue using the app and perform actions even when they are offline.
For example, an email app can let its users compose and send messages at any time. The app frontend can try to send the message right away, and if the device is offline, the service worker can catch the failed request and use the Background Sync API to defer the task until connected.
Another example for using the Background Sync API is loading content in the background for the user.
NOTE
The Background Sync API should be used for small amounts of data. The Background Sync API requires the service worker to be alive for the entire duration of the data transfer. The Background Sync API shouldn't be used to fetch large files, because devices can decide to terminate service workers, to preserve battery life. Instead, use the Background Fetch API.
 Check for support 
The Background Sync API is available in Microsoft Edge, but you should make sure that Background Sync API is
ServiceWorkerRegistration object has a syncsupported in the other browsers and devices that your app runs in. To make sure that the Background Sync API is supported, test whether the  property:
navigator.serviceWorker.ready.then(registration => {     if (registration.sync) {
        // Background Sync is supported.
    } else {
        // Background Sync isn't supported.     }
});ServiceWorkerRegistrationTo learn more about the  interface, see ServiceWorkerRegistration at MDN.
 Request a sync 
The first thing to do is to request a sync. This can be done by your app frontend or your service worker.
Requesting the sync from the frontend is good when you want to leave the user in charge of synchronizing later or not.
Requesting the sync from the service worker is good when you want this to be transparent to the user. In this case, the service worker can detect the failed fetch request and request the sync right away.
ServiceWorkerRegistrationTo request a sync, you need a  and a tag name. From the app frontend code, do the following:
async function requestBackgroundSync() {
    const registration = await navigator.serviceWorker.ready;     await registration.sync.register('my-tag-name'); }
Or, from the service worker, do this instead:
async function requestBackgroundSync() {
    await self.registration.sync.register('my-tag-name'); }
my-tag-nameThe  string above should be a unique tag that identifies this sync request, so that multiple requests can be done.
 React to the sync event 
syncsyncAs soon as a connection can be used and the service worker is running, a  event is sent to the service worker, which can use it to synchronize the necessary data. The  event can be listened to with the following code:
self.addEventListener('sync', event => {     if (event.tag === 'my-tag-name') {         event.waitUntil(doTheWork());
    }
});
syncdoTheWorkIn the example code above, a  event listener is added in the service worker. When the listener is called, the code checks if the tag is the one registered in the frontend, and then calls . This function is expected to return a Promise.
doTheWorkdoTheWorkTypically, the  function will send the information to the server that couldn't be sent when the user was offline. It may be useful to store this information in IndexedDB storage from the frontend so that it can later be retrieved from the service worker when  is executed.
Sync event, the ServiceWorkerRegistration, and the SyncManagerFor more information about the  interface, see the Background Synchronization draft specification and the Background Synchronization API documentation.
 Demo app 
My Movie List PWA is a demo app that uses the Background Sync API to fetch movie information later, if the user is offline.

To test background syncing:
1. Install the app.
2. Search for movies using the search input field.
3. Go offline. To do this, open DevTools (F12), and then select the Application > Service Workers > Offline checkbox.

4. In one of the movie results, select More info.
5. A message appears in the app informing you that you are offline, and that the movie details will be retrieved automatically later.

6. Go online. To do this, in DevTools, clear the Application > Service Workers > Offline checkbox.
7. Reload the app. The movie details now appear.
To see the sample code, check out the movies-db-pwa repo.
 Debug background syncs with DevTools 
syncTo test your background sync code, you don't have to go offline, then go online, and then wait for Microsoft Edge to trigger a  event. Instead, DevTools lets you simulate the background sync event.
syncTo simulate a  event:
1. Open DevTools (F12).
2. Select Application > Service Workers.
3. Type the tag name you used when registering the sync in the Sync input field.
4. Select the Sync button.

You can also log the background sync activity generated by your app in DevTools, as follows:
1. Open DevTools (F12).
2. Select Application > Background Sync.
3. Select Start recording events.
Sync registrations and dispatches appear in the event log table:

 
Use the Periodic Background Sync API to regularly get fresh content
The Periodic Background Sync API lets PWAs retrieve fresh content periodically, in the background, so users can immediately access it when they later open the app again.
Using the Periodic Background Sync API, PWAs don't have to download new content (such as new articles) while the user is using the app. Downloading content could slow down the experience, so instead, retrieve the content at a more convenient time.
NOTE
The periodic sync only occurs when the device is on a known network (that is, a network that the device has already been connected to before). Microsoft Edge limits the frequency of the syncs to match how often the person uses the app.
 Check for support 
ServiceWorkerRegistration object has a periodicSyncTo check whether this API is supported in the browsers and devices that your app runs in, test whether the  property:
navigator.serviceWorker.ready.then(registration => {     if (registration.periodicSync) {
        // Periodic Background Sync is supported.
    } else {
        // Periodic Background Sync isn't supported.     }
});
 Ask the user for permission 
Periodic background synchronization requires the user's permission. Requesting this permission occurs only one time, for a given application.
To ask the user for permission to do periodic background synchronization, use the Permissions API, as follows:
const status = await navigator.permissions.query({name: 'periodic-background-sync'}); if (status.state === 'granted') {
  // Periodic background sync can be used.
} else {
  // Periodic background sync cannot be used. }
To learn more about the Permissions API, see Permissions API at MDN.
 Register a periodic sync 
To register a periodic sync, you need to define a minimum interval and a unique tag name. The unique tag name enables registering multiple periodic background syncs.
async function registerPeriodicSync() {
    await registration.periodicSync.register('get-daily-news', {         minInterval: 24 * 60 * 60 * 1000
    });
}
minIntervalThe  used in the code above corresponds to 1 day in milliseconds. This is a minimum interval only, and Microsoft Edge takes other factors into account before alerting your service worker with a periodic sync event, such as the network connection and whether the user regularly engages with the app.
  
React to periodic sync events
periodicsyncWhen Microsoft Edge decides it's a good time to run the periodic sync, Microsoft Edge sends a periodicsync event to your service worker. You can handle this  event by using the same tag name that was specified when registering the sync.
self.addEventListener('periodicsync', event => {     if (event.tag === 'get-daily-news') {         event.waitUntil(getDailyNewsInCache());     }
});
getDailyNewsInCacheThe  function is where your service worker can fetch new content from the server and store it in the cache. This function is expected to return a Promise that signals whether the sync succeeded or failed.
PeriodicSync event, the ServiceWorkerRegistrationFor more information about the , and the 
PeriodicSyncManager interface, see:
Web Periodic Background Synchronization - draft specification. Web Periodic Background Synchronization API.
 Demo app 
DevTools Tips is a PWA that uses the Periodic Background Sync API. The [DevTools Tips] PWA fetches new developer tools tips daily and stores them in cache, so that users can access them next time they open the app, whether they are online or not.

periodicsyncGo to the source code on GitHub. In particular, the app registers the periodic sync in the registerPeriodicSync function. The service worker code is where the app listens to the  event.
 Debug periodic background syncs with DevTools 
periodicsyncYou can use DevTools to simulate  events instead of waiting for the minimum interval.
To simulate the event:
1. Open DevTools (F12).
2. Select Application > Service Workers.
3. Type the tag name you used when registering the periodic sync in the Periodic Sync input field.
4. Select the Periodic Sync button.

You can also log the periodic background sync activity generated by your app in DevTools:
1. Open DevTools (F12).
2. Select Application > Periodic Background Sync.
3. Select Start recording events.
Periodic sync registrations and dispatches appear in the event log table.

 Use the Background Fetch API to fetch large files when the app or service worker isn't running
The Background Fetch API allows PWAs to completely delegate downloading large amounts of data to the browser engine. This way, the app and service worker don't have to be running at all while the download is in progress.
This API is useful for apps that let users download large files (like music, movies, or podcasts) for offline use cases. Because the download is delegated to the browser engine, which knows how to handle a flaky connection or even a complete loss of connectivity, it can pause and resume the download when necessary.
 Check for support 
BackgroundFetchManagerTo check whether this API is supported, test if the  constructor exists on the global object:
if (self.BackgroundFetchManager) {
    // Background Fetch is supported.
} else {
    // Background Fetch isn't supported. }
 Start a background fetch 
To start a background fetch:
navigator.serviceWorker.ready.then(async registration => {
    const fetch = await registration.backgroundFetch.fetch('my-download-id',                                                            fileUrls, options); });
my-download-id should be a unique string identifier for this background fetch. fileUrlsAbove,  is the list of files
optionsto download, this will be an array of string URLs. And  is an object that can be used to customize the appearance of the download activity in the browser.
fetchFor more information about the  function, see BackgroundFetchManager.fetch() and Introducing Background Fetch.
 Use the App Badging API and Notifications API to re-engage users
Use the App Badging API and the Notifications API to let users know that background tasks, downloads, or fresh content have been completed, without interrupting their workflow. Using badges and notifications can increase user re-engagement with your app.
With Microsoft Edge, badges appear on app icons in the taskbar, and notifications integrate with the system notification center.
To learn how to use these APIs, see Re-engage users with badges, notifications, and push messages.

 
 What's New in Progressive Web Apps
 	6/21/2022 • 8 minutes to read • Edit OnlineThis page lists the updates to Progressive Web Apps (PWAs) and Web Apps from the Microsoft Edge Web Apps team. To try new features, read these announcements. To stay up to date with the latest and greatest features, download the Microsoft Edge preview channels (Beta, Dev, and Canary).
 What's New in Microsoft Edge 100
Microsoft Edge Dev and Canary channels moved to version 100 on February 9, 2022. In this milestone, we're testing the following new web app features. We expect to see these new features rolling out to Stable following the testing period.
 App Sync 
The sync service that powers features including Favorites, Settings, History, and more has been expanded to include your installed web apps - that is, PWAs and websites installed as apps. The sync service works when you are signed in to your profile and have opted in to syncing.
edge://appsAs we test and gradually release this feature over the coming weeks, users who have opted in to sync will start to see a Your available apps section in the  page, and a redesigned Apps menu.
	 The  	Your available apps section
The Your available apps section will show any apps you've installed on other devices with the same signed-in profile, that aren't currently installed in the Microsoft Edge instance you're using. The available apps will be shown in their own section with gray icons. Click the Install button on an app to install the app on that device:

App sync is available on desktop devices only, at this stage. To keep your apps in sync across devices, adding an app on one device will add it to the Your available apps section on other devices. Uninstalling an app on one device will remove it from other devices.
 Redesigned Apps menu 
In Microsoft Edge, the Apps command in the Settings and more menu is being redesigned:
The Apps menu icon can be added to the toolbar, for quick access.
The popup menu can be pinned open as a sidebar to show your apps alongside web content.
Customizable view and sort options have been added, along with a My available apps section to support the App Sync feature.
Users can show the Apps menu icon on the toolbar, for quick access:

Users can pin the Apps menu open as a sidebar:

Users can choose between a list or grid view:

Users can choose the sort order of their apps:

 What's New in Microsoft Edge 97
Microsoft Edge version 96 is scheduled to become the Stable release on November 18, 2021. Microsoft Edge version 97 will move from Dev to Beta preview channel following that date.
 Store apps registered as URL handlers hide custom tab UI 
contoso.com to contoso.caStore-installed PWAs that are participating in the URL Handler Origin Trial will no longer show the Chrome Custom Tab (CCT) when redirecting from the PWA's domain to a matching domain name with a different toplevel domain (TLD). This redirecting often happens in apps with locale-specific domains; for example, redirecting from  for users in Canada.
 What's New in Microsoft Edge 96
 URL Protocol Handlers moves to Stable 
The origin trial has been concluded. The URL Protocol Handlers capability is now shipping in Microsoft Edge 96 Stable.
See also:
Protocol handlers origin trial
Handle protocols in Progressive Web Apps
URL protocol handler registration for PWAs
 New hub design for managing your installed web apps 
edge://appsMicrosoft Edge Canary reached version 96 on October 5, 2021. With a subset of our users, we're testing a new design to better manage your installed web apps. When you go to  in your browser, it now displays a redesigned hub that lists installed PWAs and websites as apps.
 Sort order 
You can sort your apps by any of the following:
Recently used.
Alphabetically, based on title. Date of installation.
 List view or grid view 
You can arrange apps in a list or grid view, by using the View as dropdown list. In this image, Grid view is selected:

To zoom: right-click > Open image in new tab.
 Pin apps, create shortcuts to apps, run app on login 
You can easily pin apps to the taskbar or Start menu. You can create a shortcut, and enable apps to run on user login.
 App details page 
There's now an app details page, which provides way to easily access the following:
Permissions and privacy details for the associated origin. More details about the application.
The app details page:

 What's New in Microsoft Edge 95
Microsoft Edge version 95 moved to Beta channel on September 28, 2021. The origin trials remain active for the following features:
Window Controls Overlay for desktop PWAs. URL Handlers.
We expect the protocol handlers origin trial to end on October 21, 2021.
 What's New in Microsoft Edge 94
Microsoft Edge version 94 moved to Stable on September 23, 2021. This release cycle was short-just 3 weeks from Microsoft Edge 93 Stable to Microsoft Edge 94 Stable, as we snapped to the new 4-week release cycle. This new release cadence matches the new cadence of Chromium milestones, described in Speeding up Chrome's release cycle.
Due to the shortened release cycle of Microsoft Edge version 94, we focused on stabilizing the release cycle logistics, and we shifted feature development to Microsoft Edge version 95.
The origin trials remain active for the following features:
Window Controls Overlay for desktop PWAs. URL Handlers.
We expect the protocol handlers origin trial to end with Microsoft Edge version 94 as we take final feedback and get ready to move the protocol handlers feature to Stable. In case you are enrolled in the origin trial for protocol handlers, we plan to end the trial period after Microsoft Edge version 94. We'll then determine when this feature will become Stable.
 What's New in Microsoft Edge 93
Microsoft Edge version 93 became the Stable channel of Microsoft Edge on September 2, 2021. This article lists updates we made to Progressive Web Apps (PWAs) from both a developer and consumer point of view.
	 Measure usage of your Store 	-installed PWA
Microsoft Edge now includes a referrer header with the request for the first navigation of your Microsoft Storeinstalled PWA.
This feature was first introduced in Microsoft Edge version 91, and we shipped a bug fix in Microsoft Edge version 93.
Learn more in Publish a Progressive Web App to the Microsoft Store.
 Window Controls Overlay origin trials 
To have more control over the title bar area that's currently displayed in standalone display mode, you may want to experiment with Window Controls Overlay. Window Controls Overlay (WCO) is a set of features that work together to provide just the essential controls needed for the app window. This layout frees up more space for the web content layer. WCO is available for installed desktop PWAs.
Learn more about experimenting with Window Controls Overlay at Experimental features in Progressive Web Apps (PWAs).
Register your origin for the Web App Window Controls Overlay trial at our Origin Trials Developer Console.
 URL Handlers origin trial 
Developers can now use the experimental feature Web App URL Handlers in origin trial. This feature allows the registration of an installed PWA to open links from other apps that refer to its scope.
Learn more about experimenting with URL handlers at Experimental features in Progressive Web Apps (PWAs).
Register your domain for the Web App URL Handlers trial at our Origin Trials Developer Console.
 Support for the Share API on macOS 
navigator.shareWe have implemented support for the  API for macOS. The feature is rolling out to stable Microsoft Edge browsers on macOS over the coming weeks.
Learn more about the navigator.share() API.
 What's New in Microsoft Edge 92
Microsoft Edge version 92 became the stable channel of Microsoft Edge on July 22, 2021. This article lists updates we made to Progressive Web Apps (PWAs) from both a developer and consumer point of view.
 Protocol handlers origin trial 
You can now register your PWA to handle specific protocols with the host operating system. The Windows trial for protocol handlers is now available. You can register your origin for the Web App Protocol Handler trial at the origin trial signup page.
Learn more about using protocol handlers with your PWA at Experimental features in Progressive Web Apps (PWAs).
 Streamlined App Info menu 
When a user selects the ellipses (...) button in the app's title bar, the App info menu is displayed. We've updated the App info menu and streamlined the user experience in the following ways, to provide a user experience that's more like a desktop app than a browser UI:
 Moved the app Publisher information to the top level and made it the first thing a user sees:

	 Post 	-install flyout dialog box
After a PWA is installed from the Microsoft Edge browser on Windows, users can now select from four options to easily launch their apps:
Pin to taskbar
Pin to Start
Create Desktop shortcut
Auto-start on device login
For convenience, this flyout dialog box is shown the first time the app is launched:

edge://flagsThis feature is being rolled out gradually to all users. In the meantime, if you'd like to use this feature, go to  and enable the flag Web Apps Post Install Dialog.
 Restore Web Apps 
Installed sites and PWAs that were running before an unexpected shutdown will now restore (that is, they will be restarted) when the system recovers.
An unexpected shutdown can occur due to process failure, system restart, or power outage. Before this change, installed sites and PWAs had indeterminate behavior upon system restore.
 
 Sample PWAs
 	6/21/2022 • 2 minutes to read • Edit OnlineUse these sample Progressive Web Apps (PWAs) to learn how to use features and APIs for PWAs.
 Webboard
An intelligent whiteboarding app.
App, source code and Readme file.

Displays a list of tips and tricks for DevTools.
App, source code and Readme file.
Features:
Web Share
URL handling
Background sync
Periodic background sync
Notifications

 My Tracks
A Progressive Web App for visualizing GPS tracks.
App, source code and Readme file.
Features:
Window Controls Overlay
Protocol handling
Shortcuts
File handling

 My Movies
A Progressive Web App to search and store movies.
App, source code.

A real-time beats-per-minute (BPM) counter.
App, source code and Readme file.

A CSS playground.
App, source code and Readme file.
Features:
 Window Controls Overlay



 
 Introduction to Microsoft Edge WebView2
 	6/21/2022 • 2 minutes to read • Edit OnlineThe Microsoft Edge WebView2 control allows you to embed web technologies (HTML, CSS, and JavaScript) in your native apps. The WebView2 control uses Microsoft Edge as the rendering engine to display the web content in native apps.
With WebView2, you can embed web code in different parts of your native app, or build all of the native app within a single WebView2 instance.

To start building a WebView2 app, see Get started with WebView2.
 Hybrid app approach
Developers must often decide between building a web app or a native app. This decision hinges on the tradeoff between reach and power:
 Web apps allow for a broad reach. As a Web developer, you can reuse most of your code across different platforms.
 To access all the powerful capabilities of a native platform, use a native app.
The following diagram shows the spectrum of apps, from maximum reach, to maximum power:

 Maximum power is native apps.
Hybrid apps, in the middle of this spectrum, allow you to enjoy the best of both worlds: the ubiquity and strength of the web platform, combined with the power and full capabilities of the native platform.
 WebView2 benefits
 Web ecosystem and skill set. Utilize the entire web platform, libraries, tooling, and talent that exists within the web ecosystem.
Rapid innovation. Web development allows for faster deployment and iteration.
Windows 7, 8, 10, and 11 support. Support for a consistent user experience across Windows 7, Windows 8, Windows 10, and Windows 11.
Native capabilities. Access the full set of Native APIs.
Code-sharing. Add web code to your codebase allows for increased reuse across multiple platforms.
Microsoft support. Microsoft provides support and adds new feature requests when WebView2 releases at General Availability (GA).
 Evergreen distribution. Rely on an up-to-date version of Chromium with regular platform updates and security patches.
Fixed Version distribution. Optionally package a specific version of the Chromium bits in your app.
Incremental adoption. Add web components piece-by-piece to your app.
 Supported platforms
A General Availability (GA) or Preview version of WebView2 is available for the following programming environments:
Win32 C/C++ (GA)
.NET Framework 4.5 or later
.NET Core 3.1 or later
.NET 5
.NET 6
WinUI 2.0 (Preview) WinUI 3.0
WebView2 apps can run on the following versions of Windows:
Windows 11
Windows 10
Windows 10 IoT Enterprise LTSC x32 2019
Windows 10 IoT Enterprise LTSC x64 2019
Windows 10 IoT Enterprise 21h1 x64
Windows 8.1
Windows 7 **
Windows Server 2019
Windows Server 2016
Windows Server 2012
Windows Server 2012 R2
 Windows Server 2008 R2 **
**WebView2 support for Windows 7 and Windows Server 2008 R2 have the same support timeline as Microsoft Edge. See Microsoft Edge supported Operating Systems.
 See also
Understand the different WebView2 SDK versions
Distribute your app and the WebView2 Runtime
Best practices for developing secure WebView2 apps
Manage user data folders
How to Debug with WebView2
Automating and testing WebView2 with Microsoft Edge WebDriver
WebView2Samples repo - Samples that demonstrate WebView2 SDK features and API usage patterns, including recently added WebView2 features.

 
 Set up your Dev environment for WebView2
 	6/21/2022 • 8 minutes to read • Edit OnlineThis article covers general-purpose setup of your development environment for WebView2 development. Some Get Started tutorials point here for preliminary setup steps, and then add platform-specific or project-specific setup steps.
 Install Visual Studio
1. Install Visual Studio 2015 or later, such as Visual Studio Professional 2022.
The WebView2 samples are designed for Microsoft Visual Studio, not Microsoft Visual Studio Code.
.slnIf you are installing Visual Studio 2022, you can accept the defaults for now; you can click Install, and decline installing the Workloads at this time. Visual Studio will prompt you later, when you open a particular  file, to install the platform-appropriate workloads.
 Install a preview channel of Microsoft Edge
1. Install any Microsoft Edge Insider (preview) Channel (Beta, Dev, or Canary) on a supported operating system (OS):
Windows 7
Windows 8.1
Windows 10
Windows 11
We recommend using the Canary channel. The minimum required version is 82.0.488.0.
 Install the WebView2 Runtime
1. Optionally, install the WebView2 Runtime. To do that, go to Microsoft Edge WebView2.
If unsure, skip this step; you can use the Microsoft Edge preview channel from the previous step instead.
See Understand the different WebView2 SDK versions.
 Download the WebView2Samples repo
.zipYou can download the repo as a  file, or clone the repo.
.zip If you download the repo (as a  file), you get a snapshot copy of the repo. You can then download another, updated copy of the repo later.
 If you clone the repo, you can update your local copy using git commands or features of various Dev apps.
.zipTo download the repo (as a  file):
1. Open the WebView2Samples repo in a new window or tab.
2. Click the green Code button in the upper right of the GitHub repo, and then click Download ZIP.

The Download pop-up appears in Microsoft Edge:

In Microsoft Edge, if the Download pop-up isn't visible, click Settings and more (...) and then click
Downloads.
WebView2Samples-main.zip3. In the Downloads pop-up window, hover to the right of  and then click the
Show in folder (folder) icon.
It is recommended that you don't click the Open file link, because that immediately unzips the file in your Downloads area, which could make it harder (and slower) to move to your desired location.
WebView2Samples-main.zipDocuments4. Copy or cut the  file from your Downloads directory to a regular directory, such as .
WebView2Samples-main.zip5. Unzip the . file and note the location of the unzipped files.

6. Study the breakout of main directories.
-main is the name of the repo branch that this downloaded directory snapshot represents. It is possible to switch to a different branch at GitHub and then download, for example, 
WebView2Samples-smoketest-1.0.1054.27-prerelease-testing.zip. In that case, the downloaded .zip file is
smoketest-1.0.1054.27-prerelease-testingmaina snapshot of the  branch of the repo. This documentation assumes that you downloaded the  branch of the repo.
WebView2Samples-main to WebView2Samples7. Recommended: Rename the root directory from , to match the repo name and path.
 Clone the WebView2Samples repo
.zipYou can download the repo as a  file, or clone the repo.
.zip If you download the repo (as a  file), you get a snapshot copy of the repo. You can then download another, updated copy of the repo later.
 If you clone the repo, you can update your local copy using git commands or features of various Dev apps.
WebView2SamplesTo clone the  repo, you must first install git. You can download the repo, as described above, or clone it.
 Install git 
WebView2Samples1. If you want to clone the  repo (instead of downloading it), and if git isn't not already installed, download git and install it.
 Obtain the URL for cloning the WebView2Samples repo 
1. Open the WebView2Samples repo in a new window or tab.
2. Click the green Code button in the upper right of the GitHub repo, select Clone, and then click the Copy icon (or, select the HTTPS URL string in the text box and copy it).

3. Decide which tool you want to use to locally clone the repo:
Visual Studio
GitHub Desktop
Git Bash shell or command prompt
Next, clone the GitHub repo to your local drive. To do that, follow the appropriate steps below, for the tool you want to use.
 Cloning the repo by using Visual Studio 
If you want to use Visual Studio to clone the GitHub repo to your local drive:
1. In Visual Studio, select File > Clone repository.
2. Enter the URL that you copied from the GitHub repo.
gitGitHub3. From within the same dialog box, or in a file explorer utility, you can create a general-purpose root or  folder in a writeable location, then select that directory, so that the repo will be cloned there, as a new directory.
C:\Users\myUserName\Documents\GitHub\For example, you could create the repo in the parent folder: , so that the cloning operation will create the new directory 
C:\Users\myUserName\Documents\GitHub\WebView2Samples.
You've cloned the repo to your local drive. Skip to the next major section below.
 Cloning the repo by using GitHub Desktop 
If you want to use GitHub Desktop to clone the GitHub repo to your local drive:
1. Install GitHub Desktop.
2. In GitHub Desktop, select File > Clone repository.
3. In Visual Studio or GitHub Desktop, enter the URL that you copied from the GitHub repo.
gitGitHub4. From within the same dialog box, or in a file explorer utility, you can create a general-purpose root or  folder in a writeable location, then select that directory, so that the repo will be cloned there, as a new directory.
C:\Users\myUserName\Documents\GitHub\For example, you could create the repo in the parent folder: , so that the cloning operation will create the new directory 
C:\Users\myUserName\Documents\GitHub\WebView2Samples.
You've cloned the repo to your local drive. Skip to the next major section below.
 Cloning the repo by using Git Bash shell or a command prompt 
If you instead want to clone the repo by using a Git Bash shell or command prompt:
1. Clone the repo to your local drive, entering the URL string that you copied from the GitHub repo:
# example location where the repo directory will be added:
cd c:/users/myusername/documents/github/ git clone https://github.com/MicrosoftEdge/WebView2Samples.git

The directory is created on your local drive, in the path you specified, such as in the following figure:

You've cloned the repo to your local drive.
 Open a WebView2Samples .sln file in Visual Studio
WebView2Samples repo, open a .slnAfter you download or clone the  file in Visual Studio.
.sln1. In your local copy of the repo directory structure, locate a  file. See Local paths for all .sln and README.md files in Sample Code for WebView2. The top-level README file in the WebView2Samples repo gives a similar overview.
.sln2. Open a  file in Visual Studio. For example, open your local copy of WebView2Samples.sln. This repo's solution files require Visual Studio, not Visual Studio Code.
.sln3. Open one of the  files. For example, open your local copy of the main Win32 solution file
WebView2Samples/SampleApps/WebView2Samples.sln (downloaded as path 
WebView2Samples-main/SampleApps/WebView2Samples.sln) in Microsoft Visual Studio. When you open that
solution file in Visual Studio, Solution Explorer contains the following projects:

.sln file from the WebView2SamplesFor general, initial Dev environment setup, you can open any type of  repo:
.sln file in a subdirectory of the GettingStartedGuides	 A platform-specific 	 directory. These match the
Get Started tutorials and are completed examples that demonstrate a couple API features.
.sln file containing multiple platform projects, in the SampleApps The Win32 	 directory. This is a comprehensive API demonstration.
.sln file in a subdirectory of the SampleApps A platform-specific 	 directory. These are comprehensive API demonstrations.
 Install Visual Studio workloads
.slnWebView2SamplesInstall Visual Studio workloads if prompted. When you open a  file from the cloned or downloaded  repo in Microsoft Visual Studio 2019 or 2022, you might see a "cannot open" dialog box.
1. Click the OK button. Then you might see a workload installer such as:

.
2. Select the checkbox and then click the Install button.
The Visual Studio installer runs, for the platform's workload:

.
A Migration Report log file page might open, such as at 
file:///C:/Users/username/Documents/WebView2Samples-main/WebView2Samplesmain/SampleApps/UpgradeLog.htm
:

To zoom, right-click > Open image in new tab.
-main directory suffix is present for the downloaded .zipAbove, the  file of the repo, not if you cloned the repo.
.slnVisual Studio opens the selected  file in Solution Explorer:

 Install the WebView2 SDK
The WebView2 SDK includes the WebView2 control, which is powered by Microsoft Edge, and enables you to embed web technologies (HTML, CSS, and JavaScript) in your native applications.
.slnYou install the WebView2 SDK once per project node of each  file. The WebView2 SDK installation applies only to the project that it's installed on.
Microsoft.Web.WebView2Instead of downloading the  SDK NuGet package from nuget.org, you install the
.slnMicrosoft.Web.WebView2WebView2 SDK NuGet package through the NuGet Package Manager panel in Visual Studio. After you Download or clone the WebView2Samples repo, you then open one of the repo's  files in Visual Studio, and right-click a project node within the solution. You use the NuGet Package Manager panel to install the  SDK as a NuGet package.
Microsoft.Web.WebView2The  SDK is available in Release and Prerelease versions. To get started, a Release version is recommended.
Install the WebView2 SDK, as follows:
.sln1. Open a  file in Visual Studio. For example, open your local copy of WebView2Samples.sln. This repo's solution files require Visual Studio, not Visual Studio Code.
2. In Solution Explorer, right-click the solution's project nodes, such as the WebView2GettingStarted project node (not the solution node) and then select Manage NuGet Packages.
The following image shows a particular .sln file and project; use whichever project you want to install the SDK to:

The NuGet Package Manager tab opens in Visual Studio.
3. In the NuGet window, click the Browse tab.
4. On the right of the search bar, clear the Include prerelease checkbox (unless you know that you want a prerelease version of the SDK).
5. In the search bar in the upper left, type Microsoft.Web.WebView2.
6. Below the search bar, click the Microsoft.Web.WebView2 card.
7. In the right-hand pane, click the Install (or Update) button. NuGet downloads the WebView2 SDK to your machine, for use by this project.

To zoom, right-click > Open image in new tab.
8. Close the NuGet Package Manager tab.
The WebView2 SDK is now installed, so your development environment is now set up to add WebView2 features to WebView2 apps.
See also NuGet.org > Microsoft.Web.WebView2 SDK.
 
 Sample Code for WebView2
 	6/21/2022 • 6 minutes to read • Edit Online.sln files, and README.mdThis article is about understanding what samples,  files are in the WebView2Samples repo.
 Sample code for Get Started guides
WebView2SamplesThe WebView2 Get Started guides help you create the same completed, working projects as are in the  repo, which you can download or clone.
PLATFORMARTICLECODEWin32Get started with WebView2 in Win32 appsStarter code at WebView2Samples > Win32_GettingStartedWinFormsGet started with WebView2 in WinForms apps.NET starter code at
WebView2Samples >
WinForms_GettingStartedWinUI 2Get started with WebView2 in WinUI 2 (UWP) apps (public preview)Uses the WinUI 2 NuGet package. Has no sample code.WinUI 3Get started with WebView2 in WinUI 3 (Windows App SDK) appsStarter code at WebView2Samples > WinUI3_GettingStartedWPFGet started with WebView2 in WPF apps.NET starter code at
WebView2Samples >
WPF_GettingStarted Apps in the WebView2Samples.sln file
WebView2SamplesThe  repo includes samples that demonstrate the WebView2 control and the WebView2 API, for Win32, WPF, WinForms, and WinUI. These samples are hybrid applications that use the Microsoft Edge WebView2 control.
1. In a separate window or tab, see WebView2Samples repo (README page).
WebView2Samples2. Download or clone the  repo, as described in Download the WebView2 samples repo or Clone the WebView2 samples repo in Set up your Dev environment for WebView2.
*.sln3. In your resulting, local copy of the repo directory structure, find  files.
.sln4. Open one of the  files. For example, open your local copy of the multi-platform solution file
WebView2Samples/SampleApps/WebView2Samples.sln (downloaded as path 
WebView2Samples-main/SampleApps/WebView2Samples.sln) in Microsoft Visual Studio. When you open that
solution file in Visual Studio, Solution Explorer contains the following WebView2 samples, as projects:

.sln file doesn't include the Get Started projects, which are separate .slnThis particular  files, one per platform.
WebView2SamplesThe  repo contains the following projects. These projects are included in the 
WebView2Samples.sln file, and each platform also has a dedicated .sln file.
TYPE OF SAMPLESAMPLE PROJECTDESCRIPTIONUWP WinUI 2 browserwebview2_sample_uwpEmbeds a WebView2 control within a UWP application.
Built as a UWP Visual Studio 2019 project. Uses C++ and
HTML/CSS/JavaScript in the WebView2 environment.Win32 C++WebView2APISampleEmbeds a WebView2 control within a Win32 native application. Illustrates a selection of WebView2 event handlers and API methods that allow a native Win32 application to directly interact with a WebView2 control and vice versa.
Built as a Win32 project in Visual
Studio 2019. Uses C++ and
HTML/CSS/JavaScript in the WebView2 environment.
.slnThe  file is in the parent, SampleApps directory.
TYPE OF SAMPLESAMPLE PROJECTDESCRIPTIONWin32 C++ with Visual CompositionWebView2SampleWinCompEmbeds a WebView2 control within a Win32 native application. Uses
Windows Runtime Composition APIs, also called the Visual layer, to take advantage of the latest Windows 10 or later UI features and create better look, feel, and functionality in C++ Win32 applications.
Built as a Win32 project in Visual
Studio 2019. Uses C++ and
HTML/CSS/JavaScript in the WebView2 environment.WinFormsWebView2WindowsFormsBrowserEmbeds a WebView2 control within a Windows Forms application.
Built as a Windows Forms project in
Visual Studio 2019. Uses C# and HTML/CSS/JavaScript in the WebView2 environment.Windows Presentation Foundation (WPF) .NETWebView2WpfBrowserEmbeds a WebView2 control within a WPF application.
Built as a WPF project in Visual Studio
2019. Uses C# and
HTML/CSS/JavaScript in the WebView2 environment.Chrome DevTools Protocol (CDP) in
WPFWV2CDPExtensionWPFSampleUses Chrome DevTools Protocol
functions using a 
DevToolsProtocolHelper object in WebView2. Demonstrates the usage patterns of the WebView2 CDP extension in WPF. This application is built with the WebView2 CDP Extension that defines all CDP methods, events, and types.
Built as a WPF project in Visual Studio 2019. Uses C# in the WebView2 environment.WiX Burn Bundle to deploy RuntimeWV2DeploymentWiXBurnBundleSampl eCreates a WiX installer for the
WebView2APISample and uses WiX
Burn Bundle to chain-install the Evergreen WebView2 Runtime.
Used when deploying the Evergreen WebView2 Runtime with your app.WiX Custom Action to deploy RuntimeWV2DeploymentWiXCustomActionSa mpleWebView2APISampleCreates a WiX installer for the  and uses WiX
Custom Action to chain-install the Evergreen WebView2 Runtime.
Used when deploying the Evergreen WebView2 Runtime with your app. UWP/WinUI samples
A comprehensive API sample for UWP/WinUI is available from the WinUI Controls Gallery.
This WinUI Controls Gallery sample shows all of the XAML controls in an interactive format. This app is the interactive companion to the Fluent Design Guidelines and shows the usage of both UWP XAML APIs and Windows UI Toolkit APIs.
 Deploy the Evergreen WebView2 Runtime
The WV2DeploymentVSInstallerSample uses the Microsoft Visual Studio Installer Projects extension for Visual Studio, to create an installer for WebView2APISample and chain-install the Evergreen WebView2 Runtime.
WebView2SamplesThis sample is a separate installer. It's not part of the  repo.
 Directory structure of the WebView2Samples repo
.sln files from the WebView2SamplesFor general initial Dev environment setup, you can open any of the  repo:
.sln.slnOne of the four platform-specific  files in the GettingStartedGuides directory.
The multi-platform  file in the SampleApps directory. Has a long WebView2 API Sample README file.
.sln One of the five platform-specific  files in the SampleApps directory. These demonstrate adding the WebView2 control to an app on various platforms.
WebView2SamplesThe  repo has two main parts:
.sln files and their various project files). There is a README.md.sln A set of Get Started solutions (	 file for each  file; most of them are very short. Most documentation is in the present set of articles.
.sln.sln A set of platform-specific samples (each with its own directory and 	 file), along with one multiplatform  file.
To download or clone this repo, see Set up your Dev environment for WebView2.
 If you clone the repo, you can update your local copy using git commands or features of various Dev apps.
.zip If you download the repo as a  file, you get a snapshot copy of the repo. You can then download another, updated copy of the repo later.
 Local paths for .sln and README.md files
.sln and README.mdThis section shows the path to every  file, resulting from downloading or cloning the repo to your local drive.
WebView2Samples repo contains multiple README.md files and .slnThe  files, listed below. When you download
README.mdor clone the repo, you can then view any of these  files in Visual Studio. Or, view them online at the GitHub repo.
.zip file, the root directory is named WebView2Samples-main rather than WebView2SamplesmainIn the downloaded , representing the  branch of the repo.
.sln or README.mdIn the links below, the local directory path to the .sln or README.md is shown. The link goes to the GitHub repo's directory level where you can see the  file in a directory listing. At GitHub, the README is automatically appended to the webpage of the directory that contains the README file.
Top-level README for the overall repo:
 WebView2Samples/README.md - 2 pages. A recommended overview similar to the present article.
GettingStartedGuides directory: solution and readme files, for the per-platform tutorials:
There are four platform-specific solution files for the Get Started guides:
 Getting started for Win32:
WebView2Samples/GettingStartedGuides/Win32_GettingStarted/WebView2GettingStarted.sln
WebView2Samples/GettingStartedGuides/Win32_GettingStarted/README.md
Getting started for WinUI 3:
WebView2Samples/GettingStartedGuides/WinUI3_GettingStarted/WinUI_Sample/WinUI_Sample.sln
WebView2Samples/GettingStartedGuides/WinUI3_GettingStarted/README.md
Getting started for WinForms:
WebView2Samples/GettingStartedGuides/WinForms_GettingStarted/WinForms_GettingStarted.sln
No README file.
Getting started for WPF: WebView2Samples/GettingStartedGuides/WPF_GettingStarted/WPFSample.sln
WebView2Samples/GettingStartedGuides/WPF_GettingStarted/README.md
SampleApps directory: solution and readme files:
There is one multi-platform solution file:
WebView2Samples: WebView2Samples/SampleApps/WebView2Samples.sln - this solution file includes multiple platform projects.
WebView2Samples/SampleApps/WebView2APISample/README.md - A recommended long Readme file for the "WebView2 API Sample". This sample is an example of an application that embeds a WebView2 control within a Win32 native application. It is built as a Win32 Visual Studio 2019 project and makes use of both C++ and HTML/CSS/JavaScript in the WebView2 environment. It showcases a selection of WebView2's event handlers and API methods that allow a native Win32 application to directly interact with a WebView2 control, and vice versa.
There are five platform-specific solution files:  webview2_sample_uwp:
WebView2Samples/SampleApps/webview2_sample_uwp/webview2_sample_uwp.sln
WebView2Samples/SampleApps/webview2_sample_uwp/readme.md
WebView2WpfBrowser:
WebView2Samples/SampleApps/WebView2WpfBrowser/WebView2WpfBrowser.sln
WebView2Samples/SampleApps/WebView2WpfBrowser/README.md
WebView2WindowsFormsBrowser:
WebView2Samples/SampleApps/WebView2WindowsFormsBrowser/WebView2WindowsFormsBrowser. sln
WebView2Samples/SampleApps/WebView2WindowsFormsBrowser/README.md
WebView2SampleWinComp:
WebView2Samples/SampleApps/WebView2SampleWinComp/WebView2SampleWinComp.sln
WebView2Samples/SampleApps/WebView2SampleWinComp/README.md
WV2CDPExtensionWPFSample:
WebView2Samples/SampleApps/WV2CDPExtensionWPFSample/WV2CDPExtensionWPFSample.sln  WebView2Samples/SampleApps/WV2CDPExtensionWPFSample/README.md
Readme files for WIX and Deployment Installer:
.slnThese don't use  files.
WebView2Samples/SampleApps/WV2DeploymentWiXCustomActionSample/README.md
WebView2Samples/SampleApps/WV2DeploymentWiXBurnBundleSample/README.md WebView2Samples/SampleApps/WV2DeploymentVSInstallerSample/README.md
Downloaded repo has longer root directory name
.zip file), the root directory name has -mainWebView2SamplesIf you download the repo (as a  appended. To match the name of the repo (), you can rename the root directory.
GettingStartedGuidesThe Win32-specific solution in the  directory has the path:
WebView2Samples-main/GettingStartedGuides/Win32_GettingStarted/WebView2GettingStarted.slnWebView2Samples/GettingStartedGuides/Win32_GettingStarted/WebView2GettingStarted.slnIf you downloaded the repo:
If you cloned the repo:
SampleAppsThe main, multi-project Win32 solution in the  directory has the path:
WebView2Samples-main/SampleApps/WebView2Samples.slnWebView2Samples/SampleApps/WebView2Samples.slnIf you downloaded the repo:
If you cloned the repo:

 
 WebView2 sample: WinUI 2 (UWP) browser app
 	6/21/2022 • 4 minutes to read • Edit OnlineThis WebView2 sample demonstrates how to use the WebView2 control and WebView2 APIs to implement a web browser in a WinUI 2 (UWP) app.
Directory & .sln: webview2_sample_uwp/webview2_sample_uwp.sln.
 Step 1 - View the Readme
The steps on the present page are general-purpose. See the sample-specific steps in the README sections, which may override the present page.
1. In a separate window or tab, read the rendered README.md file for this project at GitHub: README file for webview2_sample_uwp. Then return to this page and continue the steps below.
README > Prerequisites
README > Build the WebView2 UWP WinUi2 browser
You can also view the README.md source file (non-rendered) in Visual Studio. In File Manager or Visual Studio > Solution Explorer, open the file:
<your-repos-directory>/WebView2Samples/SampleApps/webview2_sample_uwp/README.md
or:
<your-repos-directory>/WebView2Samples-main/SampleApps/webview2_sample_uwp/README.md
 Step 2 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. If Visual Studio (minimum required version) is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 3 - Install a preview channel of Microsoft Edge
1. If a preview channel of Microsoft Edge (Beta, Dev, or Canary) is not already installed, in a separate window or tab, see Install a preview channel of Microsoft Edge in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 4 - Download or clone the WebView2Samples repo
WebView2Sample1. If not done already, download or clone the  repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 5 - Open .sln in Visual Studio
.sln1. On your local drive, open the  file in Visual Studio, in the directory:

<your-repos-directory>/WebView2Samples/SampleApps/webview2_sample_uwp/webview2_sample_uwp.slnor:

<your-repos-directory>/WebView2Samples-main/SampleApps/webview2_sample_uwp/webview2_sample_uwp.sln Step 6 - Install workloads if prompted
1. If prompted, install any Visual Studio workloads that are requested. In a separate window or tab, see Install Visual Studio workloads in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 7 - View the opened project
Solution Explorer shows the webview2_sample_uwp project:

To zoom, right-click > Open image in new tab.
Now that the project is open, install or update NuGet packages for the project.
 Step 8 - Install or update the prerelease WebView2 SDK
Install or update the prerelease WebView2 SDK for the project, as follows:
1. In Solution Explorer, right-click the project (not the solution node above it), and then select Manage NuGet Packages.
The NuGet Package Manager panel opens in Visual Studio.
2. In the NuGet Package Manager, click the Browse tab.
3. To the right of the search text box, select the Include prerelease check box.
4. In the search text box, enter Microsoft.Web.WebView2.
The Microsoft.Web.WebView2 card appears in the search results.
5. Click the Microsoft.Web.WebView2 card below the search box.
6. On the right, in the Version dropdown list, make sure Latest prerelease is selected:

The above image is from another project, but is similar.
7. Click the Install (or Update) button.
The Preview Changes dialog box appears:

The above image is from another project, but is similar.
8. Click the OK button.
The WebView2 SDK is now installed for this project.
 Step 9 - Install or update the prerelease Microsoft.UI.Xaml package (WinUI 2 SDK)
Next, install or update the prerelease Microsoft.UI.Xaml package. Microsoft.UI.Xaml is WinUI 2, as follows:
1. If the NuGet Package Manager panel isn't open: in Solution Explorer, right-click the project (not the solution node above it), and then select Manage NuGet Packages.
The NuGet Package Manager panel opens in Visual Studio.
2. In the NuGet Package Manager, click the Browse tab.
3. Select the Include prerelease check box.
4. In the Search box, enter Microsoft.UI.Xaml, and then select the Microsoft.UI.Xaml card below the search box.
5. On the right, make sure that the Version is Latest prerelease.
6. Click the Install (or Update) button:

Image borrowed from another project. To zoom, right-click > Open image in new tab.
The Preview Changes dialog box appears:

Image borrowed from another project.
7. Click the OK button.
8. The License Acceptance dialog box appears:

readme.txt9. Click the I Accept button. In Visual Studio, the  file is displayed, saying that you've installed the WinUI package:

Image borrowed from another project.
The readme lists some lines of code that are similar to what we'll add.
10. Select File > Save All.
You've now installed the Microsoft.UI.Xaml package, which is WinUI (WinUI 2), for your project. Check the resulting installed packages, as follows:
11. In NuGet Package Manager, click the Installed tab, and make sure the three packages are listed:
Microsoft.NETCore.UniversalWindowsPlatform
Microsoft.UI.Xaml - Prerelease
Microsoft.Web.WebView2 - Prerelease

To zoom, right-click > Open image in new tab.
12. Close the NuGet Package Manager window.  Step 10 - Build the project
At the top of Visual Studio, set the build target, as follows:
1. In the Solution Configurations dropdown list, select Debug or Release.
2. In the Solution Platforms dropdown list, select Any CPU (or a specific platform if Any CPU isn't listed).

3. In Solution Explorer, right-click the webview2_sample_uwp project, and then select Build.
webview2_sample_uwp.csprojThis builds the project file  (per Build > Rebuild Solution > Output), or 
WebView2_UWP.csproj (per Readme.md).
 Step 11 - Run (debug) the project
F51. Select Debug > Start Debugging ().
An empty grid window initially appears:

The sample app window then displays webpage content:

2. Use the sample app; see README file for webview2_sample_uwp.
3. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
 Step 12 - Inspect the code
1. In the Visual Studio code editor, inspect the code:

To zoom, right-click > Open image in new tab.
 See also
 Get started with WebView2 in WinUI 2 (UWP) apps (public preview)

 
 WebView2 sample: Win32 C++ app
 	6/21/2022 • 4 minutes to read • Edit OnlineThis WebView2 sample demonstrates how to use the WebView2 control and WebView2 APIs to add features to a Win32 C++ app.
The WebView2APISample is an example of an application that embeds a WebView2 control within a Win32 native application. It is built as a Win32 Visual Studio project and makes use of both C++ and HTML/CSS/JavaScript in the WebView2 environment.
The API Sample showcases a selection of WebView2's event handlers and API methods that allow a native Win32 application to directly interact with a WebView2 control and vice versa.
Directory & .sln: WebView2APISample / WebView2Samples.sln (in parent dir).
 Step 1 - View the Readme
The steps on the present page are general-purpose. See the sample-specific steps in the README sections, which may override the present page.
1. In a separate window or tab, read the rendered README.md file for this project at GitHub: README file for WebView2APISample. Then return to this page and continue the steps below.
README > Prerequisites
README > Build the WebView2 API Sample
You can also view the README.md source file (non-rendered) in Visual Studio. In File Manager or Visual Studio > Solution Explorer, open the file:
<your-repos-directory>/WebView2Samples/SampleApps/README.md
or:
<your-repos-directory>/WebView2Samples-main/SampleApps/README.md
 Step 2 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. If Visual Studio (minimum required version) is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 3 - Install a preview channel of Microsoft Edge
1. If a preview channel of Microsoft Edge (Beta, Dev, or Canary) is not already installed, in a separate window or tab, see Install a preview channel of Microsoft Edge in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 4 - Download or clone the WebView2Samples repo
WebView2Sample1. If not done already, download or clone the  repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 5 - Open .sln in Visual Studio
.sln1. On your local drive, open the  file in Visual Studio, in the directory:

<your-repos-directory>/WebView2Samples/SampleApps/WebView2Samples.slnor:

<your-repos-directory>/WebView2Samples-main/SampleApps/WebView2Samples.sln Step 6 - Install workloads if prompted
1. Visual Studio workloads - If prompted, install any Visual Studio workloads that are requested. In a separate window or tab, see Install Visual Studio workloads in Set up your Dev environment for WebView2.
Follow the steps in that section, and then return to this page and continue below.
 Step 7 - View the opened project
Solution Explorer shows several projects, including the WebView2APISample project:

 Step 8 - Install or update the prerelease WebView2 SDK
Install or update the prerelease WebView2 SDK for the project, as follows:
1. In Solution Explorer, right-click the project (not the solution node above it), and then select Manage NuGet Packages.
The NuGet Package Manager panel opens in Visual Studio.
2. In the NuGet Package Manager, click the Browse tab.
3. To the right of the search text box, select the Include prerelease check box.
4. In the search text box, enter Microsoft.Web.WebView2.
The Microsoft.Web.WebView2 card appears in the search results.
5. Click the Microsoft.Web.WebView2 card below the search box.
6. On the right, in the Version dropdown list, make sure Latest prerelease is selected:

The above image is from another project, but is similar. To zoom, right-click > Open image in new tab.
7. Click the Install (or Update) button.
The Preview Changes dialog box appears:

The above image is from another project, but is similar.
8. Click the OK button.
The WebView2 SDK is now installed for this project.
 Step 9 - Build the project
At the top of Visual Studio, set the build target, as follows:
1. In the Solution Configurations dropdown list, select Debug or Release.
2. In the Solution Platforms dropdown list, select x86, x64, or ARM64.
3. In Solution Explorer, right-click the WebView2APISample project, and then select Build.

To zoom, right-click > Open image in new tab.
SampleApps/WebView2APISample/WebView2APISample.vcxprojThis builds the project file .
 Step 10 - Run (debug) the project
F51. Select Debug > Start Debugging ().
F5Troubleshooting: if you skip the build step and immediately select Debug > Start Debugging (), a dialog box might appear, "Unable to start program: Cannot find the path specified":

To fix this problem: in Solution Explorer, right-click the WebView2APISample project, and then select Build.
The WebView2APISample app window opens:

To zoom, right-click > Open image in new tab.
2. Use the sample app. See README file for WebView2 API Sample
3. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
 Step 11 - Inspect the code
1. In the Visual Studio code editor, inspect the code.
 See also
 Get started with WebView2 in Win32 apps
 
 
WebView2 sample: Win32 C++ app with Visual Composition
 	6/21/2022 • 4 minutes to read • Edit OnlineThis WebView2 sample demonstrates creating an application that embeds a WebView2 control within a Win32 native application.
It is built as a Win32 Visual Studio 2019 project and makes use of both C++ and HTML/CSS/JavaScript in the WebView2 environment.
It also uses Windows Runtime Composition APIs (also called the Visual layer) to take avantage of the Windows UI features and create a better look, feel, and functionality in C++ Win32 applications.
Directory & .sln: WebView2SampleWinComp/WebView2SampleWinComp.sln.
To use this sample (general-purpose steps):
The steps on the present page are general-purpose. See the sample-specific steps in the README sections, which may override the present page.
 Step 1 - View the Readme
1. In a separate window or tab, read the rendered README.md file for this project at GitHub: README file for WebView2SampleWinComp. Then return to this page and continue the steps below.
README > Prerequisites
README > Build the WebView2 Sample WinComp
You can also view the README.md source file (non-rendered) in Visual Studio. In File Manager or Visual Studio > Solution Explorer, open the file:
<your-repos-directory>/WebView2Samples/SampleApps/WebView2SampleWinComp/README.md
or:
<your-repos-directory>/WebView2Samples-main/SampleApps/WebView2SampleWinComp/README.md
 Step 2 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. If Visual Studio (minimum required version) is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 3 - Install a preview channel of Microsoft Edge
1. If a preview channel of Microsoft Edge (Beta, Dev, or Canary) is not already installed, in a separate window or tab, see Install a preview channel of Microsoft Edge in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 4 - Download or clone the WebView2Samples repo
WebView2Sample1. If not done already, download or clone the  repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 5 - Open .sln in Visual Studio
.sln1. On your local drive, open the  file in Visual Studio, in the directory:

<your-repos-directory>/WebView2Samples/SampleApps/WebView2SampleWinComp/WebView2SampleWinComp.slnor:

<your-repos-directory>/WebView2Samples-
main/SampleApps/WebView2SampleWinComp/WebView2SampleWinComp.slnA Review Solution Actions dialog box might appear:

2. Click the OK button.
 Step 6 - Install workloads if prompted
1. If prompted, install any Visual Studio workloads that are requested. In a separate window or tab, see Install Visual Studio workloads in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
Solution Explorer shows the WebView2SampleWinComp project.
 Step 7 - View the opened project
The project opens in Visual Studio:

To zoom, right-click > Open image in new tab.
 Step 8 - Install or update the WebView2 SDK
1. Install or update the WebView2 SDK on the project node (not the solution node) in Solution Explorer. In a separate window or tab, see Install the WebView2 SDK in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 9 - Build the project
At the top of Visual Studio, set the build target, as follows:
1. In the Solution Configurations dropdown list, select Debug or Release.
2. In the Solution Platforms dropdown list, select x86, x64, or ARM64.
3. In Solution Explorer, right-click the WebView2SampleWinComp project, and then select Build.
SampleApps/WebView2SampleWinComp/WebView2SampleWinComp.vcxprojThis builds the project file .
 Step 10 - Install or update the Microsoft.Windows.CppWinRT package
In the above step, the build might fail, as follows:
Build started...
1>------ Build started: Project: WebView2SampleWinComp, Configuration: Debug x64 ------
1>AppWindow.cpp
1>C:\Program Files (x86)\Windows 
Kits\10\Include\10.0.19041.0\cppwinrt\winrt\impl\Windows.Foundation.0.h(983,26):
error C2039: 'wait_for': is not a member of 'winrt::impl'
1>C:\Program Files (x86)\Windows 
Kits\10\Include\10.0.19041.0\cppwinrt\winrt\impl\Windows.Foundation.0.h(103):
message : see declaration of 'winrt::impl'
1>C:\Program Files (x86)\Windows 
Kits\10\Include\10.0.19041.0\cppwinrt\winrt\impl\Windows.Foundation.0.h(985):
message : see reference to class template instantiation 
'winrt::impl::consume_Windows_Foundation_IAsyncAction<D>' being compiled
...
1>Generating Code...
1>Done building project "WebView2SampleWinComp.vcxproj" -- FAILED.
========== Build: 0 succeeded, 1 failed, 0 up-to-date, 0 skipped ==========
1. To fix the issue: In Solution Explorer, right-click the solution's project node (not the solution node) and then select Manage NuGet Packages.
The NuGet Package Manager tab opens in Visual Studio.
2. In the NuGet window, click the Browse tab.
3. On the right of the search bar, clear the Include prerelease checkbox (unless you know that you want a prerelease version of the SDK).
4. In the search bar in the upper left, type Microsoft.Windows.CppWinRT.
5. Below the search bar, click the Microsoft.Windows.CppWinRT card.
6. In the right-hand pane, click the Install (or Update) button. NuGet downloads the Microsoft.Windows.CppWinRT package to your machine, for use by this project.

To zoom, right-click > Open image in new tab.
The Preview Changes dialog box opens:

7. Click the OK button.
readme.txt8. The  file opens for the CppWinRT package:

The Microsoft.Windows.CppWinRT package is now installed or updated. Continue with the steps below.
 See also 
NuGet.org > Microsoft.Windows.CppWinRT NuGet package
GitHub > microsoft/cppwinrt repo > Issues > error C2039: 'wait_for': is not a member of 'winrt::impl' #744
 Step 11 - Build the project again
1. In Solution Explorer, right-click the WebView2SampleWinComp project, and then select Build.
SampleApps/WebView2SampleWinComp/WebView2SampleWinComp.vcxprojThis builds the project file .
 Step 12 - Run (debug) the project
F51. In Visual Studio, select Debug > Start Debugging ().
Troubleshooting: If you try to debug before building the project, a dialog box might appear: "There were build errors":

Click the Yes button. A dialog box appears: "Unable to start program: cannot find file":

To fix that issue, build the project before debugging it.
After resolving the build issue, and then entering debug mode, the sample app window opens.
2. Use the sample app; see README file for WebView2SampleWinComp.
3. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
 Step 13 - Inspect the code
1. In the Visual Studio code editor, inspect the code.
 See also
 Get started with WebView2 in Win32 apps
 
 WebView2 sample: WinForms browser app
 	6/21/2022 • 4 minutes to read • Edit OnlineThis WebView2 sample demonstrates how to use the WebView2 control and WebView2 APIs to implement a web browser in a WinForms app.
Directory & .sln: WebView2WindowsFormsBrowser/WebView2WindowsFormsBrowser.sln.
 Step 1 - View the Readme
The steps on the present page are general-purpose. See the sample-specific steps in the README sections, which may override the present page.
To use this sample, follow the steps below in order.
1. In a separate window or tab, read the rendered README.md file for this project at GitHub: README file for WebView2WindowsFormsBrowser. Then return to this page and continue the steps below.
README > Prerequisites
README > Build the WebView2 Windows Forms Browser
You can also view the README.md source file (non-rendered) in Visual Studio. In File Manager or Visual Studio > Solution Explorer, open the file:
<your-repos-directory>/WebView2Samples/SampleApps/WebView2WindowsFormsBrowser/README.md
or:
<your-repos-directory>/WebView2Samples-main/SampleApps/WebView2WindowsFormsBrowser/README.md
 Step 2 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. If Visual Studio (minimum required version) is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 3 - Install a preview channel of Microsoft Edge
1. If a preview channel of Microsoft Edge (Beta, Dev, or Canary) is not already installed, in a separate window or tab, see Install a preview channel of Microsoft Edge in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 4 - Download or clone the WebView2Samples repo
WebView2Sample1. If not done already, download or clone the  repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 5 - Open .sln in Visual Studio
.sln1. On your local drive, open the  file in Visual Studio, in the directory:

<your-repos-
directory>/WebView2Samples/SampleApps/WebView2WindowsFormsBrowser/WebView2WindowsFormsBrowser.slnor:

<your-repos-directory>/WebView2Samples-
main/SampleApps/WebView2WindowsFormsBrowser/WebView2WindowsFormsBrowser.sln Step 6 - Install workloads if prompted
1. If prompted, install any Visual Studio workloads that are requested. In a separate window or tab, see Install Visual Studio workloads in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 7 - View the opened project
Solution Explorer shows the WebView2WindowsFormsBrowser project.
 Step 8 - Install or update the WebView2 SDK
1. WebView2 SDK - Install or update the WebView2 SDK on the project node (not the solution node) in Solution Explorer. In a separate window or tab, see Install the WebView2 SDK in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.

To zoom, right-click > Open image in new tab.
 Step 9 - Install .NET Framework 4.6.2 Developer Pack
To build this project, .NET Framework 4.6.2 Developer Pack is required.
To test whether .NET Framework 4.6.2 Developer Pack is installed:
At the top of Visual Studio, set the build target, as follows:
1. In the Solution Configurations dropdown list, select Debug or Release.
2. In the Solution Platforms dropdown list, select Any CPU.
3. In Solution Explorer, right-click the WebView2WindowsFormsBrowser project, and then select Build.
SampleApps/WebView2WindowsFormsBrowser/WebView2WindowsFormsBrowser.vcxprojThis builds the project file .
This might take a couple minutes.
If you get error messages about missing .NET Framework 4.6.2 Developer Pack, follow the steps below. Otherwise, skip to the next major section below.
4. Go to Download .NET Framework, select v4.6.2, and then click the Download .NET Framework 4.6.2 Developer Pack button:

5. In Microsoft Edge, select Settings and more > Downloads > Show in folder icon:

Downloads folder, double-click the file, such as ndp462-devpack-kb3151934-enu.exe6. In the .
The Microsoft .NET Framework Developer Pack license agreement dialog box appears:

7. Select the I agree to the license terms and conditions checkbox, and then click the Install button.
A User Account Control window appears, asking "Do you want to allow this app to make changes to your device?"
8. Click the Yes button.
The Microsoft .NET Framework Developer Pack Setup Successful dialog box appears:

9. Click the Close button.
Microsoft .NET Framework 4.6.2 Developer Pack is now installed on your machine.
 Step 10 - Build the project
1. If you just now installed .NET Framework 4.6.2 Developer Pack above, close Visual Studio, and then open the solution file in Visual Studio again, from the directory:

<your-repos-
directory>/WebView2Samples/SampleApps/WebView2WindowsFormsBrowser/WebView2WindowsFormsBrowser.slnor:

<your-repos-directory>/WebView2Samples-
main/SampleApps/WebView2WindowsFormsBrowser/WebView2WindowsFormsBrowser.slnAt the top of Visual Studio, set the build target, as follows:
1. In the Solution Configurations dropdown list, select Debug or Release.
2. In the Solution Platforms dropdown list, select Any CPU.
3. In Solution Explorer, right-click the WebView2WindowsFormsBrowser project, and then select Build.
SampleApps/WebView2WindowsFormsBrowser/WebView2WindowsFormsBrowser.vcxprojThis builds the project file .
 Step 11 - Run (debug) the project
F51. In Visual Studio, select Debug > Start Debugging ().
The sample app window opens:

2. Use the sample app; see README file for WebView2WindowsFormsBrowser.
3. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
 Step 12 - Inspect the code
1. In the Visual Studio code editor, inspect the code:

To zoom, right-click > Open image in new tab.
 See also
 Get started with WebView2 in WinForms apps
 
 WebView2 sample: WPF .NET browser app
 	6/21/2022 • 2 minutes to read • Edit OnlineThis WebView2 sample demonstrates how to use the WebView2 control and WebView2 APIs to implement a web browser in a WPF .NET app.
Directory & .sln: WebView2WpfBrowser/WebView2WpfBrowser.sln.
 Step 1 - View the Readme
The steps on the present page are general-purpose. See the sample-specific steps in the README sections, which may override the present page.
1. In a separate window or tab, read the rendered README.md file for this project at GitHub: README file for WebView2WpfBrowser. Then return to this page and continue the steps below.
README > Prerequisites
README > Build the WebView2 WPF Browser
You can also view the README.md source file (non-rendered) in Visual Studio. In File Manager or Visual Studio > Solution Explorer, open the file:
<your-repos-directory>/WebView2Samples/SampleApps/WebView2WpfBrowser/README.md
or:
<your-repos-directory>/WebView2Samples-main/SampleApps/WebView2WpfBrowser/README.md
 Step 2 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. If Visual Studio (minimum required version) is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 3 - Install a preview channel of Microsoft Edge
1.If a preview channel of Microsoft Edge (Beta, Dev, or Canary) is not already installed, in a separate window or tab, see Install a preview channel of Microsoft Edge in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 4 - Download or clone the WebView2Samples repo
WebView2Sample1. If not done already, download or clone the  repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 5 - Open .sln in Visual Studio
.sln1. On your local drive, open the  file in Visual Studio, in the directory:

<your-repos-directory>/WebView2Samples/SampleApps/WebView2WpfBrowser/WebView2WpfBrowser.slnor:

<your-repos-directory>/WebView2Samples-main/SampleApps/WebView2WpfBrowser/WebView2WpfBrowser.sln Step 6 - Install workloads if prompted
1. If prompted, install any Visual Studio workloads that are requested. In a separate window or tab, see Install Visual Studio workloads in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
The WebView2WpfBrowser project opens in Visual Studio:

To zoom, right-click > Open image in new tab.
 Step 7 - Install or update the WebView2 SDK
1. Install or update the WebView2 SDK on the project node (not the solution node) in Solution Explorer. In a separate window or tab, see Install the WebView2 SDK in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 8 - Build the project
At the top of Visual Studio, set the build target, as follows:
1. In the Solution Configurations dropdown list, select Debug or Release.
2. In the Solution Platforms dropdown list, select Any CPU.
3. In Solution Explorer, right-click the WebView2WpfBrowser project, and then select Build.
WebView2WpfBrowser.csprojThis builds the project file .
 Step 9 - Run (debug) the project
F51. In Visual Studio, select Debug > Start Debugging ().
The sample app window opens:

2. Use the sample app; see README file for WebView2WpfBrowser.
3. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
 Step 10 - Inspect the code
1. In the Visual Studio code editor, inspect the code:

To zoom, right-click > Open image in new tab.
 See also
 Get started with WebView2 in WPF apps

 
 
WebView2 sample: Chrome DevTools Protocol extension in a WPF app
 	6/21/2022 • 2 minutes to read • Edit OnlineThis WebView2 sample demonstrates how to use the WebView2 CDP extension to use the Chrome DevTools Protocol in a WPF app.
Directory & .sln: WV2CDPExtensionWPFSample/WV2CDPExtensionWPFSample.sln.
 Step 1 - View the Readme
The steps on the present page are general-purpose. See the sample-specific steps in the README sections, which may override the present page.
1. In a separate window or tab, read the rendered README.md file for this project at GitHub: README file for WV2CDPExtensionWPFSample. Then return to this page and continue the steps below.
README > Prerequisites
README > Build the WebView2 WPF Browser
You can also view the README.md source file (non-rendered) in Visual Studio. In File Manager or Visual Studio > Solution Explorer, open the file:
<your-repos-directory>/WebView2Samples/SampleApps/WV2CDPExtensionWPFSample/README.md
or:
<your-repos-directory>/WebView2Samples-main/SampleApps/WV2CDPExtensionWPFSample/README.md
 Step 2 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. If Visual Studio (minimum required version) is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 3 - Install a preview channel of Microsoft Edge
1. If a preview channel of Microsoft Edge (Beta, Dev, or Canary) is not already installed, in a separate window or tab, see Install a preview channel of Microsoft Edge in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 4 - Download or clone the WebView2Samples repo
WebView2Sample1. If not done already, download or clone the  repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 5 - Open .sln in Visual Studio
.sln1. On your local drive, open the  file in Visual Studio, in the directory:

<your-repos-
directory>/WebView2Samples/SampleApps/WV2CDPExtensionWPFSample/WV2CDPExtensionWPFSample.slnor:

<your-repos-directory>/WebView2Samples-
main/SampleApps/WV2CDPExtensionWPFSample/WV2CDPExtensionWPFSample.sln Step 6 - Install workloads if prompted
1. If prompted, install any Visual Studio workloads that are requested. In a separate window or tab, see Install Visual Studio workloads in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
The WV2CDPExtensionWPFSample project opens in Visual Studio:

 Step 7 - Install or update the WebView2 SDK
1. Install or update the WebView2 SDK on the project node (not the solution node) in Solution Explorer. In a separate window or tab, see Install the WebView2 SDK in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
At the top of Visual Studio, set the build target, as follows:
 Step 8 - Build the project
1. In the Solution Configurations dropdown list, select Debug or Release.
2. In the Solution Platforms dropdown list, select Any CPU.
3. In Solution Explorer, right-click the WV2CDPExtensionWPFSample project, and then select Build.
WV2CDPExtensionWPFSample.csproj  This builds the project file .  Step 9 - Run (debug) the project
F51. In Visual Studio, select Debug > Start Debugging ().
The sample app window opens:

2. Use the sample app; see README file for WV2CDPExtensionWPFSample.
3. In Visual Studio, select Debug > Stop Debugging. Visual Studio closes the app.
 Step 10 - Inspect the code
1. In the Visual Studio code editor, inspect the code:

To zoom, right-click > Open image in new tab.
 See also
 Get started with WebView2 in WinUI 2 (UWP) apps (public preview)

WebView2 sample: WebView2 Deployment Visual Studio installer
6/21/2022 • 2 minutes to read • Edit Online
This WebView2 sample demonstrates how to deploy a WebView2 app by using the Visual Studio installer.
Directory: WV2DeploymentVSInstallerSample (no .sln)
 Step 1 - View the Readme
The steps on the present page are general-purpose. See the sample-specific steps in the README sections, which may override the present page.
1. In a separate window or tab, read the rendered README.md file for this project at GitHub: README file for WV2DeploymentVSInstallerSample. Then return to this page and continue the steps below.
README > Prerequisites
README > Build steps
You can also view the README.md source file (non-rendered) in Visual Studio. In File Manager or Visual Studio > Solution Explorer, open the file:
<your-repos-directory>/WebView2Samples/SampleApps/WV2DeploymentVSInstallerSample/README.md
or:
<your-repos-directory>/WebView2Samples-main/SampleApps/WV2DeploymentVSInstallerSample/README.md
 Step 2 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. If Visual Studio (minimum required version) is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 3 - Install a preview channel of Microsoft Edge
1. If a preview channel of Microsoft Edge (Beta, Dev, or Canary) is not already installed, in a separate window or tab, see Install a preview channel of Microsoft Edge in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 4 - Download or clone the WebView2Samples repo
WebView2Sample1. If not done already, download or clone the  repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 5 - Install or update the WebView2 SDK
1. If needed, install (or update) the WebView2 SDK on the project node (not the solution node) in Solution Explorer. In a separate window or tab, see Install the WebView2 SDK in Set up your Dev environment for WebView2. You can follow these steps to determine whether the WebView2 SDK is installed for the project. Follow the steps in that section, and then return to this page and continue below.
 See also
 README file for WV2DeploymentVSInstallerSample

WebView2 sample: WiX Burn Bundle to deploy Runtime
6/21/2022 • 2 minutes to read • Edit Online
This is a WebView2 sample demonstrating how to use a WiX Burn Bundle to deploy the WebView2 Runtime.
Directory& .proj:
WV2DeploymentWiXBurnBundleSample/WV2DeploymentWiXBurnBundleSample.wixproj (no .sln)
 Step 1 - View the Readme
The steps on the present page are general-purpose. See the sample-specific steps in the README sections, which may override the present page.
1. README - In a separate window or tab, read the rendered README.md file for this project at GitHub: README file for WV2DeploymentWiXBurnBundleSample. Then return to this page and continue the steps below.
README > Prerequisites
README > Build steps
You can also view the README.md source file (non-rendered) in Visual Studio. In File Manager or Visual Studio > Solution Explorer, open the file:
<your-repos-directory>/WebView2Samples/SampleApps/WV2DeploymentWiXBurnBundleSample/README.md
or:
<your-repos-directory>/WebView2Samples-main/SampleApps/WV2DeploymentWiXBurnBundleSample/README.md
 Step 2 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. If Visual Studio (minimum required version) is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 3 - Install a preview channel of Microsoft Edge
1. If a preview channel of Microsoft Edge (Beta, Dev, or Canary) is not already installed, in a separate window or tab, see Install a preview channel of Microsoft Edge in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 4 - Download or clone the WebView2Samples repo
WebView2Sample1. If not done already, download or clone the  repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 5 - Install or update the WebView2 SDK
1. If needed, install (or update) the WebView2 SDK on the project node (not the solution node) in Solution
Explorer. In a separate window or tab, see Install the WebView2 SDK in Set up your Dev environment for WebView2. You can follow these steps to determine whether the WebView2 SDK is installed for the project. Follow the steps in that section, and then return to this page and continue below.
 See also
README file for WV2DeploymentWiXBurnBundleSample

WebView2 sample: WiX Custom Action to deploy the WebView2 Runtime
6/21/2022 • 2 minutes to read • Edit Online
This is a WebView2 sample demonstrating how to use a WiX Custom Action to deploy the WebView2 Runtime.
Directory & .proj:
WV2DeploymentWiXCustomActionSample/WV2DeploymentWiXCustomActionSample.wixproj (no
.sln)
 Step 1 - View the Readme
The steps on the present page are general-purpose. See the sample-specific steps in the README sections, which may override the present page.
1. In a separate window or tab, read the rendered README.md file for this project at GitHub: README file for WV2DeploymentWiXCustomActionSample. Then return to this page and continue the steps below. README > Prerequisites
README > Build steps
You can also view the README.md source file (non-rendered) in Visual Studio. In File Manager or Visual Studio > Solution Explorer, open the file:
<your-repos-directory>/WebView2Samples/SampleApps/WV2DeploymentWiXCustomActionSample/README.md
or:
<your-repos-directory>/WebView2Samples-main/SampleApps/WV2DeploymentWiXCustomActionSample/README.md
 Step 2 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this sample.
1. Visual Studio - If Visual Studio (minimum required version) is not already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 3 - Install a preview channel of Microsoft Edge
1. Preview channel of Microsoft Edge - If a preview channel of Microsoft Edge (Beta, Dev, or Canary) is not already installed, in a separate window or tab, see Install a preview channel of Microsoft Edge in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
 Step 4 - Download or clone the WebView2Samples repo
WebView2Sample1. If not done already, download or clone the  repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
 Step 5 - Install or update the WebView2 SDK
1. WebView2 SDK - If needed, install (or update) the WebView2 SDK on the project node (not the solution node) in Solution Explorer. In a separate window or tab, see Install the WebView2 SDK in Set up your Dev
environment for WebView2. You can follow these steps to determine whether the WebView2 SDK is installed
for the project. Follow the steps in that section, and then return to this page and continue below.
 See also
 README file for WV2DeploymentWiXCustomActionSample

 
 Get started with WebView2
 	6/21/2022 • 2 minutes to read • Edit OnlineThese articles cover how to set up your development tools and create an initial WebView2 app, and learn about WebView2 concepts along the way.
Get started with WebView2 in Win32 apps
Get started with WebView2 in WinForms apps
Get started with WebView2 in WinUI 2 (UWP) apps (public preview)
Get started with WebView2 in WinUI 3 (Windows App SDK) apps Get started with WebView2 in WPF apps
 See also
developer.microsoft.comWebView2SamplesMicrosoft Edge WebView2 - initial introduction to WebView2, at .
Sample Code for WebView2 - a guide to the  repo.

 
 Get started with WebView2 in Win32 apps
 	6/21/2022 • 17 minutes to read • Edit OnlineIn this article, you set up your development tools (if not done already), add WebView2 code to the Win32 app, and learn about WebView2 concepts along the way.
WebView2SamplesThe project uses the Win32_GettingStarted / WebView2GettingStarted directory that's part of the  repo. To use this article, you do the following:
WebView2Samples1. Download or clone the  repo to your local drive.
2. Run the completed project.
HelloWebView.cpp3. Optionally delete the WebView2 code from .
4. Follow the remaining steps in this article about adding and understanding the WebView2 code.
 Corresponding, completed, runnable Get Started sample at GitHub: Getting Started with WebView2 for Win32 apps (Win32_GettingStarted/WebView2GettingStarted.sln).
 Step 1 - Install Visual Studio
This tutorial requires Microsoft Visual Studio, not Microsoft Visual Studio Code.
1. If Microsoft Visual Studio isn't installed already, in a new window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps there to do a basic default installation of Visual Studio.
Then return to this page and continue below.
 Step 2 - Install a preview channel of Microsoft Edge
1. If it's not installed already, install a preview channel of Microsoft Edge. To do that, in a new window or tab, see Install a preview channel of Microsoft Edge in Set up your Dev environment for WebView2.
Then continue below.
 Step 3 - Download or clone the WebView2Samples repo
HelloWebView.cppThe code that you add in this tutorial's steps, has already been added to the sample repo, for you. An optional step below allows you to delete the WebView2 code from , so that you can add it yourself, if you want.
To keep this tutorial focused on WebView2-specific coding, we start from an existing Microsoft Visual Studio
WebView2GettingStarted) that's stored in the WebView2Samplesproject ( GitHub repo. We'll add WebView2 features - actually, the features have already been added, but follow along in the setup and explanation steps.
The existing Visual Studio project we'll start with is part of the sample code from a standard C++ Win32 desktop application. For information about the underlying, standard Win32 app sample, in a new window or tab, see Walkthrough: Create a traditional Windows Desktop application (C++).

Download or clone the WebView2Samples repo, as follows:
WebView2Samples1. If you haven't already, download or clone the  repo. To do this, in a separate window or tab, follow the steps in Download the WebView2Samples repo or Clone the WebView2Samples repo in Set up
your Dev environment for WebView2.
Then return here after you've copied the repo to your local drive, and continue with the steps below.
 Step 4 - Open the existing Win32 single-window app
(WebView2GettingStarted.sln)
You start with a basic desktop project that contains a single main window. We'll start with an existing app project from the WebView2Samples repo, which you cloned or downloaded from GitHub in the previous step.
1. Open Visual Studio (not Visual Studio Code).
Open WebView2GettingStarted.sln, which is located at the path: <your repo
directory>/WebView2Samples/GettingStartedGuides/Win32_GettingStarted/WebView2GettingStarted.sln2. 
.
 Step 5 - Install workloads if prompted
Visual Studio Installer might open and prompt you to install a Workload:

If Visual Studio Installer prompts you to install a Workload:
1. Select the Desktop development with C++ card so that a checkmark appears.
2. If you want, also select the .NET desktop development card (not needed for this tutorial), so that a checkmark appears on this card as well.
3. Click the Install button.
The Installer closes.
 Retarget Projects 
The Visual Studio Review Solution Actions dialog might appear, prompting you whether you want to Retarget Projects:

1. If that dialog appears, you can click OK.
The WebView2GettingStarted solution opens in Visual Studio. The solution contains a single project: WebView2GettingStarted, which contains a single .cpp file: HelloWebView.cpp.
 Step 6 - View the opened project in Visual Studio
If the WebView2GettingStarted project isn't open in Visual Studio, open it in Visual Studio:
Open WebView2GettingStarted.sln, which is located at the path: <your repo
directory>/WebView2Samples/GettingStartedGuides/Win32_GettingStarted/WebView2GettingStarted.sln1. 
.
2. In Solution Explorer, expand the Source Files node, and then select HelloWebView.cpp.
HelloWebView.cpp opens in the code editor of Visual Studio.

#include "WebView2.h"The above screenshot shows some WebView2 code (), that's already present in the file immediately after cloning (downloading) the repo.
 Set the solution to use the Win10 SDK and Visual Studio toolset 
This step is only needed for older versions of Visual Studio, so it's likely you can skip it. But you can take a look at this UI in any case:
1. In Visual Studio's Solution Explorer, right-click the WebView2GettingStarted project (not the solution with the same name), and then select Properties.
2. Select Configuration Properties > General, and then (if it's not the correct setting already):
a. Modify Windows SDK Version to use the Win10 SDK.
b. Modify Platform Toolset to use a Visual Studio toolset.
These modifications are only necessary for older versions of Visual Studio.
Here's a Visual Studio 2017 screenshot showing some valid settings:

The following is a Visual Studio 2022 screenshot; the values were already correct, so no change was required:

Continue with the steps below.
 Step 7 - Install the Windows Implementation Libraries (WIL)
WIL is already installed into the project at the repo, but walk through these steps to learn about setup and to check the project's setup.
In a moment, you'll install the Windows Implementation Libraries (WIL) - A header-only C++ library to make life easier for developers on Windows through readable, type-safe C++ interfaces for Windows COM coding patterns. You install this Microsoft.Windows.ImplementationLibrary package through Solution Explorer in Visual Studio, for the project.
This tutorial also uses Windows Runtime C++ Template Library (WRL) - A template library that provides a low-level way to author and use Windows Runtime components.

Install the Windows Implementation Libraries (WIL) from within Visual Studio, as follows:
1. In Visual Studio, make sure that the WebView2GettingStarted solution is still open.
2. In Solution Explorer, right-click the WebView2GettingStarted project node (not the solution node) and then select Manage NuGet Packages.

3. In the NuGet window, click the Browse tab.
Microsoft.Windows.ImplementationLibrary4. In the search bar in the upper left, type . Or, copy and paste the single-line code block below. Then select Microsoft.Windows.ImplementationLibrary.
Microsoft.Windows.ImplementationLibrary
Selecting the Microsoft.Windows.ImplementationLibrary package in NuGet Package Manager in Visual Studio:

To zoom, right-click > Open image in new tab.
If you don't see Microsoft.Windows.ImplementationLibrary listed, check the NuGet source location, as follows:
a. Select Tools > Options > NuGet Package Manager > Package Sources.
b. Make sure that in Package sources there is a nuget.com source pointing to 
https://api.nuget.org/v3/index.json.
nuget.comhttps://api.nuget.org/v3/index.jsonc. If Package sources doesn't contain that source, enter  in the Name text box and  in the Source text box. Then click Update and OK.
5. Toward the upper right, click the Install button (or the Update button). NuGet downloads the Windows Implementation Library (WIL) to your machine.
Windows Implementation Libraries (WIL) is now installed, along with Windows Runtime C++ Template Library (WRL).
Continue with the steps below.
 Step 8 - Install the WebView2 SDK
Next, you'll install the WebView2 SDK. The WebView2 SDK includes the WebView2 control, which is powered by Microsoft Edge, and enables you to embed web technologies (HTML, CSS, and JavaScript) in your native applications.

Install the WebView2 SDK, as follows:
1. In Visual Studio, make sure that the WebView2GettingStarted solution is open, as described above.
2. In Solution Explorer, right-click the WebView2GettingStarted project node (not the WebView2GettingStarted solution node) and then select Manage NuGet Packages.
The NuGet Package Manager tab and panel opens in Visual Studio.

3. In the NuGet window, click the Browse tab.
4. On the right of the search bar, clear the Include prerelease checkbox (unless you know that you want a prerelease version of the SDK).
Microsoft.Web.WebView25. In the search bar in the upper left, type . Or, copy and paste the single-line code block below. Then select Microsoft.Web.WebView2.
Microsoft.Web.WebView2
6. In the right-hand side window, click Install (or Update). NuGet downloads the WebView2 SDK to your machine.

To zoom, right-click > Open image in new tab.
7. Close the NuGet Package Manager tab.
The WebView2 SDK is now installed, so your development environment is now set up to add WebView2 features to your Win32 app.
Continue with the steps below.
 Step 9 - Run the finished project
At this point, your Dev environment is set up to run Win32 WebView2 apps in debug mode in Visual Studio and add WebView2 features.

To confirm that your system is set up for WebView2 coding, run the project in Debug mode, as follows:
F51. Select Debug > Start debugging () to build and run the project.
The sample app first opens a pop-up window, which displays the URL that will be loaded, along with an OK button:

2. Click the OK button to dismiss the pop-window and continue to the URL:
http://www.bing.comThe WebView2 window now displays webpage content: the Bing website, .

3. Close the WebView sample window.
 Step 10 - Optionally delete the WebView2 code from HelloWebView.cpp
HelloWebView.cppIf you want to follow the steps below to add the WebView2 code to  yourself, delete the two blocks of WebView2 code, as follows:
HelloWebView.cpp1. In , delete the following code:
// include WebView2 header
#include "WebView2.h"
HelloWebView.cpp2. In , delete the following code:
// Step 3 - Create a single WebView within the parent window
// Locate the browser and set up the environment for WebView
CreateCoreWebView2EnvironmentWithOptions(nullptr, nullptr, nullptr,
   Callback<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>(
      [hWnd](HRESULT result, ICoreWebView2Environment* env) -> HRESULT {
         // Create a CoreWebView2Controller and get the associated CoreWebView2 whose parent is the main window hWnd
         env->CreateCoreWebView2Controller(hWnd, 
Callback<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>(
            [hWnd](HRESULT result, ICoreWebView2Controller* controller) -> HRESULT {                if (controller != nullptr) {                   webviewController = controller;
                  webviewController->get_CoreWebView2(&webviewWindow);                }
               // Add a few settings for the webview
               // The demo step is redundant since the values are the default settings                ICoreWebView2Settings* Settings;                webviewWindow->get_Settings(&Settings);
               Settings->put_IsScriptEnabled(TRUE);
               Settings->put_AreDefaultScriptDialogsEnabled(TRUE);
               Settings->put_IsWebMessageEnabled(TRUE);
               // Resize WebView to fit the bounds of the parent window
               RECT bounds;
               GetClientRect(hWnd, &bounds);                webviewController->put_Bounds(bounds);
               // Schedule an async task to navigate to Bing                webviewWindow->Navigate(L"https://www.bing.com/");
               // Step 4 - Navigation events
               // register an ICoreWebView2NavigationStartingEventHandler to cancel any non-https navigation                EventRegistrationToken token;
               webviewWindow->add_NavigationStarting(Callback<ICoreWebView2NavigationStartingEventHandler>(                   [](ICoreWebView2* webview, ICoreWebView2NavigationStartingEventArgs* args) -> HRESULT {                      PWSTR uri;                      args->get_Uri(&uri);                      std::wstring source(uri);
                     if (source.substr(0, 5) != L"https") {                         args->put_Cancel(true);
                     }
                     CoTaskMemFree(uri);                      return S_OK;                   }).Get(), &token);
               // Step 5 - Scripting
               // Schedule an async task to add initialization script that freezes the Object object                webviewWindow->AddScriptToExecuteOnDocumentCreated(L"Object.freeze(Object);", nullptr);
               // Schedule an async task to get the document URL                webviewWindow->ExecuteScript(L"window.document.URL;", 
Callback<ICoreWebView2ExecuteScriptCompletedHandler>(
                  [](HRESULT errorCode, LPCWSTR resultObjectAsJson) -> HRESULT {
                     LPCWSTR URL = resultObjectAsJson;                      //doSomethingWithURL(URL);                      return S_OK;
                  }).Get());
               // Step 6 - Communication between host and web content
               // Set an event handler for the host to return received message back to the web content               // Set an event handler for the host to return received message back to the web content
               webviewWindow->add_WebMessageReceived(Callback<ICoreWebView2WebMessageReceivedEventHandler>(                   [](ICoreWebView2* webview, ICoreWebView2WebMessageReceivedEventArgs* args) -> HRESULT {                      PWSTR message;
                     args->TryGetWebMessageAsString(&message);
                     // processMessage(&message);
                     webview->PostWebMessageAsString(message);
                     CoTaskMemFree(message);                      return S_OK;
                  }).Get(), &token);
               // Schedule an async task to add initialization script that                // 1) Add an listener to print message from the host
               // 2) Post document URL to the host
               webviewWindow->AddScriptToExecuteOnDocumentCreated(
                  L"window.chrome.webview.addEventListener(\'message\', event => alert(event.data));" \
                  L"window.chrome.webview.postMessage(window.document.URL);",                   nullptr);
               return S_OK;             }).Get());          return S_OK;
      }).Get()); Step 11 - Include the WebView2.h header in HelloWebView.cpp
Above, we did the following:
Cloned or downloaded an existing project that contains a standard C++ Windows desktop application.
Installed the Windows Implementation Library (WIL).
Installed the WebView2 SDK, to add WebView2 features.
HelloWebView.cppOptionally deleted the WebView2 code from .
Next, add WebView2 features to the app, as follows:
1. In Visual Studio, make sure the WebView2GettingStarted solution is open.
HelloWebView.cpp2. In Solution Explorer, expand Source Files and then click .
HelloWebView.cpp#include3. If the following code isn't already present, paste the following code in , after the last  line:
// include WebView2 header
#include "WebView2.h"
includeMake sure that the  section looks like the following:
...
#include <wrl.h>
#include <wil/com.h>
// include WebView2 header #include "WebView2.h"
4. Note the headers used:
wrl.h - Windows Runtime C++ Template Library (WRL) - A template library that provides a lowlevel way to author and use Windows Runtime components.
wil/com.h		 - Windows Implementation Libraries (WIL) - A header-only C++ library to make life
easier for developers on Windows through readable, type-safe C++ interfaces for common
Windows coding patterns.
WebView2.h		 - The WebView2 control is powered by Microsoft Edge, and enables you to embed
web technologies (HTML, CSS, and JavaScript) in your native applications.
Ctrl+Shift+S5. Select File > Save All () to save the project.
The source code file and project is ready to use and build against the WebView2 API.
Continue with the steps below.
 Step 12 - Build your empty sample app
F51. Select Debug > Start debugging () to build and run the project.
The sample app opens and displays an empty window:

You now have a running, empty Win32 desktop app with potential WebView2 capabilities.
2. Close the WebView sample app window.
Continue with the steps below.
 Step 13 - Add a WebView2 control in the parent window
Next, add a WebView2 control to the main window.
CreateCoreWebView2EnvironmentYou'll use the  method to set up the environment and locate the Microsoft Edge browser powering the control.
CreateCoreWebView2EnvironmentWithOptionsNote that if you want to override the following defaults, you can instead use the "with options" version of that method, :
 Browser location
User data folder Browser flags
CreateCoreWebView2EnvironmentUpon completion of the  method, you'll:
ICoreWebView2Environment::CreateCoreWebView2Controller	 Run the 	 method inside the 
ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler callback.
ICoreWebView2Controller::get_CoreWebView2	 Run the 	 method to get the associated WebView2 control.
Now to do the above, in the callback, you'll:
Set a few more settings.
Resize the WebView2 control to fill 100% of the parent window.
Then display the Bing.com website in the WebView2 control in your Win32 app.
HelloWebView.cpp1. In , locate the following code:
   UpdateWindow(hWnd);
   // <-- WebView2 sample code starts here -->
HelloWebView.cpp// <-- WebView2 sample code starts here -->1. If the following code isn't already present, paste the following code into . Paste the code in between the lines  and 
// <-- WebView2 sample code ends here -->:

// Step 3 - Create a single WebView within the parent window
// Locate the browser and set up the environment for WebView
CreateCoreWebView2EnvironmentWithOptions(nullptr, nullptr, nullptr,
   Callback<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>(
      [hWnd](HRESULT result, ICoreWebView2Environment* env) -> HRESULT {
            // Create a CoreWebView2Controller and get the associated CoreWebView2 whose parent is the main window hWnd
            env->CreateCoreWebView2Controller(hWnd, 
Callback<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>(
               [hWnd](HRESULT result, ICoreWebView2Controller* controller) -> HRESULT {                if (controller != nullptr) {                   webviewController = controller;
                  webviewController->get_CoreWebView2(&webviewWindow);                }
               // Add a few settings for the webview
               // The demo step is redundant since the values are the default settings                ICoreWebView2Settings* Settings;                webviewWindow->get_Settings(&Settings);
               Settings->put_IsScriptEnabled(TRUE);
               Settings->put_AreDefaultScriptDialogsEnabled(TRUE);
               Settings->put_IsWebMessageEnabled(TRUE);
               // Resize the WebView2 control to fit the bounds of the parent window                RECT bounds;
               GetClientRect(hWnd, &bounds);                webviewController->put_Bounds(bounds);
               // Schedule an async task to navigate to Bing                webviewWindow->Navigate(L"https://www.bing.com/");
               // 4 - Navigation events
               // 5 - Scripting
               // 6 - Communication between host and web content
               return S_OK;             }).Get());       return S_OK;
   }).Get());Ctrl+Shift+S2. Select File > Save All () to save the project.
 Build your Bing sample app 
1. Press F5 to build and run the project.
If you started by deleting all of the WebView2 code, at this point, you now have a Win32 window that's filled with a WebView2 control that's filled with webpage content:

2. Close the WebView sample app window.
Or, if you kept all of the WebView2 code, at this point, a pop-up WebView2 window with an alert dialog from Bing opens, over an empty WebView2 window. Click the OK button to close the Bing dialog box. Now the WebView2 control is filled by Bing page content:

3. If the WebView sample app window is open, close it.
Continue with the steps below.
 Step 14 - Navigation events
ICoreWebView2::NavigateIn the previous step, we discussed navigating to URL by using the  method. During navigation, WebView2 fires a sequence of events, which the host can listen for:
NavigationStarting1. 
SourceChanged2. 
ContentLoading3. 
HistoryChanged4. 
NavigationCompleted5. 
If you want more information now, in a new window or tab, see Navigation events for WebView2 apps.

In error cases, one or more of the following events may occur, depending on whether the navigation continued to an error webpage:

SourceChanged
ContentLoading
HistoryChangedNavigationStartingIf an HTTP redirect occurs, there are multiple  events in a row.

NavigationStartingAs an example of using navigation events, register a handler for the  event, to cancel any non-https (non-secure) requests, as follows.
HelloWebView.cpp1. If it's not already present, paste the following code into , below the Step 3 code:
// Step 4 - Navigation events
// register an ICoreWebView2NavigationStartingEventHandler to cancel any non-https navigation EventRegistrationToken token;
webviewWindow->add_NavigationStarting(Callback<ICoreWebView2NavigationStartingEventHandler>(    [](ICoreWebView2* webview, ICoreWebView2NavigationStartingEventArgs * args) -> HRESULT {       PWSTR uri;       args->get_Uri(&uri);       std::wstring source(uri);
      if (source.substr(0, 5) != L"https") {             args->put_Cancel(true);
      }
      CoTaskMemFree(uri);       return S_OK;    }).Get(), &token);Now the app doesn't open any non-https sites. You can use a similar mechanism to accomplish other tasks, such as restricting navigation to within your own domain.
Continue with the steps below.
 Step 15 - Scripting
Use host apps to inject JavaScript code into WebView2 controls at runtime. You can task WebView2 to run arbitrary JavaScript or add initialization scripts. The injected JavaScript applies to all new top-level documents and any child frames until the JavaScript is removed.
The injected JavaScript is run with specific timing:
Run it after the creation of the global object.
Run it before any other script included in the HTML document is run.
HelloWebView.cpp1. If the following code isn't present already, paste the following code into :
// Step 5 - Scripting
// Schedule an async task to add initialization script that freezes the Object object webviewWindow->AddScriptToExecuteOnDocumentCreated(L"Object.freeze(Object);", nullptr);
// Schedule an async task to get the document URL webviewWindow->ExecuteScript(L"window.document.URL;", Callback<ICoreWebView2ExecuteScriptCompletedHandler>(
   [](HRESULT errorCode, LPCWSTR resultObjectAsJson) -> HRESULT {
      LPCWSTR URL = resultObjectAsJson;       //doSomethingWithURL(URL);       return S_OK;
   }).Get());Ctrl+Shift+S2. Select File > Save All () to save the project.
ObjectNow, WebView2 freezes the  and returns the page document once.
 If code must be run in order, use callbacks 
The script injection APIs (and some other WebView2 APIs) are asynchronous. So, if code must be run in a specific order, you should use callbacks.
Continue with the steps below.
 Step 16 - Communication between host and web content
postMessageThe host and the web content can also communicate with each other through the  method. The web content running within a WebView2 control can post to the host through the window.chrome.webview.postMessage
ICoreWebView2WebMessageReceivedEventHandlermethod, and the message is handled by any registered  event handler on the host.
ICoreWebView2::PostWebMessageAsStringSimilarly, the host can message the web content through the  or 
ICoreWebView2::PostWebMessageAsJSONwindow.chrome.webview.addEventListener method, and the message is caught by handlers that are added from the  listener. This communication mechanism allows the web content to use
native capabilities by passing messages to ask the host to run native APIs.
As an example to understand the mechanism, the following steps occur when you try to output the document URL in WebView2:
1. The host registers a handler to return received message back to the web content.
2. The host injects a script to the web content that registers a handler to print message from the host.
3. The host injects a script to the web content that posts the URL to the host.
4. The handler of the host is triggered and returns the message (the URL) to the web content.
5. The handler of the web content is triggered and prints message from the host (the URL).

postMessageHave the host app and web content communicate through , as follows:
HelloWebView.cpp1. If it's not already present, paste the following code into :
// Step 6 - Communication between host and web content
// Set an event handler for the host to return received message back to the web content webviewWindow->add_WebMessageReceived(Callback<ICoreWebView2WebMessageReceivedEventHandler>(    [](ICoreWebView2* webview, ICoreWebView2WebMessageReceivedEventArgs * args) -> HRESULT {       PWSTR message;
      args->TryGetWebMessageAsString(&message);
      // processMessage(&message);
      webview->PostWebMessageAsString(message);
      CoTaskMemFree(message);       return S_OK;
   }).Get(), &token);
// Schedule an async task to add initialization script that // 1) Add an listener to print message from the host
// 2) Post document URL to the host
webviewWindow->AddScriptToExecuteOnDocumentCreated(
   L"window.chrome.webview.addEventListener(\'message\', event => alert(event.data));" \
   L"window.chrome.webview.postMessage(window.document.URL);", nullptr);Ctrl+Shift+S2. Select File > Save All () to save the project.
3. Press F5 to build and run the project.
The sample app first opens a pop-up window, which displays the URL that will be loaded, along with an OK button:

4. Click the OK button to dismiss the pop-window and continue to the URL:
http://www.bing.comThe WebView2 window now displays webpage content: the Bing website, .

5. When you are ready, close the WebView sample window.
Congratulations, you built your first WebView2 app! Your development environment is now set up for WebView2 app development, to include the WebView2 control in your Win32 apps. You've also had an introduction to WebView2 programming concepts.
 See also
developer.microsoft.com:
 Microsoft Edge WebView2 - initial introduction to WebView2 features at developer.microsoft.com.
Local pages:
WebView2 sample: Win32 C++ app
Manage user data folders
Sample Code for WebView2 - a guide to the samples in the WebView2Samples repo. Development best practices for WebView2 apps
WebView2Samples repo:
WebView2Samples repo
Win32 Sample Code - the code used in this tutorial.
WebView2 API Sample - a comprehensive example of WebView2 capabilities. WebView2Browser - a WebView2 sample app.
API Reference:
API Reference for WebView2 Win32 C++
WebView2 API reference - API Reference for each platform.
Libraries:
Windows Runtime C++ Template Library (WRL)
Windows Implementation Libraries (WIL) GitHub repo.

 
 Get started with WebView2 in WinForms apps
 	6/21/2022 • 13 minutes to read • Edit OnlineThis article covers how to set up your development tools and create an initial WebView2 app for the WinForms platform, and learn about WebView2 concepts along the way.
 Step 1 - Optionally download or clone the WebView2Samples repo
Do either of the following:
WebView2Samples Create a new project in Visual Studio, using the steps below. If you want to see the completed project, you can see the WinForms_GettingStarted directory in the  repo.
WebView2Samples Download or clone the 	 repo, open the completed project in Visual Studio, and follow the steps in this article to understand creating the WinForms project and understand the added WebView2 code.
The corresponding Get Started sample at GitHub: WinForms_GettingStarted/WinForms_GettingStarted.sln (no readme file).
 Step 2 - Install Visual Studio
Microsoft Visual Studio is required. Microsoft Visual Studio Code is not supported for this tutorial.
1. If Visual Studio isn't installed already, open the page Microsoft Visual Studio in a new window or tab, and install Visual Studio 2017 or later, such as Visual Studio 2022 Professional.
Then return here and continue below.
 Step 3 - Install a preview channel of Microsoft Edge
1. Install any Microsoft Edge Insider (preview) Channel (Beta, Dev, or Canary) on a supported operating system (OS):
Windows 7
Windows 8.1
Windows 10
Windows 11
We recommend using the Canary channel. The minimum required version is 82.0.488.0.
 Step 4 - Install the WebView2 Runtime (optional)
1. Optionally, install the WebView2 Runtime. See Microsoft Edge WebView2.
If unsure, skip this step; you can use the Microsoft Edge preview channel from the previous step instead.
If you want more information now, see Understand the different WebView2 SDK versions.
In a later step, you'll install the WebView2 SDK on your machine, if it's not installed already.
Continue with the steps below.
 
Step 5 - Create a single-window app
Start with a basic desktop project that contains a single main window.
1. Open Visual Studio.
2. Select File > New > Project.
The Visual Studio Open recent window appears:

3. On the right, click the Create a new project card.
The Visual Studio Create a new project window appears:

4. In the Search text box, paste or start typing the following:
C# Windows Forms App (.NET Framework)
Search results appear, listing project types.
5. Select the C# Windows Forms App (.NET Framework) card, and then click the Next button:

6. In the Project name text box, enter a project name. This tutorial article uses the name
WinForms_GettingStarted, like the repo's directory name for the completed project.
7. In the Location text box, enter a path, such as "C:\Users\username\Documents\MyWebView2Projects".
8. In the Framework dropdown list, select .NET Framework 4.7.2 or later, such as .NET Framework 4.8:

9. Click the Create button.
The Visual Studio window opens, showing the baseline WinForms project in the Solution Explorer, and showing a Form Designer window:

Ctrl+Shift+S10. Select File > Save All ().
F511. Select Debug > Start Debugging ().
An empty Form1 window opens, from the fresh WinForms project:

12. Close the Form1 window.
You now have an empty WinForms project that runs. Next, set up the project to add WebView2 content.
 Step 6 - Install the WebView2 SDK
For every WebView2 project, you use the NuGet package manager within Visual Studio to add the WebView2 SDK to the project. You install the Microsoft.Web.WebView2 SDK NuGet package for use by the current project.
Use NuGet to add the WebView2 SDK to the project, as follows:
1. In Solution Explorer, right-click the project name (not the solution name above it), and then select Manage NuGet Packages:

The NuGet Package Manager opens in Visual Studio.
2. Click the Browse tab in the upper left.
3. Clear the Include prerelease checkbox.
4. In the search bar, type WebView2, and then below the search bar, click Microsoft.Web.WebView2 to select it:

To zoom, right-click > Open image in new tab.
5. Click the Install (or Update) button. The Preview Changes dialog box opens:

6. Click the OK button.
Ctrl+Shift+S7. Select File > Save All () to save the project.
8. Close the NuGet Package Manager window.
F59. Select Debug > Start Debugging () to build and run the project.
The running project displays the same empty window as before:

10. Close the Form1 window.
You've added the WebView2 SDK to the project, but haven't added any WebView2 code to the project yet.
 Step 7 - Create a single WebView2 control
Now that the WebView2 SDK is installed for the WinForms project, add a WebView2 control to the app, as follows:
Form1.cs form already, but we'll add another, as Form2.csThe starter project has a , to see how to do that.
1. Select Project > Add Form (Windows Forms).
2. In the Add New Item window, on the left, select Visual C# Items > Windows Forms.
3. On the right, select Form (Windows Forms), and then click the Add button:

Form2.csThe project now has an additional form, with filename , shown in the Form Designer and in Solution Explorer:

4. Click the Form1 canvas. We won't use Form2.
5. Select View > Toolbox.
Here's where you add WebView2-specific content to the app:
6. In the Toolbox, click WebView2 Windows Forms Control to expand the options.
In Visual Studio 2017, by default, WebView2 isn't displayed in the Toolbox. To enable WebView2 to be displayed in the Toolbox, select Tools > Options > General > and set the Automatically Populate Toolbox setting to True.
Form2.cs7. In the Toolbox, click or drag the WebView2 control onto the Forms Designer canvas of the control you added, such as :

8. Drag the sides of the WebView2 control to make it fill almost all of the canvas.
9. Make sure the new WebView2 control on the form is selected. In the Properties panel, in the Design section, set the (Name) property to webView (lowercase 'w', capital 'V', no numeric suffix). The control might initially be named something else, such as webView21. Use the Categorized and Alphabetical sort option buttons as needed to find properties:

https://www.microsoft.com10. In the Properties panel, in the Misc section, set the Source property to . The
Source property sets the initial URL that will be displayed in the WebView2 control.
Ctrl+Shift+S11. Select File > Save All () to save the project.
12. Press F5 to build and run the project.
Alt+TabThe WebView2 control displays content from https://www.microsoft.com, in a WebView2 control in the Windows Forms form, with a Skip to main content link if you pressed  to switch to the window:

13. If needed, click the Skip to main content link.
The WebView2 control displays content from https://www.microsoft.com, in a WebView2 control in the Windows Forms form:

14. Close the Form1 window.
If you're working on a high-resolution monitor, you may need to configure your Windows Forms app for high DPI support.
 Step 8 - Add controls and process window resize events
Add more controls to your Windows Forms form from the toolbox, and then process window resize events, as follows.
1. Select View > Toolbox, or click the Toolbox tab on the left.
2. In the Toolbox, click Common Controls.
Add a text box control, as follows:
3. Drag the TextBox control onto the Form1.cs Form Designer canvas.
4. Make sure the TextBox control has focus.
5. In the Properties panel, in the Design section, change the (Name) (probably from textBox1) to addressBar.
Add a button control, as follows:
6. Drag a Button control onto the Form1.cs Form Designer canvas.
7. Make sure the button control has focus.
8. In the Properties panel, in the Design section, change the (Name) (probably from button1) to goButton.
9. In the Properties panel, in the bolded Appearance section (about 15 properties down), change the Text property (probably from button1) to Go!
Align the text box and the existing button, as follows:
10. Position the text box on the left side of the form, vertically aligned with the button, as shown below:

11. Resize the text box as shown:

Form1.cs12. Click View > Code to open .
Form_ResizeDefine  to keep the controls in place when the app window is resized, as follows.
13. Delete the following code:
   public Form1()
{
   InitializeComponent();
}
14. Paste this code in the same location:
public Form1()
{
   InitializeComponent();
   this.Resize += new System.EventHandler(this.Form_Resize);
}
private void Form_Resize(object sender, EventArgs e)
{
   webView.Size = this.ClientSize - new System.Drawing.Size(webView.Location);    goButton.Left = this.ClientSize.Width - goButton.Width;    addressBar.Width = goButton.Left - addressBar.Left; }

Ctrl+Shift+S15. Select File > Save All () to save the project.
16. Press F5 to build and run the project.
A Form1 window appears, displaying webpage content from https://www.microsoft.com:

Alt+TabIf you press  to switch to the Form1 window, you may need to click the Skip to main content link that's added.
17. Scroll the window up and down with the mouse wheel. The input controls remain in place.
18. Drag the corner of the window to resize it. The text box changes width.
19. Close the Form1 window.
 Step 9 - Navigation
Enable users to change the URL that the WebView2 control displays, by reading the text entered in the text box, to serve as an address bar.
Form1.cs1. Select View > Code so that  is open in the code editor.
Form1.cs, add the CoreWebView22. In  namespace by inserting the following code at the top of the file as line 1:
using Microsoft.Web.WebView2.Core;
Go! button. The goButton_ClickForm1.cs3. Select the Form1.cs [Design] tab, then double-click the  method is added in the  file.
goButton_Click4. Paste the following code into the file to replace the empty  method, so that the method body is as follows:
private void goButton_Click(object sender, EventArgs e)
{
   if (webView != null && webView.CoreWebView2 != null)
   {
      webView.CoreWebView2.Navigate(addressBar.Text);    }
}
goButton_ClickNow the  function will navigate the WebView2 control to the URL that's entered in the address bar text box.
Ctrl+Shift+S5. Select File > Save All () to save the project.
6. Press F5 to build and run the project.
https, such as https://www.bing.com7. In the address bar, enter a URL that starts with , and then click the
Go! button:

The WebView2 control shows the webpage content for the URL.
http, such as www.bing.com8. In the address bar, enter a string that doesn't start with , and then click the Go! button.

ArgumentException is thrown if the URL doesn't start with http:// or https://An .
9. Select Debug > Stop Debugging, or click Continue. The Form1 window closes.
 Step 10 - Navigation events
During webpage navigation, the WebView2 control raises events. The app that hosts WebView2 controls listens for the following events:

NavigationStarting
SourceChanged
ContentLoading
HistoryChanged
NavigationCompletedFor more information, see Navigation events for WebView2 apps.

When an error occurs, the following events are raised and may depend on navigation to an error webpage:

SourceChanged
ContentLoading
HistoryChangedNOTE
NavigationStartingIf an HTTP redirect occurs, there are multiple  events in a row.NavigationStartingTo demonstrate how to use the events, start by registering a handler for  that cancels any requests not using HTTPS.
Form1.cs, update the Form1()1. In  constructor to match the following code, and also add the 
EnsureHttps(sender, args) function below the constructor, as follows:
public Form1()
{
   InitializeComponent();
   this.Resize += new System.EventHandler(this.Form_Resize);
   webView.NavigationStarting += EnsureHttps;
}
void EnsureHttps(object sender, CoreWebView2NavigationStartingEventArgs args) {
   String uri = args.Uri;    if (!uri.StartsWith("https://"))
   {
      args.Cancel = true;
   }
}
EnsureHttps is registered as the event handler on the NavigationStartingIn the constructor,  event on the WebView2 control.
Ctrl+Shift+S2. Select File > Save All () to save the project.
3. Press F5 to build and run the project.
https, such as https://www.bing.com4. In the address bar, enter a URL that starts with , and then click the
Go! button.
The https URL loads; the web content changes from the default, Microsoft.com, to Bing.com.
http, such as http://www.microsoft.com5. In the address bar, enter a URL that starts with , and then click the Go! button.
The http URL doesn't load; the Bing.com webpage remains displayed. In contrast, entering 
http://www.microsoft.com into Microsoft Edge works; it redirects to the https site for Microsoft.com.
https, such as https://www.microsoft.com6. In the address bar, enter a URL that starts with , and then click the Go! button.
The https URL loads; the Microsoft.com webpage now appears, since you added the 's' after 'http'.
 Step 11 - Scripting
You can use host apps to inject JavaScript code into WebView2 controls at runtime. You can task WebView2 to run arbitrary JavaScript or add initialization scripts. The injected JavaScript applies to all new top-level documents and any child frames until the JavaScript is removed. The injected JavaScript runs with specific timing.
Run the injected JavaScript after the creation of the global object.
Run the injected JavaScript before any other script included in the HTML document is run.
For example, add a script that sends an alert when a user navigates to a non-HTTPS site, as follows:
EnsureHttps function to add the following line that contains ExecuteScriptAsync1. Modify the :
void EnsureHttps(object sender, CoreWebView2NavigationStartingEventArgs args) {
   String uri = args.Uri;
   if (!uri.StartsWith("https://"))
   {
      webView.CoreWebView2.ExecuteScriptAsync($"alert('{uri} is not safe, try an https link')");       args.Cancel = true;
   }
}The added line injects a script into the web content that uses the ExecuteScriptAsync method. The added script is:
alert('{uri} is not safe, try an https link')
2. Select File > Save All (Ctrl+Shift+S) to save the project.
3. Press F5 to build and run the project.
http://www.bing.com (with http instead of https4. Try to go to  prefix).
The app displays an alert:

 Step 12 - Communication between host and web content
postMessageThe host and web content can use  to communicate with each other as follows:
window.chrome.webview.postMessageWebMessageReceived Web content in a WebView2 control can use  to post a message to the host. The host handles the message using any registered  on the host.
CoreWebView2.PostWebMessageAsString Hosts post messages to web content in a WebView2 control using 
CoreWebView2.PostWebMessageAsJSONor . These messages are caught by handlers added to 
window.chrome.webview.addEventListener.
The communication mechanism passes messages from web content to the host using native capabilities.
In your project, when the WebView2 control navigates to a URL, it displays the URL in the address bar and alerts the user of the URL displayed in the WebView2 control.
Form1.cs, update the Form1() constructor and create an InitializeAsync()1. In  function below it,
matching the following code:
public Form1()
{
   InitializeComponent();
   this.Resize += new System.EventHandler(this.Form_Resize);    webView.NavigationStarting += EnsureHttps;
   InitializeAsync();
}
async void InitializeAsync()
{
   await webView.EnsureCoreWebView2Async(null); }InitializeAsyncCoreWebView2The  function awaits EnsureCoreWebView2Async, because the initialization of  is asynchronous.
WebMessageReceivedCoreWebView2Next, register an event handler to respond to . This event handler will be registered after  is initialized.
Form1.cs, update InitializeAsync, and add UpdateAddressBar2. In  below it, as follows:
async void InitializeAsync()
{
   await webView.EnsureCoreWebView2Async(null);
   webView.CoreWebView2.WebMessageReceived += UpdateAddressBar;
}
void UpdateAddressBar(object sender, CoreWebView2WebMessageReceivedEventArgs args) {
   String uri = args.TryGetWebMessageAsString();    addressBar.Text = uri;
   webView.CoreWebView2.PostWebMessageAsString(uri); }CoreWebView2Next, for WebView2 to send and respond to the web message, after  is initialized, the host will inject a script in the web content to:
postMessageSend the URL to the host using .
Register an event handler to display a message sent from the host, in an alert box, before displaying webpage content.
Form1.cs, update InitializeAsync1. In  to match the following code:
async void InitializeAsync()
{
   await webView.EnsureCoreWebView2Async(null);
   webView.CoreWebView2.WebMessageReceived += UpdateAddressBar;
   await 
webView.CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsync("window.chrome.webview.postMessage(wind ow.document.URL);");    await 
webView.CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsync("window.chrome.webview.addEventListener
(\'message\', event => alert(event.data));"); }Ctrl+Shift+S2. Select File > Save All () to save changes.
3. Press F5 to build and run the project.
https://www.bing.com4. Enter a URL, such as :

An alert initially appears, showing the resulting URL that's sent from the host website.
5. Click the OK button.
The WebView2 control now displays the new URL in the address bar, and webpage content from the URL is displayed in the WebView2 control in the WinForms window:
When the app starts, the default URL is 
https://www.microsoft.com/en-us/address shows the locale, such as .
https://www.bing.com	 If you enter 	, the resulting address is a variant, such as 
https://www4.bing.com/?form=DCDN.
Congratulations, you built your first WebView2 app!
 See also
developer.microsoft.com:
 Microsoft Edge WebView2 - initial introduction to WebView2 features at developer.microsoft.com.
Local pages:
WebView2SamplesWebView2 sample: WinForms browser app - Demonstrates more WebView2 APIs than the present tutorial.
Manage user data folders
Sample Code for WebView2 - a guide to the  repo.
Development best practices for WebView2 apps
See also in Introduction to Microsoft Edge WebView2 - Conceptual and how-to articles about building and deploying WebView2 apps.
GitHub:
 WebView2Samples repo - a comprehensive example of WebView2 capabilities.
API Reference:
API Reference: Microsoft.Web.WebView2.WinForms Namespace WebView2 API reference
NuGet:
 Microsoft.Web.WebView2 SDK at nuget.org

 
 
Get started with WebView2 in WinUI 2 (UWP) apps (public preview)
 	6/21/2022 • 8 minutes to read • Edit OnlineIn this tutorial, you:
Set up your development tools for creating UWP apps that use WebView2 to display web content.
Create an initial WinUI 2 (UWP) app.
Add a WebView2 control that displays webpage content.
Learn about WebView2 concepts along the way.
Corresponding Get Started sample at GitHub: none; WinUI 3: Getting Started with WebView2 in WinUI3 (WinUI_Sample/WinUI_Sample.sln)
The Microsoft.UI.Xaml (WinUI 2) package is part of the Windows UI Library. This package provides Windows UI features, including:
UWP XAML controls
Dense control styles
Fluent styles and materials.
WinUI 2 supports UWP only. These controls are backward-compatible.
Follow the major Step sections in sequence, below.
 Step 1 - Download a preview channel of Microsoft Edge
For full API compatibility of the Microsoft.UI.Xaml (WinUI 2) package and WebView2, this tutorial uses a prerelease version of WebView2 SDK, together with a preview channel of Microsoft Edge. (This tutorial doesn't use the other supported combination, which is a release version of WebView2 SDK + the WebView2 Runtime.)
1. If you haven't already, download any Microsoft Edge Insider (preview) Channel (Beta, Dev, or Canary) on a supported operating system (OS):
Windows 7
Windows 8.1
Windows 10
Windows 11
We recommend using the Canary channel of Microsoft Edge. The minimum required version is 82.0.488.0.
 Step 2 - Install Visual Studio
Visual Studio 2019 version 16.9 or later is required, for this tutorial. Visual Studio 2017 isn't supported. If you need information about Visual Studio 2019 version 16.9, in a new window or tab, see Microsoft Visual Studio 2019 version 16.9.
1. If a suitable version of Microsoft Visual Studio isn't installed already, in a new window or tab, see Install
Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that page to do a basic
default installation of Visual Studio.
Then return to this page and continue below.
2. Relevant for Visual Studio 2019: If Visual Studio doesn't show line numbers in the code editor, turn on line numbers. To do this, select Tools > Options > Text Editor > All Languages > Line numbers. Then click OK.
 Step 3 - Install .NET desktop, C++ desktop, and UWP development tools
1. Open Microsoft Visual Studio. The opening option window appears:

2. In the lower right, click Continue without code. Visual Studio opens, empty:

3. Select Tools > Get Tools and Features. The Visual Studio Installer window opens, and then the Modifying Visual Studio window opens over it:

If the Modifying Visual Studio window isn't open, in the Visual Studio Installer window, click the Modify button.
1. On the Workloads tab, scroll to and click the following cards, to select them; make sure a checkmark is on each of these cards:
.NET desktop development
Desktop development with C++
Universal Windows Platform development
2. On the right, in the Installation details section, expand Universal Windows Platform development, and then select C++ (v142) Universal Windows Platform tools or v143:

To zoom, right-click > Open image in new tab.
3. Click the Modify button.
A User Account Control window appears, asking "Do you want to allow this app to make changes to your device? Visual Studio Installer. Verified publisher: Microsoft Corporation. File origin: Hard drive on this computer. Show more details (button)".
4. Click the Yes button.
5. A dialog box appears, "Before we get started, close Visual Studio":

6. Click the Continue button.
Visual Studio downloads, verified, and installs the selected packages:

This can take several minutes. In a new window or tab, you can check out a top-level overview at Microsoft Edge WebView2 - an initial introduction to WebView2 features at developer.microsoft.com.
When Visual Studio Installer is finished, return to this page and continue with the steps below.
7. Close the Visual Studio Installer window.
The Visual Studio window remains empty.
 Step 4 - Create a UWP app
1. If Visual Studio is open, select File > New > Project.
Or, if Visual Studio is closed, open it, and then in the startup screen of Visual Studio, click the Create a new project card:

The Create a new project dialog box opens.
2. In the Search for templates text box at the top, enter C# Blank App (Universal Windows), and then select the C# Blank App (Universal Windows) card:

3. Click the Next button.
The Configure your new project dialog appears, for a Blank App (Universal Windows):

MyUWPGetStartApp4. In the Project name text box, enter a project name, such as .
C:\Users\myusername\Documents\MyWebView2Projects5. In the Location text box, enter a path, such as .
6. Click the Create button.
The New Universal Windows Platform Project dialog box appears:

7. Accept the defaults, and click the OK button.
8. If the Developer Mode section appears, in that section, click On. If you haven't already set your machine to Developer Mode, the Use developer features dialog box opens, to confirm turning on developer mode.
9. Click Yes to turn on Developer Mode for your machine, and then close the Settings window.
Visual Studio displays the newly created solution and project:

Next, you set up this new WinUI 2 (UWP) project to host the WebView2 control and use the WebView2 API.
 Step 5 - Install the prerelease WebView2 SDK
1. In Solution Explorer, right-click the project (not the solution node above it), and then select Manage NuGet Packages.
The NuGet Package Manager panel opens in Visual Studio.
2. In the NuGet Package Manager, click the Browse tab.
3. To the right of the search text box, select the Include prerelease check box.
4. In the search text box, enter Microsoft.Web.WebView2.
The Microsoft.Web.WebView2 card appears in the search results.
5. Click the Microsoft.Web.WebView2 card below the search box.
6. On the right, in the Version dropdown list, make sure Latest prerelease is selected:

To zoom, right-click > Open image in new tab.
7. Click the Install (or Update) button.
The Preview Changes dialog box appears:

8. Click the OK button.
The WebView2 SDK is now installed for this project.
 Step 6 - Install the prerelease WinUI 2 SDK (Microsoft.UI.Xaml)
Next, you install the prerelease Microsoft.UI.Xaml package. Microsoft.UI.Xaml is WinUI 2.
1. If the NuGet Package Manager panel isn't open: in Solution Explorer, right-click the project (not the solution node above it), and then select Manage NuGet Packages.
The NuGet Package Manager panel opens in Visual Studio.
2. In the NuGet Package Manager, click the Browse tab.
3. Select the Include prerelease check box.
4. In the Search box, enter Microsoft.UI.Xaml, and then select the Microsoft.UI.Xaml card below the search box.
5. On the right, make sure that the Version is Latest prerelease.
6. Click the Install (or Update) button:

To zoom, right-click > Open image in new tab.
The Preview Changes dialog box appears:

7. Click the OK button.
8. The License Acceptance dialog box appears:

readme.txt9. Click the I Accept button. In Visual Studio, the  file is displayed, saying that you've installed the WinUI package:

The readme lists some lines of code that are similar to what we'll add.
10. Select File > Save All.
You've now installed the Microsoft.UI.Xaml package, which is WinUI (WinUI 2), for your project.
 Step 7 - Instantiate the WebView2 control in XAML code
Now you are ready to add WebView2 code to the project. First, add a namespace reference for the WebView2 control, as follows:
1. In Solution Explorer, expand your project, and then click MainPage.xaml.
MainPage.xaml opens in a designer with a code editor below it.
<Page> element's open tag <Pagexmlns:2. In the code editor, in the , add the following attribute, below the other  attributes:
xmlns:control="using:Microsoft.UI.Xaml.Controls"
Now, add a WebView2 control to the XAML grid, as follows:
MainPage.xaml file, in the <Grid>1. In the  element (which contains no other elements yet), add the following element:
<control:WebView2 x:Name="wv2" Source="https://bing.com"/>
Ctrl+S2. Press  to save the file.
MainPage.xamlAbove the  file in the code editor, a preview of the WebView2 content might be displayed, or it might remain blank (white) until you first run the app:

To zoom, right-click > Open image in new tab.
 Build and test the WebView2 project 
1. Click Debug > Start Debugging. The app window opens, briefly showing the WebView2 WebUI grid:

2. After a moment, the app window shows the Bing website in the WebView2 control for WebUI 2.
The sample app with WebView2 control displays the Bing website:

3. In Visual Studio, click Debug > Stop Debugging to close the app window.
Now you can change the content of the WebView2 control to add your own content.
 Step 8 - Navigation events
Next, learn about navigation events, which are essential for WebView2 apps.
https://bing.comThe app initially navigates to .
1. In a new window or tab, read Navigation events for WebView2 apps, and then return to this page.
Congratulations, you built your first WebView2 app!
 Status of WebView2 functionality on WinUI 2 (UWP)
The WebView2 WinUI 2 (UWP) control is in development. The following features haven't been implemented, or have issues:
Download UI.
AddHostObject Although the Download UI feature currently doesn't work, this feature might show up automatically in your app's UI after the issue is fixed. To maintain compatibility, you should manually disable the Download UI feature by intercepting the download starting event. Autofill UI.
File Picker Dialog.
Background Audio.
Print to PDF.
Print Preview.
Adding COM Objects (WinRT ).
Playready DRM.
Service Workers on Windows devices before 20H2.
Package summary:
 Overview of the NuGet package for Microsoft.UI.Xaml
 See also
Local pages:
WebView2SamplesWebView2 sample: WinUI 2 (UWP) browser app
Manage user data folders
Sample Code for WebView2 - a guide to the  repo.
Development best practices for WebView2 apps
See also in Introduction to Microsoft Edge WebView2 - Conceptual and how-to articles about building and deploying WebView2 apps.
GitHub:
WebView2Samples repo
WebView2 UWP Sample App - a comprehensive example of WebView2 capabilities. Issues - microsoft-ui-xaml repo - to enter WinUI-specific feature requests or bugs.
WinRT API Reference for WinUI 2 (UWP):
Core
COM Interop
WebView2 API Reference - each platform's API Reference
WinRT API Reference: Core
WinRT API Reference: COM Interop

 
 
Get started with WebView2 in WinUI 3 (Windows App SDK) apps
 	6/21/2022 • 7 minutes to read • Edit OnlineThis article covers how to set up your development tools and create an initial WebView2 app for WinUI 3 (Windows App SDK), and learn about WebView2 concepts along the way.
 Corresponding Get Started sample at GitHub: Getting Started with WebView2 in WinUI3 (WinUI3_GettingStarted/WinUI_Sample.sln)
 Step 1 - Install Visual Studio and the Windows App SDK
Even if you have Visual Studio installed, read the following page and possibly update your software.
1. In a new window or tab, open the page Install tools for the Windows App SDK and then follow the steps on that page, to install Microsoft Visual Studio, such as Visual Studio 2022.
1. If needed, in a new window or tab, see Install Visual Studio in Set up your Dev environment for WebView2.
Return from that page and continue the steps below.
Turning on Developer Mode:
1. When Visual Studio opens at some point during the present article's steps, you might be prompted to turn on Developer Mode for your computer. For more information, if needed, see Enable your device for development, at Build desktop apps for Windows.
 Step 2 - Install a preview channel of Microsoft Edge
1. Install the WebView2 Runtime or any Microsoft Edge preview channel (Beta, Dev, or Canary) installed on Windows 10 version 1803 (build 17134) or later.
Return from that page and continue the steps below.
 Step 3 - Create the project in Visual Studio
To create a WebView2 app, start by creating a basic desktop project, to create a desktop app that contains a single main window:
1. Open Visual Studio (not Visual Studio Code).
2. In Visual Studio, click Create a new project.
3. In the project filter menus, choose C#. Windows, and WinUI.

4. Click Blank App, Packaged (WinUI in Desktop) > Next.
5. Enter a project name.
6. Change Location and Solution name default values as needed.
7. Click Create.
8. In New Universal Windows Platform Project, select the following values:
Target version: Windows 10, version 1903 (build 18362) or later.
Minimum version: Windows 10, version 1803 (build 17134).
9. Click OK.
The New Universal Windows Platform Project dialog with selected values for Target version and Minimum version:

Solution Explorer displays the two new projects that were generated:
App.xaml.cs file defines an ApplicationMainWindow.xaml.cs file defines a MainWindow Your project name (Desktop). The Desktop project contains the code for your app. The  class that represents your app instance. The  class that represents the main window displayed by
Microsoft.UI.Xamlyour app instance. The classes derive from types in the  namespace of WinUI.
 Your project name (Package). The Package project is a Windows Application Packaging Project that is configured to build the app into an MSIX package for deployment. The project contains the package manifest for your app, and is the startup project for your solution by default. For more information, see Set up your desktop application for MSIX packaging in Visual Studio and Package manifest schema reference for Windows 10.
MainWindow.xaml10. In Solution Explorer, open .
Ctrl+Shift+S11. Select File > Save All () to save the project.
12. Press F5 to build and run the project.
 Step 4 - Add a WebView2 control to your project
The WindowsAppSDK includes the WebView2 SDK and control, and you shouldn't need to separately install the
MainWindow.xaml and MainWindow.xaml.csWebView2 SDK. Edit the  files to a WebView2 control to the sample app, as follows.
MainWindow.xaml1. In Visual Studio, in Solution Explorer, select  to open it in the code editor.
Add the WebView2 XAML namespace, as follows:
MainWindow.xaml file, insert the following line inside the <Window/>2. In the  tag:
xmlns:controls="using:Microsoft.UI.Xaml.Controls"
MainWindow.xamlMake sure your code in  is similar to the following:
<Window
      x:Class="WinUI_Sample.MainWindow"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"       xmlns:local="using:WinUI_Sample"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"       xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"       mc:Ignorable="d"
      xmlns:controls="using:Microsoft.UI.Xaml.Controls"       >
      <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
      <Button x:Name="myButton" Click="myButton_Click">Click Me</Button>
      </StackPanel>
</Window><StackPanel> tags with the following code. The Source3. To add the WebView2 control, replace the property sets the initial URI that's displayed in the WebView2 control.
<Grid>
   <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
   </Grid.RowDefinitions>
   <Grid.ColumnDefinitions>
      <ColumnDefinition Width="*"/>       <ColumnDefinition Width="Auto"/>
   </Grid.ColumnDefinitions>
   <controls:WebView2 x:Name="MyWebView"  Grid.Row="1" Grid.ColumnSpan="2"
      Source="https://www.microsoft.com" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
</Grid>MainWindow.xaml.cs4. In , comment out the following line:
   // myButton.Content = "Clicked";
5. Select File > Save All (Ctrl+Shift+S), to save the project.
6. Press F5, to build and run the project.
7. Make sure your WebView2 control displays https://www.microsoft.com.
The sample application with WebView2 control displays the Microsoft website, https://www.microsoft.com:

 Step 5 - Add navigation controls
To allow users to control the webpage that is displayed in your WebView2 control, add an address bar to the sample app, as follows:
MainWindow.xaml, paste the following code inside the <Grid> element that contains the WebView21. In element:
   <TextBox Name="addressBar" Grid.Column="0"/>
   <Button x:Name="myButton" Grid.Column="1" Click="myButton_Click">Go</Button>
<Grid> element in the MainWindow.xamlMake sure your  file matches the following:
<Grid>
   <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
   </Grid.RowDefinitions>
   <Grid.ColumnDefinitions>
      <ColumnDefinition Width="*"/>       <ColumnDefinition Width="Auto"/>
   </Grid.ColumnDefinitions>
   <TextBox Name="addressBar" Grid.Column="0"/>
   <Button x:Name="myButton" Grid.Column="1" Click="myButton_Click">Go</Button>
   <WebView2 x:Name="MyWebView"  Grid.Row="1" Grid.ColumnSpan="2"
      Source="https://www.microsoft.com" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
</Grid>MainWindow.xaml.cs, copy the following code into myButton_Click2. In . This code navigates the WebView2 control to the URL entered in the address bar.
private void myButton_Click(object sender, RoutedEventArgs e)
{    try
   {
      Uri targetUri = new Uri(addressBar.Text);
      MyWebView.Source = targetUri;
   }
   catch (FormatException ex)
   {
      // Incorrect address entered.
   }
}Ctrl+Shift+S3. Select File > Save All () to save the project.
4. Press F5 to build and run the project.
https://www.bing.com5. Enter a new URL in the address bar, and then choose Go. For example, enter .
The sample app displays the Bing website. The address bar displays the URL https://www.bing.com:

bing.com6. Enter an incomplete URL in the address bar, such as .
ArgumentException exception is thrown, because the URL doesn't start with http:// or https://An .
7. Close the app.
 Step 6 - Navigation events
In this section, you add code to import the WebView2 Core library.
MainWindow.xaml.cs1. Add the following line to the top of :
using Microsoft.Web.WebView2.Core;
Apps that host WebView2 controls listen for the following events that are raised by WebView2 controls during webpage navigation:

NavigationStarting
SourceChanged
ContentLoading
HistoryChanged
NavigationCompletedNOTE
NavigationStartingIf an HTTP redirect occurs, there are multiple  events in a row.For more information, see Navigation events for WebView2 apps.
When errors occur, the following events are raised, and an error webpage might be displayed:

SourceChanged
ContentLoading
HistoryChangedNavigationStartingAs an example of how to use the events, register a handler for  that cancels any nonHTTPS requests, as follows:
MainWindow.xaml.cs, modify the constructor to register EnsureHttps, and add the EnsureHttps2. In function so that it matches the following:
public MainWindow()
{
   InitializeComponent();
   MyWebView.NavigationStarting += EnsureHttps;
}
private void EnsureHttps(WebView2 sender, CoreWebView2NavigationStartingEventArgs args)
{
   String uri = args.Uri;
   if (!uri.StartsWith("https://"))
   {
      args.Cancel = true;
   }    else    {
      addressBar.Text = uri;
   }
}Ctrl+Shift+S3. Select File > Save All () to save the project.
4. Press F5 to build and run the project.
http://microsoft.com5. Enter an HTTP URL, such as .
Navigation is blocked to HTTP sites.
https://microsoft.com6. Enter an HTTPS URL, such as .
Navigation is allowed for HTTPS sites.
 WinRT CoreWebView2 object availability 
CoreWebView2The WinRT  object might not be available with the release of the WebView2 API. The WebView2 Spec lists which of the APIs are available for WebView2.
 Step 7 - Scripting
You can use host apps to inject JavaScript code into WebView2 controls at runtime. You can task WebView2 to run arbitrary JavaScript or add initialization scripts. The injected JavaScript applies to all new top-level documents and any child frames until the JavaScript is removed. The injected JavaScript is run with specific timing, to either:
Run the injected JavaScript after the creation of the global object.
Run the injected JavaScript before running any other script that's included in the HTML document.
As an example, next, you add scripts that send an alert when a user tries to open non-HTTPS sites. To do this, you inject a script into the web content that uses ExecuteScriptAsync.
EnsureHttps1. Modify the  function as follows:
private void EnsureHttps(WebView2 sender, CoreWebView2NavigationStartingEventArgs args)
{
   String uri = args.Uri;
   if (!uri.StartsWith("https://"))
   {
      MyWebView.ExecuteScriptAsync($"alert('{uri} is not safe, try an https link')");       args.Cancel = true;
   }    else    {
      addressBar.Text = uri;
   }
}Ctrl+Shift+S2. Select File > Save All () to save the project.
3. Press F5 to build and run the project.
http://www.bing.com4. Try to open a non-HTTPS URL, such as .
uriThe app's WebView2 control displays an alert dialog for non-HTTPS websites, saying that the non-HTTPS  is not safe:

Congratulations, you built your first WebView2 app!
 See also
developer.microsoft.com:
 Microsoft Edge WebView2 - initial introduction to WebView2 features at developer.microsoft.com.
Local pages:
WebView2SamplesIntroduction to Microsoft Edge WebView2 - overview of features.
See also in Introduction to Microsoft Edge WebView2.
Manage user data folders
Sample Code for WebView2 - a guide to the  repo.
Development best practices for WebView2 appsDevelopment best practices
GitHub:
Getting Started with WebView2 in WinUI3
Spec: The WebView2 Xaml control - the WinUI 3.0 version of the WebView2 control. microsoft-ui-xaml repo > Issues - to enter WinUI-specific feature requests or bugs.

 
 Get started with WebView2 in WPF apps
 	6/21/2022 • 8 minutes to read • Edit OnlineThis article covers how to set up your development tools and create an initial WebView2 app for Windows Presentation Foundation (WPF), and learn about WebView2 concepts along the way.
 Corresponding Get Started sample at GitHub: Getting Started with WebView2 in WPF (WPF_GettingStarted/WPFSample.sln)
 Step 1 - Install Visual Studio
This tutorial requires Microsoft Visual Studio, not Microsoft Visual Studio Code.
1. Install Visual Studio 2017 or later. You can accept the defaults.
 Step 2 - Install a preview channel of Microsoft Edge
1. Download any Microsoft Edge Insider (preview) Channel (Beta, Dev, or Canary) on a supported operating system (OS):
Windows 7
Windows 8.1
Windows 10
Windows 11
We recommend using the Canary channel of Microsoft Edge. The minimum required version is 82.0.488.0.
 Step 3 - Create a single-window WebView2 app
Start with a basic desktop project that contains a single main window.
1. Open Microsoft Visual Studio.
2. In the opening panel click Create new project. Or, in the main Visual Studio window, select File > New > Project.
WPF App3. Search for .
WPF AppThe Create a new project panel shows filtered results for  search results.
4. Click either the WPF Application card (shown first below) to use .NET Core/5/6, or the WPF App (.NET Framework) card (shown second below) to use .NET Framework, and then click Next:
The highlighted card in the following image is WPF Application: .NET Core WPF Application:

Alternatively, the highlighted card in the following image is WPF App (.NET Framework): Windows Presentation Foundation client application:

The Configure your new project WPF application dialog box appears.

5. Enter values for Project name and Location, and then click Next.
The Additional information dialog box appears, with a Target Framework dropdown list:

6. Select .NET Core 3.1, 5.0, 6.0, or later (not 3.0). Then click Next.
The Configure your new project dialog box appears, for WPF App (.NET framework):

7. Enter values for Project name and Location.
8. In the Framework dropdown list, select .NET Framework 4.6.2 or later.
9. Click the Create button.
Visual Studio creates the project.
 Step 4 - Install the WebView2 SDK
Use NuGet to add the WebView2 SDK to the project.
1. In Solution Explorer, right-click the project name, and then select Manage NuGet Packages:

(The above image is supposed to show the WPF project instead of the WinForms project.)
Microsoft.Web.WebView22. In the upper left, click the Browse tab. In the search bar, type , then click the Microsoft.Web.WebView2 card.
The NuGet package manager dialog box displays search results, including a Microsoft.Web.WebView2 card. The dialog box has a version number and Install button.

3. Accept the default version, and then click the Install button.
4. In the Preview Changes dialog box, click OK.
5. Select File > Save All to save the project.
6. Press F5 to build and run the project.
The project runs, and displays an empty window. This verifies that WebView2 is installed and working, although WebView2 has no content to display yet:

 Step 5 - Create a single WebView2 control
Add a WebView2 control to your app.
MainWindow.xaml<Window/>1. In the  file, to add the WebView2 XAML namespace, insert the following line inside the  tag:
xmlns:wv2="clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf"
MainWindow.xaml2. Make sure the code in  looks like the following code:
<Window x:Class="WPF_Getting_Started.MainWindow"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"       xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"       xmlns:d="http://schemas.microsoft.com/expression/blend/2008"       xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"       xmlns:local="clr-namespace:{YOUR PROJECT NAME}"
      xmlns:wv2="clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf"       mc:Ignorable="d"
      Title="MainWindow"
      Height="450"
      Width="800"
>
   <Grid>
   </Grid>
</Window>
<Grid> tags with the following code. The Source3. To add the WebView2 control, replace the  property sets the initial URI displayed in the WebView2 control.
<DockPanel>
   <wv2:WebView2 Name="webView"
                  Source="https://www.microsoft.com"
   />
</DockPanel>
4. Select File > Save All to save the project.
5. Press F5 to build and run the project.
6. Make sure your WebView2 control displays https://www.microsoft.com:

 Step 6 - Navigation
Enable users to change the URL that the WebView2 control displays, by adding an address bar to the app.
MainWindow.xaml<DockPanel>1. In the  file, add an address bar by copying and pasting the following code inside the  that contains the WebView2 control. Keep the existing code below the new snippet.
<DockPanel DockPanel.Dock="Top">
    <Button x:Name="ButtonGo"
              DockPanel.Dock="Right"
              Click="ButtonGo_Click"
              Content="Go"
    />
    <TextBox Name="addressBar"/>
</DockPanel>
<DockPanel> section of the MainWindow.xaml2. Make sure the  file matches the following code:
<DockPanel>
    <DockPanel DockPanel.Dock="Top">
        <Button x:Name="ButtonGo" DockPanel.Dock="Right" Click="ButtonGo_Click" Content="Go"/>
        <TextBox Name = "addressBar"/>
    </DockPanel>
    <wv2:WebView2 Name = "webView"
                  Source = "https://www.microsoft.com"
    />
</DockPanel>
MainWindow.xaml.cs, to add the CoreWebView23. In  namespace, insert the following code at the top of the file:
using Microsoft.Web.WebView2.Core;
MainWindow.xaml.csfile, copy the following code to create the ButtonGo_Click4. In the  method. This code navigates the WebView2 control to the URL entered in the address bar.
private void ButtonGo_Click(object sender, RoutedEventArgs e)
{
    if (webView != null && webView.CoreWebView2 != null)
    {
        webView.CoreWebView2.Navigate(addressBar.Text);
    }
}
Public MainWIndow5. Paste the code directly after the  declaration, as shown in the following code:
namespace WpfApp1
{
   /// <summary>
   /// Interaction logic for MainWindow.xaml
   /// </summary>
   public partial class MainWindow : Window
   {
      public MainWindow()
      {
            InitializeComponent();
      }
      void ButtonGo_Click(object sender, RoutedEventArgs e)
      {
            if (webView != null && webView.CoreWebView2 != null)
            {
               webView.CoreWebView2.Navigate(addressBar.Text);             }
      }
   }
}
6. Select File > Save All to save the project.
7. Press F5 to build and run the project.
https://www.bing.com8. Type a new URL in the address bar and choose Go. For example, type .
9. Make sure the WebView2 control opens the URL you entered.
ArgumentExceptionMake sure you enter a complete URL in the address bar. The app generates an  if the
http:// or https://URL doesn't start with .
https://www.bing.comThe sample app displays the Bing website with the URL  in the address bar:

 Step 7 - Navigation events
During webpage navigation, the WebView2 control raises events. The app that hosts WebView2 controls listens for the following events:

The above diagram shows the event sequence. Navigation events start with a new document.
 Success path 
A successful path includes the full sequence of events:
1. Navigation starting.
2. Source changed, with possible input from the same document.
3. Content loading.
4. History changes.
5. Navigation completed.
For more information, see Navigation events for WebView2 apps.
 Failure path 
If theres a failure, the failure path proceeds directly from navigation starting, to navigation completed, skipping the intervening events.
When an error occurs, the following events are raised, and may depend on navigation to an error webpage:

SourceChanged
ContentLoading
HistoryChanged Redirection 
NavigationStartingIf an HTTP redirect occurs, there are multiple  events in a row.
 Example demonstrating navigation events 
NavigationStartingTo demonstrate how to use the events, register a handler for  that cancels any non-HTTPS requests, as follows.
MainWindow.xaml.csEnsureHttps1. In the  file, modify the constructor to match the top part of the following code. Below the constructor, add the  function:
public MainWindow()
{
    InitializeComponent();
    webView.NavigationStarting += EnsureHttps;
}
void EnsureHttps(object sender, CoreWebView2NavigationStartingEventArgs args) {
    String uri = args.Uri;
    if (!uri.StartsWith("https://"))
    {
        args.Cancel = true;
    }
}
EnsureHttps is registered as the event handler on the NavigationStartingIn the constructor,  event on the WebView2 control.
2. Select File > Save All to save the project.
3. Press F5 to build and run the project.
4. Attempt to open an HTTP site. Make sure the WebView2 control remains unchanged.
5. Attempt to open an HTTPS site. The WebView2 control allows you to open HTTPS sites.
 Step 8 - Scripting
You can use host apps to inject JavaScript code into WebView2 controls at runtime. You can task WebView2 to run arbitrary JavaScript or add initialization scripts. The injected JavaScript applies to all new top-level documents and any child frames until the JavaScript is removed.
The injected JavaScript is run with specific timing:
Run it after the creation of the global object.
Run it before any other script included in the HTML document is run.
For example, add scripts that send an alert when a user navigates to non-HTTPS sites, as follows:
EnsureHttps1. Modify the  function to inject a script into the web content that uses ExecuteScriptAsync method.
void EnsureHttps(object sender, CoreWebView2NavigationStartingEventArgs args) {
   String uri = args.Uri;
   if (!uri.StartsWith("https://"))
   {
      webView.CoreWebView2.ExecuteScriptAsync($"alert('{uri} is not safe, try an https link')");       args.Cancel = true;
   }
}2. Select File > Save All to save the project.
3. Press F5 to build and run the project.
4. Make sure the app displays an alert when you navigate to a website that doesn't use HTTPS.

 Step 9 - Communication between host and web content
postMessageThe host and web content can communicate in the following ways using :
 Web content in a WebView2 control can post a message to the host using 
window.chrome.webview.postMessage. The host handles the message using any registered 
WebMessageReceived on the host.
CoreWebView2.PostWebMessageAsString Hosts post messages to web content in a WebView2 control using 
CoreWebView2.PostWebMessageAsJSONor . The messages are caught by handlers added to 
window.chrome.webview.addEventListener.
The communication mechanism passes messages from web content to the host using native capabilities.
In your project, when the WebView2 control navigates to a URL, it displays the URL in the address bar and alerts the user of the URL displayed in the WebView2 control.
MainWindow.xaml.cs, update your constructor and create an InitializeAsyncInitializeAsyncCoreWebView21. In  function to match the following code. The  function awaits EnsureCoreWebView2Async, because the initialization of  is asynchronous.
public MainWindow()
{
   InitializeComponent();
   webView.NavigationStarting += EnsureHttps;
   InitializeAsync();
}
async void InitializeAsync()
{
   await webView.EnsureCoreWebView2Async(null); }
WebMessageReceived2. After CoreWebView2 is initialized, register an event handler to respond to . In 
MainWindow.xaml.cs, update InitializeAsync and add UpdateAddressBar using the following code:
async void InitializeAsync()
{
   await webView.EnsureCoreWebView2Async(null);    webView.CoreWebView2.WebMessageReceived += UpdateAddressBar;
}
void UpdateAddressBar(object sender, CoreWebView2WebMessageReceivedEventArgs args) {
   String uri = args.TryGetWebMessageAsString();    addressBar.Text = uri;    webView.CoreWebView2.PostWebMessageAsString(uri); }CoreWebView23. For the WebView2 control to send and respond to the web message, after  is initialized, the host does the following:
a. Injects a script to the web content that registers a handler to print message from the host.
b. Injects a script to the web content that posts the URL to the host.
MainWindow.xaml.cs, update InitializeAsync4. In  to match the following code:
async void InitializeAsync()
{
   await webView.EnsureCoreWebView2Async(null);
   webView.CoreWebView2.WebMessageReceived += UpdateAddressBar;
   await 
webView.CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsync("window.chrome.webview.postMessage(wind ow.document.URL);");    await 
webView.CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsync("window.chrome.webview.addEventListener
(\'message\', event => alert(event.data));"); }5. Select File > Save All to save the project.
6. Press F5 to build and run the project.
7. When you open a new URI, the WebView2 control displays the URI in the address bar.
The sample app displays the URI in the address bar and the Microsoft website, https://www.microsoft.com:

Congratulations, you built your first WebView2 app!
 See also
developer.microsoft.com:
 Microsoft Edge WebView2 - initial introduction to WebView2 features at developer.microsoft.com.
Local pages:
WebView2SamplesWebView2 sample: WPF .NET browser app
Manage user data folders
Sample Code for WebView2 - a guide to the  repo.
Development best practices for WebView2 apps
See also in Introduction to Microsoft Edge WebView2.
API Reference:
API reference: WebView2 class in WebView2.Wpf namespace API reference: WebView2.Wpf namespace
GitHub:
 WebView2Samples repo - a comprehensive example of WebView2 capabilities.

 
 Differences between Microsoft Edge and WebView2
 	6/21/2022 • 6 minutes to read • Edit OnlineWebView2 is based on the Microsoft Edge browser. You have the opportunity to extend features from the browser to WebView2-based apps, which is useful. However, since WebView2 isn't limited to browser-like apps, there are some browser features that need to be modified or removed.
This article covers:
The modified browser features and supporting information.
The ability to turn on or off the feature. Guidance on keyboard shortcuts.
 Design guidelines
In the context of WebView2, browser features adhere to the following design guidelines:
 Most features work the same in WebView2 and Microsoft Edge. If a feature doesn't make sense in the context of WebView2 or for other reasons, the feature is modified or turned off.
 WebView2 features don't include Microsoft Edge branding.
 Browser features
The following table displays the WebView2 features that differ from the Microsoft Edge browser:
Default state indicates that the feature is part of the default experience on a new WebView2 instance.
Configurable indicates that you can turn on or off the feature using WebView2 APIs or command-line switches.
NOTE
This article doesn't cover modifying features by using command-line switches. For more information about turning on and off features by using command-line switches, see List of Chromium Command Line Switches.
FEATUREDEFAULT STATECONFIGURABLEDETAILSAutofill for AddressesOnYesThis feature is turned on by default. You can turn this feature on or off by using the WebView2 Autofill APIs.Autofill for PasswordsOnYesThis feature is turned on by default. You can turn this feature on or off by using the WebView2 Autofill APIs.Autofill for PaymentsOffNoThis feature is turned off.Browser ExtensionsOffNoThis feature is turned off.
FEATUREDEFAULT STATECONFIGURABLEDETAILSBrowser Task ManagerOffNoThis feature is turned off.CollectionsOffNoThis feature is turned off.Continue-where-I-left-off promptOffNoThis feature is turned off.DownloadsOnYesWebView2 provides an API that allows you to customize the download UI to manipulate downloads. For example, you can block, redirect, save, pause, and so on. For more information, see Download API.Edge ShoppingOffNoThis feature is turned off.Family SafetyOffNoThis feature is turned off.FavoritesOffNoThis feature is turned off.IE ModeOffNoThis feature is turned off.
WebView2 doesn't support IE mode and has differences in behavior compared to IE (such as MHT or BIN support).Immersive ReaderOffNoThis feature depends on the browser UI for interaction.
This feature is turned off.Intrusive AdsOffNoThis feature is turned off.Keyboard ShortcutsReview DetailsReview DetailsThe keyboard shortcuts that are turned off by default either don't make sense or cause problems in WebView2. You cannot turn these shortcuts off or on. Instead, you can listen for a key combination using the 
AcceleratorKeyPressedevent and create a custom response if needed. For more information, see Additional keyboard shortcuts information.FEATUREDEFAULT STATECONFIGURABLEDETAILSPDF AnnotationsOffNoThis feature is turned off. The PDF viewing feature is enabled, but drawing, inking, and highlighting in a PDF aren't enabled. For more information, see Disabling Feature: PDF Annotations Support.Read AloudOffNoThis feature is turned off.Smart Screen*OnNo* The UI for this feature has been removed, however the underlying functionality
is still available. Additionally, you can turn off Smart Screen by using a command-line switch.TranslateOffNoThis feature is turned off.Tracking Prevention*OnNo* The UI for this feature has been removed, however the underlying functionality is still available. Tracking prevention is always set to balanced.Profile and IdentityOffNoThe feature that syncs your favorites, cookies, and so on, is turned off.Windows Defender Application GuardOffNoThis feature is turned off.edge:// URLsReview DetailsNoSettings for the Microsoft
Edge browser are on 
edge:// URLs. Because
most of these webpages have Microsoft Edge branding or don't make sense within the context of WebView2, some of these URLs are turned off. For more information, see
Blocked internal URLs. Web platform features
The following WebView2 platform features are currently unavailable:
FEATUREDETAILSPush NotificationsThis feature isn't implemented in WebView2.FEATUREDETAILSWeb Payment APIThis feature is turned off. Blocked internal URLs
The following Microsoft Edge and Google Chrome settings webpages aren't available in WebView2:

chrome-search://local-ntp/local-ntp.html
edge://application-guard-internals
edge://apps
edge://compat
edge://extensions
edge://favorites
edge://help
edge://management
edge://network-error
edge://new-tab-page
edge://newtab
edge://omnibox
edge://settings
edge://supervised-user-internals
edge://version Additional keyboard shortcuts information
Keyboard shortcuts or key bindings are supported in Microsoft Edge and WebView2.
 Preventing shortcuts from changing during update 
When Microsoft Edge is updated, the default key bindings might change. Furthermore, a keyboard shortcut that is turned off by default might instead be turned on, if the feature is now supported in WebView2.
AreBrowserAcceleratorKeysEnabled to FALSETo avoid such changes to your keyboard shortcuts, you can set ,
which turns off all keys that access browser features, but keeps all basic text-editing and movement shortcuts turned on.
 Shortcuts that are turned off 
*The following shortcuts are always turned off in WebView2, or are effectively turned off. An asterisk () indicates that the shortcut isn't turned off, but the feature that it accesses is turned off, or the feature doesn't apply to WebView2.
ACTIONSHORTCUTAdd to Favorites
Ctrl+DAdd All Tabs to Favorites
Ctrl+Shift+DFocus Location
Ctrl+L, Alt+DPaste and Go
Ctrl+Shift+L
ACTIONSHORTCUTOpen File
Ctrl+O*Read Aloud 
Ctrl+Shift+U*Web Capture 
Ctrl+Shift+S*Sidebar 
Ctrl+Shift+ESave Page
Ctrl+SSelect Last Tab
Ctrl+9Select Next Tab
Ctrl+TabSelect Previous Tab
Ctrl+Shift+TabSelect Tab (1 - 8)
Ctrl+(1-8)*Show Favorites Bar 
Ctrl+Shift+BHelp
F1*Focus Next Pane F6. Supported in windowed hosting mode, but not in visual hosting mode. Visual hosting mode is used for WinUI 2 (UWP) apps, and for Win32 C++ apps with Visual Composition.*Focus Previous Pane Shift+F6. Same as F6 support, above.*Reading View 
F9Focus Menu Bar
F10*Show Identity Menu 
Ctrl+Shift+M*Browser Task Manager 
Shift+Escape*Edge Feedback 
Shift+Alt+I*Mute Tab 
Ctrl+MNew Incognito Window
Ctrl+Shift+NNew Tab
Ctrl+TNew Window
Ctrl+NRestore Last Closed Tab
Ctrl+Shift+TACTIONSHORTCUTFocus Favorites
Alt+Shift+BFocus Inactive Popup
Alt+Shift+AFocus Search
Ctrl+E, Ctrl+K, Search KeyDuplicate Tab
Ctrl+Shift+K*Focus Toolbar 
Alt+Shift+THome
Alt+Home, Browser Home KeyShow App Menu
Alt+E, Alt+FShow Favorites
Ctrl+Shift+OShow Downloads
Ctrl+JShow History
Ctrl+H*Show Reading Mode Bar 
Shift+Alt+R*Show Collections 
Ctrl+Shift+Y Shortcuts turned off except when event not handled 
NewWindowRequestedThe following keyboard shortcuts are always turned off, except in windows that display when the  event isn't handled:
ACTIONSHORTCUTClose Tab
Ctrl+W, Ctrl+F4Close Window
Ctrl+Shift+WFullscreen
F11 Shortcuts turned off if AcceleratorEnabled is False 
AreBrowserAcceleratorKeysEnabled to FALSEIf you set , the following additional keyboard shortcuts are turned off:
ACTIONSHORTCUTStop
EscapeFind on Page
Ctrl+FFind Next
Ctrl+GACTIONSHORTCUTFind Previous
Ctrl+Shift+GPrint
Ctrl+PRefresh
Ctrl+R, F5, Reload KeyRefresh Without CacheShift+F5, CtrlCtrl + Shift + R , Ctrl + F5 , +
Refresh , Shift + RefreshZoom Out
Ctrl+-Zoom In
Ctrl++Reset Zoom
Ctrl+0Find Next
F3Find Previous
Shift+F3Back
Alt+Left, Browser Back KeyForward
Alt+Right, Browser Forward KeyPrint
Ctrl+POpen / Close DevTools
Ctrl+Shift+IOpen DevTools Console
Ctrl+Shift+JOpen DevTools Inspect
Ctrl+Shift+C Customizing an individual key 
To customize any of the keys individually, use the AcceleratorKeyPressed event.
 
 Navigation events for WebView2 apps
 	6/21/2022 • 2 minutes to read • Edit OnlineSupported platforms: Win32, Windows Forms, WinUi, WPF.
This article covers navigation events for WebView2 apps. Navigation events run when specific asynchronous actions occur to the content that's displayed in a WebView2 instance. For example, when a WebView2 user
NavigationCompletednavigates to a new website, the native content listens for the change by listening for the NavigationStarting event. When the navigation action completes,  runs.
For an example of navigation events, see Get started with WebView2.
The normal sequence of navigation events is:
NavigationStartingSourceChangedContentLoadingHistoryChangedBasicAuthenticationRequestedDOMContentLoadedNavigationCompleted1. 2. 3. 4. 5. 6. 7. 
The following events describe the state of WebView2 during each navigation action:


SEQUENCEEVENT NAMEDETAILS1
NavigationStartingWebView2 starts to navigate and the navigation results in a network request. The host may disallow the request during the event.2
SourceChangedThe source of WebView2 changes to a new URL. The event may result from a navigation action that doesn't cause a network request such as a fragment navigation.3
ContentLoadingWebView2 starts loading content for the new page.4
HistoryChangedThe navigation causes the history of WebView2 to update.SEQUENCEEVENT NAMEDETAILS5
DOMContentLoadedWebView2 finishes parsing the DOM content but hasn't finished loading all images, script, and other content on the page.6
NavigationCompletedWebView2 completes loading content on the new page.NavigationIdThe above figure shows navigation events that have the same  property on the respective event argument.
NavigationId event). The NavigationIdTrack navigation events to each new document by using the navigation ID (which is provided in the  event of WebView2 changes every time a successful navigation to a
new document completes.
NavigationIdNavigationStartingNavigation events with different instances of  event may overlap. For instance, when you start a navigation event, you must wait for the related  event. If you then start another navigation, you'll see the following sequence:
NavigationStarting1. The  event for the first navigation.
NavigationStarting2. The  event for the second navigation.
NavigationCompleted3. The  event for the first navigation.
4. All the rest of the appropriate navigation events for the second navigation.
ContentLoadingIn error cases, there may or may not be a  event, depending on whether the navigation is continued to an error page.
NavigationStartingIsRedirect property set; however, the NavigationIdIf an HTTP redirect occurs, there are multiple  events in a row, where later event arguments have the  event remains the same.
NavigationStarting event, and don't increment the NavigationIdSame-document navigation events, such as navigating to a fragment in the same document, don't cause a  event.
FrameNavigationStarting and FrameNavigationCompletedTo monitor or cancel navigation events inside subframes in a WebView2 instance, use the  events. Those events act like the equivalent non-frame,
counterpart events.
 See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference
See also in Introduction to Microsoft Edge WebView2.
 
 Basic authentication for WebView2 apps
 	6/21/2022 • 9 minutes to read • Edit OnlineBasic authentication is an authentication approach that's part of the HTTP protocol.
Basic authentication for WebView2 apps includes a sequence of authentication and navigation steps to retrieve a webpage from an HTTP server. The WebView2 control acts as an intermediary for communication between the host app and the HTTP server.
 Use HTTPS for sending credentials
Warning: You must use HTTPS when using Basic Authentication. Otherwise the username and password are not encrypted. You may want to consider other forms of authentication.
httpsThe HTTP standard for basic authentication includes the authentication credentials (username and password) unencrypted. Therefore, you must use , to ensure that the credentials are encrypted.
 The order of navigation events
The basic authentication event happens in the middle of the sequence of events:
NavigationStarting1. - navigation event
ContentLoading2. - navigation event
BasicAuthenticationRequested3. 
DOMContentLoaded4. 
NavigationCompleted5.  - navigation event
For more information, see Navigation events for WebView2 apps.
 Communication between the HTTP server, WebView2 control, and host app
 The HTTP server checks authentication (username and password credentials) and returns either an error document or the requested webpage.
 The WebView2 control instance raises the events. The WebView2 control sits between the HTTP server and the host app. The WebView2 control serves as an intermediary for communication between the host app and the HTTP server.
EventArgs You write the host app. The host app sets the user name and password on the event's arguments ( ) response objects.
BasicAuthenticationRequestedEventArgs has a Response property. The Response property is an object that contains the username and password properties.
 Sequence of navigation events
The following diagram shows the flow of navigation events for basic authentication for WebView2 apps:

1. The host app tells the WebView2 control to navigate to a URI.
2. The WebView2 control talks to the HTTP server requesting to get the document at a specified URI.
3. The HTTP server replies to the WebView2 control, saying "You can't get that URI (document) without authentication."
BasicAuthenticationRequested4. The WebView2 control tells the host app "Authentication is needed" (which is the  event).
5. The host app responds to that event by providing the username and password to the WebView2 control.
6. The WebView2 control again requests the URI from the HTTP server, but this time with the authentication (username and password).
7. The HTTP server evaluates the credentials (username and password).
8. The HTTP server might deny the credentials and request new credentials.
9. The HTTP server might reject the username and password; it might tell the WebView2 control "You're not permitted to get that URI/document".
ContentLoading event and DOMContentLoaded10. The WebView2 control renders the error page that's returned by the HTTP server. The rendering occurs between the  event.
11. The HTTP server might accept the authentication credentials and return the requested document.
ContentLoading event and DOMContentLoaded12. The WebView2 control renders the returned document. The rendering occurs between the  event.
 Example code: App providing credentials that are known ahead of time
The following simplified example shows the host app providing credentials (user name and password) that are known ahead of time. This example is a slightly modified version of the code that's in WebView2Samples repo > WebView2APISample > ScenarioAuthentication.cpp.
This example isn't realistic, because:
"user""pass"In practice, you'd prompt the user for the username and password rather than hardcoding them like and .
This code is synchronous, but you'd probably use asynchronous code instead.
For more realistic code, see the subsequent section.
	 	C#
C++
 
// Prerequisite: Before using this code, make sure you read the section "Use HTTPS 
// for sending credentials" in this article.     webView.CoreWebView2.BasicAuthenticationRequested += delegate (        object sender, 
       CoreWebView2BasicAuthenticationRequestedEventArgs args)
    {
        args.Response.UserName = "user";         args.Response.Password = "pass";     };APIs:
CoreWebView2.BasicAuthenticationRequested Event
CoreWebView2BasicAuthenticationRequestedEventArgs Class
 Example code: Prompting user for credentials
This example demonstrates a host app prompting the user for credentials (user name and password), and uses async code.
This example builds upon the above sample, by adding the following features:
GetDeferral method on the eventDisplays a dialog box to prompt the user for their username and password.
Calls the  argument.
	 	C#
C++
 
// Prerequisite: Before using this code, make sure you read the section "Use HTTPS 
// for sending credentials" in this article.
webView.CoreWebView2.BasicAuthenticationRequested += delegate (     object sender, 
    CoreWebView2BasicAuthenticationRequestedEventArgs args) {
    // We need to show UI asynchronously so we obtain a deferral.     // A deferral will delay the CoreWebView2 from
    // examining the properties we set on the event args until     // after we call the Complete method asynchronously later.
    // This gives us time to asynchronously show UI.
    CoreWebView2Deferral deferral = args.GetDeferral();
    // We avoid potential reentrancy from running a message loop in the     // event handler by showing our download dialog later when we
    // complete the deferral asynchronously.
    System.Threading.SynchronizationContext.Current.Post((_) =>
    {
        using (deferral)
        {
            // When prompting the end user for authentication its important
            // to show them the URI or origin of the URI that is requesting             // authentication so the end user will know who they are giving             // their username and password to.
            // Its also important to display the challenge to the end user
            // as it may have important site specific information for the             // end user to provide the correct username and password.
            // Use an app or UI framework method to get input from the end user.             TextInputDialog dialog = new TextInputDialog(                 title: "Authentication Request",
                description: "Authentication request from " + args.Uri + "\r\n" +
                    "Challenge: " + args.Challenge,                 defaultInput: "username\r\npassword");             bool userNameAndPasswordSet = false;
            if (dialog.ShowDialog().GetValueOrDefault(false))
            {
                string[] userNameAndPassword = dialog.Input.Text.Split(
                    new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries);                 if (userNameAndPassword.Length > 1)
                {
                    args.Response.UserName = userNameAndPassword[0];                     args.Response.Password = userNameAndPassword[1];                     userNameAndPasswordSet = true;
                }
            }
            // If we didn't get a username and password from the end user then
            // we cancel the authentication request and don't provide any
            // authentication.
            if (!userNameAndPasswordSet)
            {
                args.Cancel = true;
            }         }
    }, null);
};APIs:
CancelChallengeResponseUriGetDeferral()CoreWebView2BasicAuthenticationRequestedEventArgs Class Properties:
Methods:
 How navigations work
This section provides optional background information about how navigations work.
NavigationStarting box of the above diagram, through the NavigationCompletedA navigation corresponds to multiple navigation events. By navigation, we here mean each retry, starting with the  box.
When a new navigation begins, a new navigation ID is assigned. For the new navigation, the HTTP server gave the WebView2 control a document. This is the "have document" navigation.
NavigationCompletedAs a part of navigation, the WebView2 control renders the corresponding page (the requested page or an error page, whichever is returned by the HTTP server), and a "success" or "failure" outcome raises a successful or failed  event.
For more information, see Navigation events for WebView2 apps.
 Navigations for basic authentication 
There are two kinds of navigations in the flow:
A "server requested authentication" navigation.
A "server gave the WebView2 control a document" navigation.
After the first type of navigation, the server has asked for authentication and the app needs to try that kind of navigation again (with a new navigation ID). The new navigation will use whatever the host app gets from the events arguments response objects.
NavigationCompletedBasicAuthenticationRequestedAn HTTP server may require HTTP authentication. In this case, there's a first navigation, which has the navigation events that are listed above. The HTTP server returns a 401 or 407 HTTP response, and so the  event has a corresponding failure. The WebView2 then renders a blank page, and raise the  event, which will potentially prompt the user for credentials.
BasicAuthenticationRequestedIf the  event is canceled, then there's no subsequent navigation and the WebView2 will remain to display the blank page.
BasicAuthenticationRequestedIf the  event isn't canceled, the WebView2 will perform the initial navigation again, but this time, using any provided credentials. You'll again see all the same navigation events as before.
CoreWebView2 class instance again raises the BasicAuthenticationRequestedIf the credentials aren't accepted by the HTTP server, navigation fails again with 401 or 407. In that case, the  event, and navigation continues as above.
The navigation succeeds if the credentials are accepted by the HTTP server. The navigation fails if the HTTP server denies authentication (the server typically returns an error page).
BasicAuthenticationRequestedThe navigations before and after the  event are distinct navigations and have distinct navigation IDs.
event args has a property: the NavigationId. The NavigationIdNavigation  ties together navigation events
NavigationIdNavigationIdthat correspond to a single navigation. The  remains the same during each navigation, such as a retry. During the next pass through the event flow, a different  is used.
 API Reference overview
 	C# C++
 CoreWebView2BasicAuthenticationRequestedEventArgs Class
CoreWebView2.BasicAuthenticationRequested Event
CoreWebView2Deferral Class
 See also
 HTTP authentication at MDN.

 
 Custom management of network requests
 	6/21/2022 • 10 minutes to read • Edit OnlineWebResourceRequestedThe Microsoft Edge WebView2 control lets you interact with and modify network requests. You can either provide a response or modify the network request using the  and 
WebResourceResponseReceived events. There is also special functionality that allows you to navigate with specific
NavigateWithWebResourceRequest APInetwork requests using the .
This article describes how you can modify network requests. Use this API and approach to:
Upload local file content to your app to add support for offline functionality.
Block content in a webpage, such as specific images. Fine-tune authentication for specific pages.
Terminology:
TERMDEFINITIONinterceptYour host app can intercept a request that is sent from the WebView2 control to the HTTP server, read or modify the request, and then send the unchanged or modified request to the HTTP server (or to local code instead of the HTTP server).overrideYour host app can override a response that's sent from the HTTP server to the WebView2 control, and send a custom response to the WebView2 control instead of the original response. When to use custom vs. basic approaches
WebResourceRequestedThe  event is a low-level API that gives more control, but requires more coding and is
complicated to use. For some common scenarios, we provide APIs that are easier to use and are optimized for those specific scenarios, and we recommend you use those APIs rather than the APIs discussed in this article.
Instead of using the WebResourceRequested APIs, it's preferable to use these other approaches when feasible:
Basic Authentication
General navigation
Managing cookies in WebView2
Setting the user agent string. See UserAgent Property.
WebResourceRequestedWebResourceRequestedNote: For URLs with virtual hostnames, using the  event isn't supported. This is because the  event isn't fired for the SetVirtualHostNameToFolderMapping method.
 How your host app, the WebView2 control, and the HTTP server interact 
The WebView2 control sits in between your host app and the HTTP server. When your host app navigates to a URI, the WebView2 control sends a request to the HTTP server. The HTTP server then sends a response to the WebView2 control.
 Intercepting a request, to monitor or modify it
Your host app can intercept a request that is sent from the WebView2 control to the HTTP server, read or modify the request, and then send the unchanged or modified request to the HTTP server (or to local code instead of the HTTP server).
Intercepting the request allows you to customize the header content, URL, or the GET/POST method. The host app may want to intercept a request to provide optional POST content as part of the request.
The host app can change the properties of a request by using this API:
	 	.NET
Win32
 CoreWebView2WebResourceRequest Class
 What you can do with headers 
A HTTP header provides important information and metadata about a request or response. Changing headers enables you to perform powerful actions on the network.
Accept-*A request header can be used to indicate the format of the response (such as the  headers), set authentication tokens, read and write cookies (sensitive information), modify the user agent, and so on. A response header can be used to provide more context of the response.
 Filtering the WebResourceRequested event based on URL and resource type 
WebResourceRequestedIn order to receive  events, specify filters for the requests that the host app is interested in, based on URL and resource type.
WebResourceRequestedresourceContextFor example, suppose the host app is trying to replace images. In this case, the host app is only interested in  events for images. The host app would only get events for images by specifying the  filter for images.
https://example.com. Then the app can specify a URL filter as https://example.com/*Another example is if the host app is only interested in all requests that are under a site like  to get events that are associated with that site.
	 	.NET
Win32
 CoreWebView2.AddWebResourceRequestedFilter Method
For details about how the URL filter works, see CoreWebView2.AddWebResourceRequestedFilter Method > Remarks
 Why would you want to intercept requests that are sent from WebView2? 
Intercepting requests sent from WebView2 enables you to further configure your request. The host app might want to provide optional content as part of the request that the WebView2 control won't know on its own. Some scenarios include:
You're logging into a page and the app has credentials so the app can provide authentication header without the user having to enter those credentials.
You want offline functionality in the app so you redirect the URL to a local file path when no internet connection is detected.
You want to upload local file content to the request server via a POST request.
 Sequence for modifying requests 

WebResourceRequested1. The host app sets up a  filter.
WebResourceRequested and WebResourceResponseReceived2. The host app defines the event handlers for .
3. The host app navigates the WebView2 control to a webpage.
4. The WebView2 control creates a request for a resource that's needed for the webpage.
WebResourceRequested5. The WebView2 control fires a  event to the host app.
WebResourceRequested6. The host app listens for and handles the  event.
WebResourceRequested7. The host app can modify headers at this point. The host app can also defer the  event, which means that the host app asks for more time to decide what to do.
8. The WebView2 network stack can add more headers (for example, can add cookies and authorization headers).
9. The WebView2 control sends the request to the HTTP server.
10. The HTTP server sends the response to the WebView2 control.
WebResourceResponseReceived11. The WebView2 control fires the  event.
WebResourceResponseReceived12. The host app listens for the  event and handles it.
 Example: Intercepting a request, to monitor or modify it 
http://www.example.comIn the following example, the host app intercepts the document request that is sent from the WebView2 control to the  HTTP server, adds a custom header value and sends the request.
	 	.NET
Win32
 
// Add a filter to select all resource types under http://www.example.com webView.CoreWebView2.AddWebResourceRequestedFilter(
      "http://www.example.com/*", CoreWebView2WebResourceContext.All); webView.CoreWebView2.WebResourceRequested += delegate (
   object sender, CoreWebView2WebResourceRequestedEventArgs args) {
   CoreWebView2WebResourceContext resourceContext = args.ResourceContext;
   // Only intercept the document resources
   if (resourceContext != CoreWebView2WebResourceContext.Document)
   {       return;
   }
   CoreWebView2HttpRequestHeaders requestHeaders = args.Request.Headers;    requestHeaders.SetHeader("Custom", "Value"); }
 Overriding a response, to proactively replace it
By default, the HTTP server sends responses to the WebView2 control. Your host app can override a response that's sent from the HTTP server to the WebView2 control, and send a custom response to the WebView2 control instead of the original response.
 Sequence for overriding responses 

WebResourceRequested1. The host app sets up a  filter.
WebResourceRequested and WebResourceResponseReceived2. The host app defines the event handlers for .
3. The host app navigates the WebView2 control to a webpage.
4. The WebView2 control creates a request for a resource that's needed for the webpage.
WebResourceRequested5. The WebView2 control fires a  event to the host app.
WebResourceRequested6. The host app listens for and handles the  event.
WebResourceRequestedWebResourceRequested7. The host app sets a response to the  event handler. The host app can also defer the  event, which means that the host app asks for more time to decide what to do.
8. The WebView2 control renders the response as the resource.
 Example: Overriding a response, to proactively replace it 
	 	.NET
Win32
 
// Add a filter to select all image resources webView.CoreWebView2.AddWebResourceRequestedFilter(       "*", CoreWebView2WebResourceContext.Image); webView.CoreWebView2.WebResourceRequested += delegate (
   object sender, CoreWebView2WebResourceRequestedEventArgs args) {
    
   // Replace the remote image resource with a local one specified at the path customImagePath.
   // If response is not set, the request will continue as it is.
   FileStream fs = File.Open(customImagePath, FileMode.Open);
   CoreWebView2WebResourceResponse response = webView.CoreWebView2.Environment.CreateWebResourceResponse(fs, 
200, "OK", "Content-Type: image/jpeg");    args.Response = response; }; Constructing a custom request and navigating using that request
NavigateWithWebResourceRequestWebResourceRequestThe  method allows your host app to navigate the WebView2 control using a custom . You can use this API to create a GET or POST request that has custom headers and content. Then the WebView2 control will navigate by using this custom request.
	 	.NET
Win32
 CoreWebView2.NavigateWithWebResourceRequest(CoreWebView2WebResourceRequest) Method
 Example: Constructing a custom request and navigating using that request 
	 	.NET
Win32
 
// This code posts text input=Hello to the POST form page in W3Schools.
// Need to convert post data to UTF-8 as required by the application/x-www-form-urlencoded Content-Type UTF8Encoding utfEncoding = new UTF8Encoding(); byte[] postData = utfEncoding.GetBytes("input=Hello");
MemoryStream postDataStream = new MemoryStream(postData.Length); postDataStream.Write(postData, 0, postData.Length); postDataStream.Seek(0, SeekOrigin.Begin);
// This acts as a HTML form submit to https://www.w3schools.com/action_page.php CoreWebView2WebResourceRequest webResourceRequest = 
environment.CreateWebResourceRequest("https://www.w3schools.com/action_page.php",
                                     "POST",
                                     postDataStream,
                                    "Content-Type: application/x-www-form-urlencoded"); webView.CoreWebView2.NavigateWithWebResourceRequest(webResourceRequest); Monitoring the requests and responses via the
WebResourceResponseReceived event
WebResourceResponseReceivedYou can monitor the requests and responses via the  event, to read any header value.
 Example: Monitoring the requests and responses via the WebResourceResponseReceived event 
WebResourceResponseReceivedThis example shows how to read the authorization header value by monitoring the requests and responses via the  event.
WebResourceResponseReceivedThe following code demonstrates how the  event can be used.
	 	.NET
Win32
 
WebView.WebResourceResponseReceived += WebView_WebResourceResponseReceived;
// Note: modifications made to request are set but have no effect on WebView processing it. private async void WebView_WebResourceResponseReceived(object sender, 
CoreWebView2WebResourceResponseReceivedEventArgs e)
{
    // Actual headers sent with request     foreach (var current in e.Request.Headers)
    {
        Console.WriteLine(current);     }
    // Headers in response received
    foreach (var current in e.Response.Headers)
    {
        Console.WriteLine(current);
    }
    // Status code from response received     int status = e.Response.StatusCode;     if (status == 200)
    {
        Console.WriteLine("Request succeeded!");
        // Get response body         try
        {
            System.IO.Stream content = await e.Response.GetContentAsync();
            // Null will be returned if no content was found for the response.
            if (content != null)
            {
                DoSomethingWithResponseContent(content);             }         }
        catch (COMException ex)
        {
            // A COMException will be thrown if the content failed to load.
        }
    }
} API Reference overview
	 	.NET
Win32
Request: 
CoreWebView2.AddWebResourceRequestedFilter Method
CoreWebView2.NavigateWithWebResourceRequest Method
CoreWebView2.RemoveWebResourceRequestedFilter Method
CoreWebView2.WebResourceRequested Event
CoreWebView2Environment.CreateWebResourceRequest Method
CoreWebView2WebResourceContext Enum
CoreWebView2WebResourceRequest Class
ContentHeadersMethodUriRequestResourceContextResponseGetDeferralCoreWebView2WebResourceRequestedEventArgs Class
Response:
ContentHeadersReasonPhraseStatusCodeRequestResponseHeadersReasonPhraseStatusCodeGetContentAsyncCoreWebView2.WebResourceResponseReceived Event
CoreWebView2Environment.CreateWebResourceResponse Method
CoreWebView2WebResourceResponse Class
CoreWebView2WebResourceResponseReceivedEventArgs Class
CoreWebView2WebResourceResponseView Class
 See also
 Call native-side code from web-side code
 
 Interop of native-side and web-side code
 	6/21/2022 • 6 minutes to read • Edit OnlineThe Microsoft Edge WebView2 control lets you embed web content into native applications. You can use WebView2 in different ways, depending on what you need to accomplish. This article describes how to communicate using simple messages, JavaScript code, and native objects.
Some common use cases include:
Update the native host window title after navigating to a different website.
Send a native camera object and use its methods from a web app. Run a dedicated JavaScript file on the web side of an application.
 Before you begin
.slnThis tutorial steps through the Sample App code to demonstrate some of the communication capabilities in WebView2. Clone the WebView2Samples repo, open a  file in Visual Studio, build the project, and run (debug) to follow along with the steps in this article.
For detailed steps about cloning the repo, see WebView2 samples.
 Scenario: Simple messaging
JSON or StringWebView2 controls let you exchange simple messages between web and native sides of an application. You can use data types such as  to send messages between the host application and WebView2.
 Send Messages from the host app to WebView2 
This example shows how the sample app changes the color of text in the front end, based on a message from the host app.
To see messaging in action:
1. Run the sample app, then select the Scenario tab and select the Web Messaging option.
The following screen appears:

Posting Messages2. Notice the first section, titled . Follow the instruction and select Script > Post Message JSON. Then click OK. The message turns blue:

How were we able to change text color? The sample starts by creating a button, on the native side. Then the sample adds the following code to post the web message when the button is clicked. This code changes the color of the web text to blue.
SendJsonWebMessage()The example includes C++ code to create a Windows button that calls  when clicked.
For more information about creating a button in C++, see How to Create a Button.
3. When the button is clicked, it calls the following code from ScriptComponent.cpp.
// Prompt the user for some JSON and then post it as a web message. void ScriptComponent::SendJsonWebMessage()
{
    TextInputDialog dialog(
        m_appWindow->GetMainWindow(),
        L"Post Web Message JSON",
        L"Web message JSON:",
        L"Enter the web message as JSON.",         L"{\"SetColor\":\"blue\"}");     if (dialog.confirmed)
    {
        m_webView->PostWebMessageAsJson(dialog.input.c_str());
    }
}NOTE
ScenarioWebMessage.htmlThe rest of this tutorial uses the file  from the WebView2 sample. Compare your own
HTML file as you work, or copy and paste the content from ScenarioWebMessage.html.The example uses a JavaScript event listener on the web.
ScenarioWebMessage.html4. includes the following JavaScript in the header:
window.chrome.webview.addEventListener('message', arg => {    if ("SetColor" in arg.data) {
      document.getElementById("colorable").style.color =       arg.data.SetColor;
   }
});
The event listener listens for a message event and makes the message text colorable.
5. The HTML file describes the messaging exercise:
<h1>WebMessage sample page</h1>
<p>This page demonstrates basic interaction between the host app and the webview by means of Web Messages.</p>
<h2>Posting Messages</h2>
<p id="colorable">Messages can be posted from the host app to the webview using the functions
<code>ICoreWebView2::PostWebMessageAsJson</code> and
<code>ICoreWebView2::PostWebMessageAsString</code>. Try selecting the menu item "Script > Post Message JSON" to send the message 
<code>{"SetColor":"blue"}</code>.
It should change the text color of this paragraph.</p>
Post Message JSON6. The  menu item is in the Microsoft Visual C++ generated resource script file WebView2APISample.rc.
MENUITEM "Post Message JSON",           IDM_POST_WEB_MESSAGE_JSON
IDM_POST_WEB_MESSAGE_JSON7. The script file, in turn, calls the case  in ScriptComponent.cpp.
case IDM_POST_WEB_MESSAGE_JSON:    SendJsonWebMessage();    return true;
That completes the example showing how WebView2 communicates through simple messages.
 Receive message strings via postMessage 
Receiving MessagesThis example follows the  section of the webpage, to change the text of the title bar. The host app receives a message from WebView2 with the new title bar text.
The C++ file handles the title text and communicates it to the host app as a string.
window.chrome.webview.postMessage1. When the button is clicked, WebView2 transmits a message from the web page to the native application using  in ScenarioWebMessage.html.
function SetTitleText() {
   let titleText = document.getElementById("title-text");
   window.chrome.webview.postMessage(`SetTitleText ${titleText.value}`); }
2. The HTML file includes a text box and button to send a message to the host app:
<h2>Receiving Messages</h2>
<p>The host app can receive messages by registering an event handler with <code>ICoreWebView2::add_WebMessageReceived</code>. If you enter text and click "Send", this page will send a message to the host app which will change the text of the title bar.</p>
<input type="text" id="title-text"/>
<button onclick="SetTitleText()">Send</button>
3. The event handler in ScenarioWebMessage.cpp processes the new title text string and communicates it to the host app as a string.
// Setup the web message received event handler before navigating to
// ensure we don't miss any messages.
CHECK_FAILURE(m_webView->add_WebMessageReceived(
   Microsoft::WRL::Callback<ICoreWebView2WebMessageReceivedEventHandler>(
      [this](ICoreWebView2* sender, ICoreWebView2WebMessageReceivedEventArgs* args)
{
   wil::unique_cotaskmem_string uri;
   CHECK_FAILURE(args->get_Source(&uri));
   // Always validate that the origin of the message is what you expect.
   if (uri.get() != m_sampleUri)
   {
      return S_OK;
   }
   wil::unique_cotaskmem_string messageRaw;
   CHECK_FAILURE(args->TryGetWebMessageAsString(&messageRaw));    std::wstring message = messageRaw.get();
   if (message.compare(0, 13, L"SetTitleText ") == 0)
   {
      m_appWindow->SetTitleText(message.substr(13).c_str());
   }
   else if (message.compare(L"GetWindowBounds") == 0)
   {
      RECT bounds = m_appWindow->GetWindowBounds();       std::wstring reply =
            L"{\"WindowBounds\":\"Left:" + std::to_wstring(bounds.left)
            + L"\\nTop:" + std::to_wstring(bounds.top)
            + L"\\nRight:" + std::to_wstring(bounds.right)             + L"\\nBottom:" + std::to_wstring(bounds.bottom)             + L"\"}";
      CHECK_FAILURE(sender->PostWebMessageAsJson(reply.c_str()));
   }
   return S_OK;
}).Get(), &m_webMessageReceivedToken));	 Round 	-trip messages
<h2>Round trip</h2>This example follows the  section of the WebMessage sample page,
ScenarioWebMessage.html. This example shows a round-trip message from WebView2 to the host app and back. The host app receives a request from WebView2 and returns the bounds of the active window.
When requested by the host app, the C++ file gets the window bounds and sends the data to WebView2 as a JSON web message.
1. The HTML file includes a button to get window bounds from the host app:
<h2>Round trip</h2>
<p>The host app can send messages back in response to received messages. If you click the <b>Get window bounds</b> button, the host app reports back the bounds of its window, which are displayed in the text box.</p>
<button onclick="GetWindowBounds()">Get window bounds</button><br>
<textarea id="window-bounds" rows="4" readonly></textarea>
window.chrome.webview.postMessage2. When the user clicks the button, WebView2 transmits a message from the web page to the native application using .
function GetWindowBounds() {
   window.chrome.webview.postMessage("GetWindowBounds"); }
TryGetWebMessageAsString3. The event handler in ScenarioWebMessage.cpp gets the window bounds and sends the data to the host app using :
// Setup the web message received event handler before navigating to
// ensure we don't miss any messages.
CHECK_FAILURE(m_webView->add_WebMessageReceived(
   Microsoft::WRL::Callback<ICoreWebView2WebMessageReceivedEventHandler>(
      [this](ICoreWebView2* sender, ICoreWebView2WebMessageReceivedEventArgs* args)
{
   wil::unique_cotaskmem_string uri;
   CHECK_FAILURE(args->get_Source(&uri));
   // Always validate that the origin of the message is what you expect.
   if (uri.get() != m_sampleUri)
   {
      return S_OK;
   }
   wil::unique_cotaskmem_string messageRaw;
   CHECK_FAILURE(args->TryGetWebMessageAsString(&messageRaw));    std::wstring message = messageRaw.get();
   if (message.compare(0, 13, L"SetTitleText ") == 0)
   {
      m_appWindow->SetTitleText(message.substr(13).c_str());
   }
   else if (message.compare(L"GetWindowBounds") == 0)
   {
      RECT bounds = m_appWindow->GetWindowBounds();       std::wstring reply =
            L"{\"WindowBounds\":\"Left:" + std::to_wstring(bounds.left)
            + L"\\nTop:" + std::to_wstring(bounds.top)
            + L"\\nRight:" + std::to_wstring(bounds.right)             + L"\\nBottom:" + std::to_wstring(bounds.bottom)             + L"\"}";
      CHECK_FAILURE(sender->PostWebMessageAsJson(reply.c_str()));
   }
   return S_OK;
}).Get(), &m_webMessageReceivedToken));The window bounds are displayed on the web page.
 Scenario: Send JavaScript code
ExecuteScriptAsync. The ExecuteScriptAsyncExecuteScriptThis scenario shows how to run JavaScript on the web side. In this approach, the host app specifies the JavaScript code to run, and passes the code to the web through function returns the JavaScript result back to the  caller.
For more information, see Use JavaScript in WebView2 (Run JavaScript from native code).
 Scenario: Send native objects
Pass the native object to the web. Then call the object's methods from the web.
AddHostObjectToScriptTo use messages that represent method calls, use the  API. At a high level, this API lets you expose native (host) objects into the web side and act as a proxy. Access these objects by using 
window.chrome.webview.hostObjects.{name}.
Passing a native object to the web side of an application is described in the AddHostObjectToScript section of interface ICoreWebView2.
Congratulations! You've successfully embedded web content into native applications.
 
 Call web-side code from native-side code
 	6/21/2022 • 4 minutes to read • Edit OnlineUsing JavaScript in WebView2 controls allows you to customize native apps to meet your requirements. This article explores how to use JavaScript in WebView2, and reviews how to develop using advanced WebView2 features and functions.
 Before you begin
This article assumes that you already have a working project. If you don't have a project, and want to follow along, see Get started with WebView2.
 Basic WebView2 functions
Use the following functions to begin embedding JavaScript in your WebView2 app.
APIDESCRIPTIONExecuteScriptAsyncRun JavaScript in a WebView2 control. Call this method after the page Document Object Model (DOM) content is loaded or the navigation is completed. See Get started with WebView2.AddScriptToExecuteOnDocumentCreatedAsyncRuns on every page when the DOM is created. Call this method after the CoreWebView2 is initialized. Scenario: ExecuteScript JSON-encoded results
ExecuteScriptAsyncBecause the result of  is JSON-encoded, if the result of evaluating the JavaScript is a string, you will receive a JSON-encoded string and not the value of the string.
For example, the following code executes script that results in a string. The resulting string includes a quote at the start, a quote at the end, and escaping slashes:
string result = await coreWebView2.ExecuteScriptAsync(@"'example'"); Debug.Assert(result == "\"example\"");
ExecuteScript JSON-encodes for you. If you call JSON.stringifyThe script returns a string that  from your script, then the result is doubly encoded as a JSON string the value of which is a JSON string.
Only the properties that are directly in the result are included in the JSON-encoded object; inherited properties aren't included in the JSON-encoded object. Most DOM objects inherit all properties, so you'll need to explicitly copy their values into another object to return. For example:
SCRIPTRESULT
performance.memory
{}
(() => { const {totalJSHeapSize, usedJSHeapSize} = performance.memory; return {totalJSHeapSize, usedJSHeapSize}; })();
{"totalJSHeapSize":4434368,"usedJSHeapSize":2832912}
performance.memoryperformance.memoryWhen we return just  we don't see any of its properties in the result because all properties are inherited. If instead, we copy particular property values from  into our own new object to return, then we see those properties in the result.
ExecuteScriptAsyncWhen executing script via  that script is run in the global context. It helps to have your script in an anonymous function so that any variables you define aren't polluting the global context.
For example:
const example = 10;example If you run the script 	 more than once, the subsequent times you run the script will throw an exception, because  was defined the first time you ran it.
(() => { const example = 10; })(); the example	 If you instead run the script 	 variable is defined in the
context of that anonymous function. That way, it's not polluting the global context, and can be run more than once.
 Scenario: Running a dedicated script file
In this section, you access a dedicated JavaScript file from your WebView2 control.
NOTE
Although writing JavaScript inline may be efficient for quick JavaScript commands, you lose JavaScript color themes and line formatting that makes it difficult to write large sections of code in Visual Studio.
ExecuteScriptAsyncTo solve the problem, create a separate JavaScript file with your code, and then pass a reference to that file using the  parameters.
.jsscript.js1. Create a  file in your project, and add the JavaScript code that you want to run. For example, create a file called .
ExecuteScriptAsync2. Convert the JavaScript file to a string that is passed to , by pasting the following code after the page is done navigating:
string text = System.IO.File.ReadAllText(@"C:\PATH_TO_YOUR_FILE\script.js");
ExecuteScriptAsync3. Pass your text variable using :
await webView.CoreWebView2.ExecuteScriptAsync(text);
 Scenario: Removing drag-and-drop functionality
In this section, you use JavaScript to remove the drag-and-drop functionality from your WebView2 control.
To begin, explore the current drag-and-drop functionality:
.txt file in order to drag-and-drop. For example, create a file named contoso.txt1. Create a  and add text to it.
2. Press F5 to build and run the project.
contoso.txt3. Drag-and-drop the  file into the WebView2 control. A new window opens, which is the result of the code in your sample project:

4. Next, add code to remove the drag-and-drop functionality from the WebView2 control. Paste the following code after the CoreWebView2 object is initialized in your code:
await webView.CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsync(
   "window.addEventListener('dragover',function(e){e.preventDefault();},false);" +
   "window.addEventListener('drop',function(e){" +
      "e.preventDefault();" +
      "console.log(e.dataTransfer);" +
      "console.log(e.dataTransfer.files[0])" +    "}, false);");5. Press F5 to build and run the project.
contoso.txt6. Try to drag and drop  into the WebView2 control. Confirm that you can't drag and drop.
 Scenario: Removing the context menu
In this section, you remove the right-click menu from your WebView2 control.
To begin, explore the current functionality of the right-click menu:
1. Press F5 to build and run the project.
2. Right-click anywhere on the WebView2 control. The context menu displays the default right-click menu commands:

Next, add code to remove the right-click menu functionality from the WebView2 control.
3. Paste the following code after the CoreWebView2 object is initialized in your code:
await webView.CoreWebView2.ExecuteScriptAsync("window.addEventListener('contextmenu', window => {window.preventDefault();});");
4. Press F5 to build and run the project. Confirm that you can't open a right-click menu.
 See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference
See also in Introduction to Microsoft Edge WebView2.
 
 Call native-side code from web-side code
 	6/21/2022 • 9 minutes to read • Edit OnlineWebView2 enables applications to bridge the gap between the web and native sides of an application by
enabling an object to be passed to the web. Such objects are defined in the native code and often called host
AddHostObjectToScriptobjects. They can be projected into JavaScript using the WebView2  API, as described in this document.
AddHostObjectToScriptWhy use ?
 When developing a WebView2 app, you may encounter a native object whose methods or properties you find useful. You might want to trigger these native object methods from web-side code, or as a result of
AddHostObjectToScriptuser interaction on the web side of your app. In addition, you might not want to re-implement your native objects' methods in your web-side code. The  API enables re-use of native-side code by web-side code.
 For example, there might be a native webcam API, which would require re-writing a large amount of code on the web side. Having the ability to call the native object's methods is quicker and more efficient than re-coding the object's methods on the web side of your app. In this case, your native-side code can pass the object to your app's web-side, JavaScript code, so that your JavaScript code can reuse the native API's methods.
Scenarios that may benefit from using host objects in script:
keyboardObject.showKeyboard There is a keyboard API, and you want to call the 	 function from the web side.
AddHostObjectToScript JavaScript is sandboxed, limiting its ability on the native side. For example, if you need to access a file on the native side, you must use the native file system. If you have a native object exposed to JavaScript via , you can use it to manipulate files on the native file system.
This article uses the WebView2 Win32 sample app to demonstrate some practical applications of 
AddHostObjectToScript. For more information about how to embed web content into native applications, see Embed web content into native applications.
Preview of the major steps in this article:
1. Install Visual Studio, install git, clone the WebView2Samples repo, and open the solution.
IDispatch2. Define the host object and implement  so that WebView2 can project/add it to the web side.
AddHostObjectToScript3. Use  to pass an object to the web.
4. Call the app's native object's methods from the app's web-side code.
 Step 1: Install Visual Studio, install git, clone the WebView2Samples repo, and open the solution
1. Download and install Microsoft Visual Studio 2019 (version 16.11.10) or later, and other prerequisites as described in Get started with WebView2 in Win32 apps.
2. Clone the WebView2Samples repo, which includes the Win32-specific WebView2 sample app. For instructions, in a new window or tab, open Get started with WebView2 in Win32 apps.
3. Open Microsoft Visual Studio.
WebView2Samples4. In your local copy of the cloned  repo, open 
GettingStartedGuides > Win32_GettingStarted > WebView2GettingStarted.sln. Keep the sample app solution open, to follow along with the rest of this article.
 Step 2: Define the host object and implement IDispatch
AddHostObjectToScript API, you first need to define a host object that implements IDispatchIDispatchIDispatchTo use this . If you already have a host object that implements , skip to Step 3: Call the AddHostObjectToScript API. Implementing  is essential for formatting the host object so that it can be passed to the web-side code.
The following example creates a host object from scratch.
Part 2A: Create the COM interface using interface definition language (IDL). This is demonstrated in the 
HostObjectSample.idl file.
HostObjectSampleImpl.cppPart 2B: Create the C++ object. This is demonstrated in the  file.
.idl) file defines an interface, and the C++ (.cppIDispatchImportant: The IDL () file implements the defined interface, and also implements .
 Part 2A: Create the COM interface 
HostObjectSample.idlIn the WebView2 sample code, the file  creates a COM object. This step describes how to create your own object in the IDL file.
1. In Visual Studio Solution Explorer, open WebView2APISample > Source Files > HostObjectSample.idl.
IHostObjectSampleThe following code example is broken up into two sections. The first interface is ,
IUnknown interface. Use this IHostObjectSamplestarting at line 9, which inherits the  definition as a template for defining your object's methods, properties, callback functions, and so on.
HostObjectSampleIDispatch and the IHostObjectSampleThe second part is the  component object class coclass, starting at line 35, which includes  interface.
1 import "oaidl.idl";
2 import "ocidl.idl";
 3
4 [uuid(0a7a4655-5660-47d0-8a37-98ae21399e57), version(0.1)]
5 library HostObjectSampleLibrary
6 {
7 //! [AddHostObjectInterface]
8 [uuid(3a14c9c0-bc3e-453f-a314-4ce4a0ec81d8), object, local]
9 interface IHostObjectSample : IUnknown
10 {
11 // Demonstrates a basic method call with some parameters and a return value.
12 HRESULT MethodWithParametersAndReturnValue([in] BSTR stringParameter, [in] INT integerParameter, [out, retval] BSTR* stringResult);
13    
14 // Demonstrate getting and setting a property.
15 [propget] HRESULT Property([out, retval] BSTR* stringResult);
16 [propput] HRESULT Property([in] BSTR stringValue);
17
18 [propget] HRESULT IndexedProperty(INT index, [out, retval] BSTR * stringResult);
19 [propput] HRESULT IndexedProperty(INT index, [in] BSTR stringValue);20
21 // Demonstrate native calling back into JavaScript.
22 HRESULT CallCallbackAsynchronously([in] IDispatch* callbackParameter);
23
24            // Demonstrates a property which uses Date types.    25            [propget] HRESULT DateProperty([out, retval] DATE * dateResult);
26            [propput] HRESULT DateProperty([in] DATE dateValue); 27
28 // Creates a date object on the native side and sets the DateProperty to it.
29 HRESULT CreateNativeDate();30
31 };
32 //! [AddHostObjectInterface] 33
34 [uuid(637abc45-11f7-4dde-84b4-317d62a638d3)]
35 coclass HostObjectSample
36 {
37 [default] interface IHostObjectSample;
38 interface IDispatch;
39 };
40 }interface IDispatch2. On line 38, we include , which is needed for our host object to work with 
AddHostObjectToScript.
About IDispatch:
IDispatch allows you to dynamically invoke methods and properties. Normally, calling objects requires
IDispatchstatic invocations, but you can use JavaScript to dynamically create object calls. For more information about  inheritance and methods, see IDispatch interface (oaidl.h).
IDispatchImplement  as described in Type Libraries and the Object Description Language.
IDispatchIDispatchIf the object you want to add to JavaScript doesn't already implement , you need to write an  class wrapper for the object that you want to expose.
IDispatchThere might be libraries to do this automatically. To learn more about the steps that are needed to write an  class wrapper for the object that you want to expose, see Automation.
3. Once the interface is defined in the IDL, save and compile the sample project in Visual Studio to create the translation lookaside buffer (TLB) file. You need to reference the TLB file from the C++ source code shown in the following section.
  
Part 2B: Create the C++ object
HostObjectSampleImpl.cppIn the WebView2 sample code, the  file takes the skeleton created in the COM IDL file and builds the C++ object.
IDispatchImplement all the functions that are defined in your object's interface, as we outlined in the IDL file. Be sure to implement the functions that are required by . The compiler will throw an error if these functions aren't defined.
Next, we examine two specific properties that were defined in the IDL, to show how the IDL is related to the 
.cpp file.
1. In Visual Studio Solution Explorer, open WebView2APISample > Source Files > HostObjectSampleImpl.cpp.
HostObjectSample.idl2. Compare the property declarations, in  ...
[propget] HRESULT Property([out, retval] BSTR* stringResult);
[propput] HRESULT Property([in] BSTR stringValue);
HostObjectSampleImpl.cpp... to the implementation of the object's properties, in :
STDMETHODIMP HostObjectSample::get_Property(BSTR* stringResult) {
    *stringResult = SysAllocString(m_propertyValue.c_str());     return S_OK; }
STDMETHODIMP HostObjectSample::put_Property(BSTR stringValue)
{
    m_propertyValue = stringValue;     return S_OK;
} Step 3: Call the AddHostObjectToScript API
AddHostObjectToScriptSo far, we've built our interface and implemented our host object. Now we're ready to use the  API to pass the host object to our app's web-side, JavaScript code.
1. In Visual Studio Solution Explorer, open WebVie2APISample > Source Files > ScenarioHostObject.cpp.
ScenarioAddHostObject2. Go to line 28, where the  class begins.
28    ScenarioAddHostObject::ScenarioAddHostObject(AppWindow* appWindow) 29        : m_appWindow(appWindow), m_webView(appWindow->GetWebView()) 30    {
31        std::wstring sampleUri = m_appWindow->GetLocalUri(L"ScenarioAddHostObject.html"); 32
33 m_hostObject = Microsoft::WRL::Make<HostObjectSample>(
34 [appWindow = m_appWindow](std::function<void(void)> callback) 35        {
36 appWindow->RunAsync(callback);
37 });
38
39 CHECK_FAILURE(m_webView->add_NavigationStarting(
40 Microsoft::WRL::Callback<ICoreWebView2NavigationStartingEventHandler>(
41 [this, sampleUri](ICoreWebView2* sender, ICoreWebView2NavigationStartingEventArgs* args) -> HRESULT
42 {
43 wil::unique_cotaskmem_string navigationTargetUri;
44 CHECK_FAILURE(args->get_Uri(&navigationTargetUri));45            std::wstring uriTarget(navigationTargetUri.get()); 46
47 if (AreFileUrisEqual(sampleUri, uriTarget))
48 {
49 //! [AddHostObjectToScript]
50 VARIANT remoteObjectAsVariant = {};
51 m_hostObject.query_to<IDispatch>(&remoteObjectAsVariant.pdispVal);
52 remoteObjectAsVariant.vt = VT_DISPATCH;53
54 // We can call AddHostObjectToScript multiple times in a row without
55 // calling RemoveHostObject first. This will replace the previous object56                // with the new object. In our case this is the same object and everything
57 // is fine.
58 CHECK_FAILURE(
59 m_webView->AddHostObjectToScript(L"sample", &remoteObjectAsVariant));
60 remoteObjectAsVariant.pdispVal->Release();
61 //! [AddHostObjectToScript] 62            }Lines 31 to 46 show code specific to this sample app where we display HTML. Your app may have a different implementation of this code.
AddHostObjectToScript3. Review line 33, which shows how to instantiate the COM object just defined in the IDL file. This is the object we will use later when we call . This gets us a pointer to the interface in 
HostObjectSampleImpl.cpp.
IDispatchVARIANT. VARIANTIDispatch4. Review line 51, which casts the newly created COM object to an  type and then converts the object to a  types allow you to use data structures such as integers and arrays as well as more complex types such as .
For a full list of supported data types, see VARIANT structure (oaidl.h) - Win32 apps | Microsoft Docs.
VARIANT union are supported by AddHostObjectToScriptHowever, please note that not all types in the .
See WebView2 Win32 C++ ICoreWebView2 | Microsoft Docs for more details.
Now that we have a variant of the object that is C++ code-friendly, our app's native-side code is ready to pass the host object to the app's web-side code.
IDispatch5. Review line 52, which sets the remote objects variant type as .
VARIANT to AddHostObjectToScript, name it sampleVARIANT (&remoteObjectAsVariant6. Review line 59, where we pass the , and enable the remote object as ).
IDispatchAddHostObjectToScriptAddHostObjectToScriptNow the WebView2 app's native-side code successfully creates a host object that implements . This native code also calls the WebView2 API  and passes the object to the app's web-side code via . Continue to the next step to see what's enabled by passing the host object from the app's native-side code to the app's web-side code.
 Step 4: Use AddHostObjectToScript to pass a method to the web
To follow along, we use the WebView2 Sample App.
1. In Microsoft Visual Studio, select File > Save All (Ctrl+Shift+S) to save the project.
2. Press F5 to build and run the project.
ScenarioAddHostObject.html3. Open .
4. Click Scenario > Host Objects.
5. Explore properties by clicking buttons such as Property, Method, and Callback to see how the sample code behaves.
By now you have observed capabilities of the host object used from the app's web-side code. To gain insight into what's happening in JavaScript, let's examine the following code:
150 // Date property 
151 document.getElementById("setDateButton").addEventListener("click", () => { 
152 chrome.webview.hostObjects.options.shouldSerializeDates = true; 
153 chrome.webview.hostObjects.sync.sample.dateProperty = new Date(); 
154 document.getElementById("dateOutput").textContent = "sample.dateProperty: " + chrome.webview.hostObjects.sync.sample.dateProperty; 
155 }); 
156 document.getElementById("createRemoteDateButton").addEventListener("click", () => { 
157 chrome.webview.hostObjects.sync.sample.createNativeDate(); 
158 document.getElementById("dateOutput").textContent = "sample.dateProperty: " + chrome.webview.hostObjects.sync.sample.dateProperty; 159    });
chrome.webview.hostObjects.sync.sample.datePropertyLine 154 references . This line of code is getting the 
dateProperty of the native host object.
Congratulations! You have successfully created a host object in your app's native-side code, passed the host object to your app's web-side code, and then used the host object from the app's web-side code.
Now let's see what other APIs there are in the host object ecosystem. For more information about host objects, see WebView2 Win32 C++ ICoreWebView2.
 
 Call native-side WinRT code from web-side code
 	6/21/2022 • 13 minutes to read • Edit OnlineYour web-side JavaScript code can access native-side WinRT methods and properties, with the help of the wv2winrt tool (the WebView2 WinRT JS Projection tool). The wv2winrt tool generates needed code files for your JavaScript code, and enables using methods and properties of any WinRT APIs, including:
Your WebView2 host app's WinRT APIs.
Windows WinRT APIs.
Third-party WinRT APIs.
For more information about why you'd want to have your web-side JavaScript code access the methods and properties of your WinRT host app, see the introduction of Call native-side code from web-side code.
This article walks you through the following main steps:
1. Create a WinRTAdapter project for the wv2winrt tool.
2. Run the wv2winrt tool to generate C++/WinRT source code for selected namespaces or classes.
3. Call AddHostObjectToScript, in the WinUI 2 (UWP) sample WebView2 browser app project, WebView2Samples > webview2_sample_uwp.
4. Call methods and properties on the host object from your web-side JavaScript code (or from the DevTools Console).
 W h y W in RT an d .N ET u se differen t approac h es 
This article is for WinRT WebView2 APIs, not for .NET WebView2 APIs. The C# code in this article will build, but
AddHostObjectToScriptnot run, for .NET WebView2 APIs. Calling  using this article's C# code for .NET WebView2 APIs would produce an error message.
IDispatchAddHostObjectToScriptThe wv2winrt tool (the WebView2 WinRT JS Projection tool) is needed when projecting WinRT objects, because WinRT doesn't support  or any other mechanism to dynamically inspect and interact with WinRT objects, which WebView2's Win32 and .NET platforms support. For .NET use of , see Call native-side code from web-side code instead of this article.
 End goal of this example
Language class, which is in the Windows.GlobalizationFirst, we'll pick some WinRT APIs that we're interested in calling from JavaScript code. For this example, we'll use the WinRT  namespace, for Windows UWP applications.
The Language Class enables getting language information from the client's native OS.
In the WebView2 host app, the web-side JavaScript code can then access methods and properties on the 
LanguagedisplayName property of the Language object that's in the native-side code. At the end of this example walkthrough, you'll use the Console of Microsoft Edge DevTools to test reading the host's  class:
const Windows = chrome.webview.hostObjects.sync.Windows; (new Windows.Globalization.Language("en-US")).displayName;
English (United States)The DevTools Console will then output , or another language display name, demonstrating that you've called native-side WinRT code from web-side JavaScript code:

Similarly, in actual code rather than in the DevTools Console, you access the host object first by setup code for the script:
// early in setup code: const Windows = chrome.webview.hostObjects.sync.Windows;
Then in the main body of your code, calls to projected objects look like the following:
(new Windows.Globalization.Language("en-US")).displayName;
Let's get started!
 Step 1: Clone the repo and build the WebView2 UWP sample
1. If Visual Studio 2015 or later isn't already installed, in a separate window or tab, see Install Visual Studio in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
2. If a preview channel of Microsoft Edge (Beta, Dev, or Canary) isn't already installed, in a separate window or tab, see Install a preview channel of Microsoft Edge in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue the steps below.
WebView2SamplesIf you have your own app code base already, you can open that project in Visual Studio, instead of starting with the webview2_sample_uwp sample from the  repo.
WebView2Samples3. If not done already, download or clone the  repo to your local drive. In a separate window or tab, see Download the WebView2Samples repo in Set up your Dev environment for WebView2. Follow the steps in that section, and then return to this page and continue below.
.sln4. On your local drive, open the  file in Visual Studio, in a directory such as:

<your-repos-directory>/WebView2Samples-main/SampleApps/webview2_sample_uwp/webview2_sample_uwp.sln
<your-repos-directory>/WebView2Samples/SampleApps/webview2_sample_uwp/webview2_sample_uwp.slnThe sample solution opens in Visual Studio:

5. In Visual Studio, select Debug > Start Debugging. This builds the webview2_sample_uwp project, and then runs the baseline version of the project. The WebView2 WinUI 2 UWP Sample window opens:

6. Close the WebView2 WinUI 2 UWP Sample window.
In case you need more information, see detailed steps in these pages, and then continue below:
WebView2 sample: WinUI 2 (UWP) browser app - steps to open, compile, and run the sample app.
Get started with WebView2 in WinUI 2 (UWP) apps (public preview) - setting up a basic WebView2 app.
GitHub > WebView2Samples repo > webview2_sample_uwp
Set up your Dev environment for WebView2 - details about setting up prerequisites.
 Step 2. Add a WinRTAdapter project for the wv2winrt tool
Next, create a WinRTAdapter project for the wv2winrt tool (the WebView2 WinRT JS Projection tool). This project builds a library out of code that's generated by running the tool. This generated code allows WinRT APIs to be exposed in the WebView2 control.
Add a project for the wv2winrt tool, as follows:
1. Right-click the webview2_sample_uwp solution (not the project), and then select Add > New project. The Add a new project dialog box opens.
2. In the Search textbox, enter Windows Runtime Component (C++/WinRT).
Alternative approach: If you don't add a project using the project template for Windows Runtime Component (C++/WinRT) as described in the numbered steps below, then you'll need to instead install the Universal Windows Platform development workload, by following the steps in UWP applications > Introduction to C++/WinRT.
3. Select the Windows Runtime Component (C++/WinRT) card, and then click the Next button:

The Configure your new project window opens.
4. In the Project name textbox, name the Project, specifically, WinRTAdapter. Note: For now, you must use this specific project name:

5. Click the Create button. The New Universal Windows Platform Project dialog opens:

6. Click the OK button.
The WinRTAdapter project is created:

The wv2winrt tool (the WebView2 WinRT JS Projection tool) will run in this WinRTAdapter project. In a below step, you'll generate code for selected classes in this project.
 Step 3. Install Windows Implementation Library, for WinRTAdapter project
In the WinRTAdapter project, install the Windows Implementation Library (WIL), as follows:
1. In Solution Explorer, right-click the WinRTAdapter project, and then select Manage NuGet Packages. The NuGet Package Manager window opens in Visual Studio.
2. In the NuGet Package Manager window, in the Search box, enter Windows Implementation Library, and then select the Windows Implementation Library card:

3. Click the Install button.
WIL is now installed for the WinRTAdapter project. Windows Implementation Library (WIL) is a header-only C++ library to make using COM coding for Windows easier. It provides readable, type-safe C++ interfaces for Windows COM coding patterns.
 Step 4. Install WebView2 prerelease SDK, for WinRTAdapter project
In the WinRTAdapter project, also install a prerelease version of the WebView2 SDK, as follows:
1. In Solution Explorer, right-click the WinRTAdapter project, and then select Manage NuGet Packages. The NuGet Package Manager window opens.
2. Select the Include prerelease checkbox.
3. In the Search box, enter WebView2.
4. Click the Microsoft.Web.WebView2 card. Detailed info appears in the middle area of the window.
5. In the Version drop-down, select a prerelease version of the WebView2 SDK. The version must be
1.0.1243.0 or higher. Note which version number you select.
6. Click the Install button:

The WebView2 prerelease SDK is now installed for the WinRTAdapter project.
 Step 5. Install WebView2 prerelease SDK, for webview2_sample_uwp project
In the webview2_sample_uwp project, install the same prerelease version of the WebView2 SDK as you installed for the WinRTAdapter project, as follows:
1. In Solution Explorer, right-click the webview2_sample_uwp project, and then select Manage NuGet Packages. The NuGet Package Manager window opens.
2. Select the Include prerelease checkbox.
3. In the Search box, enter WebView2.
4. Click the Microsoft.Web.WebView2 card. Detailed information appears in the middle area of the window.
5. In the Version drop-down, select a prerelease version of the WebView2 SDK. The version must be
1.0.1243.0 or higher. This needs to be the same version as for the WinRTAdapter project.
6. Click the Install button.
The screen should look similar to the above section, except that now, NuGet Package Manager is open for the webview2_sample_uwp project instead of the WinRTAdapter project.
The WebView2 prerelease SDK is now installed for the webview2_sample_uwp project.
 Step 6. Generate source code for selected host APIs
Next, configure the wv2winrt tool (the WebView2 WinRT JS Projection tool), to incorporate the WinRT classes that you want to use. This generates source files that will then be compiled. Generating code for these APIs enables your web-side JavaScript code to call these APIs.
WindowsIn the example steps below, we'll specify two  namespaces, and the wv2winrt tool will generate source code for only APIs under those namespaces:

Windows.System.UserProfile
Windows.Globalization.LanguageLater, when the sample app is running, you'll call these APIs from the DevTools Console, to demonstrate that these specified host-side APIs can be called from web-side code.
WindowsIn this walkthrough, specify two  namespaces, as follows:
1. In Solution Explorer, right-click the WinRTAdapter project, and then select Properties. The WinRTAdapter Property Pages dialog opens.
2. On the left, select Common Properties > WebView2.
3. Set Use WebView2 WinRT APIs to No. This is so the WebView2 SDK doesn't copy the WebView2 WinRT component to the project's output. This WinRTAdapter project isn't calling any WebView2 WinRT APIs, so it doesn't need the WinRT component.
4. Set Use the wv2winrt tool to Yes.
5. Set Use JavaScript case to Yes.
6. In the Include filters row, click the right-hand column, and then click Edit. The Include filters dialog opens.
7. In the topmost text box, paste the following lines:
Windows.System.UserProfile
Windows.Globalization.Language

You need to specify the full name of the namespaces or classes, as shown above.
8. Click the OK button to close the Include filters dialog box.
9. Make sure the WinRTAdapter Property Pages dialog looks like the following, for this walkthrough:

10. Click the OK button to close the Property Pages dialog box.
Add a reference:
In the webview2_uwp_sample project, add a reference that points to the WinRTAdapter project, as follows:
11. In Solution Explorer, expand the webview2_uwp_sample project, right-click References, and then select Add Reference. The Reference Manager dialog opens.
12. In the tree on the left, select Projects. Select the WinRTAdapter checkbox:

13. Click the OK button to close the Reference Manager dialog.
Generate the API code:
14. Right-click the WinRTAdapter project, and then select Build.
Source code is generated for namespaces or classes that you specified in the Include filters dialog. That dialog populates the Include filters row of the WinRTAdapter Property Pages dialog for the WinRTAdapter project.
 Step 7. Add the host object in the webview2_sample_uwp project
InitializeWebView2Async method that calls AddHostObjectToScriptNext, pass the WinRT object from the native side of the host app to the web side of the host app. To do this, add an , as follows:
1. In Solution Explorer, expand the webview2_sample_uwp project, and then select MainPage.xaml.cs.
MainPage constructor, add the following InitializeWebView2Async2. Below the  method:
private async void InitializeWebView2Async()
{
   await WebView2.EnsureCoreWebView2Async();
   var dispatchAdapter = new WinRTAdapter.DispatchAdapter();
   WebView2.CoreWebView2.AddHostObjectToScript("Windows", dispatchAdapter.WrapNamedObject("Windows", dispatchAdapter));
}
AddHostObjectToScriptThis method calls .
MainPage constructor, above the StatusUpdate("Ready");3. In the  line, add the following code:
InitializeWebView2Async();
4. Right-click the webview2_sample_uwp project, and then select Set as startup project.
Shift+Ctrl+S5. Press  to save all files.
F56. Press  to run the sample app. The WebView2 WinUI 2 UWP Sample window opens.

The host app's web-side code (and the DevTools Console) can now call methods and properties of the specified namespaces or classes of the host object.
 Step 8. Call methods and properties on the host object from web-side JavaScript
Next, use the DevTools Console to demonstrate that web-side code can call the included, specified host-side APIs.
Ctrl+Shift+I1. Click in the main part of the WebView2 sample app window to give it focus, and then press to open Microsoft Edge DevTools. Or, right-click the page, and then select Inspect. The Microsoft Edge DevTools window opens.
Alt+Tab2. If the Microsoft Edge DevTools window isn't visible, press  to display the DevTools window. If needed, move the DevTools window.
Enter3. In the DevTools Console, paste the following code, and then press :
const Windows = chrome.webview.hostObjects.sync.Windows; (new Windows.Globalization.Language("en-US")).displayName;
English (United States)The Console outputs a language name string, such as , demonstrating that your app's host-side code can be called from web-side code:

Congratulations! You've finished the sample demonstration of calling WinRT code from JavaScript code.
 Make AddHostObjectToScript JavaScript proxies act more like other
JavaScript APIs
AddHostObjectToScriptAddHostObjectToScriptAddHostObjectToScript defaults to using asynchronous and verbose proxies, but you can make the  JavaScript proxies act more like other JavaScript APIs. To read more about 
 and its default behavior, see AddHostObjectToScript. Also, if you are migrating a host app
from JavaScript WinRT projection in JavaScript UWP apps, or from the EdgeHTML-based WebView, you may want to use the following approach, to better match that previous behavior.
AddHostObjectToScriptTo make the  JavaScript proxies act more like other JavaScript APIs, set the following properties:
chrome.webview.hostObjects.option.defaultSyncProxy		 - Proxies may either be asynchronous or
synchronous. Normally we know, when calling a method on a synchronous proxy, that the result should also be a synchronous proxy. But in some cases, we lose that context, such as when providing a reference to a function to native code, and then native code later calling that function. In these cases, the proxy will be asynchronous, unless this property is set.
chrome.webview.hostObjects.options.forceAsyncMethodMatches		 - This is an array of regular expressions. If
Asyncyou call a method on a synchronous proxy, the method call will actually be performed asynchronously if the method name matches a string or regular expression that's in this array. Setting this value to [/Async$/] will make any method that ends with  be an asynchronous method call. If an async method doesn't match here and isn't forced to be asynchronous, the method will be invoked synchronously, blocking execution of the calling JavaScript and then returning the resolution of the promise, rather than returning a promise.
chrome.webview.hostObjects.options.ignoreMemberNotFoundErrortrueundefined	 - If you attempt to get the value of a property of a proxy, and the property doesn't exist on the corresponding native class, you'll get an exception - unless you set this property to , in which case the behavior will match Chakra WinRT projection behavior (and general JavaScript behavior) and return  with no error.
Chakra WinRT projection puts the WinRT namespaces directly on the root object. In contrast:
AddHostObjectToScript places async root proxies on chrome.webview.hostObjectsAddHostObjectToScript places sync root proxies on chrome.webview.hostObjects.sync.
.
To access root proxies where Chakra WinRT projection code would expect, you can assign the root proxy WinRT namespace locations over to the root object. For example:
window.Windows = chrome.webview.hostObjects.sync.Windows;
To ensure that the JavaScript that sets all this up is executed before anything else, you can either add the above
CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsyncstatement to your JavaScript, or you can tell WebView2 to inject the above statement for you before running any other script, by using the  method.
The following example demonstrates the above techniques:
	 	C#
C++
 
webview.CoreWebView2.AddScriptToExecuteOnDocumentCreatedAsync(             "(() => {" +
                    "if (chrome && chrome.webview) {" +
                        "console.log('Setting up WinRT projection options');" +
                        "chrome.webview.hostObjects.options.defaultSyncProxy = true;" +                         "chrome.webview.hostObjects.options.forceAsyncMethodMatches = [/Async$/,/AsyncWithSpeller$/];" + 
                        "chrome.webview.hostObjects.options.ignoreMemberNotFoundError = true;"  + 
                        "window.Windows = chrome.webview.hostObjects.sync.Windows;" +
                    "}" +
                "})();"); WebView2 Properties available in the WinRTAdapter Property Pages
This section is for reference.

For help about a property, click a property row. Help is shown at the bottom of the dialog.
wv2winrt.exeCommand-line help contains similar information for the parameters of . For example:
PARAMETERDESCRIPTION
verboseList some content to standard out including which files have been created and information about the include and exclude rules.
includeList as above will exclude namespaces and runtimeclasses by default except those listed. The include declarations may be either namespaces which include everything in that namespace, or runtimeclass names to include just that runtimeclass.
use-javascript-caseChanges the generated code to produce methods names, property names, and so on, that use the same casing style as Chakra JavaScript WinRT projection. The default is to produce names that match the winrt.
output-pathSets the path in which generated files will be written.
output-namespaceSets the namespace to use for the generated WinRT class.
winmd-pathsA space-delimited list of all the winmd files that should be examined for code generation. See also
General articles:
 Call native-side code from web-side code
Sample:
WebView2Samples > webview2_sample_uwp - WebView2 UWP WinUi2 browser.
WebView2 sample: WinUI 2 (UWP) browser app - General walkthrough of how to download, compile, and run the sample.
Get started with WebView2 in WinUI 2 (UWP) apps (public preview) - Tutorial to download, compile, and run the sample.
API Reference:
WinRT: CoreWebView2.AddHostObjectToScript Method
Win32: ICoreWebView2::AddHostObjectToScript method
.NET: CoreWebView2.AddHostObjectToScript Method

 
 Understand the different WebView2 SDK versions
 	6/21/2022 • 9 minutes to read • Edit OnlineThe NuGet package for the WebView2 SDK contains both a release and prerelease package. Either use a prerelease SDK with a preview channel of Microsoft Edge, or use a release SDK with the WebView2 Runtime.
Prerelease SDK packages are for use during development if you want to test the latest WebView2 APIs, including the experimental APIs, before support for those APIs is added to the Runtime. The Canary channel is recommended, because it has the implementations of the latest APIs. When you want to test and use experimental WebView2 APIs, use the following combination:
A prerelease version of the WebView2 SDK.
A preview channel of Microsoft Edge on your development client.
Release SDK packages only contain stable APIs, not experimental APIs. When you're working on a production release of your WebView2 app, use the following combination:
A release version of the WebView2 SDK.
The WebView2 Runtime on your development client.
More detail about the prerelease and release SDK packages is provided below.
 Use a prerelease version of the SDK along with a preview channel of Microsoft Edge
When developing an Evergreen WebView2 app, regularly test the app against the latest Microsoft Edge preview channel, in addition to testing against the WebView2 Runtime. Because the web platform is constantly evolving, regular testing is the best way to ensure your app will continue to work as intended.
When you use a WebView2 SDK prerelease package, use a Microsoft Edge preview channel on your development client. Preview channels are also called Insiders channels. The Canary preview channel is recommended rather than Beta or Dev, because Canary is most recent and has implementations of the latest experimental APIs.
The SDK prerelease package is a superset of the SDK release package, with method signatures for more, Experimental APIs. Preview channels provide the implementations of the experimental WebView2 APIs. The experimental APIs are subject to change based on your feedback. Avoid using the SDK prerelease package to build production apps.
For information about temporarily pointing your app to a preview channel instead of defaulting to the WebView2 Runtime, see Test upcoming APIs and features.
 Use a release version of the SDK along with the Runtime
When you use a WebView2 SDK release package, use the WebView2 Evergreen Runtime on your development client, rather than a Microsoft Edge preview channel. By default, a WebView2 app targets the Runtime rather than Microsoft Edge. By design, the Microsoft Edge Stable channel doesn't support WebView2.
The SDK release package contains all of the stable Win32 C/C++ and .NET APIs, and doesn't include method signatures for experimental APIs. All of the APIs that are in an SDK release package are fully supported, in an equal or higher build number of the WebView2 Runtime.
The SDK release package contains the following components:
Win32 C/C++ APIs.
.NET APIs: WPF, WinForms, and Core.
For more information about automatic updating of the Evergreen Runtime, see Distribute your app and the WebView2 Runtime.
 Release cadence
New versions of the WebView2 SDK are shipped at the same general cadence as the Microsoft Edge browser, which is approximately every four weeks.
 Minimum version and build number to instantiate WebView2
For the client to be able to create a WebView2 instance and use the set of APIs in the WebView2 General Availability release (SDK build 616), the client must have WebView2 Runtime version 86.0.616.0 or higher. Runtime 86.0.616.0 is a special release, because it is the General Availability release.
On a development machine, the client must have either the Microsoft Edge preview channel version 86.0.616.0 or higher, or the WebView2 Runtime version 86.0.616.0 or higher.
 Forward compatibility of APIs
The WebView2 release SDK has been forward-compatible ever since version 1 (that is, SDK version 1.0.622.22). You can update your WebView2 app to use the latest APIs from the most recent release version of the SDK. Your app will continue to work on clients because clients automatically have the latest WebView2 Evergreen Runtime.
The WebView2 APIs in an SDK release package are stable and forward-compatible. A WebView2 API works when using a WebView2 Runtime that has an equal or higher build number as the SDK build number in which the API was introduced. The build number is the third part of the four-part version number for the Webview2 SDK, and of the four-part version number for Microsoft Edge and the WebView2 Runtime.
 When you use a WebView2 SDK that has a build number equal to or less than the WebView2 Runtime, every API that you have access to in that SDK works with that version of the Runtime.
 When you use a WebView2 SDK that has a build number greater than the WebView2 Runtime, the newer APIs' implementations aren't available in the Runtime.
For example, if an API is introduced in SDK 1.0.900.0, that API would work with Runtime 94.0.900+.0, but not with Runtime 90.0.700.0.
You must coordinate the WebView2 SDK version that you use for development, and the WebView2 Runtime version that's installed on client machines. The client should have a version of the Runtime that supports all of the latest APIs that are in the SDK version you use to develop the app. For full support for the latest APIs in a release version of the SDK, the Runtime on the client must have a build number that's greater than or equal to the SDK build number.
 Experimental APIs
To try out new forthcoming features that are in development, use experimental APIs. Experimental APIs are contained in prerelease versions of the WebView2 SDK, but not in release versions of the WebView2 SDK.
 Developing with experimental APIs and providing feedback 
The experimental APIs in a WebView2 SDK prerelease package aren't guaranteed to be forward-compatible and might be removed in future Runtime updates. When a prerelease version of the WebView2 SDK is initially made available, that SDK only works with Microsoft Edge Canary. Soon after that, the prerelease SDK also works with the Beta and Dev channels. Use a prerelease SDK to try out new APIs early and provide feedback before the new APIs are promoted to become stable, forward-compatible APIs.
For full support of experimental APIs, use a Microsoft Edge preview channel, not the WebView2 Evergreen
Runtime. Any experimental APIs that are in a prerelease SDK aren't guaranteed to be forward-compatible. The APIs that are in an SDK release version are forward-compatible. For more information, see Forward compatibility of APIs, above.
The WebView2 team is seeking feedback on experimental WebView2 APIs that might be promoted to Stable in future releases. The experimental APIs are indicated as "experimental" in the WebView2 SDK Reference documentation.
To help you evaluate the experimental APIs and share your feedback, use the WebView2Feedback repo.
 Moving from experimental APIs to stable APIs 
Once an API has been moved from experimental to stable APIs, you need to move your app's code to the stable API. Using experimental APIs is not recommended for production apps. Follow these practices when moving your app from using experimental APIs to using stable APIs:
 In your project in Visual Studio, update your WebView2 SDK package version. See Install the WebView2 SDK in Set up your Dev environment for WebView2.
 Update your app's code to use stable APIs instead of experimental APIs (for COM). The stable API will be supported with bug fixes, but the experimental API will be deprecated, and not available in the newer SDK. After the release of an API as stable, the experimental version of that API is supported for two releases, in a deprecated state. In subsequent versions of the SDK, experimental APIs might be modified, removed, or added.
 Always use feature detection, to ensure that the stable API is implemented in the user's version of the WebView2 Runtime. See Feature-detecting to test whether the installed Runtime supports recently added APIs, below.
 Note for .NET only: In a prerelease WebView2 SDK, the .NET stable APIs will fallback to the corresponding experimental APIs, if the user's WebView2 Runtime has only the experimental API implementation and doesn't have the stable API implementation.
 Matching the Runtime version with the SDK version
In the Evergreen distribution approach, the client's WebView2 Runtime automatically updates to the latest version available. However, a user or IT admin might choose to prevent automatic updating of the WebView2 Runtime. The resulting outdated Runtime on the client might cause compatibility issues with your updated WebView2 app that uses new APIs from a recent SDK.
In case updating the WebView2 Runtime is prevented on the client, make sure that you know the minimum build number of the WebView2 Runtime that is required by your app. See Microsoft Edge WebView2. The minimum required Runtime version to support the General Availability release of the SDK (build 616) is older than for the latest Runtime. The latest Runtime supports all APIs that are in the latest SDK release build.
To check the compatibility between specific build numbers of the SDK and the Runtime or Microsoft Edge preview channel, see Release Notes for the WebView2 SDK.
 Feature-detecting to test whether the installed Runtime supports recently added APIs
QueryInterface or try-catchIf your app uses the Evergreen Runtime rather than Fixed Version, you should wrap any calls to relatively new WebView2 APIs by using . There are edge cases where a client's Evergreen
Runtime isn't the latest build and therefore falls behind the SDK build number, because the Admin might have turned off updating of the WebView2 Runtime, or the client might be offline.
When you develop a WebView2 app using a recent version of the WebView2 SDK, if you use a recently added API, you should test or "feature-detect" whether that API is present in the client's installed WebView2 Runtime. How your app programmatically tests for API support depends on the coding platform.
CreateCoreWebView2Environment	 Win32 C/C++. When requesting the DLL export 	 and when running 
QueryInterface on any CoreWebView2 object, test for a return value of E_NOINTERFACE. That return value likely indicates that the client's WebView2 Runtime is an older version that doesn't support that interface.
try_queryCHECK_FAILUREFor an example of checking for the existence of specific WebView2 APIs in the Runtime, find  in AppWindow.cpp. This file wraps WebView2 API calls in the  macro function, defined in 
CheckFailure.h.
try/catch and check for a No such interface supported .NET and WinUI. Use 	 exception when using methods, properties, and events that were added to more recent versions of the WebView2 SDK. This exception likely indicates that the client's WebView2 Runtime is an older version that doesn't support that API.
If your code determines that an API is unavailable in the client's installed WebView2 Runtime, you should provide graceful fallback for the associated feature, or inform the user that they must update the WebView2 Runtime to use the feature.
This technique is listed as a WebView2 development best practice, at Test whether APIs are supported by the installed WebView2 Runtime.

 
 Test upcoming APIs and features
 	6/21/2022 • 8 minutes to read • Edit OnlineTo test upcoming APIs and features, you switch to a preview channel, as follows.
Updates of the WebView2 Evergreen Runtime often include new APIs and features. Some of these updates could potentially break your WebView2 app. To test the experimental APIs ahead of time and ensure your app's forward-compatibility, you should perform compatibility testing using a preview channel of Microsoft Edge, along with a prerelease version of the WebView2 SDK.
When you test a prerelease SDK package, you need to direct your application to use a preview channel of Microsoft Edge (Beta, Dev, or Canary), instead of defaulting to using the WebView2 Runtime. Several approaches for doing this are explained below.
The WebView2 Runtime doesn't have the latest experimental WebView2 APIs. For your WebView2 code to run when using experimental APIs in a prerelease SDK, your client (on a development machine) needs to have a Microsoft Edge preview channel. The Canary preview channel is recommended, because it's ahead of the other channels and has the latest experimental APIs.
The prerelease SDK works together with a preview channel as follows:
 A prerelease version of the WebView2 SDK contains the method signatures for experimental APIs, which allow you to write code using the experimental WebView2 APIs in your app.
 The preview channels of Microsoft Edge contain the Microsoft Edge binaries that are needed to run and render your app, including the implementation of the experimental APIs.
For more information about how SDK versions works in conjunction with the WebView2 Runtime or preview channels of Microsoft Edge, see Understand the different WebView2 SDK versions.
 Downloading the prerelease SDK and a preview channel
To use experimental APIs, download a prerelease version of the WebView2 SDK from Microsoft.Web.WebView2 package.
To download a Microsoft Edge preview channel, see Microsoft Edge Insider Channels.
 Approaches to making your app use a specific browser channel
When a WebView2 is initialized, it will attempt to find a valid runtime on the machine to use. This can be the WebView2 Runtime, a preview channel of Microsoft Edge, or a specified location containing fixed version binaries. You can learn more about supported runtimes at Distribute your app and the WebView2 Runtime.
There are several ways to make your WebView2 app use a specified preview channel of Microsoft Edge:
By calling a function.
By using a group policy.
By using a registry override.
By using an environment variable.
These approaches are described below.
 Browser executable folder 
One approach is to use a browser executable folder. In this approach, you specify a folder that contains runtime binaries. This folder can be any of the following locations:
The installed location of the WebView2 Runtime.
A preview channel of Microsoft Edge.
A folder containing fixed version binaries that you have deployed to the machine yourself.
If you set the browser executable folder to a specific preview channel of Microsoft Edge, you will need to update the location when that preview channel updates to a newer version. This is because the location includes the version number as part of its path. Therefore, we recommend using this approach for local testing only.
	 Default channel 	-search order
This section applies to using a group policy, registry override, or environment variable.
If a specific browser executable folder isn't specified, then the WebView2 will attempt to load a runtime from one of the known default locations.
The default channel-search order is:
1. The WebView2 Runtime.
2. The Beta channel of Microsoft Edge.
3. The Dev channel of Microsoft Edge.
4. The Canary channel of Microsoft Edge.
1If you set the release channel preference to  by using a group policy, registry override, or environment variable, that will use the reverse of the default search order.
 Using code
If you want to make your application use a specific runtime by calling a function, complete the following steps.
 Win32/C++ 
We'll use the WebView2APISample to demonstrate this procedure.
1. On your development machine, find the path containing the Microsoft Edge preview channel. For example:
C:\\Users\\myname\\AppData\\Local\\Microsoft\\Edge SxS\\Application\\93.0.929.0
2. Clone the WebView2Samples repo.
AppWindow.cpp3. Open the WebView2APISample project, and then in Source Files, open the  file.
4. Find where CreateCoreWebView2EnvironmentWithOptions is called. For example:
HRESULT hr = CreateCoreWebView2EnvironmentWithOptions(     subFolder, m_userDataFolder.c_str(), options.Get(),
    Callback<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>(         this, &AppWindow::OnCreateEnvironmentCompleted)         .Get());subFolder5. Replace the  variable by the folder path for the Microsoft Edge preview channel you want to use. For example:
HRESULT hr = CreateCoreWebView2EnvironmentWithOptions(
    L"C:\\Users\\myname\\AppData\\Local\\Microsoft\\Edge SxS\\Application\\93.0.929.0", m_userDataFolder.c_str(), options.Get(),
    Callback<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>(         this, &AppWindow::OnCreateEnvironmentCompleted)         .Get()); WinForms 
WinForms uses an approach similar to the Win32/C++ approach described above.
CreationProperties.BrowserExecutableFolder1. Set  to point to the path that contains the Microsoft Edge
MainWindow.xaml.csCanary or Dev channel. To do this, in the WebView2Samples solution, in the WebView2WpfBrowser project, open the file .
CreationProperties.BrowserExecutableFolder2. Find . For example:
WebView2 GetReplacementControl(bool useNewEnvironment) {
   WebView2 replacementControl = new WebView2();
   ((System.ComponentModel.ISupportInitialize)(replacementControl)).BeginInit();
   // Setup properties and bindings.    if (useNewEnvironment)
   {
      // Create a new CoreWebView2CreationProperties instance so the environment
      // is made anew.
      replacementControl.CreationProperties = new CoreWebView2CreationProperties();       replacementControl.CreationProperties.BrowserExecutableFolder = webView.CreationProperties.BrowserExecutableFolder;
      replacementControl.CreationProperties.Language = webView.CreationProperties.Language;       replacementControl.CreationProperties.UserDataFolder = webView.CreationProperties.UserDataFolder;
      shouldAttachEnvironmentEventHandlers = true;    } WPF 
WPF uses an approach similar to the Win32/C++ approach described above.
Refer to CoreWebView2CreationProperties.BrowserExecutableFolder Property.
 Using a group policy
PolicyDefinitionsIf you want to make your application use a Microsoft Edge preview channel by using a group policy, copy ADMX and ADML files to the  folder, as follows.
1. Download the policy files from Download and deploy Microsoft Edge for business.
C:\Windows\PolicyDefinitions2. Copy the ADMX file into a Policy Definitions template folder, such as .
Policy Definitions3. Copy the ADML file into a matching locale folder within the  folder, such as a 
C:\Windows\PolicyDefinitions\en-us folder.
4. Open the Local Group Policy Editor. To do this, in the Windows search bar, type "group policy", and then select Edit group policy.
5. Expand Local Computer Policy, then Computer Configuration or User Configuration. Then expand Administrative Templates > Microsoft Edge WebView2.

6. Select Browser Executable Folder. The following screenshots apply to setting the Browser
Executable Folder. Alternatively, select Release Channel Preference, which uses similar dialog boxes.

7. Select the Show button.
.exe8. Fill-in the Show Contents dialog box. In the Value name column, enter an asterisk to apply to all WebView2 apps, or a  filename to only affect the specified WebView2 app. In the Value column, enter the path to your WebView2 app's executable file.

9. Select OK to close the dialog boxes.
For more information, see Configure Microsoft Edge policy settings.
 Using a registry override
When specifying a preview channel by using a registry override, there are two options:
Change the browser executable folder.
Change the release channel preference.
These two approaches are described below.
 Registry override: browser executable folder 
To make your application use a Microsoft Edge preview channel by using a registry override that sets the browser executable folder:
1. Open a PowerShell terminal or PowerShell-enabled command prompt.
2. Modify and then run the following command:
REG ADD HKLM\Software\Policies\Microsoft\Edge\WebView2\BrowserExecutableFolder /v * /t REG_SZ /d
"C:\Users\myname\AppData\Local\Microsoft\Edge SxS\Application\88.0.680.0"
The asterisk (*) as the value name makes this override apply to all WebView2 apps. If you want to only apply this override to a particular WebView2 app, replace the asterisk by the filename of the app's executable.
C:\Users\myname\AppData\Local\Microsoft\Edge SxS\Application\88.0.680.0Replace  by the path to the desired Microsoft Edge preview channel.
 Resuming using the default, WebView2 Evergreen Runtime To undo the above setting, run the following command:
REG DELETE HKLM\Software\Policies\Microsoft\Edge\WebView2\BrowserExecutableFolder /f
 Registry override: release channel preference 
To make your application use a Microsoft Edge preview channel by using a registry override that changes the release channel preference by changing the order of searching for a channel:
1. Open a PowerShell terminal or PowerShell-enabled command prompt.
2. Modify and then run the following command:
REG ADD HKLM\Software\Policies\Microsoft\Edge\WebView2\ReleaseChannelPreference /v * /t REG_SZ /d "1"
The asterisk (*) as the value name makes this override apply to all WebView2 apps. If you want to only apply this override to a particular WebView2 app, replace the asterisk by the filename of the app's executable.
 Resuming using the default, WebView2 Evergreen Runtime 
ReleaseChannelPreferenceTo delete the  registry override, run the command:
REG DELETE HKLM\Software\Policies\Microsoft\Edge\WebView2\ReleaseChannelPreference /f
 Using an environment variable
To make your application use a Microsoft Edge preview channel by using an environment variable:
1. In the Windows search bar, enter "environment", and then select Edit the system environment variables.

2. In the System Properties dialog box, select the Advanced tab, and then select the Environment Variables button.

3. In the User variables section of the Environment Variables dialog box, select New.
WEBVIEW2_BROWSER_EXECUTABLE_FOLDER4. In the New User Variable dialog box, set the Variable name to , and set the Variable value to the path to your preferred browser channel or fixed version binaries.
WEBVIEW2_RELEASE_CHANNEL_PREFERENCEAlternatively, set the Variable name to , and set the Variable
11value to  to reverse the search order, to use preview channels (Beta, Dev, or Canary) first. Any value besides  indicates the default search order.
5. Click OK to close the dialog boxes.

 Which app is affected 
The above approach sets the environment variable for all WebView2 apps, not just the app you're testing. To set
this environment variable for only the WebView2 app which you are testing, if you're running your app from the
WEBVIEW2_RELEASE_CHANNEL_PREFERENCE=1command prompt, set the environment variable . That sets the
cmd.execmd.exeenvironment variable just for the current  command-prompt process and for any new child processes from that  instance. Then the environment variable only applies to the WebView2 app that you're testing.
WEBVIEW2_RELEASE_CHANNEL_PREFERENCEIf you use the  environment variable, you can set it to the following values.
VALUEDESCRIPTION
1Reverses the search order, to use preview channels first, before the WebView2 Runtime.
0 or another value other than 1Uses the default channel-search order, which is to use the WebView2 Runtime before the preview channels. Applying the new environment variable to running processes 
After setting an environment variable, the environment variable is applied to any new processes that are created. The environment variable doesn't apply to processes which are already running. To ensure that all processes use the new environment variable, you may need to restart Visual Studio, or log out of Windows and then log in again.
 
 Distribute your app and the WebView2 Runtime
 	6/21/2022 • 18 minutes to read • Edit OnlineWhen releasing an app that uses Microsoft Edge WebView2, you need distribute the WebView2 Runtime, either by distributing the automatically updated Evergreen Runtime, or by distributing a Fixed Version of the Runtime.
A WebView2 app depends on the WebView2 Runtime on client machines. When you distribute your WebView2 app, you need to take into account how the WebView2 Runtime is distributed to and updated on client machines.
 The WebView2 Runtime
The WebView2 Runtime is a redistributable runtime and serves as the underlying (or backing) web platform for
WebView2 apps. The concept is similar to Visual C++ or the .NET Runtime for C++/.NET apps. The WebView2
Runtime contains modified Microsoft Edge binaries that are fine-tuned and tested for WebView2 apps. After the WebView2 Runtime is installed, it doesn't appear as a user-visible browser app. For example, a user doesn't have a browser desktop shortcut or an entry in the Start menu.
There are two different ways of distributing and updating the WebView2 Runtime to client machines: the Evergreen distribution mode, and the Fixed Version distribution mode.
 The Evergreen Runtime distribution mode
In the Evergreen distribution mode, the WebView2 Runtime isn't packaged with your app, but is initially installed onto clients using an online bootstrapper or an offline installer. Afterwards, the WebView2 Runtime is automatically updated on client machines. You can then distribute updates of your WebView2 app that use the latest WebView2 APIs, from the latest WebView2 SDK. The Evergreen distribution mode is recommended for most developers.
Pros:
The underlying web platform (WebView2 Runtime) updates automatically without more effort from you.
Less disk space is required for the WebView2 Runtime on client systems, because the WebView2 Runtime is shared by all WebView2 apps that are on the client.
 On eligible systems, binaries for Microsoft Edge and the Evergreen WebView2 Runtime are hard-linked together when they are on the same version. This linking provides benefits for disk footprint, memory, and performance.
Cons:
 Your WebView2 app cannot specify that a particular version of the WebView2 Runtime is required.
 The Fixed Version runtime distribution mode
In the Fixed Version distribution mode, you download a specific version of the WebView2 Runtime and package it together with your WebView2 app in your app package. The WebView2 Runtime that you package with your app is used only by your WebView2 app, not by any other apps on the client's machine.
Pros:
 You have more control over versioning of the WebView2 Runtime. You know which WebView2 APIs are
available to your app, because you control which version of the WebView2 Runtime is available to your app.
Your app doesn't need to test whether the latest APIs are present.
Cons:
 You need to manage the WebView2 Runtime yourself. The WebView2 Runtime isn't automatically updated on clients, so to use the latest WebView2 APIs, you must periodically update your app together with the updated WebView2 Runtime.
More disk space is required on the client, if there are multiple WebView2 apps installed.
The Fixed Version runtime can't be installed by using an installer.
 Understanding the options at the Runtime download page
The Download the WebView2 Runtime section of the Microsoft Edge WebView2 page provides several options for distributing the WebView2 Runtime onto client machines. Understanding the options at this page provides a good introduction, to help decide which approach you want to use.
The Evergreen Bootstrapper section of the page provides a small Evergreen Runtime bootstrapper that runs on the client machine, for online users. The bootstrapper downloads and installs the appropriate WebView2 Evergreen Runtime onto the client. You can use the bootstrapper a couple different ways:
 Link to the bootstrapper, using a link that you obtain from the Get the Link button. Your app uses this link to programmatically download the bootstrapper onto the client and invoke the bootstrapper. This approach avoids the need to package the bootstrapper with your app. This approach has a dependency on Microsoft's Content Delivery Network (CDN), to get the bootstrapper.
 Download the bootstrapper (using the Download button in the Bootstrapper section) and then distribute the bootstrapper with your app. In this approach, you package the bootstrapper with your app installer/updater or with your app itself, and invoke the bootstrapper that you included with your app.
This approach avoids dependency on Microsoft's CDN, to get the bootstrapper.
 The Evergreen Standalone Installer section of the page provides a large, standalone Evergreen installer, primarily for offline users. In this approach, you package the standalone installer with your app installer/updater or app itself, and invoke the Evergreen Standalone installer. This approach avoids dependency on Microsoft's CDN, to get the Runtime.
 The Fixed Version section of the page provides a Fixed Version runtime, which is a specific version of the WebView2 Runtime that you distribute along with your app.
The Evergreen distribution mode is recommended for most apps.
 Details about the WebView2 Runtime
When distributing your WebView2 app, make sure that the WebView2 Runtime is present on the client machine. This requirement applies to both the Evergreen and Fixed Version distribution modes.
If you want to use the Fixed Version distribution mode, you can skip the next couple of sections and jump ahead to Details about the Fixed Version runtime distribution mode.
	 Servicing the WebView2 Runtime through Windows Server Update Services  	(WSUS)
See Windows Server Update Services (WSUS) in Enterprise management of WebView2 Runtimes.
 Runtime or browser support during development or production 
During development and testing, a WebView2 app can use either option as the backing web platform:
 The WebView2 Runtime. The Runtime generally provides the same web platform capabilities and update cadence as the Stable channel of the Microsoft Edge browser. Use the WebView2 Runtime in a production environment or to develop and test against the web platform that your users have today.
 A preview (Insider) Microsoft Edge browser channel. These Microsoft Edge preview channels are Beta, Dev, and Canary. Use this approach to test your app for forward-compatibility, so that you know if a breaking change is coming that will require updating your app. See Test upcoming APIs and features.
A production release of a WebView2 app can only use the WebView2 Runtime as the backing web platform, not Microsoft Edge.
 Microsoft Edge Stable channel isn't supported for WebView2 
WebView2 apps aren't permitted to use the Stable channel of Microsoft Edge as the backing web platform. This restriction prevents a production release of a WebView2 app from taking a dependency on the browser. A WebView2 app cannot take a dependency on the browser during production, for the following reasons:
 Microsoft Edge isn't guaranteed to be present on all user devices. Many devices in enterprises and in education are disconnected from Windows Update or aren't managed by Microsoft directly. Such devices might not have Microsoft Edge installed. Requiring the production version of WebView2 apps to use the WebView2 Runtime rather than Microsoft Edge avoids making Microsoft Edge a prerequisite for running a WebView2 app.
 Browsers and apps have different use cases. If a WebView2 app required the presence of Microsoft Edge on the client, that would potentially have unintended side-effects on the WebView2 app. For example, an IT admin can prevent the browser from being updated from a specific version, to keep the browser compatible with an internal website. Requiring the production version of a WebView2 app to use the WebView2 Runtime rather than the browser allows the WebView2 app to stay evergreen even if browser updates are prevented by the clients' admin.
 As opposed to the browser, the WebView2 Runtime is developed and tested for app scenarios, and in some cases the WebView2 Runtime might include bug fixes that aren't yet available in the browser.
The Evergreen WebView2 Runtime will be included as part of the Windows 11 operating system. Various WebView2 apps have installed the Evergreen Runtime on devices with an operating system prior to Windows 11. However, some devices might not have the Runtime pre-installed, so it's a good practice to check whether the Runtime is present on the client.
Before your app creates a WebView2, the app should check whether the WebView2 Runtime is present (either by checking a registry key or by calling an API) and install the Runtime if it is missing. The app can do this check when installing or updating your app (recommended), or at app runtime. To check whether the Runtime is present, see Deploying the Evergreen WebView2 Runtime, below.
 Details about the Evergreen Runtime distribution mode
The Evergreen distribution mode ensures that your WebView2 app is taking advantage of the latest WebView2 features and security updates. The Evergreen distribution mode has the following characteristics:
 The WebView2 Runtime updates automatically without requiring any action from you. It receives the same Microsoft Edge updates that are described in Release notes for Microsoft Edge Stable Channel and Release notes for Microsoft Edge Security Updates.
 All WebView2 apps that use the Evergreen distribution mode use a shared copy of the Evergreen WebView2 Runtime, which saves disk space.
 On eligible systems, binaries for Microsoft Edge and the Evergreen WebView2 Runtime are hard-linked together when they are on the same version. This linking provides benefits for disk footprint, memory, and performance.
When you use the Evergreen distribution mode of the WebView2 Runtime, your WebView2 app assumes that clients have the latest Runtime. Your app cannot require a particular version of the WebView2 Runtime for all apps on the client. By the time a new WebView2 SDK package is released, a compatible version of the
WebView2 Runtime has already been distributed to clients. Therefore it's OK for your WebView2 app to use the APIs that are in the latest version of the WebView2 SDK.
See Understanding browser versions and WebView2.
 Deploying the Evergreen WebView2 Runtime 
Only one installation of the Evergreen WebView2 Runtime is needed for all Evergreen apps on the device.
Several tools are available at Download the WebView2 Runtime to help you deploy the Evergreen Runtime.
 For online clients: WebView2 Runtime Bootstrapper is a tiny (approximately 2 MB) installer. The WebView2 Runtime Bootstrapper downloads and installs the Evergreen Runtime from Microsoft servers that matches the user's device architecture.
 In the setup part of your WebView2 app, link to the bootstrapper. Use a link to programmatically download the bootstrapper; select the Get the Link button at the above download page.
Or, download the bootstrapper and package it with your WebView2 app.
For offline clients: WebView2 Runtime Standalone Installer is a full installer that installs the Evergreen WebView2 Runtime in offline environments.
	 Installing the Runtime as per 	-machine or per-user
The latest bootstrapper and standalone installer support both per-machine and per-user installs of the WebView2 Runtime.
If you run the installer from an elevated process or command prompt, the Runtime is installed as per-machine. If you don't run the installer from an elevated process or command prompt, the Runtime will be installed as per-
user. However, a per-user install is automatically replaced by a per-machine install, if a per-machine Microsoft
Edge Updater is in place. A per-machine Microsoft Edge Updater is included as part of Microsoft Edge, except for the Canary preview channel of Microsoft Edge.
Use the following online deployment workflow or offline deployment workflow to ensure that the Runtime is already installed before your app launches. You can adjust your workflow depending on your scenario. Sample code is available in the Samples repo.
	 Online 	-only deployment
If you have an online-only deployment scenario where users are assumed to have internet access, use the following workflow.
1. During your app setup, run a test to make sure that the WebView2 Runtime is already installed. See Detect if a suitable WebView2 Runtime is already installed.
2. If the Runtime isn't installed, in your app setup process, use the link (from the Get the Link button on the download page) to programmatically download the WebView2 Runtime Bootstrapper.
3. Invoke the WebView2 Runtime Bootstrapper by issuing the following command.
If you run the following command from an elevated process or command prompt, it triggers a permachine install. If you don't run the command from an elevated process or command prompt, a per-user
install will take place. However, a per-user install is automatically replaced by a per-machine install, if a per-machine Microsoft Edge Updater is in place. A per-machine Microsoft Edge Updater is provided as part of Microsoft Edge, except for the Canary preview channel of Microsoft Edge. For more information, see Installing the Runtime as per-machine or per-user.
MicrosoftEdgeWebview2Setup.exe /silent /install
The above workflow has several benefits:
The Runtime is installed only when needed.
You aren't required to package a Runtime installer with your WebView2 app.
The WebView2 Runtime Bootstrapper automatically detects the device's architecture (platform) and then installs the matching WebView2 Runtime.
 The Runtime is installed silently.
Alternatively, instead of programmatically downloading the bootstrapper on-demand by getting a link, as shown above, you can package the Evergreen Bootstrapper for the WebView2 Runtime with your app.
 Offline deployment 
If you have an offline deployment scenario, where app deployment has to work entirely offline, use the following workflow.
1. Download the Evergreen Standalone Installer from Download the WebView2 Runtime to your development machine. The Evergreen Standalone Installer installs the WebView2 Evergreen Runtime on the client.
2. Include the Evergreen Standalone Installer in your app installer or updater.
3. During your app setup, run a test to make sure that the WebView2 Runtime is already installed. See Detect if a suitable WebView2 Runtime is already installed.
4. If the WebView2 Runtime isn't installed, run the Evergreen Standalone Installer. If you want to run a silent installation, you can run the following command.
If you run the following command from an elevated process or command prompt, it triggers a permachine install. If you don't run the command from an elevated process or command prompt, a per-user install will take place. However, a per-user install is automatically replaced by a per-machine install, if a per-machine Microsoft Edge Updater is in place. A per-machine Microsoft Edge Updater is provided as part of Microsoft Edge, except for the Canary preview channel of Microsoft Edge. For more information, see Installing the Runtime as per-machine or per-user.
MicrosoftEdgeWebView2RuntimeInstaller{X64/X86/ARM64}.exe /silent /install
 Detect if a suitable WebView2 Runtime is already installed 
To verify that a WebView2 Runtime is installed, use one of the following approaches:
pv (REG_SZ)HKEY_LOCAL_MACHINE regkey is used for per-machine install. The HKEY_CURRENT_USER Approach 1: Inspect the 	 regkey for the WebView2 Runtime at both of the following registry locations. The  regkey is used for per-user install.
nullpv (REG_SZ)For WebView2 applications, at least one of these regkeys must be present and defined with a version greater than 0.0.0.0. If neither regkey exists, or if only one of these regkeys exists but its value is , an empty string, or 0.0.0.0, this means that the WebView2 Runtime isn't installed on the client. Inspect these regkeys to detect whether the WebView2 Runtime is installed, and to get the version of the WebView2 Runtime. Find  at the following two locations.
The two registry locations to inspect on 64-bit Windows:
HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF00C3A9A7E4C5}
HKEY_CURRENT_USER\Software\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}
The two registry locations to inspect on 32-bit Windows:
HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}
HKEY_CURRENT_USER\Software\Microsoft\EdgeUpdate\Clients\{F3017226-FE2A-4295-8BDF-00C3A9A7E4C5}
versionInfo is nullptr. nullptr Approach 2: Run GetAvailableCoreWebView2BrowserVersionString and evaluate whether the  indicates that the WebView2 Runtime isn't installed. This API returns
version information for the WebView2 Runtime or for any installed preview channels of Microsoft Edge (Beta, Dev, or Canary).
	 Test your app for forward 	-compatibility
The Web is constantly evolving. In the Evergreen distribution mode, the WebView2 Runtime is automatically kept up to date on the client to provide the latest features and security fixes. If you use Evergreen distribution, to ensure that your WebView2 app stays compatible with the web, you should set up testing infrastructure.
Microsoft Edge preview channels (Beta, Dev, and Canary) provide a sneak peek into what is coming next in the WebView2 Runtime. Test your WebView2 app regularly against a Microsoft Edge preview channel, and update your app or report issues if issues arise. Canary is the recommended preview channel, because it ships at the fastest cadence and has the newest APIs.
regkeyTo help you decide which channel is right, see Overview of the Microsoft Edge channels. You can Download Microsoft Edge Insider Channels on your test environment, and use  or environment variables to indicate the channel preference for your testing app.
See CreateCoreWebView2EnvironmentWithOptions. You can also use WebDriver to automate WebView2 testing, as described in Automate, and test WebView2 with Microsoft Edge WebDriver.
	 Feature 	-detect when using recent APIs
QueryInterface or try-catchIf you use the Evergreen mode, when your WebView2 app uses a new WebView2 API from a recent SDK, you should use an approach such as  to make sure the new API is present on the
client's machine. This feature-detecting is a best practice, because there are cases where the WebView2 Runtime isn't updated.
Even if you use the Evergreen distribution mode, the WebView2 Runtime might not be updated, for the following reasons:
 An IT Admin can turn off updates of the WebView2 Runtime, because an Admin has control of updating their devices.
 Clients that are offline don't receive the updated WebView2 Runtime.
The update policies for Microsoft Edge and the WebView2 Runtime are separate. Even if the IT Admin has disabled automatic updates of Microsoft Edge, the WebView2 Runtime is still automatically updated, unless the Admin turns off Runtime updating. If the Admin disables updating Microsoft Edge (which is somewhat common), that doesn't affect which WebView2 APIs are available on the client machine.
See Feature-detecting to test whether the installed Runtime supports recently added APIs.
 Details about the Fixed Version runtime distribution mode
For constrained environments with strict compatibility requirements, consider using the Fixed Version distribution mode. The Fixed Version distribution mode was previously called bring-your-own.
In the Fixed Version distribution mode, you control the timing of updates to the WebView2 Runtime for your app. You download a specific version of the WebView2 Runtime and then package it with your WebView2 app.
The WebView2 Runtime on the client isn't automatically updated. Instead, you periodically update the WebView2 Runtime that's packaged and distributed together with your updated app. The Fixed Version approach doesn't use a registry key for the WebView2 Runtime.
The Fixed Version binaries are over 250 MB and will make your app package larger by that amount.
To use the Fixed Version distribution mode:
1. Download the Fixed Version of the WebView2 Runtime from Download the WebView2 Runtime, as a package.
The most-patched version of the latest and second-latest major releases are available for download at this site. Keep an archived copy of any versions you need.
expand {path to the package} -F:* {path to the destination folder}2. Decompress the WebView2 Runtime package using the command-line command  or by using a decompression tool such as WinRAR. Avoid decompressing through File Explorer, because that approach might not generate the correct folder structure.
3. Include all of the decompressed Fixed Version binaries in your app package, to be deployed on the target machine during your app's installation.
4. Indicate the path to the Fixed Version binaries when creating the WebView2 environment.
 For Win32 C/C++, you can create the environment using the
browserExecutableFoldermsedgewebview2.exeCreateCoreWebView2EnvironmentWithOptions function. Use the parameter to indicate the path to the folder that contains .
Source	 For .NET, you must specify the environment before the WebView2 	 property takes effect.
For .NET, you can use either of the following approaches to specify the environment:
CreationProperties (WPF/WinForms) property on the WebView2	 Set the 	 element. Use the 
BrowserExecutableFolder member in the CoreWebView2CreationProperties (WPF/WinForms) class to indicate the path to the Fixed Version binaries.
EnsureCoreWebView2AsyncbrowserExecutableFolder Alternatively, use  (WPF/WinForms) to specify the environment. Use the  parameter in CoreWebView2Environment.CreateAsync to indicate the path to the Fixed Version binaries.
 For WinUI, make sure the app has access to the folder by specifying the installed location and setting the environment variable for runtime path. One way to do this is by adding the following C# code to your app:
StorageFolder localFolder = Windows.ApplicationModel.Package.Current.InstalledLocation; String fixedPath = Path.Combine(localFolder.Path, "FixedRuntime\\(version number)");
Debug.WriteLine($"Launch path [{localFolder.Path}]");
Debug.WriteLine($"FixedRuntime path [{fixedPath}]");
Environment.SetEnvironmentVariable("WEBVIEW2_BROWSER_EXECUTABLE_FOLDER", fixedPath);
5. Package and ship the Fixed Version binaries with your app. Update the binaries as appropriate.
.csproj For WinUI, this might include opening the project file (	) in a code editor, and then add the following code within the project tags:
<ItemGroup>
   <Content Include="FixedRuntime\(version number)\\**\*.*">    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>    </Content>
</ItemGroup>
bin\**designated architecture**\ReleaseVerify that the  folder has a matching FixedRuntime\
(version number) folder with the runtime files in it.
 Known issues for Fixed Version 
Currently, Fixed Version cannot be run from a network location or UNC path.
Installing the Fixed Version of the WebView2 Runtime on the client causes Microsoft PlayReady to stop working. Fix the PlayReady setup as follows:
1. Locate the path where you deploy the Fixed Version package on the user's device, such as the following location:
D:\myapp\Microsoft.WebView2.FixedVersionRuntime.87.0.664.8.x64
2. Run the following commands on the user's device:
icacls {Fixed Version path} /grant *S-1-15-2-2:(OI)(CI)(RX) icacls {Fixed Version path} /grant *S-1-15-2-1:(OI)(CI)(RX)
PlayReady should be working now on the user's device.
ALL APPLICATION PACKAGES3. To confirm that PlayReady is installed correctly, in the Security tab of the Fixed Version folder, make sure permissions are granted for  and 
ALL RESTRICTED APPLICATION PACKAGES, as shown below:

 Files to ship with the app
WebView2LoaderWebView2Loader.lib into the app binaries, or by including the WebView2Loader.dll.targetsThe  code needs to be shipped with the app. This can be done by statically linking  that matches the app's architecture. Usually this is handled automatically for you by Visual Studio when using the  file in the
WebView2 SDK, but there may be cases when you need to manually specify what files to publish with your app.
WebView2Loader.dll is a native and architecture-specific binary, so you need to include all flavors of this binary
that you expect your app to run in. For example:
WebView2Loader.dllFor x86, you would include the x86 version of .
WebView2Loader.dll. The correct version of WebView2Loader.dllFor a managed app using AnyCPU, you would include the x86, x64, and arm64 versions of  is loaded from the appropriate architecture-specific folder.
Example native app folder structure:
\<myApp>
    \WebView2Loader.dll
Microsoft.Web.WebView2.Core.dllFor .NET managed apps, you also need to include the WebView2 .NET assemblies for the core WebView2 functionality () and for the WPF/WinForms-specific functionality (
Microsoft.Web.WebView2.Winforms.dll or Microsoft.Web.WebView2.WPF.dll).
Example managed app folder structure:

\<myApp>
    \Microsoft.Web.WebView2.Core.dll
    \Microsoft.Web.WebView2.Winforms.dll
    \Microsoft.Web.WebView2.WPF.dll
    \runtimes
        \win-arm64\native\WebView2Loader.dll (arm64)
        \win-x64\native\WebView2Loader.dll (x64)
        \win-x86\native\WebView2Loader.dll (x86)

 
 Debug WebView2 apps
 	6/21/2022 • 2 minutes to read • Edit OnlineDebug web code in WebView2 apps by using Microsoft Edge DevTools, Microsoft Visual Studio, or Microsoft Visual Studio Code. Use these tools to debug both web code and native code.
WebView2 apps combine the best of web and native app development features and tools. When you develop your WebView2 app, you test the app by debugging it.
Debug WebView2 apps with Microsoft Edge DevTools
Debug WebView2 apps with Visual Studio Code
Debug WebView2 apps with Visual Studio
 See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference
See also in Introduction to Microsoft Edge WebView2.

 
 
Debug WebView2 apps with Microsoft Edge DevTools
 	6/21/2022 • 2 minutes to read • Edit OnlineUse Microsoft Edge Developer Tools to debug web content displayed in WebView2 controls, in the same way that you can debug another webpage that's displayed in Microsoft Edge.
When you're using a WebView2 app, there are several ways to open DevTools:

To zoom, right-click > Open image in new tab.
 See also
Overview of DevTools.
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference
See also in Introduction to Microsoft Edge WebView2.
 
 Debug WebView2 apps with Visual Studio Code
 	6/21/2022 • 3 minutes to read • Edit OnlineUse Microsoft Visual Studio Code to debug scripts that run in WebView2 controls.
 Create a launch.json file
launch.jsonlaunch.json file, create a new launch.jsonTo debug your code, your project is required to have a  file. If your project doesn't have a  file and paste the following code into it:
"name": "Hello debug world",
"type": "pwa-msedge",
"port": 9222, // The port value is optional, and the default value is 9222.
"request": "launch",
"runtimeExecutable": "C:/path/to/your/webview2/app.exe",
"env": {
   // Customize for your app location if needed    "Path": "%path%;e:/path/to/your/app/location; "
},
"useWebView": true,
// The following two lines set up source path mapping, where `url` is the start page // of your app, and `webRoot` is the top level directory with all your code files.
"url": "file:///${workspaceFolder}/path/to/your/toplevel/foo.html",
"webRoot": "${workspaceFolder}/path/to/your/assets"	 Command 	-line URL parameter passed in
urlurlVisual Studio Code source path mapping now requires an URL, so your app now receives a  command-line parameter when it starts. You can safely ignore the  parameter, if needed.
 Debug your code
F91. To set a breakpoint in your source code, click a line of code and then press :

2. On the Run tab, select the launch configuration from the dropdown menu.
3. Click Start Debugging, which is the green triangle next to the launch configuration dropdown.

4. To view the debug output and errors, open Debug Console.

 Targeted WebView2 debugging
In some WebView2 apps, you might use more than one WebView2 control. To pick which WebView2 control to debug in this situation, you can use targeted WebView2 debugging.
launch.jsonOpen  and complete the following actions to use targeted WebView2 debugging.
useWebview parameter is set to true1. Confirm that the .
urlFilter parameter. When the WebView2 control navigates to a URL, the urlFilter2. Add the parameter value is used to compare strings that appear in the URL.
"useWebview": "true",
"urlFilter": "*index.ts",
// Options for "urlFilter":
// Match any url that ends with "index.ts":
"urlFilter": "*index.ts",
// Match any url that contains "index" anywhere in the URL:
"urlFilter": "*index*",
// Explicitly match a file named "index.ts":
"urlFilter": "file://C:/path/to/my/index.ts",
?=valueWhen debugging your app, you might need to step through the code from the beginning of the rendering process. If you are rendering webpages on sites and you don't have access to the source code, you can use the option, because webpages ignore unrecognized parameters.
 Cannot debug two WebView2 controls at the same time 
After the first match is found in the URL, the debugger stops. You cannot debug two WebView2 controls at the same time, because the CDP port is shared by all WebView2 controls, and uses a single port number.
 Debug running processes
launch.jsonYou might need to attach the debugger to running WebView2 processes. To do that, in , update the 
request parameter, changing its value to attach:
"name": "Hello debugging world",
"type": "pwa-msedge",
"port": 9222,
"request": "attach",
"runtimeExecutable": "C:/path/to/your/webview2/app.exe",
"env": {
   "Path": "%path%;e:/path/to/your/build/location; " },
"useWebView": true
Your WebView2 control must open the CDP port to allow debugging of the WebView2 control. Your code must be built to ensure that only one WebView2 control has a Chrome Developer Protocol (CDP) port open, before starting the debugger.
 Debug tracing options
trace parameter to launch.jsonTo enable debug tracing, add the  , as follows:
trace1. Add the  parameter:
"name": "Hello debugging world",
"type": "pwa-msedge",
"port": 9222,
"request": "attach",
"runtimeExecutable": "C:/path/to/your/webview2/app.exe",
"env": {
"Path": "%path%;e:/path/to/your/build/location; " },
"useWebView": true
,"trace": true  // Turn on debug tracing, and save the output to a log file.Saving debug output to a log file:

,"trace": "verbose"  // Turn on verbose tracing in the Debug Output pane.
Visual Studio Code Debug Output with verbose tracing turned on:

 Debug Office Add-ins
If you're debugging Office Add-ins, open the add-in source code in a separate instance of Visual Studio Code.
launch.json in your WebView2 app. Add the following code into launch.jsonOpen , to attach the debugger to the Office add-in:
,"debugServer": 4711
 Troubleshoot the debugger
You might encounter these scenarios when using the debugger.
 Doesn't stop at breakpoint 
If the debugger doesn't stop at the breakpoint, and you have debug output:
To solve the issue, confirm that the file with the breakpoint is the same file that's used by the WebView2 control. The debugger doesn't perform source path mapping.
 Can't attach to running process 
If you can't attach to a running process, and you get a timeout error:
additionalBrowserArgumentsTo solve the issue, confirm that the WebView2 control opened the CDP port. Make sure your  value in the registry is correct, or the options are correct. See
additionalBrowserArguments for dotnet and additionalBrowserArguments for Win32.
 See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference
See also in Introduction to Microsoft Edge WebView2.

 
 Debug WebView2 apps with Visual Studio
 	6/21/2022 • 2 minutes to read • Edit OnlineMicrosoft Visual Studio provides various debugging tools for web and native code in WebView2 apps, to debug web and native code in Win32 apps or Office Add-ins. This article focuses on debugging WebView2 controls. The other methods of debugging in Visual Studio are available, as well.
 Open DevTools using an approach other than F12
F12Ctrl+Shift+IInspectWhen you debug your app in Visual Studio with the native debugger attached, pressing  may trigger the native debugger instead of Developer Tools. To avoid that situation, press . Or, right-click the page, and then select .
 Requirements
To debug scripts, the app must be launched from within Visual Studio.
You cannot attach a debugger to a running WebView2 process.
Install Visual Studio 2019 version 16.4 Preview 2 or later.
To debug your code, first install and set up the script debugger tools in Visual Studio, per the following two sections.
 Install the JavaScript diagnostics component
First, install the JavaScript diagnostics component in Desktop development with C++, as follows.
Visual Studio Installer1. In the Windows Explorer bar, type .
2. Select Visual Studio Installer to open it.
3. In the Visual Studio Installer, on the installed version, click the More button, and then select Modify.
4. In Visual Studio, under Workloads, select the Desktop Development with C++ setting:

5. Select Individual components, at the top.
JavaScript diagnostics6. In the search box, enter .
7. Select the JavaScript diagnostics setting.
8. Click Modify.

 Enable script debugging for WebView2 apps
Second, enable script debugging for WebView2 apps, as follows.
1. Right-click your WebView2 project, and then select Properties.
2. Under the Configuration Properties, select Debugging.
3. Under the Debugger Type, select JavaScript (WebView2).

 Debug your WebView2 app
After doing the above setup, debug your WebView2 app, as follows.
1. To set a breakpoint in your source code, hover to the left of the line number, and click to set a breakpoint. The JS/TS debug adapter doesn't perform source path mapping. You must open the exact same path associated with your WebView2.

2. To run the debugger, select the bit size of the platform, and then click the green Play button next to Local Windows Debugger. The app runs and the debugger connects to the first WebView2 process that is created.

3. In the Debug Console, find the output from the debugger.

 Troubleshooting
 Virtual source path mapping not supported in Visual Studio 2019 
If you use the WebView2 SetVirtualHostNameToFolderMapping method, the debugger in Visual Studio 2019 doesn't understand the virtual source path mapping, so breakpoints don't work correctly.
Virtual source path mapping works when you use the debugger in Visual Studio Code.
 See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference
See also in Introduction to Microsoft Edge WebView2.

 
 Process model for WebView2 apps
 	6/21/2022 • 2 minutes to read • Edit OnlineSupported platforms: Win32, Windows Forms, WinUI, WPF.
The WebView2 Runtime uses the same process model as the Microsoft Edge browser. This browser process model is described at Browser Architecture in Inside look at modern web browser (part 1).
 Processes in the WebView2 Runtime
A WebView2 process group is a collection of WebView2 Runtime processes. A WebView2 process group includes the following:

The number and presence of processes in a WebView2 process group can change as a WebView2 application makes use of WebView2 features. (However, there's only a single, specific browser process in a WebView2
CoreWebView2EnvironmentSourceprocess group.) For example, creating a new WebView2 instance from the same , but with a different domain in the  property, will usually start a new renderer process.
The number of renderer processes can vary based on the following conditions:
 Use of the Site Isolation feature in the WebView2 Runtime. See Per-frame renderer processes - Site Isolation.
 The number of distinct disconnected origins that are rendered in instances of WebView2 that use the same user data folder.
The logic that controls when these extra processes are created depends on the Chromium architecture, and is beyond the scope of the WebView2 Runtime.
 WebView2 Runtime processes and the user data folder
All processes in a WebView2 Runtime processes collection are tied to the browser process, which in turn is associated with a single user data folder. If an application makes use of multiple user data folders, a collection of WebView2 Runtime processes will be created for each of these user data folders.
A user data folder can be shared by multiple applications, but be sure to consider the implications on performance and management, as described in Manage user data folders.

To make use of multiple user data folders, a WebView2 application needs to create different 
CoreWebView2Environment objects. A WebView2 instance is created for a given user data folder through the
CoreWebView2Environment object. Each CoreWebView2Environmentconfigured  object needs to be configured with a different user data folder value.
WebView2When the first  instance is created for a given user data folder, the browser process for the WebView2
Runtime processes collection that is associated with that user data folder will be started. All additional processes will be managed by the lifetime of that browser process.
CoreWebView2EnvironmentCoreWebView2CoreWebView2The  represents a user data folder and the collection of processes associated with it. A given renderer process is not associated with a single  instance, because the renderer process can serve frames in multiple  instances that use the same user data folder, depending on website isolation. See Per-frame renderer processes - Site Isolation.
 Handling process events and lifetime
ProcessFailedTo react to crashes and hangs in the browser and renderer processes, use the  event of 
CoreWebView2.
CloseTo safely shut down associated browser and renderer processes, use the  method of 
CoreWebView2Controller.
OpenTaskManagerWindowTo open the Browser Task Manager, call the  method.
 	C# C++
	OpenTaskManagerWindo 	w
All processes that are associated with the browser process of your WebView2 are displayed, including their associated purposes.
 See also
Inside look at modern web browser (part 1) - the browser process model that's used by the WebView2 Runtime and the Microsoft Edge browser.
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference
See also in Introduction to Microsoft Edge WebView2.
 
 Threading model for WebView2 apps
 	6/21/2022 • 4 minutes to read • Edit OnlineSupported platforms: Win32, Windows Forms, WinUI, WPF.
The WebView2 control is based on the Component Object Model (COM) and must run on a Single Threaded Apartments (STA) thread.
 Thread safety
The WebView2 must be created on a UI thread that uses a message pump. All callbacks occur on that thread, and requests into the WebView2 must be done on that thread. It isn't safe to use the WebView2 from another thread.
Content property of CoreWebView2WebResourceRequest. The ContentThe only exception is for the  property
stream is read from a background thread. The stream should be agile or should be created from a background STA, to prevent performance degradation of the UI thread.
CoreWebView2CookieManager.GetCookiesAsync(null)Mainc.DomainObject properties are single-threaded. For example, calling from a thread other than  will succeed (that is, cookies are returned); however, attempting to access the cookies' properties (such as ) after such a call will throw an exception.
 Reentrancy
Callbacks, including event handlers and completion handlers, run serially. After you run an event handler and begin a message loop, an event handler or completion callback cannot be run in a re-entrant manner. If a WebView2 app tries to create a nested message loop or modal UI synchronously within a WebView2 event handler, this approach leads to attempted reentrancy. Such reentrancy isn't supported in WebView2 and would leave the event handler in the stack indefinitely.
For example, the following coding approach isn't supported:
private void Btn_Click(object sender, EventArgs e)
{
   // Post web message when button is clicked
   this.webView2Control.ExecuteScriptAsync("window.chrome.webview.postMessage(\"Open Dialog\");");
}
private void CoreWebView2_WebMessageReceived(object sender, CoreWebView2WebMessageReceivedEventArgs e)
{
   string msg = e.TryGetWebMessageAsString();    if (msg == "Open Dialog")
   {
      Form1 form = new Form1(); // Create a new form that contains a new WebView2 instance when web message is received.
      form.ShowDialog(); // This will cause a reentrancy issue and cause the newly created WebView2 control inside the modal dialog to hang.
   }
}Instead, schedule the appropriate work to take place after completion of the event handler, as shown in the following code:
private void CoreWebView2_WebMessageReceived(object sender, CoreWebView2WebMessageReceivedEventArgs e)
{
   string msg = e.TryGetWebMessageAsString();    if (msg == "Open Dialog")
   {
      // Show a modal dialog after the current event handler is completed, to avoid potential reentrancy caused by running a nested message loop in the WebView2 event handler.
      System.Threading.SynchronizationContext.Current.Post((_) => {
         Form1 form = new Form1();          form.ShowDialog();          form.Closed();
      }, null);
   }
}NOTE
For WinForms and WPF apps, to get the full call stack for debugging purposes, you must turn on native code debugging for WebView2 apps, as follows:
1. Open your WebView2 project in Visual Studio.
2. In Solution Explorer, right-click the WebView2 project and then select Properties.
3. Select the Debug tab, and then select the Enable native code debugging checkbox, as shown below.

 Deferrals
GetDeferral method on the event arguments of the associated events. The returned DeferralComplete method of the DeferralSome WebView2 events read values that are set on the related event arguments, or start some action after the event handler completes. If you also need to run an asynchronous operation, such as an event handler, use the  object ensures that the event handler isn't considered complete until the  is requested.
NewWindowRequested event to provide a CoreWebView2For instance, you can use the  to connect as a child window
CoreWebView2when the event handler completes. But if you need to asynchronously create the , you should call
GetDeferral method on the NewWindowRequestedEventArgsthe . After you've asynchronously created the 
CoreWebView2 and set the NewWindow property on the NewWindowRequestedEventArgs, call CompleteDeferral object that's returned by the GetDeferral on the  method.
 Deferrals in C# 
Deferral in C#, the best practice is to use it with a using block. The usingDeferral is completed even if an exception is thrown in the middle of the usingComplete, but an exception is thrown before your CompleteWhen using a  block ensures that the  block. If instead, you have code to explicitly call  call occurs, then the deferral isn't completed until some time later, when the garbage collector eventually collects and disposes of the deferral. In the interim, the WebView2 waits for the app code to handle the event.
CompleteFor example, don't do the following, because if there's an exception before calling , the 
WebResourceRequested event isn't considered "handled", and blocks WebView2 from rendering that web content.
private async void WebView2WebResourceRequestedHandler(CoreWebView2 sender,
                           CoreWebView2WebResourceRequestedEventArgs eventArgs)
{
   var deferral = eventArgs.GetDeferral();    args.Response = await CreateResponse(eventArgs);
   // Calling Complete is not recommended, because if CreateResponse
   // throws an exception, the deferral isn't completed.
   deferral.Complete();
}using block, as in the following example. The using block ensures that the DeferralInstead, use a  is completed, whether or not there's an exception.
private async void WebView2WebResourceRequestedHandler(CoreWebView2 sender,
                           CoreWebView2WebResourceRequestedEventArgs eventArgs) {
   // The using block ensures that the deferral is completed, regardless of
   // whether there's an exception.    using (eventArgs.GetDeferral())
   {
      args.Response = await CreateResponse(eventArgs);
   }
} Block the UI thread
Task.ResultWebView2 relies on the message pump of the UI thread to run event handler callbacks and async method completion callbacks. If you use methods that block the message pump, such as  or 
WaitForSingleObject, then your WebView2 event handlers and async-method completion handlers don't run.
Task.ResultExecuteScriptAsync to complete. Because the message pump is blocked, the ExecuteScriptAsyncFor example, the following code doesn't complete, because  stops the message pump while it waits for  isn't able to complete.
Task.ResultFor example, the following code doesn't work, because it uses .
private void Button_Click(object sender, EventArgs e)
{
    string result = webView2Control.CoreWebView2.ExecuteScriptAsync("'test'").Result;
    MessageBox.Show(this, result, "Script Result"); }await mechanism such as async and awaitInstead, use an asynchronous , which doesn't block the message pump or the UI thread. For example:
private async void Button_Click(object sender, EventArgs e)
{
    string result = await webView2Control.CoreWebView2.ExecuteScriptAsync("'test'");
    MessageBox.Show(this, result, "Script Result"); } See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference
See also - in Introduction to Microsoft Edge WebView2.

 
 Manage user data folders
 	6/21/2022 • 17 minutes to read • Edit OnlineThe user data folder (UDF) is a folder stored on the user's machine, that contains data related to the host app and WebView2.
Terminology:
TERMDEFINITIONuser data folderA folder that WebView2 creates to store browser data, such as cookies, permissions, and cached resources.UDFThe user data folder.UDF locationThe directory path of the user data folder.default UDF locationThe default directory path of the user data folder. The directory path where WebView2 creates the UDF if you don't specify a custom UDF location.custom UDF locationA custom location for the user data folder. The directory path that your WebView2 host app specifies where WebView2 will create the user data folder.WebView2 creates the UDF in the default location for the platform, or in the custom UDF location that your host app explicitly specifies.
By default, WebView2 creates a UDF in the default location for the particular platform. This works well on some platforms, but not others. If your app has specific needs, you can specify a custom UDF location. Make sure that the custom UDF location that you specify has appropriate Read/Write permissions for the WebView2 app runtime.
 What kind of data is stored in the UDF
WebView2 apps use user data folders (UDFs) to store browser data, such as cookies, permissions, and cached resources.
TYPE OF DATADESCRIPTION
AllDomStorageDOM storage data, now and future. This browsing data kind
IndexedDb, WebSqlis inclusive of FileSystems , , 
CacheStorage .TYPE OF DATADESCRIPTION
AllProfileProfile data that should be wiped to make it look like a new profile. This does not delete account-scoped data like passwords but will remove access to account-scoped data by signing the user out. All profile data, now and future. New profile data types may be added to this data kind in the future. This browsing data kind includes the data kinds 
AllSite , DiskCache , DownloadHistory , 
 GeneralAutofill , PasswordAutosave , BrowsingHistory , and Settings .
AllSiteAll site data, now and future. This browsing data kind
AllDomStorage and Cookiesincludes the data kinds .
New site data types may be added to this data kind in the future.
BrowsingHistoryBrowsing history data.
CacheStorageData stored by the CacheStorage DOM API.
CookiesHTTP cookies data.
DiskCacheDisk cache.
DownloadHistoryDownload history data.
FileSystemsFile systems data.
GeneralAutofillGeneral autofill form data. This excludes password information and includes information such as names, street and email addresses, phone numbers, and arbitrary input.
Includes payment data.
IndexedDbData stored by the IndexedDB DOM feature.
LocalStorageData stored by the localStorage DOM API.
PasswordAutosavePassword autosave data.
SettingsSettings data.
WebSqlData stored by the Web SQL database DOM API.The above types of data are listed as enum members in the CoreWebView2BrowsingDataKinds Enum.
 How and when the UDF is created
The user data folder (UDF) is created for your WebView2 host app by the WebView2 control.
The UDF is created in the default UDF location for the platform, or if your host app specifies a custom UDF location, the UDF is created in the custom UDF location.
The UDF is created on startup of the WebView2 host app, if the UDF doesn't exist.
 How many UDFs are created?
Each instance of a WebView2 control is associated with a user data folder (UDF).
Each WebView2 session must have a UDF. There's only 1 active UDF per WebView2 session.
There is at least one UDF per app WebView2 session. It's possible for your host app to overlap them, by specifying a custom UDF location. Or, you can have one UDF per machine. This depends on how your host app configs the UDF.
A UDF can be either per user, if the app was installed per-user. If the host app is installed per-user, each UDF is unique to a user, if not otherwise specified.
 How to move the UDF
To move a user data folder (UDF):
1. Shut down all WebView2 sessions.
2. Start a new WebView2 host app session, specifying a new custom UDF location.
 The default UDF location
The default user data folder (UDF) location varies per platform.
	 	Win32
.NET (WPF/WinForms)
ClickOnce
WinUI 2 (UWP)
WinUI 3
.exeOn this platform, the default UDF location is the directory that the app executable ( ) is running in. The
exe) path of your app + .WebView2default UDF is the executable (. The filename of the UDF is the executable (
exe) path of your app + .WebView2.
D:\WebView2App\WebView2.exeFor example, if you ran , a UDF folder would be created: 
D:\WebView2App\WebView2.exe.WebView2\. As another example: WebView2APISample.exe.WebView2\.
Should you use default or custom UDF location?
In most cases, you should specify a custom UDF location, rather than using the default UDF location. This ensures that the WebView2 control has Write access so that the WebView2 control is able to create the UDF and then write to it. See the section "Specifying a custom UDF location" below.
Packaging:
.exeWin32 MSIX packaging is a standalone .
 Specifying a custom UDF location
How to specify a custom user data folder (UDF) location varies per platform.
	 	Win32
.NET (WPF/WinForms)
ClickOnce
WinUI 2 (UWP)
WinUI 3
On this platform, in most cases, you should specify a custom UDF location, rather than using the default UDF location. This ensures that the WebView2 control has Write access so that the WebView2 control is able to create the UDF and then write to it.
You should specify the same folder where all other app data is stored.
How to specify a custom UDF location:
userDataFolderWebView2SamplesUse ICoreWebView2Environment and the  parameter. But use the code below, which is from the  repo.
Example code:
std::wstring m_userDataFolder;
m_userDataFolder = L"C:\\MyAppUserDataFolder" auto options = Microsoft::WRL::Make<CoreWebView2ExperimentalEnvironmentOptions>();
HRESULT hr = CreateCoreWebView2EnvironmentWithOptions(
    NULL, m_userDataFolder.c_str(), options.Get(),
    Callback<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>(         this, &AppWindow::OnCreateEnvironmentCompleted)         .Get());.cpp or .csFor example code, see the Win32-appropriate,  file, near WebView2Samples repo > WebView2APISample.
Where browser data gets stored within the UDF:
After creation of the session and UDF, browser data from your WebView2 control is stored in a subfolder of 
userDataFolder.
Why you should use a custom UDF location on this platform:
If you don't specify a custom UDF location, the default location can produce a run-time failure, if using installer technologies, because installer technologies put the app and thus the UDF in a protected area of the filesystem, where WebView2 isn't able to create the UDF, and thus UDF creation will usually fail. WebView2 will throw an error to let your host app know that the UDF can't be created at that location.
If the host app is running from a location that the user doesn't have Write access to, WebView2 isn't able to create the UDF, and you will receive a runtime error during WebView2 startup.
 Retrieving the UDF location
UserDataFolderTo find out what the user data folder (UDF) location was set to, use the  property. This read-only property returns the UDF location for the WebView2 app.
Reasons you might want to read the UDF location:
If you want to clear browsing data from the UDF folder, such as at the end of a session.
If you want to delete the UDF.
 Win32
.NET (WPF/WinForms)
ClickOnce
WinUI 2 (UWP)
WinUI 3
UserDataFolderUse the Win32  	ICoreWebView2Environment7.get_UserDataFolder property getter. That API Reference page contains example code showing how to read the  property.
Example code:
auto environment7 = m_webViewEnvironment.try_query<ICoreWebView2Environment7>(); CHECK_FEATURE_RETURN(environment7); wil::unique_cotaskmem_string userDataFolder; environment7->get_UserDataFolder(&userDataFolder);
UserDataFolderFor examples of reading the  property, see the Win32 samples in the WebView2Samples repo.
 Clearing space in the UDF
Instead of deleting the user data folder (UDF), clear browsing data from the UDF. For example, clear user data and history when a user signs out.
See Clear browsing data from the user data folder.
 Handling error messages
If the user data folder (UDF) doesn't have Write permissions, the following error message strings may be returned:

User data folder cannot be created because a file with the same name already exists.
Unable to create user data folder, Access Denied.The above is true regardless of whether the location of the user data folder was the default UDF location or a custom UDF location.
If there's insufficient memory, or the Microsoft Edge runtime is unable to start, or the WebView2 Runtime is not found, error message strings similar to the following may be returned:

Microsoft Edge runtime unable to start
Failed to create WebView2 environmenttry/catchtry/catchAccess DeniedAdd code, such as  code, to handle these errors. These errors tend to be fatal errors that you can't recover from, so  will prevent the app from crashing. You'll then be able to detect the failure and close the app gracefully. Some errors are unrecoverable, such as  when trying to use a user data folder that you don't have Write permissions to.
Error message strings are displayed in a dialog box.
 Whether to persist user data folders in various scenarios
Your host app controls the lifetime of the user data folder (UDF). If your app re-uses user data from app sessions, consider saving (that is, not deleting) the UDFs.
If your app doesn't reuse user data from app sessions, you can delete the UDF. However, while a session is running, it's better to call the clear browsing data methods instead of deleting the UDF.
 Persisting user data folders if same user uses your app repeatedly, and the web content of the app relies on the user's data
In this scenario, don't explicitly delete the user data folder (UDF); persist the data.
 Persisting user data folders if multiple users use your app repeatedly
If multiple users use your app repeatedly, you should create a new user data folder (UDF) for each new user, and save the UDF of each user.
The WebView2 control creates a new UDF for each new user. The WebView2 control creates one UDF per session. If there are multiple WebView2 sessions, the WebView2 control creates multiple UDFs. Usually if the host app has more than one WebView2 control instance, the host app should point all instances of WebView2 to the same UDF.
Each host app that has a WebView2 control instance will have its own UDF. Your host app can have each UDF point to the same place.
If your host app is for multiple users, you should probably create one UDF per user. If your app was installed per-user, this is how it works.
If you launch two copies of your host app, they will use the same UDF.
For Win32 host apps, the UDF is not automatically removed.
For .NET (WPF & WinForms) host apps, the UDF is not automatically removed.
For ClickOnce host apps, the UDF is automatically removed.
For WinUI 2 (UWP) host apps, the UDF is not automatically removed. For WinUI 3 host apps, the UDF is not automatically removed.
 Uninstalling a host app
Uninstalling a WebView2 host app uses the standard uninstalling process; this process is not unique to WebView2.
During uninstall, your installer may need to clean up any created UDF. In some cases, you might want to preserve the UDF.
If you create the host app, create an MSIX installer, install the host app, and then run the host app, it creates the UDF. But then if you uninstall the host app, that won't auto-clean up the UDF (because the uninstaller protects and preserves the user data), so your uninstall process needs to be aware of that consideration.
In ClickOnce apps, it installs in a single location, and when the session ends, it deletes the entire tree, so the UDF is automatically deleted. That's because of how ClickOnce works, not because of how WebView2 works.
 Persisting user data folders if your app doesn't have repeat users
In this scenario, create a new user data folder (UDF) for each user, and delete the previous UDF.
 Deleting user data folders
Your host app or the uninstaller can delete the user data folder (UDF). You might need to delete UDFs for any of the following reasons:
If you want to uninstall a packaged Windows Store app. In this case, Windows deletes UDFs automatically.
If you want to clean up all browsing data history. However, see the clear browsing data methods first, as an easier, more flexible approach.
If you want to recover from data corruption.
If you want to remove previous session data.
If you want to change the UDF location. If you change the UDF location, the previous UDF will not be automatically cleaned up.
  
End the WebView2 session before deleting the UDF
To delete a user data folder (UDF), you must first end the WebView2 session. You cannot delete a UDF if the WebView2 session is currently active.
 Wait for browser processes to exit before deleting the UDF 
If files are still in use after your WebView2 host app closes, wait for browser processes to exit before deleting the user data folder (UDF).
Files in UDFs might still be in use after the WebView2 app is closed. In this situation, wait for the browser process and all child processes to exit before deleting the UDF. To monitor processes to wait for them to exit,
BrowserProcessIdretrieve the process ID of the browser process by using the  property of the WebView2 app instance.
 Sharing user data folders
WebView2 control instances can share the same user data folders (UDFs), to do the following:
Optimize system resources by running in one browser process. See Process model for WebView2 apps.
Share browser history and cached resources.
Consider the following when sharing UDFs:
BrowserProcessId When re-creating WebView2 controls to update browser versions using add_NewBrowserVersionAvailable (Win32) event handlers or NewBrowserVersionAvailable (.NET) events, your host app must ensure that browser processes exit and close any WebView2 controls that share the same UDF. To retrieve the process ID of the browser process, use the  property of the WebView2 control.
 Avoid running too many folders at once
To isolate different parts of your app, or when sharing data between WebView2 controls isn't needed, you can use different user data folders (UDFs). For example, an app can consist of two WebView2 controls, one for displaying an advertisement and the other for displaying app content. You can use different UDFs for each WebView2 control.
Each WebView2 browser process consumes additional memory and disk space. Therefore, avoid running a WebView2 control with too many different UDFs at the same time.
 See also
Clear browsing data from the user data folder
Package and deploy in Windows App Development docs (Build desktop apps for Windows).
ClickOnce security and deployment - Visual Studio deployment documentation.
Understand the ClickOnce and DirectInvoke features in Microsoft Edge - in Microsoft Edge Enterprise documentation.

Clear browsing data from the user data folder
6/21/2022 • 2 minutes to read • Edit Online
To clear browsing data from the user data folder for a WebView2 app and free up space, call the methods of the Clear Browsing Data API.
The Clear Browsing Data API allows you to programmatically erase data in the user data folder that's associated with a WebView2 user profile. For example, use this API to clear user data and history when a user signs out.
You can:
Clear all browsing data.
Clear selected kinds of browsing data.
Clear selected kinds of browsing data in a specified time range.
 Clear all browsing data
This method clears all the kinds of browsing data that are listed in the data kinds enumeration, regardless of when the data was created. It clears the data from the user data folder for the user profile on which the method is called.
 	C# C++
	CoreWebView2Profile.ClearBrowsingDataAsync() Metho 	d
 Clear selected kinds of browsing data
This method clears the specified kinds of browsing data, regardless of when the data was created. It clears the data from the user data folder for the user profile on which the method is called.
 	C# C++
	CoreWebView2Profile.ClearBrowsingDataAsync(dataKinds) Metho 	d
CoreWebView2BrowsingDataKinds Enum
 Clear selected kinds of browsing data in a time range
This method clears the specified kinds of browsing data that was created between the specified start time and end time. It clears the data from the user data folder for the user profile on which the method is called.
 	C# C++
	CoreWebView2Profile.ClearBrowsingDataAsync(dataKinds, startTime, endTime) Metho 	d
CoreWebView2BrowsingDataKinds Enum
 Example: Clearing selected kinds of browsing data in a time range
This example clears autofill data and password autosave data from the last hour.
The following parameter values are passed to the Clear Browsing Data API method:
The selected kinds of browser data = autofill data and password autosave data.
The specified time range = the past hour (3600 seconds).
 C#
C++
 
// Clears autofill data.
private void ClearAutofillData() {
    CoreWebView2Profile profile;     if (webView.CoreWebView2 != null)
    {
        profile = webView.CoreWebView2.Profile;
        // Get the current time, the time in which the browsing data will be cleared
        // until.
        System.DateTime endTime = DateTime.Now;
        System.DateTime startTime = DateTime.Now.AddHours(-1);
        // Offset the current time by one hour to clear the browsing data from the
        // last hour.
        CoreWebView2BrowsingDataKinds dataKinds = (CoreWebView2BrowsingDataKinds)
                                 (CoreWebView2BrowsingDataKinds.GeneralAutofill |                                   CoreWebView2BrowsingDataKinds.PasswordAutosave);         await profile.ClearBrowsingDataAsync(dataKinds, startTime, endTime);
    }
}APIs:
CoreWebView2Profile.ClearBrowsingDataAsync(dataKinds, startTime, endTime) Method CoreWebView2BrowsingDataKinds Enum
 API Reference
 	C# C++
 CoreWebView2.Profile Property
CoreWebView2Profile Class
CoreWebView2Profile.ClearBrowsingDataAsync() Method
CoreWebView2Profile.ClearBrowsingDataAsync(dataKinds) Method
CoreWebView2Profile.ClearBrowsingDataAsync(dataKinds, startTime, endTime) Method CoreWebView2BrowsingDataKinds Enum
 See also
Manage the user data folder
Spec for Clear Browsing Data API
Development best practices for WebView2 apps
6/21/2022 • 4 minutes to read • Edit Online
Every development team follows different practices when building their application. When you build WebView2 production apps, we recommend following these recommendations and best practices.
 Use the Evergreen Runtime (recommended)
We generally recommend using the Evergreen WebView2 Runtime. Fixed Version runtime distribution is only recommended for apps that have strict compatibility requirements. The Evergreen runtime updates automatically on the client, so that the latest features and security patches are available to your WebView2 app. The Evergreen runtime also requires less storage space on the disk than the Fixed Version runtime.
If you use the Evergreen runtime, before running your WebView2 app, test whether the Evergreen WebView2 Runtime is installed on the client. See Deploying the Evergreen WebView2 Runtime.
 Run compatibility tests regularly when using the Evergreen Runtime
When using the Evergreen WebView2 Runtime, the runtime updates automatically, so you must regularly run compatibility tests. To ensure that your WebView2 app will continue to work as expected, test your web content in the WebView2 control against Microsoft Edge Insider (preview) Channels (Beta, Dev, or Canary).
This guidance is similar to the guidance that we give to web developers. See Test your app for forwardcompatibility.
 Test whether newer APIs are supported by the installed WebView2 Runtime
To run a WebView2 app that was developed with a particular version of the Webview2 SDK, the client must have a compatible version of the WebView2 Runtime installed. Because APIs are continually being added to WebView2, new versions of the runtime are also released to support the new APIs. Use feature-detection to make sure that the newer APIs that are used by your WebView2 app are supported by the WebView2 Runtime that's installed on the client.
If you use the Evergreen WebView2 Runtime, there are some scenarios where the runtime on a client hasn't been automatically updated to the latest version. For example, if a client doesn't have internet access, the runtime isn't automatically updated.
Additionally, some group policies pause updating of the runtime. When you push an update to your WebView2 app, the app might not work if it tries to call newer APIs that aren't available in the client's installed runtime.
To solve this situation, before your code calls a recently added WebView2 API, test whether that API is available in the client's installed runtime. This test for newer functionality is similar to other web development best practices that detect supported features before using new web APIs. To test for API availability in the installed runtime, use either:
 in C/C++.
QueryInterfacetry/catchA  block in .NET or WinUI.
See Feature-detecting to test whether the installed Runtime supports recently added APIs.
 
Update the Fixed Version Runtime
If you use the Fixed Version WebView2 Runtime, make sure you regularly update the WebView2 Runtime that's packaged with your app, to reduce security risks. When using third-party content in Webview2 apps, always consider the content to be untrusted. See Fixed Version distribution mode.
 Manage new versions of the Evergreen Runtime
When a new version of the Evergreen WebView2 Runtime is downloaded to the client, any WebView2 apps that are running continue to use the previous version of the runtime, until the browser process is released. This behavior allows apps to run continuously, and prevents the previous runtime from being deleted. To use the new version of the runtime, you need to either release all references to the previous WebView2 environment objects, or restart your app. The next time your app creates a new WebView2 environment, the app will use the new version of the runtime.
When a new version of the runtime is available, your app can automatically take action, such as notifying the user to restart the app. To detect that a new version of the runtime is available, you can use the
add_NewBrowserVersionAvailable (Win32) or CoreWebView2Environment.NewBrowserVersionAvailable (.NET) event in your code. If your code handles restarting the app, consider saving the user state before the WebView2 app exits.
 Manage the lifetime of the user data folder
WebView2 apps create a user data folder to store data such as cookies, credentials, and permissions. After creating the folder, your app is responsible for managing the lifetime of the user data folder. For example, your app must do cleanup when the app is uninstalled. See Manage user data folders.
 Handle runtime-process failures
ProcessFailedYour WebView2 app should listen for and handle the  event, so the app can recover from failures of runtime processes that support the WebView2 app process.
WebView2 apps are supported by a collection of runtime processes that run alongside the app process. These supporting runtime processes can fail for various reasons, such as running out of memory, or being terminated by the user. When a supporting runtime process fails, WebView2 notifies the app by raising the ProcessFailed event.
 Event handlers on the environment object
If any of your app's event handlers on the environment object hold a reference to the environment object, and the app simply releases the reference to the environment and event handlers without removing the event handlers, there might be a circular reference between the environment object and handler objects, which will leak memory.
To prevent such a memory leak:
For any added event handler, remove the event handler before releasing the environment object.
senderAvoid holding a reference to the environment object in an event handler. Instead, the event handler can access the environment object from the  argument of the "event completed" callback.
 If you want the app to hold a reference to a WebView2 object, use a weak reference whenever possible.
 Follow recommended WebView2 security best practices
For any WebView2 app, make sure to follow our recommendations in Develop secure WebView2 apps.
Develop secure WebView2 apps
6/21/2022 • 2 minutes to read • Edit Online
The WebView2 control allows developers to host web content in the native applications. When used correctly, hosting web content offers several advantages, such as using web-based UI, accessing features of the web platform, sharing code cross-platform, and so on. To avoid vulnerabilities that can arise from hosting web content, make sure to design your WebView2 application to closely monitor interactions between the web content and the host application.
Treat all web content as insecure:
Validate web messages and host object parameters before consuming them, because web messages and parameters can be malformed (unintentionally or maliciously) and can cause the app to behave unexpectedly.
 Always check the origin of the document that's running inside WebView2, and assess the trustworthiness of the content.
Design specific web messages and host object interactions, instead of using generic proxies.
Set the following options to restrict web content functionality, by modifying ICoreWebView2Settings (Win32) or CoreWebView2Settings (.NET):
AreHostObjectsAllowed to falseIsWebMessageEnabled to falseSet , if you don't expect the web content to access host objects.
Set , if you don't expect the web content to post web messages to your native application.
IsScriptEnabled to false Set , if you don't expect the web content to run scripts (for example, when showing static HTML content).
AreDefaultScriptDialogsEnabled to false, if you don't expect the web content to show alert Set 
promptor  dialog boxes.
NavigationStartingUpdate settings based on the origin of the new page:
FrameNavigationStartingTo prevent your application from navigating to certain pages, use the  and  events to check page or frame navigation, and then conditionally block
the navigation.
 When navigating to a new page, you may need to adjust the property values on
ICoreWebView2Settings (Win32) or CoreWebView2Settings (.NET), as previously described.
ContentLoading event and RemoveHostObjectFromScript When navigating to a new document, use the 	 to remove exposed host objects.
 WebView2 cannot be run as a system user. This restriction blocks scenarios such as building a Credential Provider.
 
 Customize context menus in WebView2
 	6/21/2022 • 10 minutes to read • Edit OnlineUse the ContextMenuRequested API to customize the context-menus (right-click menus) of a WebView2 app.
The WebView2 control provides a default context menu.
Terminology:
TERMDEFINITIONmenu itemA broad term. Includes checkbox, command, radio button, separator, and submenu.commandA narrow term. One of five types of menu item.context menuEither a default context menu (right-click menu) belonging to the WebView2 control, or a custom context menu (right-click menu) belonging to your host app. Adding a custom context menu
Instead of using the default context menu, your host app can draw its own context menu by using the
ContextMenuRequestedContextMenuRequestedinformation that's sent from the WebView2 context menu. Your app handles the  event. You can use the data provided in the Event arguments of  to display a custom context menu with entries of your choice. For this case, you handle the event and request a deferral.
SelectedCommandIdWhen the user selects a command from your custom context menu, your app needs to tell the WebView2 control which command the user selected, by using the  property.
You can add default menu items and/or custom menu items to a custom context menu.
 	C# C++
To display a custom context menu that contains your desired menu items, use the data provided in the  
CoreWebView2ContextMenuRequestedEventArgs of the CoreWebView2 ContextMenuRequested Event. For this case,
Handled to be trueyou specify , and request a deferral.
CoreWebView2.ContextMenuRequestedOn a  event, add an event listener that has a 
CoreWebView2ContextMenuRequestedEventArgs.
MenuItems property of CoreWebView2ContextMenuRequestedEventArgsThe  provides the tree of the WebView2's
IList<CoreWebView2ContextMenuItem>, adding a CoreWebView2ContextMenuItem.Kind of each menu item, such as Command or Separatorcontext menu items for the right-clicked context. To include WebView2 context menu items in your app's context menu, iterate through the  for each menu item. Test the .
CoreWebView2 Class
ContextMenuRequested Event
CoreWebView2ContextMenuItem Class
Children Property

CoreWebView2ContextMenuItemKind.CommandCoreWebView2ContextMenuItemKind.SeparatorCheckBoxRadioSeparatorSubmenuCommandId Property
IsChecked Property
IsEnabled Property
Kind Property
Label Property
ShortcutKeyDescription Property
CoreWebView2ContextMenuRequestedEventArgs Class
ContextMenuTarget Property
Handled Property
MenuItems Property
SelectedCommandId Property
GetDeferral Method
CoreWebView2ContextMenuItemKind Enum
CoreWebView2ContextMenuTargetKind Enum
CoreWebView2Deferral Class
Complete Method
CoreWebView2ContextMenuItemKind Enum
 Example: Adding a custom context menu
The following sample presents the WebView2 context menu in the Win32/WPF context menu format.
 	C#
C++
 
webView.CoreWebView2.ContextMenuRequested += delegate (object sender, 
                                    CoreWebView2ContextMenuRequestedEventArgs args) {
    IList<CoreWebView2ContextMenuItem> menuList = args.MenuItems;
    CoreWebView2Deferral deferral = args.GetDeferral();     args.Handled = true;
    ContextMenu cm = new ContextMenu();
    cm.Closed += (s, ex) => deferral.Complete();
    PopulateContextMenu(args, menuList, cm);     cm.IsOpen = true;
};
void PopulateContextMenu(CoreWebView2ContextMenuRequestedEventArgs args, 
IList<CoreWebView2ContextMenuItem> menuList, ItemsControl cm)
{
    for (int i = 0; i < menuList.Count; i++)
    {
        CoreWebView2ContextMenuItem current = menuList[i];
        if (current.Kind == CoreWebView2ContextMenuItemKind.Separator)         {
            Separator sep = new Separator();             cm.Items.Add(sep);             continue;
        }
        MenuItem newItem = new MenuItem();
        // The accessibility key is the key after the & in the label
        // Replace with '_' so it is underlined in the label         newItem.Header = current.Label.Replace('&', '_');         newItem.InputGestureText = current.ShortcutKeyDescription;         newItem.IsEnabled = current.IsEnabled;
        if (current.Kind == CoreWebView2ContextMenuItemKind.Submenu)         {
            PopulateContextMenu(args, current.Children, newItem);
        }         else         {
            if (current.Kind == CoreWebView2ContextMenuItemKind.CheckBox
            || current.Kind == CoreWebView2ContextMenuItemKind.Radio)
            {
                newItem.IsCheckable = true;
                newItem.IsChecked = current.IsChecked;
            }
            newItem.Click += (s, ex) =>
            {
                args.SelectedCommandId = current.CommandId;
            };         }
        cm.Items.Add(newItem);
    }
} Adding menu items to a context menu
You can:
Add default menu items to a custom context menu, as shown above in "Adding a custom context menu".
Add custom menu items to a default context menu, as shown below in "Adding custom menu items to a default context menu".
 Adding custom menu items to a default context menu 
To add custom menu items to the default context menu, use the following API items.
 	 C#
C++
CommandContextMenuTarget.PageUri 	CoreWebView2 Class
ContextMenuRequested Event
CoreWebView2ContextMenuItem Class
CustomItemSelected Event
CoreWebView2ContextMenuItemKind Enum
CoreWebView2ContextMenuRequestedEventArgs Class
ContextMenuTarget Property
CoreWebView2ContextMenuTarget Class
 CoreWebView2ContextMenuTarget.PageUri Property CoreWebView2Environment Class
CreateContextMenuItem Method
 Example: Adding custom menu items to a default context menu
The following example adds a Display Page Uri command to the WebView2 context menu.
 	C#
C++
 
webView.CoreWebView2.ContextMenuRequested += delegate (object sender, 
                                    CoreWebView2ContextMenuRequestedEventArgs args) {
    // add new item to end of collection
    CoreWebView2ContextMenuItem newItem = 
                        webView.CoreWebView2.Environment.CreateContextMenuItem(
        "Display Page Uri", null, CoreWebView2ContextMenuItemKind.Command);         newItem.CustomItemSelected += delegate (object send, Object ex)
        {
            string pageUri = args.ContextMenuTarget.PageUri;
            System.Threading.SynchronizationContext.Current.Post((_) =>             {
                MessageBox.Show(pageUri, "Page Uri", MessageBoxButton.OK);
            }, null);
        }
    menuList.Insert(menuList.Count, newItem); }; Removing menu items from a default context menu
You can remove default or custom menu items from the default context menu.
 	C# C++
 	CoreWebView2ContextMenuItem Class
Name Property

ContextMenuRequested Event
ImageCoreWebView2ContextMenuRequestedEventArgs Class
ContextMenuTarget Property
MenuItems Property
CoreWebView2ContextMenuTargetKind Enum
 Example: Removing menu items from a default context menu
The following example removes the Save image as command from the WebView2 context menu.
 	C#
C++
 
webView.CoreWebView2.ContextMenuRequested += delegate (object sender, 
                                    CoreWebView2ContextMenuRequestedEventArgs args) {
    IList<CoreWebView2ContextMenuItem> menuList = args.MenuItems;
    CoreWebView2ContextMenuTargetKind context = args.ContextMenuTarget.Kind;     if (context == CoreWebView2ContextMenuTargetKind.Image)
    {
        for (int index = 0; index < menuList.Count; index++)
        {
            if (menuList[index].Name == "saveImageAs")
            {
                menuList.RemoveAt(index);                 break;
            }
        }
    }
}; Detecting when the user requests a context menu
This section explains how to detect when the user requests opening a context menu. It's the same for custom or default context menus.
ContextMenuRequestedWhen a user requests opening a context menu (such as by right-clicking), your app needs to listen for the  event.
When your app detects this event, your app should do some combination of the following:
Add custom menu items to the default context menu.
Remove custom menu items from the default context menu. Open a custom context menu.
ContextMenuRequestedThe  event indicates that the user requested opening a context menu.
The WebView2 control raises this event to indicate that the user requested opening a context menu in the WebView2 control, such as by right-clicking.
ContextMenuRequestedAreDefaultContextMenusEnabled property is trueThe WebView2 control only raises the  event if the current webpage allows the context menu to appear; that is, if the .
The CoreWebView2ContextMenuRequestedEventArgs contains the following information:
ContextMenuItemAn ordered list of  objects to populate the custom context menu. The ordered list includes the following:
Alt+CThe internal name of the menu item.
The UI label of the menu item, displayed to the user in the UI.
The kind of menu item.
A keyboard shortcut Description, if any, such as .
Any other properties of the custom menu item.
The coordinates where the context menu was requested, so your app can detect which UI item the user right-clicked. The coordinates are defined in relation to the upper left corner of the WebView2 control.
 A selection object that will include the kind of context selected and the appropriate context menu parameter data.
CustomItemSelectedWhen the user selects a custom menu item on a context menu, the WebView2 control fires a  event.
When your host app indicates to WebView2 that a user selected a menu item on a context menu, WebView2 then runs the selected command.
 	C# C++
 	CoreWebView2 Class
 ContextMenuRequested Event CoreWebView2Settings Class
AreDefaultContextMenusEnabled Property
 Detecting when the user selects a custom menu item
Your host app can handle the user-selected menu item, or your app can return the menu item to the WebView2 control to handle the user-selected menu item.
CustomItemSelectedYour host app should listen for the  event, which is raised when the user selects a custom menu item on a default or custom context menu.
The WebView2 control raises this event to indicate that the user selected a custom menu item that your app added to a context menu.
CustomMenuItemSelectedIf the user selects a custom menu item, the  event is raised on the context menu item object that was selected, in these cases:
SelectedCommandIdThe app adds custom menu items, but defers the context menu UI to the WebView2 platform.
The app adds custom menu items, shows custom UI, and sets the  property to the ID of the custom menu item.
 Reporting a selected command menu item to WebView2
When the user selects a WebView2 context menu command (a default menu item that's in a custom context menu), the host app can optionally report that selection to WebView2 so that WebView2 will invoke the command.
 	C#
C++
 	CoreWebView2ContextMenuItemKind Enum

CheckBox
Command
Radio
Separator
Submenu Custom menu items 
CustomMenuItemSelectedIf your host app reports a custom menu item as the selected menu item, then the  event will be fired for the custom menu item.
 Disabling context menus
AreDefaultContextMenusEnabledThe  property controls whether any context menu can be opened. If the
AreDefaultContextMenusEnabled setting is set to FalseContextMenuRequestedWebView2 , that disables context menus, and the  event won't be raised, such as when the user right-clicks.
 	C# C++
 	CoreWebView2Settings Class
AreDefaultContextMenusEnabled Property
 API Reference overview
CheckBoxCommandRadio 	C# C++
 	WebView2 Class
 ContextMenu Property CoreWebView2 Class
ContextMenuRequested Event
CoreWebView2ContextMenuItem Class
Children Property
CommandId Property
Icon Property
IsChecked Property
IsEnabled Property
Kind Property
Label Property
Name Property
ShortcutKeyDescription Property
CustomItemSelected Event
CoreWebView2ContextMenuItemKind Enum

SeparatorSubmenuAudioImagePageSelectedTextVideoCoreWebView2ContextMenuRequestedEventArgs Class
ContextMenuTarget Property
Handled Property
Location Property
MenuItems Property
SelectedCommandId Property
GetDeferral Method
CoreWebView2ContextMenuTarget Class
CoreWebView2ContextMenuTarget.PageUri Property
CoreWebView2ContextMenuTargetKind Enum
CoreWebView2Deferral Class
Complete Method
CoreWebView2Environment Class
CreateContextMenuItem Method
CoreWebView2Settings Class
AreDefaultContextMenusEnabled Property
 See also
 WebView2Samples repo
 
 
Use the Chrome DevTools Protocol in WebView2 apps
 	6/21/2022 • 2 minutes to read • Edit OnlineThe Chrome DevTools Protocol provides APIs to instrument, inspect, debug, and profile Chromium-based browsers. The Chrome DevTools Protocol is the foundation for the Microsoft Edge DevTools. Use the Chrome DevTools Protocol for features that aren't implemented in the WebView2 platform.
To use the Chrome DevTools Protocol API in a WebView2 app, do either of the following:
Install and use the Microsoft.Web.WebView2.DevToolsProtocolExtension (Preview) NuGet package (.NET).
Or, run one of the following methods:
.NET: CallDevToolsProtocolAsync, GetDevToolsProtocolEventReceiver
Win32 C/C++: CallDevToolsProtocolMethod, ICoreWebView2DevToolsProtocolEventReceiver
 Use DevToolsProtocolHelper
Microsoft.Web.WebView2.DevToolsProtocolExtension (Preview) is a NuGet package created by the WebView2 team that provides easy access to Chrome DevTools Protocol features. The following examples describe how to use the geolocation functionality in Chrome DevTools Protocol in your WebView2 control. To use other Chrome DevTools Protocol features, you can follow a similar pattern.
 Don't use the preview package in production apps 
The Microsoft.Web.WebView2.DevToolsProtocolExtension NuGet package is currently in technical preview. While in preview, refrain from using this NuGet package in production apps.
 Step 1: Create a webpage to find your geolocation
HTML fileTo create an  to find your geolocation, complete following the actions.
1. Open Visual Studio Code (or an IDE of your choice).
.html2. Create a new  file.
.html3. Paste the following code in your new  file:
<!DOCTYPE html>
<html lang="en">
<head>
   <title>Geolocation Finder</title>
</head>
<body>
   <button id="display">Display Location</button>
   <div id="message"></div>
</body>
<script>
   const btn = document.getElementById('display');
   // Find the user location.    btn.addEventListener('click', function () {
      navigator.geolocation.getCurrentPosition(onSuccess, onError);    });
   // Update message to display the latitude and longitude coordinates.
   function onSuccess(position) {
      const {latitude, longitude} = position.coords;
      message.textContent = `Your location: (${latitude},${longitude})`;
   }
   function onError() {
      message.textContent = `Operation Failed`;    }
</script>
</html>.html file with the filename geolocation.html4. Save the .
5. Open Microsoft Edge.
geolocation.html6. Open .
7. To display your latitude and longitude coordinates, click the Display Location button. To verify and compare your geolocation, copy and paste your coordinates in https://www.bing.com/maps.

 Step 2: Display geolocation.html in a WebView2
1. To create a WebView2 app, use a Get Started guide or the WebView2 samples:
Get started with WebView2
WebView2Samples repo
geolocation.html2. Set the initial navigation of the WebView2 control to :
webView.CoreWebView2.Navigate(@"C:\{path\to\file}\geolocation.html");
geolocation.html3. Make sure the  file is displayed in your WebView2 control app:

 Step 3: Install the DevToolsProtocolHelper NuGet package
Microsoft.Web.WebView2.DevToolsProtocolExtensionUse NuGet to download .
To install the package:
1. Select Project > Manage NuGet Packages > Browse.
Microsoft.Web.WebView2.DevToolsProtocolExtension2. Type  and then select
Microsoft.Web.WebView2.DevToolsProtocolExtension > Install.
3. Make sure Microsoft.Web.WebView2.DevToolsProtocolExtension is displayed in the Visual Studio NuGet Package Manager:

 Step 4: Use DevTools Protocol Helper
DevToolsProtocolExtension1. Add the  namespace to your project:
using Microsoft.Web.WebView2.Core;
using Microsoft.Web.WebView2.Core.DevToolsProtocolExtension;
DevToolsProtocolHelper object and navigate to geolocation.html2. Instantiate the :
async void InitializeAsync()
{
   await webView.EnsureCoreWebView2Async(null);
   DevToolsProtocolHelper helper = webView.CoreWebView2.GetDevToolsProtocolHelper();
   webView.CoreWebView2.Navigate(@"C:\{path\to\file}\geolocation.html"); }
3. Run the setGeoLocationOverrideAsync method:
async void InitializeAsync()
{
   await webView.EnsureCoreWebView2Async(null);
   DevToolsProtocolHelper helper = webview.CoreWebView2.GetDevToolsProtocolHelper();
   // Latitude and longitude for Paris, France.
   double latitude = 48.857024082572565;    double longitude = 2.3161581601457386;    double accuracy = 1;
   await helper.Emulation.setGeolocationOverrideAsync(latitude, longitude, accuracy); }For more information, see setGeolocationOverride.
4. Run your app.
5. To display the coordinates of Paris, France, click the Display Location button:

 File a bug or feature request for the Chrome DevTools Protocol
To request a WebView2 platform feature, enter a new issue in the WebView2Feedback repo.
To file a bug about the Chrome DevTools Protocol, file a bug report in the Chromium bugs database.
The Chrome DevTools Protocol is maintained by the open source Chromium project, not by the Microsoft Edge WebView2 team.
 See also
Microsoft Edge DevTools Protocol overview
WebView2Samples repo
 
 
Automate and test WebView2 apps with Microsoft Edge WebDriver
 	6/21/2022 • 10 minutes to read • Edit OnlineThis article explains how to automate and test your WebView2 app with Microsoft Edge WebDriver, by using the Selenium framework for browser test automation.
This article provides instructions for using the Selenium framework and C#, but you can use any library, framework, and programming language that supports WebDriver. To accomplish the same tasks using a WebDriver testing framework other than Selenium, consult the official documentation for your framework of choice.
To create automated tests that simulate user interactions for your WebView2 app, you can use Microsoft Edge WebDriver. Microsoft Edge WebDriver is Microsoft's implementation of the W3C WebDriver protocol. The W3C WebDriver protocol allows programs to control the behavior of web browsers.
Test authors write tests that use WebDriver commands to tell the browser to perform specific actions. Microsoft Edge WebDriver receives these commands and then asks the browser to perform the requested action.
Microsoft Edge WebDriver supports automating both the Microsoft Edge Browser, and WebView2 apps.
For the relationship between the WebDriver protocol, Microsoft Edge WebDriver as an implementation of that protocol, and the Selenium test framework, see WebDriver overview.
 Step 1: Download the WebView2API Sample
If you don't have an existing WebView2 project, clone the WebView2Samples repo in order to download the WebView2API Sample app. That particular sample within the larger repo a comprehensive sample of the latest WebView2 SDK. Make sure you've satisfied the prerequisites for the WebView2API Sample app.
Once you've cloned the repo, build the project in Visual Studio. It should look like the following figure.

 Step 2: Install Microsoft Edge WebDriver
Follow the instructions to install Microsoft Edge WebDriver. Microsoft Edge WebDriver is the browser-specific driver required by Selenium to automate and test WebView2.
Make sure the version of Microsoft Edge WebDriver matches the version of the WebView2 Runtime that your app uses. For the WebView2API Sample to work, make sure your version of the WebView2 Runtime is greater than or equal to the supported version of the latest WebView2 SDK release.
edge://settings/helpTo locate the latest WebView2 SDK release, see Release Notes for the WebView2 SDK.
To find out which version of the WebView2 Runtime you currently have, go to .
 Step 3: Add Selenium to the WebView2API Sample
By this point, you've installed the WebView2 Runtime, built a WebView2 project, and installed Microsoft Edge WebDriver. Next, get started using Selenium, as follows.
1. Start by creating a new C# .NET Framework project in Visual Studio. Select Next on the bottom righthand corner to continue.

2. Give your project a Project name, save it to your preferred Location, and then select Create.

Program.csA new project is created, with all the code placed in the  file.

3. Next, add Selenium to the project; install Selenium by using the Selenium.WebDriver NuGet package as follows. To download the Selenium.WebDriver NuGet package, in Visual Studio, select Project > Manage NuGet Packages.
4. Select the Browse tab. The following screen appears.

5. In the Package source dropdown list, select nuget.org.
6. Select the Include prerelease checkbox.
Selenium.WebDriver7. Type  in the Search bar, and then select Selenium.WebDriver from the results.
8. In the detail window on the right, make sure the Version is set to 4.0.0 or later, and then select Install.
NuGet downloads Selenium to your machine.

To learn more about the Selenium.WebDriver NuGet package, see Selenium.WebDriver.
OpenQA.Selenium.Edge by adding the statement using OpenQA.Selenium.Edge;Program.cs9. Use  at the beginning of the file :
using OpenQA.Selenium.Edge;
using System;
using System.Collections.Generic; using System.Linq; using System.Text; using System.Threading.Tasks;
You've now set up an empty Visual Studio project that's suitable for Selenium testing. Next, configure Selenium to drive WebView2 by using either the "launch" approach or the "attach" approach.
 Step 4: Choosing whether Microsoft Edge WebDriver should launch your app or attach to it
Decide whether to configure Selenium to drive WebView2 by using the "launch" or "attach" approach.
 The "launch" approach: In some scenarios, it's appropriate to let Microsoft Edge WebDriver handle launching your WebView2 app. Microsoft Edge WebDriver launches your WebView2 app and automatically attaches to the first available WebView2 instance that your app creates.
 The "attach" approach: In other scenarios, it's appropriate to attach Microsoft Edge WebDriver to a running WebView2 instance. You launch your app outside of Microsoft Edge WebDriver, and then attach Microsoft Edge WebDriver to a running WebView2 instance. This "attach" approach is for a WebView2 app that's not compatible with the "launch" approach.
 Approach 1: Letting Microsoft Edge WebDriver launch your WebView2 app 
If you have a simple app that creates a single WebView2 instance and that instance is active immediately upon launch, then you can use the "launch" approach; use Step 4a: Letting Microsoft Edge WebDriver launch your WebView2 app.
In this scenario, there's one WebView2 instance, and it's available upon launch, without needing to navigate through any native UI.
 Approach 2: Attaching Microsoft Edge WebDriver to a running WebView2 app 
If you have any situation that doesn't fit the "launch" scenario above, you should attach Microsoft Edge WebDriver to a running WebView2 instance (instead of letting Microsoft Edge WebDriver handle the WebView2 launch); use Step 4b: Attaching Microsoft Edge WebDriver to a running WebView2 app.
Some examples of scenarios that don't fit the "launch" scenario are:
You need to navigate through some native UI before the WebView2 instance is created.
Your app creates multiple WebView2 instances, and you want to attach to a specific instance.
In such scenarios, we recommend attaching to a specific instance of WebView2, because having Microsoft Edge WebDriver launch your WebView2 app is for relatively simple scenarios only. When Microsoft Edge WebDriver launches your app, it automatically attaches to the first WebView2 instance that is created, and will fail if no WebView2 instance is found.
Regardless of whether you use the "launch" or "attach" approach, you must download Microsoft Edge WebDriver, and make sure the version matches the version of the WebView2 runtime that your app uses. The initial steps to configure your WebDriver framework (such as Selenium) will differ between the "launch" versus "attach" approaches.
Once you've completed these initial steps to either launch an app or attach to a WebView2 instance, you'll be able to use any supported WebDriver commands to interact with that WebView2 instance.
 Step 4a: Letting Microsoft Edge WebDriver launch your WebView2 app
Use this "launch" approach if you have a simple app that creates a single WebView2 instance and that instance is active immediately upon launch. In this scenario, there's one WebView2 instance, and it's available upon launch, without needing to navigate through any native UI.
To drive WebView2 with Selenium and Microsoft Edge WebDriver:
EdgeOptions1. Create an  object, by copying and pasting the following code:
static void Main(string[] args)
{
   EdgeOptions eo = new EdgeOptions();
Next, we'll add code that does the following:
EdgeOptions instance to use WebView2, by setting the UseWebView option to trueeo.BinaryLocationEdgeDriver object using the EdgeOptionsConfigure the .
Set  to the file path of your WebView2 app binary.
Create an  instance.
eo2. Copy the following code and paste it below the  declaration line:
//Set the EdgeOptions instance to use WebView2 eo.UseWebView = true;
//Set the BinaryLocation to the filepath of the WebView2API Sample runtime eo.BinaryLocation = @"C:\path\to\your\webview2\project.exe"; EdgeDriver e = new EdgeDriver(eo);3. In the above code, specify the correct file path of your project runtime and the Microsoft Edge WebDriver runtime on your machine.
EdgeDriverhttps://microsoft.com has now been configured to drive the WebView2 in your project. For example, if you're using the WebView2API Sample, your code can now go to  by running the 
e.Url = @"https://www.microsoft.com"; command, as shown in the next code listing.
e.Url = @"https://www.microsoft.com";4. Verify that Selenium can drive WebView2. To do this, set a breakpoint on the line , and then run the project.
   //Navigate the WebView2API Sample from bing.com to microsoft.com
   e.Url = @"https://www.microsoft.com";
   //Exit Microsoft Edge WebDriver
   e.Quit(); }

Congratulations! You've successfully automated a WebView2 project and driven WebView2 by using Selenium and Microsoft Edge WebDriver, per the "launch" approach.
This is the end of the article, if you are using the "launch" approach.
 Step 4b: Attaching Microsoft Edge WebDriver to a running WebView2 app
This section explains how to attach Microsoft Edge WebDriver to an already-running WebView2 instance. If you don't have just a single WebView2 instance, or your WebView2 instance requires navigating through some native UI, use this section and approach.
A problem is that to automate a WebView2-based app, you sometimes first need to perform some actions in the native GUI in order to launch the WebView2 control. As a solution, you need to navigate the native UI outside of Microsoft Edge WebDriver, and somehow ensure that the WebView2 instance is displayed, as follows.
In this scenario, where you have some native UI to navigate, you launch your app using a method other than Microsoft Edge WebDriver, such as a command line script, or a separate tool such as WinAppDriver. Once your app process has been launched, you trigger the WebView2 instantiation, and then attach Microsoft Edge WebDriver to the running WebView2 instance.
Microsoft Edge WebDriver doesn't handle native UI automation, but here are some other approaches to navigate the native UI and display the WebView2 instance that you are automating:
 Windows Application Driver (WinAppDriver) is a service to support Selenium-like UI Test Automation on
Windows Applications. This service supports testing Universal Windows Platform (UWP), Windows Forms (WinForms), Windows Presentation Foundation (WPF), and Classic Windows (Win32) apps on Windows 10 PCs.
 Using Microsoft Native UI automation directly. The Microsoft UI Automation framework allows automated test scripts to interact with the UI. Microsoft UI Automation enables Windows applications to provide and consume programmatic information about user interfaces (UIs). It provides programmatic access to most UI elements on the desktop. It enables assistive technology products, such as screen readers, to provide information about the UI to end users and to manipulate the UI by standard input and by means other than standard input.
 Use a flag such as a command-line parameter or an environment variable to tell your app to launch directly to the WebView2 instance, to avoid the need for navigating native UI. Depending on your scenario, this might make it possible to use the "launch" approach described in Step 4a: Letting Microsoft Edge WebDriver launch your WebView2 app.
In addition to ensuring the WebView2 instance is activated, you need to set its --remote-debugging-port command-line parameter. We'll do this in the steps below. Microsoft Edge WebDriver will use this remote debugging port to connect to your WebView2 instance.
 Launching the WebView2 app with remote debugging enabled 
The next step happens when you're coding your app. You need to provide this extra command-line parameter when you're instantiating your WebView2 control. Enable remote debugging, as follows.
--remote-debugging-port=<port>1. Configure your WebView2 instance with the  additional command-line parameter using one of the recommended approaches in Globals, in WebView2 Win32 C++ Reference. Choose an available port number for this parameter.
2. Launch your app. How you launch your app depends on what other native UI testing tools you're using.
--remote-debugging-portAt this point, your app is running and its  command-line parameter has been set. Next, we'll attach Microsoft Edge WebDriver to the launched WebView2 app.
 Attaching Microsoft Edge WebDriver to the launched WebView2 app 
EdgeOptions.DebuggerAddress1. Use the  property to tell Microsoft Edge WebDriver to connect to the remote debugging port that you specified previously, instead of launching a new application:
EdgeOptions eo = new EdgeOptions(); eo.UseWebView = true;
eo.DebuggerAddress = "localhost:9222"; EdgeDriver e = new EdgeDriver(eo);
localhost:9222--remote-debugging-portAt  above, the port number given on this line should match the port number that you chose when setting  above.
DebuggerAddress property of the EdgeOptionsFor more info about the  object, see EdgeOptions object.
Congratulations! You've successfully automated a WebView2 project and driven WebView2 by using Selenium and Microsoft Edge WebDriver, by attaching Microsoft Edge WebDriver to a running WebView2 app.
 See also
WebDriver on Selenium documentation - How the APIs Selenium drives WebView2 or Microsoft Edge. Introduction to Microsoft Edge WebView2 - How to use the WebView2 control to embed web content in your native app.
Use WebDriver for test automation - Automating Microsoft Edge.

 
 Deployment and distribution
 	6/21/2022 • 2 minutes to read • Edit OnlineFor an introduction to the fundamentals, see Distribute your app and the WebView2 Runtime.
Articles in this section:
Enterprise management of WebView2 Runtimes.
Distribute an app as a single executable file - How to statically link the WebView2 loader library, to create a single-file app.

 
 Enterprise management of WebView2 Runtimes
 	6/21/2022 • 2 minutes to read • Edit OnlineWebView2 is a component that developers use to build their applications, and the developers can deploy a selfupdating Evergreen WebView2 Runtime onto user devices to power their applications. This article discusses how IT admins can manage WebView2 applications and the WebView2 Runtime.
Feedback from IT admins and developers is welcome, through the WebView2 Feedback repo.
 Group policies for WebView2
IT admins can use group policy objects (GPO) to configure policy settings for WebView2. The following policies are relevant to WebView2.
 Update policies 
UpdateMicrosoft Edge - Update policies are available for IT admins to manage the installing and updating aspects of the WebView2 Runtime. The Microsoft Edge browser and WebView2 Runtime are updated using the same update mechanism. Unless a policy, such as , is channel-specific, it applies to both the browser and WebView2 Runtime.
UpdateSuppressedFor example,  allows IT admins to set the time during each day at which to suppress autoupdate for both the browser and WebView2 Runtime. This enables IT admins to configure preferences and proxies once for both the browser and the WebView2 Runtime, to control their network bandwidth/traffic or for other purposes.
IT admins can follow Microsoft Edge's guide to configure Microsoft Edge - Update policies.
 Browser policies 
Microsoft Edge - Browser policies doesn't apply to WebView2 applications. This is by design, because apps and browsers have different use cases, and IT admins might not be aware of what applications use WebView2.
Applying browser policies on WebView2 would have unintended consequences. For example, IT admins can block JavaScript in the browser, and that would break WebView2 apps that use JavaScript. To prevent that, browser policies are separate from WebView2 policies.
	 WebView2 	-specific policies
WebView2-specific policies are available to for you to manage WebView2 directly. However, we recommend that WebView2 app developers implement their own group policies to manage the use of WebView2, because it's easier for administrators to manage the app instead of managing WebView2 directly.
 Windows Server Update Services (WSUS)
Windows Server Update Services (WSUS) enables information technology administrators to deploy the latest Microsoft product updates. You can use WSUS to fully manage the distribution of updates of WebView2 that are released through Microsoft Update to computers on your network.
NOTE
The recommended way of receiving WebView2 updates is by using the default Microsoft Edge updater. Any modification of update and servicing paths should be done with caution.
  
WebView2 Deployment and Update using WSUS
WebView2 options in Configuration Manager exist under the Microsoft Edge Management node. For more information, visit Update Microsoft Edge.
 See also
 Distribute your app and the WebView2 Runtime - About the Evergreen, self-updating WebView2 Runtime.

 
 
Distribute a WebView2 app as a single executable file
 	6/21/2022 • 2 minutes to read • Edit OnlineYou may want to distribute your application with a single executable file, instead of a package of many files. To create a single executable file, or to reduce the size of your package, you should statically link the
WebView2Loader.dll, and the IDLWebView2Loader files. The WebView2 SDK contains a header file,  file. 
WebView2Loader.dll is a small component that helps apps locate the WebView2 Runtime, or Microsoft Edge
preview channels, on the device.
WebView2Loader.dllFor an app that doesn't ship , do the following:
.vcxproj1. Open the  project file for your app in a text editor, such as Visual Studio Code.
.vcprojThe  project file might be a hidden file, meaning that the file isn't shown in Visual Studio. To find hidden files, use the command line.
2. Locate the section in the code where you include the WebView2 NuGet package target files. The location in the code is highlighted in the following figure:

Microsoft.Web.WebView2.targets3. Copy the following code and paste it where the  is included:
<PropertyGroup>
    <WebView2LoaderPreference>Static</WebView2LoaderPreference> </PropertyGroup>
The inserted code is shown below:

4. Compile and run your app.
 See also
Get started with WebView2
WebView2Samples repo - a comprehensive example of WebView2 capabilities.
WebView2 API reference
See also in Introduction to Microsoft Edge WebView2.

 
 
Publish a UWP WebView2 app to the Microsoft Store
 	6/21/2022 • 4 minutes to read • Edit OnlineA UWP WebView2 app is a Universal Windows Platform (UWP) app that hosts the WebView2 control. To make a UWP WebView2 app widely available, you can publish it to the Microsoft Store, by following the steps below.
For general background information about publishing to the Windows Store, see Publish Windows apps and games, at Windows App Development documentation > UWP. The steps below provide the specific details about how to publish a UWP WebView2 app.
 Step 1: Configure a Microsoft Store account in Visual Studio
 Make sure you have a Microsoft Store account configured in Microsoft Visual Studio.
If needed, see Get registered, about developer accounts for the Microsoft Store. Then continue with the steps below.
 Step 2: Test the non-packaged host app
Test for these common basic issues before submitting your app to the Microsoft Store. This will help prevent Store certification failures, which would delay your app from becoming available.
1. Make sure the app runs correctly on startup.
2. Make sure the app works correctly during shutdown sleep.
 Step 3: Package the host app
The Microsoft Store requires submitting a packaged app. Package your app as follows:
package.appxmanifest1. Update the  with all needed content, such as Visual Assets, Packaging name, and Application information. If you don't do this, the Microsoft Store validation step will fail. Then continue with the steps below.
2. At Partner Center, select Project > Publish and then reserve an application name.
3. Associate the application with the reserved name, by selecting Project > Publish > Associate App with the Store.
4. Create the app package, by selecting Project > Publish > Create App Packages. Select the target configurations. Only 64-bit versions of the WebView2 Runtime will work in UWP:

5. Once the app package has been created for your configurations, the Create App Packages window displays the Finished creating package dialog:

6. In the dialog, note where the package bundle was placed. This information is also shown in the build window.
7. Click the Close button.
 Step 4: Test the package
To make sure that all required content files are present in the package, and to make sure the files have correct permissions, test your packaged app, as follows:
1. Use the generated app package to install the app on your machine. Look for any oddities regarding required packages and functionality.
2. If possible, install your app on other machines also. Look for any oddities regarding required packages and functionality.
 Step 5: Run Windows App Certification Kit (WACK)
Windows App Certification Kit (WACK) is an app that's a certification tool. This tool evaluates your host app against the Microsoft Store's requirements.
Once you're satisfied that your packaged app works, run the Windows App Certification Kit (WACK):
1. Generate the app package again, as above. That's the easiest way to get to the Windows App Certification Kit (WACK) process.
2. Once the package creation is complete, select Launch Windows App Certification Kit.
3. You must approve the User Access Control (UAC) dialog, for the Windows App Certification Kit (WACK) to run correctly.
4. Select All for the test suite, and then click Next.
5. After a few minutes, the Windows App Certification Kit (WACK) shows a results page. If the app failed, click the link to review the results.
 Resolving tests 
The results page of the Windows App Certification Kit (WACK) app shows any tests that need to be resolved.
	 Restricted name 	-space
package.appxmanifestIf your app failed the Restricted name-space check, edit the  file and remove the 
restrictedcapabilities line and any capabilities that use rescap.
WebView2 shouldn't require any restricted capabilities, to operate. If your app needs restricted capabilities, you'll need to either ask for a store exception through Partner Center, or only distribute the app through non-Store avenues.
 Branding 
If your app failed the Branding checks, update all the Visual Assets in the manifest as described above.
 App Capabilities 
If your app failed the App Capabilities tests, turn off any unneeded capabilities. If you need a special use capability you will need to get Microsoft Store approval or use non-Store distribution methods.
 General metadata correctness 
IPopup4If your app failed the General metadata correctness tests with an error in , update the microsoft.UI.xaml NuGet package to version Microsoft.UI.Xaml.2.8.0-prerelease.220118001 or higher. There was a bug in the manifests, prior to that version.
 Supported API 
In this test, WACK checks the Windows APIs that your host app is calling, to make sure they're supported.
If your app failed the Supported API test, update the Windows SDK to version 22000 or higher, to get the latest version of the allowed-APIs list. There should be no blocking APIs for WebView2 in the current Windows SDK.
 Step 6: Upload the app package
 After all of the Windows App Certification Kit (WACK) tests have passed, upload your app package to the Windows Store, by using either of the following approaches:
 Approach 1: In Windows App Certification Kit (WACK), select Project > Publish > Upload App Packages.
 Approach 2: Go to Partner Center and upload your app package to the Windows Store through Partner Center.
 See also
Get registered - Creating a developer account for the Microsoft Store.
Publish Windows apps and games, at Windows App Development documentation > UWP. General background information about publishing to the Windows Store.
Windows App Certification Kit
Partner Center (partner.microsoft.com).
 
 Release Notes for the WebView2 SDK
 	6/21/2022 • 41 minutes to read • Edit OnlineThe WebView2 team updates the WebView2 SDK on a four-week cadence. This article contains the latest information on product announcements, additions, modifications, and breaking changes to the APIs.
WebView2 bug fixes, such as the fixes listed below, are either Runtime-specific or SDK-specific.
 Recommended browser channel and Runtime
Make sure to re-compile your WebView2 app after updating the WebView2 SDK NuGet package. The WebView2 team recommends the following:
 Use the Canary preview channel of Microsoft Edge when you develop using a prerelease version of the WebView2 SDK package. Canary is the recommended preview channel, because it ships at the fastest cadence and has the newest APIs.
 Use the Evergreen WebView2 Runtime when you use a release version of the WebView2 SDK package.
For more information, see Matching the Runtime version with the SDK version.
 Minimum version of the browser or Runtime to load WebView2
To load WebView2, the minimum version of Microsoft Edge or the WebView2 Runtime is 86.0.616.0. The minimum version to load WebView2 only changes when a breaking change occurs in the web platform.
To use a prerelease SDK along with a Microsoft Edge preview channel, see Test upcoming APIs and features.
 Platforms covered
Generally, release notes apply across Win32, .NET, and WinRT. The APIs for the platforms are roughly parallel, such as:
Win32 ICoreWebView2 together with similarly named interfaces such as ICoreWebView2_10. .NET CoreWebView2 Class.
WinRT CoreWebView2 Class.
 1.0.1245.22
Release Date: June 14, 2022
NuGet package for WebView2 SDK 1.0.1245.22
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 102.0.1245.22 or higher.
There is no corresponding prerelease package.
 General 
 Promotions 
The following items are now stable:
 The Server Certificate API which provides an option to trust the server's TLS certificate at the application level. It renders the page without prompting the user about TLS or providing the ability to cancel the web request.
 The ClearBrowsingData API which allows developers to programmatically clear specific data types for a duration:
ClearBrowsingDataClearBrowsingDataAllClearBrowsingDataInTimeRangeNavigationCompletedThe HttpStatusCode API which provides the HTTP status code for navigation requests in  events.
 Bug fixes 
 Fixed an issue with the on-screen keyboard in which the keyboard doesn't reappear after it's closed by clicking the X button. Also fixed an issue in which the keyboard gets dismissed when users switch from one edit control to another within WebView2. (Issue #460)
AddHostObjectToScript in script. If you call setHostPropertyWebResourceRequestedStatusBarTextChangedFixed an issue when using a proxy from  and it failed, you could have received an internal error message structure rather than a JavaScript Error object. Fixed regression where WebView2 would steal focus from the app when the WebView2 was made visible.
(Issue #862)
Fixed a bug that caused increased memory usage with  events using large data. (Issue #2171)
Fixed  regression. The StatusBarText API was made compatible with previous versions again. (Issue #2414)
Better support for apps running as admin. (Issue #2356)
 1.0.1210.39
Release Date: May 9, 2022
NuGet package for WebView2 SDK 1.0.1210.39
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 101.0.1210.39 or higher.
 General 
 Promotions 
The following items are now stable:
light, dark, or systemSupport for multiple user profiles in WebView2.
Theming API which provides a way to customize the WebView2 color theme as .
Default Download API which provides a way to customize the default download location.
 1.0.1248-prerelease
Release Date: May 9, 2022
NuGet package for WebView2 SDK 1.0.1248-prelease
For full API compatibility, this version of the WebView2 SDK requires Microsoft Edge version 102.0.1248.0 or higher.
 General 
 Added support for WinRT Object projection into JavaScript by adding WinRT JS Projection tool (wv2winrt) in NuGet package. For instructions about using the WinRT JS Projection tool see Call native-side WinRT code from web-side code.
 Promotions 
The following APIs are promoted to stable in this prerelease SDK:
 The Server Certificate API which provides an option to trust the server's TLS certificate at the application level and render the page without prompting the user about TLS or providing the ability to cancel the web request.
 The ClearBrowsingData API which allows developers to programmatically clear specific data types for a duration:

clearBrowsingDataInTimeRange
clearBrowsingDataAll Bug fixes 
OnWindowPositionChanged Fixed an unavoidable crash that occurred in the WPF control's 	 event. (Issue #1531)
CoreWebView2EnvironmentOptions.ExclusiveUserDataFolderAccess Fixed the issue with 	 not working properly in .NET SDK. (Issue #2363)
 Fixed a runtime regression that caused some Office Add-ins which use host objects to crash during operations that previously worked. (Issue #2337)
 Fixed an issue where WebView2 content can become blurry when moving between monitors with different scaling.
HRESULT_FROM_WIN32(ERROR_INVALID_STATE) Fixed a regression to make sure that WebView2 creation fails quickly with  instead of time out.
 Fixed a bug where changes from Chromium broke WebView2 background color.
 1.0.1185.39
Release Date: April 12, 2022
NuGet package for WebView2 SDK 1.0.1185.39
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 100.0.1185.39 or higher.
 General 
ICoreWebView2Certificate to ICoreWebView2ClientCertificate	 Renamed 	.
 Promotions 
The following items are now stable:
sessionIdadd_StatusBarTextChangedget_StatusBarTextremove_StatusBarTextChangedThe CallDevToolsProtocolMethodForSession API that supports  for CDP method calls.
The StatusBarText API:
The AllowExternalDrop API that supports enable/disable for external drop operations.
The HiddenPdfToolbarItems API is available to customize PDF toolbar items.
 The ExclusiveUserDataFolderAccess API allows control of whether or not other processes can create
WebView2EnvironmentWebView2 from  created with the same user data folder and therefore sharing the same WebView browser process instance.
add_PermissionRequestedremove_PermissionRequestedThe permission requested support for iframes:
 1.0.1222-prerelease
Release Date: April 12, 2022
NuGet package for WebView2 SDK 1.0.1222-prerelease
For full API compatibility, this version of the WebView2 SDK requires Microsoft Edge version 102.0.1222.0 or higher.
 General 
 Experimental features 
 Added the Server Certificate API which provides an option to trust the server's TLS certificate at the application level and render the page without prompting the user about TLS or providing the ability to cancel the web request.
 Added the Favicon API which provides a way to get the favicon when it changes or is set at a website.
 Promotions 
The following APIs are promoted to stable in this prerelease SDK:
light, dark, or systemSupport for multiple user profiles in WebView2.
Theming API which provides a way to customize the WebView2 color theme as .
Default Download API which provides a way to customize the default download location.
 Bug fixes 
ZoomFactor issue that incorrectly sets ZoomFactor Fixed 	 value to the maximum value when it is out of bounds.
 Fixed an issue in which WebView2 content can become blurry when moving between monitors with different scaling.
MouseEvent.movementX and MouseEvent.movementY Fixed a bug where  will always be 0 in visual hosting mode. (Issue #2220)
Fixed log in issue caused by a password regression in WebView2. (Issue #2291)
Fixed a failure caused when a user opens a new app window and the web page does not have a navigation entry assigned.
ICoreWebView2Frame::PostWebMessageMade a runtime change to fix a bug in WinUI 2 (UWP) in which owned windows were not showing up.
Fixed  functionality after source update. (Issue #2267)
 1.0.1150.38
Release Date: March 10, 2022
NuGet package for WebView2 SDK 1.0.1150.38
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 99.0.1150.38 or higher.
 General 
 Promotions 
The following items are now stable:
 The BasicAuthentication API that enables developers to handle Basic HTTP Authentication request and response.
 1.0.1189-prerelease
Release Date: March 10, 2022
NuGet package for WebView2 SDK 1.0.1189-prerelease
For full API compatibility, this version of the WebView2 SDK requires Microsoft Edge version 100.0.1189.0 or higher.
 General 
 Experimental features 
 Added ContextMenuRequested API to enable host app to create or modify their own context menu.
 Promotions 
The following APIs are promoted to stable in this prerelease SDK:
The CallDevToolsProtocolMethodForSession API that supports sessionId for CDP method calls. The StatusBarText API:
add_StatusBarTextChangedget_StatusBarTextremove_StatusBarTextChangedThe AllowExternalDrop API that supports enable/disable external drop.
The HiddenPdfToolbarItems API is available to customize the PDF toolbar items.
The ExclusiveUserDataFolderAccess API allows control of whether or not other processes can create WebView2 using the same user data folder.
 Bug fixes 
DocumentTitleChangedHistoryChangedFixed a bug where WebView2 app gets stuck occasionally with UWP.
Fixed a bug where focus is not returned to the application after closing the Find bar for windowed mode. Fixed bug in which the  event was not being raised for backward/forward navigation in single-page apps.
Fixed bug in which the  event was not being raised for Iframe navigation.
 1.0.1108.44
Release Date: February 6, 2022
NuGet package for WebView2 SDK 1.0.1108.44
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 98.0.1108.44 or higher.
 General 
 Promotions 
The following items are now stable:
add_NavigationStartingremove_NavigationStartingadd_ContentLoadingremove_ContentLoadingadd_NavigationCompletedremove_NavigationCompletedadd_DOMContentLoadedremove_DOMContentLoadedExecuteScriptPostWebMessageAsJsonPostWebMessageAsStringadd_WebMessageReceivedremove_WebMessageReceivedThe AdditionalAllowedFrameAncestors API that enable developers to provide additional allowed frame ancestors.
The ProcessInfo APIs provide more information about WebView2 processes and process collections. New APIs for iframes:
 1.0.1158-prerelease
Release Date: February 6, 2022
NuGet package for WebView2 SDK 1.0.1158-prerelease
For full API compatibility, this version of the WebView2 SDK requires Microsoft Edge version 100.0.1158.0 or higher.
 General 
 Experimental features 
DevToolsProtocolAdded Status bar API to provide info when webiew is showing status message, URL, or empty string.
Added CDP API to provide possibility for developers have multiple  targets in WebView2.
 Promotions 
The following APIs are promoted to stable in this prerelease SDK:
add_PermissionRequestedremove_PermissionRequestedRename ICoreWebView2ClientCertificate to ICoreWebView2Certificate. New APIs for iframes:
 Bug fixes 
Fixed an issue causing erroneous warnings in the Visual Studio Error List window. (Issue #1722) Fixed a bug where NewWindowRequested was not getting raised when opening PDF downloads.
Resolved a bug in WinUI3 where select dropdowns would not show up. (Issue #1693) Added the ability to toggle WebView2 mute state, even when there is no audio playing.
 1.0.1072.54
Release Date: January 13, 2022
NuGet package for WebView2 SDK 1.0.1072.54
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 97.0.1072.54 or higher.
 General 
 Promotions 
The following items are now stable:
The Media API that enables developers to mute/unmute media within WebView2.
The Download Positioning and Anchoring API enables:
Changing the position of the download dialog, relative to the WebView2 bounds. You can anchor the download dialog to the Download button, instead of the default position, which is the top-right corner.
Programmatically open and close the default download dialog.
Making changes in response to the dialog opening and closing.
 1.0.1133-prerelease
Release Date: January 13, 2022
NuGet package for WebView2 SDK 1.0.1133-prerelease
For full API compatibility, this version of the WebView2 SDK requires Microsoft Edge version 99.0.1133.0 or higher.
 General 
 Experimental features 
Added support for theming (overall color scheme - light, dark, system) of WebView2.
Added a way to set default download path.
Added support for clearing browser data.
Added permission requested support for iframes.
 Promotions 
The following APIs are promoted to stable in this prerelease SDK:
PostWebMessageAsJsonPostWebMessageAsStringadd_WebMessageReceivedremove_WebMessageReceivedNew APIs for iframes:
The ProcessInfo APIs provides more information about WebView2 processes and process collections. The HTTP Authentication API.
 Bug fixes 
Set-Cookies header from showing up in the WebResourceResponseReceivedGetAvailableBrowserVersionString() fails to locate/load WebView2Loader.dllwindow.open when NewWindowRequestedFixed a bug that prevented  event.
Resolved a bug where pop-ups and owned windows would jump to a different position before closing instead of closing along with the app window. This bug was only active for a very short window of time.
Fixed focus issue after closing file picker dialog.
Fixed bug where Find on Page UI visibility did not change with WebView2 visibility.
Fixed bug where . (Issue #1236)
Fixed size and position of the new window created with  event was not handled. (Issue #1343)
Fixed bug where mini menu was still displaying on selected text when context menus were disabled. This change is Runtime-specific. (Issue #1345)
Fixed bug where focus returns to wrong location after switching apps in WinForms.
 1.0.1083-prerelease
Release Date: November 29, 2021
NuGet package for WebView2 SDK 1.0.1083-prerelease
For full API compatibility, this version of the WebView2 SDK requires Microsoft Edge version 97.0.1083.0 or higher.
 Experimental features 
PostWebMessageAsJsonPostWebMessageAsStringadd_WebMessageReceivedremove_WebMessageReceivedAdded the following APIs for iframes in WebView2:
Added ProcessInfo APIs to provide more information about WebView2 processes and process collections.
 Promotions 
The following APIs are promoted to stable in this prerelease SDK:
The Media API that enables developers to mute/unmute media within WebView2.
The Download Positioning and Anchoring API. This API enables:
Changing the position of the download dialog, relative to the WebView2 bounds. You can anchor the download dialog to the Download button, instead of the default position, which is the top-right corner.
Programmatically opening and closing the default download dialog. Making changes in response to the dialog opening and closing.
 Bug fixes 
Fixed a focus issue after closing the file picker dialog.
Fixed a bug where WebView2 doesn't receive spatial input on initial launch.
Fixed an issue that prevented single sign-on in WebView2.
Resolved a bug where the download dialog was not moving with the window on WPF and WinForms.
Updated compatible command line check to prevent needing a version check for optional switches. Fixed an error that was causing "Microsoft Edge" branding to appear in the accessibility tree.
 1.0.1054.31
Release Date: November 29, 2021
NuGet package for WebView2 SDK 1.0.1054.31
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 96.0.1054.31 or higher.
 General 
 General reliability fixes.
 Bug fixes 
Turned off the Control-flow Enforcement Technology (CET) Shadow Stack feature for v96 WebView2 Runtime.
Fixed an issue that was causing slow startup times when launching in a .NET single-file application. (Issue #1909)
Fixed a crash caused by Microsoft Edge browser policies getting incorrectly applied to WebView2 as well.
(Issue #1860)
Fixed a crash that occurred when a pop-up window with a download dialog was closed. (Issue #1765) & (Issue #1723)
 1.0.1056-prerelease
Release Date: October 29, 2021
NuGet package for WebView2 SDK 1.0.1056-prerelease
For full API compatibility, this version of the WebView2 SDK requires Microsoft Edge version 97.0.1056.0 or higher.
 General 
 General reliability improvements.
 Experimental features 
The Download Positioning and Anchoring API. This API enables:
Changing the position of the download dialog, relative to the WebView2 bounds. You can anchor the download dialog to the Download button, instead of the default position, which is the top-right corner.
Programmatically opening and closing the default download dialog.
 Making changes in response to the dialog opening and closing. The HTTP Authentication API.
 Bug fixes 
ExitCode in ICoreWebView2ProcessFailedEventArgs2COREWEBVIEW2_PROCESS_FAILED_KIND_BROWSER_PROCESS_EXITED--js-flags switch is now honored in the AdditionalBrowserArgumentsCoreWebView2EnvironmentOptionsnameInvalidCastExceptionThe real process exit code is now provided as  for 
 process failure.
The  that are provided in 
.
Fixed access to the  property for host objects in JavaScript. (Issue #641)
Fixed an  in the WPF control when it's implicitly initialized prior to the event loop starting. (Issue #1577)
 1.0.1020.30
Release Date: October 25, 2021
NuGet package for WebView2 SDK 1.0.1020.30
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 95.0.1020.30 or higher.
 General 
 Bug fixes 
EnsureCoreWebView2AsyncUpdated  to not throw exceptions when the WPF source property is set. (Issue #1781)
Fixed a bug where WebView2 crashes after interacting with multiple windows that show a download UI. (Issue #1723)
 Promotions 
The following items are now stable:
 PrintToPdf API.
 1.0.992.28
Release Date: September 27, 2021
NuGet package for WebView2 SDK 1.0.992.28
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 94.0.992.31 or higher.
 General 
 Bug fixes 
PlatformTarget Fixed missing WebView2 DLLs (which led to initialization failure) when  isn't set in the user's .NET project. (Issue #1061)
 Promotions 
The following items are now stable:
ICoreWebView2NewWindowRequestedEventArgs2OpenTaskManagerWindow API.
isSwipeNavigationEnabled property.
BrowserProcessExited API. get_Name property on  interface.
 1.0.1018-prerelease
Release Date: September 20, 2021
NuGet package for WebView2 SDK 1.0.1018-prerelease
For full API compatibility, this prerelease version of the WebView2 SDK requires Microsoft Edge version 95.0.1018.0 or higher.
 General 
 Experimental features 
Added a media API that enables developers to mute/unmute media within WebView2. Added support for multiple user profiles with WebView2.
 Bug fixes 
Fixed a bug where WebView2 stops rendering when the app is spanning monitors and the monitor scale changes.
Fixed a bug where closing the download UI crashes WebView2 when multiple download windows are open.
(Issue #1723)
Fixed a build/initialization error when PlatformTarget isn't set in the user's .NET project. (Issue #730 and Issue #1548)
 1.0.1010-prerelease
Release Date: September 14, 2021
NuGet package for WebView2 SDK 1.0.1010-prerelease
For full API compatibility, this prerelease version of the WebView2 SDK requires Microsoft Edge version 95.0.1010.0 or higher.
 General 
WebView2 performance improvements.
Reliability fixes. (Issue #1605 and Issue #1678)
 Added performance improvements during startup and when the host app is in the foreground.
 Experimental features 
EnsureCoreWebView2Async, which throws an ArgumentException Removed silent failures by using 	 when called multiple times with incompatible parameters.
 Changed default handling of the UserDataFolder property in the environment object.
Cau t ion
Breaking Change: The default handling for the user data folder, if the developer doesn't specify where to put it, will be changing. See Announcement: User directory folder default handling updates.
Added navigation & script APIs for iframes.
Added MemoryUsageTargetLevel which allows developers to specify memory consumption levels, such as low, or normal.
Added ExclusiveUserDataFolderAccess to environment options.
Added HiddenPdfToolbarItems to customize PDF toolbar items.
Added PrintToPdf, which allows printing the current page to PDF. Also, you can use optional custom settings with this new API.
 Added AllowExternalDrop property to allow the dragging and dropping of objects from outside a WebView2 control into it.
 Added ContextMenu APIs which allow customization of the WebView2 context menu.
 Bug fixes 
MediaDevices.getDisplayMedia()window.chrome.webviewput_IsVisible(false)SetVirtualHostNameToFolderMappingIDispatch objects were returned as IUnknownImproved how host objects exceptions are caught in your JavaScript code.
Replaced WebView2 icon with a generic icon in DevTools windows.
Turn on the Tab screen sharing option when  is used. (Issue #1566)
Fixed a bug in the Client Certificate API, when the correct certificate was not selected. This is a Runtime change. (Issue #1666)
Fixed bug where  was unavailable in new windows in the same parent domain. This change is Runtime-specific. (Issue #1144)
Fixed a bug where dropdown menus or lists were displayed behind the window that has focus. (Issue #411)
Fixed focus issues when using . (Issue #238)
Fixed a bug to apply  to pop-up windows.
Fixed bugs where an .
 Promotions 
The following APIs are promoted to stable in this prerelease SDK:

IsSwipeNavigationEnabled
BrowserProcessExited
OpenBrowserTaskManager 1.0.961.33
Release Date: September 8, 2021
NuGet package for WebView2 SDK 1.0.961.33
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 93.0.961.44 or higher.
 General 
 Bug fixes 
ERR_SSL_CLIENT_AUTH_CERT_NEEDEDAreBrowserAcceleratorKeysEnabledFixed a bug that caused  errors. This is a Runtime change.
Fixed a bug that special browser keys like Refresh, Home, Back, and so on can't be turned off using . This change is Runtime-specific.
Fixed a bug where the transparent background color isn't rendered.
Fixed a bug that caused a white flicker when loading WebView2.
Fixed a bug in WebView2 .NET controls where WebView2 windows were blank when created in the background. (Issue #1077)
about:blankFixed a bug where settings were not updated when the user navigated to or a new window displayed  pages. This is a Runtime change.
 Promotions 
The following items are now stable:
 Client Certificate API.
 1.0.955-prerelease
Release Date: July 26, 2021
NuGet package for WebView2 SDK 1.0.955-prerelease
For full API compatibility, this prerelease version of the WebView2 SDK requires Microsoft Edge version 93.0.967.0 or higher.
 General 
edge://historyWebView2 performance improvements.
Added partial Event Tracing for Windows (ETW) support.
Removed Microsoft branding from .
New default Download UI.
 Experimental features 
Added OpenTaskManagerWindow to launch a WebView2 browser task manager.
Added NewWindowRequestedEventArgs.
Added support for virtual host name mapping to work with Service Workers. Added HiddenPdfToolbarItems to customize the PDF toolbar items.
 Bug fixes 
edge://downloads and edge://historyNewWindowRequestedtarget=_blankadd_WebResourceRequestedadd_NewWindowRequestedFixed bug that broke the  pages. This change is Runtime-specific.
Fixed bugs to improve reliability in the WebView2Loader.dll.
Fixed bug in which  event handler launched two windows when handling links that use 
.
Fixed a bug in WebView2 visual hosting that flickered before startup.
Fixed bug when  didn't work on WebView2 controls created using 
. (Issue #616)
Allow the host app to set foreground on a different application in response to events including 
NavigationStarting, AddHostObjectToScript methods, WebMessageReceived, and NewWindowRequested. (Issue
#1092)
PermissionRequestedExecuteScriptAsyncFix bug to trigger the  event for the microphone. This change is Runtime-specific.(Issue #1462)
Fixed bug when  blocked after several successful runs. This change is Runtime-specific. (Issue #1348)
ResultFilePath in DownloadStartingEventArgsFixed bug preventing non-ASCII filenames from being used in .
(Issue #1428)
Fixed bug where the title bar on the default pop-up wasn't displayed completely. This change is Runtimespecific. (Issue #1016)
 Promotions  add_ClientCertificateRequested was promoted to stable.
.NET  
 Bug fixes 
Fixed an issue in WebView2 .NET API reference documentation that caused only the first exception to be displayed.
.NET core libraries are now built in release mode. To debug, ensure you clear the Just my code checkbox. Fixed a bug that crashed WebView2 on forms with child forms. The child form, with the find in page bar open, caused WebView2 to crash when the child form was closed. (Issue #1097)
 1.0.902.49
Release Date: July 26, 2021
NuGet package for WebView2 SDK 1.0.902.49
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 92.0.902.49 or higher.
 General 
 Bug fixes 
IsBuiltInErrorPageEnabledAddScriptToExecuteOnDocumentCreatedFix bug that broke the  property, which turned off the error page that's displayed
when there's a navigation failure or render process failure. This change is Runtime-specific. (Issue #634) Fixed an issue where WebView2 controls took focus away from the user's focus.
Fixed bug when  didn't work on child windows. (Issue #935)
Fixed a bug that caused inactive tabs to be automatically discarded. (Issue #637)
Fixed a bug when a navigation event was interrupted by another navigation event resulting in the Navigation
NavigationCompletedID of  events to be incorrect. (Issue #1142)
 Promotions 
The following items are now in stable:
add_FrameCreated. get_IsGeneralAutofillEnabled. get_IsPinchZoomEnabled.
The Download APIs.
AddHostObjectToScriptWithOrigins API with iFrame element support.
 1.0.902-prerelease
Release Date: June 1, 2021
NuGet package for WebView2 SDK 1.0.902-prerelease
For full API compatibility, this prerelease version of the WebView2 SDK requires Microsoft Edge version 92.0.902.0 or higher.
 General 
 Improved WebView2 startup performance and disk footprint.
 Experimental features 
Added IsSwipeNavigationEnabled property to enable or disable the ability of the end user to use swiping gesture on touch input-enabled devices to navigate in WebView2.
Added BrowserProcessExited event.
Added add_ClientCertificateRequested API. It allows showing a client certificate dialog prompt if desired and enables access to required metadata to replace default client certificate dialog prompt.
 Bug fixes 
Refresh, Home, and BackAreBrowserAcceleratorKeysEnabledEnter or EscWebResourceRequestedDefaultBackgroundColorDefaultBackgroundColorFix a bug where mouse left click doesn't dismiss context menu. This change is Runtime-specific.
Fixed a bug where WebView2 creation fails when exe files for apps sharing the same user data folder have inconsistent version info.
Fixed a bug where special browser keys such as  can't be disabled by 
. This change is Runtime-specific.
Fixed a bug in WebView2 .NET controls, where WebView2 windows are blank when created in the background. (Issue #1077).
Dismissing a file picker dialog by pressing  no longer crashes WPF applications using WebView2 control. (Issue #1099).
Fixed a bug that AllowSingleSignOnUsingOSPrimaryAccount doesn't work properly with WebView2 when a  event handler is attached. This change is Runtime-specific. (Issue #1183).
Downloading a file no longer breaks WebView2  transparency. This change is
Runtime-specific. (Issue #1108).
Removed screen sharing media picker message that contains Microsoft branding. (Issue #940).
Fixed a bug in WebView2 WinForm control where hiding the parent form doesn't hide the WebView2 control (Issue #828 and Issue #1079).
Added static WS_CLIPCHILDREN style to WebView2's WPF windows. (Issue #1013).
Fixed a bug where right-clicking a link crashes the WebView2 host app. This change is Runtime-specific.
Fixed a reliability bug that could crash the host app process when moving to a newer Edge WebView2 Runtime version.
DEPRECATION: Officially deprecated the  API for Windows 7.
 Promotions 
Download API is now promoted to stable.
PinchZoom API is now promoted to stable.
AddFrameCreated is now promoted to stable.
AddHostObjectToScriptWithOrigins API promoted to stable with iFrame element support. Autofill API is now promoted to stable.
NOTE
There is no current API to delete the locally stored general autofill and password autosave information. Please provide a control to delete the data, which will involve deleting the entire user data folder.
.NET  
 Bug fixes 
Fixed a bug in WebView2 WinForm control where WebView2 window visibility isn't updated properly after parent window is disposed. (Issue #1282 and Issue #828).
Fixed a bug in WebView2 WPF control that Source property binding in WPF OneWay binding mode isn't working properly. (Issue #619 and Issue #608).
 1.0.864.35
Release Date: May 31, 2021
NuGet package for WebView2 SDK 1.0.864.35
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 91.0.864.35 or higher.
 General 
 Bug fixes 
WebView2.hNewWindowRequestedFixed a reliability bug that could crash the host app process when moving to a newer Edge WebView2 Runtime version.
Fixed a bug that prevented memory purge in some situations. This change is Runtime-specific.
Fixed error in 818 SDK release package where project couldn't find the  file. (Issue #1209). Fixed a bug which caused WebResourceRequested event to be dropped for some requests with binary bodies.
Improve  documentation. (Issue #448).
 Promotions 
UserAgent API is now stable.
AreBrowserkeysenabled is now stable.
.NET  
 Bug fixes 
CoreWebView2WebResourceRequest Fixed a bug in WebView2 .NET controls that first header is missing when iterating  headers collection. (Issue #1123).
 1.0.865-prerelease
Release Date: April 26, 2021
NuGet package for WebView2 SDK 1.0.865-prerelease
For full API compatibility, this prerelease version of the WebView2 SDK requires Microsoft Edge version 91.0.865.0 or higher.
 General 
 Experimental features 
iframeAdded IsPinchZoomEnabled setting. It allows you to turn on or off page scale zoom control in a setting.
Added Custom add_DownloadStarting API. It allows you to block downloads, save to a different path, and access the required metadata to build custom download UI.
Added  element support from AddHostObjectToScriptWithOrigins.
Added sample code for WPF sample app to use the API to turn off browser function keys. Added the UpdateRuntime API, to easily update the WebView2 Runtime.
 Bug fixes 
Chromium DevTools Protocol message with POSTOpenSaveAsAwareness download UI, because it included links to edge://settingsFixed handler for a  binary data in WebView2.
Turned off the . (Issue
#1120).
Removed branding from screen share dialog. (Issue #940).
Fixed bug where the SetWindowDisplayAffinity function broke WebView2 when it stopped screen capture in an WebView2 app. (Issue #841).
Fixed bug for composition hosting where mouse input stopped working if any pen input was sent to
WebView2.
 Fixed bug that broke mouse input after any pen input. This change is Runtime-specific.
.NET  
 Experimental features 
Added WebView2 designer tool to WPF Toolbox. (Issue #210). Added WebView2 UI element in .NET Designer Mode.
 Bug fixes 
TabCoreWebView2InitializationCompletedImproved COM Exception descriptions by wrapping each in a more detailed .NET exception. (Issue #338). This change is Runtime-specific.
Fixed bug caused when you select  to shift focus caused WebView2 control to crash in Microsoft Visual Studio Tools for Office. (Issue #589 and Issue #933). This change is Runtime-specific.
Improved .NET framework loader down level to be more robust. (Issue #946).
Fixed bug that caused crash when you try to refresh before first navigation completed. (Issue #1011).
Fixed initialization so navigation occurs during . (Issue #1050).
ProcessFailedImproved .NET browser process crash error handling. You can now recreate controls after you handle a  event, without a crash. (Issue #996).
 1.0.818.41
Release Date: April 21, 2021
NuGet package for WebView2 SDK 1.0.818.41
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 90.0.818.41 or higher.
 General 
 Features 
ProcessFailediframe element support for AddScriptToExecuteOnDocumentCreated.exe--winhttp-proxy-resolverExtended the  event. It now raises for non-renderer child processes and frame renderers.
Added .
Improved WebView2 code to be more resilient to  application files with malformatted version information. (Issue #850).
Removed  from WebView2 browser process command-line, turned on other proxy command-line options for WebView2.
 1.0.824-prerelease
Release Date: March 8, 2021
NuGet package for WebView2 SDK 1.0.824-prerelease
For full API compatibility, this prerelease version of the WebView2 SDK requires Microsoft Edge version 91.0.824.0 or higher.
 General 
 Features 
ProcessFailedExtended the  event. It now raises for non-renderer child processes and frame renderers. Added experimental AreBrowserAcceleratorKeysEnabled setting. You can prevent the browser from responding to keyboard shortcuts related to navigation, printing, saving, and other browser-specific functions.
iframe element support for AddScriptToExecuteOnDocumentCreated	 Added 	.
 Promotion 
UserAgent API is now promoted to Stable.
Rasterization Scale APIs (RasterizationScale property, RasterizationScaleChanged event, BoundsMode property, and ShouldDetectMonitorScaleChanges property) are now promoted to Stable.
 Bug fixes 
WebResourceRequestededge://Expanded supported C++ and .NET project types such as MFC and ATL. (Issue #506, Issue #669, and Issue #851).
Fixed a bug that Evergreen WebView2 Runtime leaks Inbound firewall entry.
Fixed setting Response during  event. (Issue #568).
Fixed a bug that navigating to  causes browser process to exit. (Issue #604).
Fixed a bug that limited WebView2 bounds to size of screen in Visual Hosting mode.
 1.0.774.44
Release Date: March 8, 2021
NuGet package for WebView2 SDK 1.0.774.44
For full API compatibility, this version of the WebView2 SDK requires WebView2 Runtime version 89.0.774.44 or higher.
 General 
 Features 
Turned off various Microsoft Edge browser services in WebView2. Visual Hosting APIs are now Generally Available.
 Promotions 
The following experimental APIs are now promoted to Stable.
DPI support related APIs
Visual hosting APIs
SetVirtualHostNameToFolderMapping
TrySuspend and Resume
DefaultBackgroundColor
 Bug fixes 
 Fixed a bug that limited WebView2 bounds to size of screen in Visual Hosting mode.
 1.0.790-prerelease
Release Date: February 10, 2021
NuGet package for WebView2 SDK 1.0.790-prerelease
This prerelease version of the WebView2 SDK requires Microsoft Edge version 86.0.616.0 or higher.  General 
IMPORTANT
Breaking Change: WebView2 prerelease package 1.0.781 is deprecated. Discontinue development with package 1.0.781.
IMPORTANT
WebView2 prerelease package 0.9.430 is deprecated, and is removed with the next release. If your WebView2 app uses the package, the WebView2 team recommends that you move to a newer package.
 Features 
CreateCookieWithCookie method with the CopyCookieAdded TrySuspend and Resume method to suspend and resume WebViews.
Added SetVirtualHostNameToFolderMapping method that maps a virtual host name to a directory path. (Issue #37, Issue #161, and Issue #212).
Added the DefaultBackgroundColor property to set the color and alpha-channel of the background. (Issue #414).
Added the UserAgent property to get or set the User Agent. (Issue #122).
Replaced the  method.
CreateCoreWebView2CompositionController method from ICoreWebView2Environment3Added visual hosting support using the ICoreWebView2CompositionController interface, which is created using the new .
 Bug fixes 
AreDefaultContextMenusEnabled is falseE_NOINTERFACE when querying ICoreWebView2 for ICoreWebView2ExperimentalCoreWebView2NavigationStartingEventArgs.Cancel is set to falsewindow.print()NewWindowRequestedHRESULTWebView2.DisposeTurned off the Microsoft Edge Shopping feature in WebView2.
Turned off the context menu in the PDF viewer when . (Issue #605).
Fixed a bug that returned .
(Issue #691).
Fixed a bug that allowed navigation with malformed URIs when 
. (Issue #400).
Fixed a bug that blocked  on pop-up windows with event handlers attached to  events. (Issue #409).
Fixed Dynamic DPI issue when moving apps between different monitors. (Issue #58)
Improved the  instances passed by
ICoreWebView2WebResourceResponseViewGetContentCompletedHandler::Invoke.
Turned off autofill manage button. (Issue #585).
Fixed Visual Studio crashes while you run  when hosted in multiple windows. (Issue #816) and Issue #442).
Fixed bug to display WebView2 control in Visual Studio Toolbox. (Issue #210).
Reduced high CPU usage issues. (Issue #878).
Fixed issues with deprecated 1.0.781-prerelease package. (Issue #875 and Issue #878).
 Promotions 
The following experimental APIs are now promoted to Stable:
Visual Hosting APIs
SetVirtualHostNameToFolderMapping
.NET  
 Bug fixes 
F4Fixed bug that crashed WebView2 apps that use the WPF SDK. The crash occurred when you selected  to close a window. (Issue #399).
The WebView2 initialization screen is now transparent, instead of gray. (Issue #196).
 1.0.705.50
Release Date: January 25, 2021
NuGet package for WebView2 SDK 1.0.705.50
This version of the WebView2 SDK requires WebView2 Runtime version 86.0.616.0 or higher.
 General 
 Promotions 
The following experimental APIs are now promoted to Stable:
WebResourceResponseReceived API
NavigateWithWebResourceRequest API
Cookie management API
DOMContentLoaded API
Environment property
 1.0.721-prerelease
Release Date: December 8, 2020
NuGet package for WebView2 SDK 1.0.721-prerelease
This prerelease version of the WebView2 SDK requires Microsoft Edge version 86.0.616.0 or higher.  General 
IMPORTANT
Breaking Change: WebView2 prerelease package 1.0.707 and package 0.9.628 are deprecated. Discontinue development with package 1.0.707 and package0.9.628.
 Features 
 Added WebView2 Group Policies. For best practices, see group policies for WebView2.

IMPORTANT
Breaking Change: Deprecated the old registry location.
{Root}\Software\Policies\Microsoft\EmbeddedBrowserWebView\LoaderOverride\{AppId}RasterizationScaleAdded support for Drag and Drop in WebView2.
Added APIs to handle DPI support.
Added RasterizationScale property to change the DPI scale for WebView2 content and UI pop-ups, and associated RasterizationScaleChanged event.
Added ShouldDetectMonitorScaleChanges property to automatically update property if needed.
RasterizationScale for WebView2 pixel display, and WebView2 use the RasterizationScaleBoundsAdded BoundsMode property to specify that the bounds are logic pixels and allow WebView2 to use  with the  to get the physical size.
NewWindowRequested event to handle Ctrl+click and Shift+click	 Updated 	. (Issue #168 and Issue
#371).
The following experimental APIs are now promoted to Stable.
WebResourceResponseReceived API
NavigateWithWebResourceRequest API
Cookie management API
DOMContentLoaded API Environment property
.NET  
 Features 
CoreWebView2ReadyTurned on WinForms designer in .NET Core 3.1+ and .NET 5.
Improved .NET cookie management. (Issue #611).
Replaced  with CoreWebView2InitializationCompleted.
 Bug fixes 
AcceleratorKeyAdded AcceleratorKeyPressed event to support  select in WebView2. (Issue #288).
Removed unnecessary files from being output to WebView2 folders. (Issue #461). Improved host object API. (Issue #335 and Issue #525).
 1.0.664.37
Release Date: November 20, 2020
NuGet package for WebView2 SDK 1.0.664.37
This version of the WebView2 SDK requires WebView2 Runtime version 86.0.616.0 or higher.  General 
IMPORTANT
Announcement: .NET WPF/WinForms WebView2 SDKs are now Generally Available (GA). Starting with this release, Release SDKs are forward-compatible. For more details, see GA announcement blog post.
 Features 
.NET WPF/WinForms WebView2 is now Generally Available (GA). Fixed Distribution (Bring-your-own) mode reached GA.
.NET  
 Bug fixes 
CoreWebView2NewWindowRequestedEventArgs.Handled prevents new window from being opened. (Issue #549 and Issue #560).
 1.0.674-prerelease
Release Date: October 19, 2020
NuGet package for WebView2 SDK 1.0.674-prerelease
This prerelease version of the WebView2 SDK requires WebView2 Runtime version 86.0.616.0 or higher.
 General 
Added NavigateWithWebResourceRequest method to provide post data or other request headers during navigation.
Added DOMContentLoaded event that runs when the initial HTML document is loaded and parsed. Added the Environment property on WebView2. This property exposes the WebView2 environment where an instance of WebView2 was created.
Added cookie management APIs that allow developers to authenticate the WebView2 session, or retrieve cookies from WebView2 to authenticate other tools. The WebView2 team plans to make language or framework-specific improvements. See API Review: Cookie Management.
 Updated the WebResourceResponseReceived event, and added immutable WebResourceResponseView and WebResourceResponseReceivedEventArgs::PopulateResponseContent to WebResourceResponseView::GetContent.
version.libTurned off Microsoft Defender Application Guard (WDAG) in WebView2.
Added SystemCursorId for Visual Hosting.
Added bug fixed for Input Method in Visual Hosting.
Removed include requirement for  when using WebView2 static library.
.NET  
CoreWebView2EnvironmentMicrosoft.Web.WebView2.CoreEdgeNotFoundExceptionUpdated CoreWebView2 class to expose the  variable.
Changed implementations of custom EventArgs classes in  namespace to subclasses of System.EventArgs or System.ComponentModel.CancelEventArgs. (Issue #250) Added support for CoreWebView2CreationProperties in WinForms. (Issue #204).
Added WebResourceRequested .NET APIs. (Issue #219).
Updated WinForms Designer Source property to default or reset to null. (Issue #177).
Updated WebView2 bounds in WebView2.Init() to support DPI modes that are less than 100%. (Issue #432).
Updated BuildWindowCore and DestroyWindowCore to increase robustness. (Issue #382).
Updated .NET Loader base to load on process bit instead of operating system architecture. (Issue #431).
Renamed  to WebView2RuntimeNotFoundException.
 1.0.622.22
Release Date: October 19, 2020
NuGet package for WebView2 SDK 1.0.622.22
This version of the WebView2 SDK requires WebView2 Runtime version 86.0.616.0 or higher.  General 
IMPORTANT
Announcement: Win32 C/C++ WebView2 is now Generally Available (GA). Starting this release, Release SDKs are forward-compatible. See GA announcement blog post.
 The Evergreen WebView2 Runtime and installer are GA. The bootstrapper, the downlink link for the Bootstrapper, and the Standalone Installer for the Evergreen WebView2 Runtime are available on Microsoft Edge WebView2. Sample code for the installation workflow is also available in the WebView2Samples repo.
For more information about the Runtime, Evergreen distribution, and Fixed Version distribution, see Distribute your app and the WebView2 Runtime.
 0.9.622.11
Release Date: September 10, 2020
NuGet package for WebView2 SDK 0.9.622.11
This version of the WebView2 SDK requires WebView2 Runtime version 86.0.616.0 or higher.
 General 

IMPORTANT
Announcement: This SDK is the Release Candidate for WebView2 Win32 C/C++ GA. The GA version is expected to use the same API interface and functionality.Disconnected browser policies.
Added AllowSingleSignOnUsingOSPrimaryAccount property on WebView2 environment options to turn on conditional access for WebView2.
ICoreWebView2NewWindowRequestedEventArgs Updated 	 to include WindowFeatures property, and the associated ICoreWebView2WindowFeatures. (Issue #293).
System.Windows.Rect to use System.Drawing.Rectangle instead of System.Windows.Rect	 Updated 	 (Issue
#235).
window.open() Updated NewWindowRequested event to handle  request without parameters. (Issue #293).
ICoreWebView2EnvironmentOptions AdditionalBrowserArguments specified with  aren't overridden with environment variables or registry values. See CreateCoreWebView2EnvironmentWithOptions.
 0.9.579
Release Date: July 20, 2020
NuGet package for WebView2 SDK 0.9.579
This version of the WebView2 SDK requires Microsoft Edge version 86.0.579.0 or higher.
 General 

IMPORTANT
Announcement: Evergreen WebView2 Runtime and installer is released for preview. See Distribute your app and the WebView2 Runtime.
IMPORTANT
Announcement: The following WebView2 SDK Versions are no longer supported after the next SDK release:
0.8.190 0.8.230 0.8.270 0.8.314
0.8.355
The WebView2 SDK Versions are also marked deprecated on nuget.org. WebView2 recommends staying up to date with the latest version of WebView2.NewWindowRequestedAdded WebView2 worker thread improvements. (Issue #318).
Turned off the pop-up blocker in WebView2. See the IsUserInitiated property in the event.
about:blank. Now, NavigationStartingabout:blank or srcdoc of the iframe Ensured WebView2 navigation starting event is run for 	 events are run for all navigation, but cancellations for  element aren't supported and ignored.
edge://Blocked some  URI schemes in WebView2.
Added experimental IsSingleSignOnUsingOSPrimaryAccountEnabled property on WebView2 environment options to turn on conditional access for WebView2.
 Added experimental WebResourceResponseReceived event that runs after the WebView2 receives and processes the response from a WebResource request. Authentication headers, if any, are included in the response object.
.NET  
ZoomFactorImproved WPF focus handling. (Issue #185).
Added  property on WPF Webview2 Controller.
 0.9.538
NuGet package for WebView2 SDK 0.9.538
This version of the WebView2 SDK requires Microsoft Edge version 85.0.538.0 or higher.
 General 
Dropping support for WebView2 SDK Version 0.8.149. WebView2 recommends staying up to date with the latest version of WebView2.
Updated group policy to account for when the profile path of the Microsoft Edge browser is modified (#179).
 Win32 C/C++ 
window.open() Added ICoreWebView2ExperimentalNewWindowRequestedEventArgs::get_WindowFeatures, which fires when  is run and associated with ICoreWebView2ExperimentalWindowFeatures (#70).

IMPORTANT
Breaking Change: Deprecated CreateCoreWebView2EnvironmentWithDetails and replaced with CreateCoreWebView2EnvironmentWithOptions.
IMPORTANT
Breaking Change: In order to ensure the WebView2 API aligns with the Windows API naming conventions, the WebView2 team updated the names of the following.
	AreRemoteObjectsAllowed is now AreHostObjectsAllowed. Updated AddHostObjectToScript. The original host object serializer markers are now set to the proxy objects. Then host object serializer markers are serialized back as a host object when passed as a parameter in the JavaScript callback (#148).
	.NET   	(0.9.538 prerelease)
 Released WinForms and WPF WebView2API Samples, which are comprehensive guides of the WebView2 SDK. See Samples Repo.
 Added support for visual hosting and window features experimental APIs.

IMPORTANT
Breaking Change: The following deferrals now implement IDisposable: ScriptDialogOpening, NewWindowRequested, WebResourceRequested, and PermissionRequested. Added GetAvailableBrowserVersionString and CompareBrowserVersions as CoreWebView2Environment statics.
 0.9.515-prerelease
NuGet package for WebView2 SDK 0.9.515-prerelease
This prerelease version of the WebView2 SDK requires Microsoft Edge version 84.0.515.0 or higher.

IMPORTANT
Announcement: WebView2 now supports Windows Forms and WPF on .NET Framework 4.6.2 or later and .NET Core 3.0 or later in the prerelease package. For more information about building WPF apps, see Get started with WebView2 in WPF apps and the WebView2 WPF Reference for WPF-specific APIs.
 For more information about building Windows Forms apps, see Get started with WebView2 in WinForms apps and the WebView2 Windows Forms Reference for Windows Forms specific APIs.
 For more information about the CoreWebView2 APIs, see .NET Reference.
Cau t ion
Known Issues: The WebView2 team is aware of some issues in the prerelease that are being resolved in future releases.
 DPI Awareness: WebView2 for WPF is currently not DPI aware. When initializing WebView2 on high DPI monitors, there is a known issue where the WebView2 control at first initializes as a fraction of the window until the window is resized.
 WPF Designer: The WPF designer isn't currently supported. Add the WebView2 control in your app by directly modifying the appropriate XAML in a text editor.
 0.9.488
NuGet package for WebView2 SDK 0.9.488
This version of the WebView2 SDK requires Microsoft Edge version 84.0.488.0 or higher.

IMPORTANT
Announcement: Starting with the upcoming Microsoft Edge version 83, Evergreen WebView2 no longer targets the Stable browser channel. Instead, it targets another set of binaries, branded Evergreen WebView2 Runtime, that you can chain-install through an installer that the WebView2 team is currently developing. See Distribute your app and the WebView2 Runtime.
IMPORTANT
Announcement: Moving forward, the WebView2 team releases two packages: a prerelease package with experimental APIs (for you to try out) and a stable release package with stable APIs (for your confidence). To learn about the differences, see Understanding browser versions and WebView2.
IMPORTANT
Breaking Change: In order to ensure the WebView2 API aligns with the Windows API naming conventions, the WebView2 team updated the names of the following interfaces.
CORE_WEBVIEW2_* prefix is now COREWEBVIEW2_*chrome.webview.remoteObjects is now chrome.webview.hostObjects.
GetCoreWebView2BrowserVersionInfo is now GetAvailableCoreWebView2BrowserVersionString. get_BrowserVersionInfo is now get_BrowserVersionString.
AddRemoteObject is now AddHostObjectToScript.
RemoveRemoteObject is now RemoveHostObjectFromScript.
.
IMPORTANT
AddRemoteObjectBreaking Change: The  JS proxy methods are also renamed.
getLocalPropertysetLocalPropertygetLocalsetLocalgetHostPropertysetHostPropertygetRemotesetRemoteapplyRemote is now applyHostFunction is now .  is now .  is now .
 is now .
.
IMPORTANT
Breaking Change: Deprecated CreateCoreWebView2EnvironmentWithDetails and replaced with CreateCoreWebView2EnvironmentWithOptions.iframe Added FrameNavigationCompleted event. Now, when an  element completes navigation, an event is run and returns the success of the navigation and the navigation ID.
 Added ICoreWebView2EnvironmentOptions interface, which can be used to determine the version of the Evergreen WebView2 Runtime targeted by your app.
 Added IsBuiltInErrorPageEnabled setting. Now, you can choose to turn on or off the built-in error webpage for navigation failure and render process failure.
IDispatchUpdated Remote Object Injection to support .NET  implementations (#113).
Updated NewWindowRequested event to handle requests from context menus (#108).
Released the first separate WebView2 prerelease package where you can access visual hosting APIs. The WebView2 team updated APISample to include the new experimental APIs.
Added ICoreWebView2ExperimentalCompositionController interface, to connect to a composition tree and provide input for the WebView2 control.
Added ICoreWebView2ExperimentalPointerInfo, which contains all the information from a 
POINTER_INFO. This object is passed to SendPointerInput to inject pointer input into the WebView2.
cursorCompositionController Added ICoreWebView2ExperimentalCursorChangedEventHandler, which tells the app when the mouse cursor over the WebView2 control should be changed. When mouse is over a text box in the WebView2, the cursor changes from the arrow to the selector. The  property on the  tells the app what the mouse cursor should currently be for the WebView2.
 0.9.430
NuGet package for WebView2 SDK 0.9.430
This version of the WebView2 SDK requires Microsoft Edge version 82.0.430.0 or higher.
The WebView2 SDK is the official Win32 C++ Beta version, which incorporates several feature requests from feedback. The WebView2 team tries to limit the number of releases with breaking changes. As general availability approaches, several major breaking changes are incorporated in the Beta release.

IMPORTANT
IWebView2WebViewICoreWebView2Breaking Change: As the final release approaches the WebView2 team renamed the prefix to  in order to make sure the WebView2 API aligns with the Windows API naming convention. Additionally, in order to leverage the WebView2 SDK from UI frameworks, the WebView2 team separated 
ICoreWebView2 into ICoreWebView2 and ICoreWebView2Host. ICoreWebView2Host supports resizing, showing-and-hiding, focusing, and other functionality related to windowing and composition. ICoreWebView2 supports all other WebView2 functionality. To learn more about incorporating the changes, see the WebView2 pull request in the WebView2 APISample project.
IMPORTANT
SourceChangedBreaking Change: Split DocumentStateChanged into three components: SourceChanged, ContentLoading, and HistoryChanged. Now, when the source URL changes the  event is run. When the history state is
HistoryChanged event is run. The ContentLoadingchanged the  event is run before the initial script when a new document is being loaded.Added support for ARM64 architecture.
Added Soft Input Panel (SIP) support for touch screen devices.
Added support for Windows Server 2008 R2, Windows Server 2012, Windows Server 2012 R2, and Windows Server 2016.
 Added NotifyParentWindowPositionChanged for the status bar to follow the window in windowed mode. Also, implement the change in windowless mode in order for accessibility features to work.
AreRemoteObjectsAllowedAreRemoteObjectsAllowed Added AreRemoteObjectsAllowed setting to globally control whether a webpage can be accessed by any remote objects. By default,  is turned on, so remote objects added by AddRemoteObject are accessible from the webpage. When  is turned off, the objects aren't accessible from the webpage. Changes are applied on the next navigation event.
 Added IsZoomControlEnabled setting to prevent users from impacting the zoom of the WebView2
ctrl++ and ctrl+- (or ctrlcontrol using + mouse wheel). Zoom can still be set using put_ZoomFactor when the setting is turned off.
 Changed ZoomFactor to only apply to the current WebView2 control. Zoom changes to the current WebView2 control don't affect other WebViews that you navigated to using the same site of origin. See get_ZoomFactor.
Hid ZoomView UI for WebView2 control (#95).
Added SetBoundsAndZoomFactor. Now, you can set the zoom factor and bounds of a WebView2 control at the same time.
beforeunloadAdded WindowCloseRequested event. See add_WindowCloseRequested (#119).
Added support for the  dialog type for JavaScript dialog events and added CORE_WEBVIEW2_SCRIPT_DIALOG_KIND_BEFOREUNLOAD enum entry.
 Added GetHeaders to HttpRequestHeaders, GetHeader to HttpResponseHeaders, and get_HasCurrentHeader property to HttpHeadersCollectionIterator.

IMPORTANT
DevToolsProtocolEventReceivedBreaking Change: Modified  behavior. Now, you can create a
DevToolsProtocolEventReceiver for a particular DevTools Protocol event and subscribe/unsubscribe to such event using add_DevToolsProtocolEventReceived/remove_DevToolsProtocolEventReceived.
IMPORTANT
WebMessageReceivedEventArgsBreaking Change: Changed  get_WebMessageAsString property to a
TryGetWebMessageAsString method.
IMPORTANT
AcceleratorKeyPressedEventArgsBreaking Change: Changed  Handle method to a get_Handled property. 0.8.355
NuGet package for WebView2 SDK 0.8.355
This version of the WebView2 SDK requires Microsoft Edge version 80.0.355.0 or higher.
WebResourceRequestedReleased WebView2API Sample, a comprehensive guide of the WebView2 SDK. See API Sample.
Added IME support for all languages besides English (#30).
Updated the API surface of the  event in response to bug reports. Simultaneously
specifying a filter and an event on creation is now deprecated. To create a web resource requested event, use add_WebResourceRequested to add the event and AddWebResourceRequestedFilter to add a filter. RemoveWebResourceRequestedFilter removes the filter (#36) (#74).

IMPORTANT
Breaking Change: Modified fullscreen behavior. Deprecated IsFullScreenAllowed. Now, by default, if an element in a WebView2 control (such as a video) is set to full screen, it fills the bounds of the WebView2 control. Use the ContainsFullScreenElementChanged event and get_ContainsFullScreenElement to specify how the app should resize the WebView2 control if an element wants to enter fullscreen mode. 0.8.314
NuGet package for WebView2 SDK 0.8.314
This version of the WebView2 SDK requires Microsoft Edge version 80.0.314.0 or higher.
 Changes 
Added support for Windows 7, Windows 8, and Windows 8.1.
Added Visual Studio and Visual Studio Code debug support for WebView2. Now, debug your script in the WebView2 right from your IDE. See How to debug when developing with WebView2 controls.
Native Object Injection	 Added 	 for the running script in WebView2 to access an IDispatch object from
the Win32 component of the app and access the properties of the IDispatch object. See AddRemoteObject (#17).
AcceleratorKeyPressedContext MenusDPI AwarenessAdded  event. See add_AcceleratorKeyPressed (#57).
Turned off the . See put_AreDefaultContextMenusEnabled (#57).
Updated . Now, the DPI awareness of the WebView2 control is the same as the DPI awareness of the host app.
NOTE
user data folderIf another hybrid app is launched with a different DPI Awareness than the original WebView2 control instance, the new WebView2 control instance isn't launched if the  is the same (#1).Notification Change Behavior Updated  so WebView2 automatically rejects notification permission requests prompted by web content hosted in the WebView2 control.
 0.8.270
NuGet package for WebView2 SDK 0.8.270
This version of the WebView2 SDK requires Microsoft Edge version 78.0.270.0 or higher.
 Changes 
DocumentTitleChangedGetWebView2BrowserVersionInfoNewWindowRequestedCreateWebView2EnvironmentWithDetails function to remove releaseChannelPreferenceAdded  event to indicate document title change (Issue #27).
Added  API (Issue #18).
Added  event.
CreateWebView2EnvironmentWithDetailsUpdated . For more information about the  function, see
CreateWebView2EnvironmentWithDetails. The registry and environment variable override is still supported. The default channel preference is used unless overridden.
During the channel search, the WebView2 team skips any previous channel version that isn't compatible with the WebView2 SDK.
WEBVIEW2_RELEASE_CHANNEL_PREFERENCE environment variable to 1The WebView2 team selects the more stable channel to ensure the most consistent behaviors for the end user. When you test with the latest Canary build, you should create a script to set the  before launching the app. See Test
upcoming APIs and features.
CreateWebView2EnvironmentWithDetails function with logic for selecting userDataFolder Updated the 
CreateWebView2EnvironmentWithDetailswhen not specified. For more information about the  function, see
userDataFolderuserDataFolderCreateWebView2EnvironmentWithDetails. If you previously used the default  location, when you switch to the new SDK the default  is reset (set to a new location in the host code directory) and your state is also reset. If the host process doesn't have permission to write to the
CreateWebView2EnvironmentWithDetailsuser data folderspecified directory, the  function might fail. You can copy the data from the old  to the new directory.
 0.8.230
NuGet package for WebView2 SDK 0.8.230
This version of the WebView2 SDK requires Microsoft Edge version 77.0.230.0 or higher.
 Changes 
Stop.tlbAdded  API to stop all navigation and pending resource fetches (Issue #28).
Added  file to the NuGet package (Issue #22).
Added .NET projects to the installer list in the NuGet package (Issue #32).
 0.8.190
NuGet package for WebView2 SDK 0.8.190
This version of the WebView2 SDK requires Microsoft Edge version 77.0.190.0 or higher.
get_AreDevToolsEnabled/put_AreDevToolsEnabledget_IsStatusBarEnabled/put_IsStatusBarEnabledget_CanGoBack/GoBack/get_CanGoForward/GoForwardIWebView2HttpHeadersCollectionIterator/IWebView2HttpRequestHeadersIWebView2HttpRequestHeadersIID\_\*TARGETwindow.open()Added  to control if users can open DevTools (Issue #16).
Added  to control if the status bar is displayed (Issue #19).
Added  for going back and forward through navigation history.
Added HTTP header types (/
) for viewing and modifying HTTP headers in WebView2.
Added 32-bit WebView2 support on 64-bit machines (Issue #13).
Added WebView2 IDL to the SDK (Issue #14).
Added lib to support  interface ID objects (Issue #12).
Added include path, linking, and autocopying of DLL files to NuGet  file in SDK.
Turned on requesting  in script.
 0.8.149
NuGet package for WebView2 SDK 0.8.149
This version of the WebView2 SDK requires Microsoft Edge version 76.0.149.0 or higher.
Initial developer preview release.
 See also
 Contacting the Microsoft Edge WebView2 team

WebView2 Roadmap
6/21/2022 • 2 minutes to read • Edit Online
The Microsoft Edge WebView2 control allows you to embed web technologies in your native applications. This article outlines the prospective roadmap for WebView2.
WebView2 is under active development and the roadmap continues to evolve based on market changes and customer feedback. The plans outlined here aren't exhaustive and are subject to change.
If you have concerns or questions about the Roadmap, provide your feedback in the feedback repo.
The WebView2 team is planning the following major efforts for future updates:
UWP Preview
MacOS Preview
Xbox Preview
HoloLens Preview
Linux Preview
 WebView2 Runtime and Installer
Evergreen distribution mode allows you to target or chain-install the WebView2 Runtime onto your users' machines. The Evergreen WebView2 Runtime and installer has reached General Availability (GA). For more information, see Distribute your app and the WebView2 Runtime.
 Fixed version
Fixed version distribution mode allows you to package the Microsoft Edge binaries inside your native application. The Fixed Version has reached General Availability (GA). For more information, see Distribute your app and the WebView2 Runtime.  General Availability
The following technologies have reached General Availability (GA).
 Win32 C/C++ 
The Win32 C/C++ SDK has reached GA.
.NET  
The .NET SDK has reached GA.
 Windows UI Library 3 
You can access WebView2 controls in your applications using Windows UI Library 3 (WinUI3) with the Windows App SDK. This is currently in preview. For more information, see Windows App SDK roadmap.
WebView2 API Reference
6/21/2022 • 2 minutes to read • Edit Online
The Microsoft Edge WebView2 control enables you to host web content in your application using Chromiumbased Microsoft Edge as the rendering engine.
To download the preview channels of Microsoft Edge (Beta, Dev, and Canary), go to Microsoft Edge Insider.
For more information, see Overview of Microsoft Edge WebView2 and Get started with WebView2.
 Languages and Frameworks
WebView2 is available for the following languages and frameworks:
Win32 C++ .NET
Core
WPF
Windows Forms
WinRT (for WinUI 2/UWP)
Core
COM Interop
WinUI 3 (for Windows App SDK)
API reference
 See also
Overview of Microsoft Edge WebView2
Get started with WebView2
Win32 C++ WebView2 API conventions
6/21/2022 • 4 minutes to read • Edit Online
Supported platforms: Win32.
 Prerequisites
 Experience using the Win32 API.
 Async methods
Asynchronous methods in the WebView2 Win32 C++ API use a delegate interface to contact you for any of the following reasons:
The async method has completed.
The success or failure code.
The result of the asynchronous method.
The final parameter for all asynchronous methods is a pointer to a delegate interface, of which you provide an implementation.
Invoke method that takes as a first parameter an HRESULTThe delegate interface has a single  of the success or failure code. Additionally, there may be a second parameter that is the result of the method, if the method has a result.
For example, the ICoreWebView2::CapturePreview method takes an 
ICoreWebView2CapturePreviewCompletedHandler pointer as the final parameter. To send a CapturePreview method
ICoreWebView2CapturePreviewCompletedHandlerrequest, you provide an instance of the  pointer that you implement.
Invoke method to implement an ICoreWebView2CapturePreviewCompletedHandlerThe following code uses the pointer:
HRESULT Invoke(HRESULT result)
Invoke method, and then CoreWebView2 requests your InvokeYou implement the  method when 
CapturePreview request completes. The single parameter is the HRESULT describing the success or failure code
CapturePreviewof the  request.
ICoreWebView2::ExecuteScript, you provide an instance that has an InvokeAlternately, for  method that
ExecuteScriptprovides you with the success or failure code of the  request. Also provide the second parameter, which is the JSON of the result of running the script.
CompleteHandlerYou can manually implement the  delegate interfaces, or you can use the Callback function (WRL). The Callback function (WRL) is used throughout the following WebView2 code:

void ScriptComponent::InjectScript()
{
    TextInputDialog dialog(
        m_appWindow->GetMainWindow(),
        L"Inject Script",
        L"Enter script code:",
        L"Enter the JavaScript code to run in the WebView2 control.",
        L"window.getComputedStyle(document.body).backgroundColor");     if (dialog.confirmed)
    {
        m_webView->ExecuteScript(dialog.input.c_str(),
            Callback<ICoreWebView2ExecuteScriptCompletedHandler>(
                [](HRESULT error, PCWSTR result) -> HRESULT
        {
            if (error != S_OK) {
                ShowFailure(error, L"ExecuteScript failed");
            }
            MessageBox(nullptr, result, L"ExecuteScript Result", MB_OK);             return S_OK;
        }).Get());
    }
} Events
add_EventName and remove_EventNameEvents in the WebView2 Win32 C++ API use the  method pair to
add_EventNameEventRegistrationToken token as an output parameter. The remove_EventNameEventRegistrationTokensubscribe and unsubscribe from events. The  method takes an event handler delegate interface and gives back an  method takes an  token and unsubscribes the corresponding event subscription.
 Event handler delegate interfaces 
CoreWebView2Event handler delegate interfaces work similarly to the async method completed handler delegate interfaces. You implement the event handler delegate interface and  sends a callback whenever the event runs.
InvokeEvery event handler delegate interface has a single  method that has a sender parameter followed by an event args parameter. The sender is the instance of the object on which you subscribed for events. The event args parameter is an interface that contains information about the currently firing event.
NavigationCompleted event on ICoreWebView2 has the ICoreWebView2::add_NavigationCompletedFor instance, the 
ICoreWebView2::remove_NavigationCompletedICoreWebView2NavigationCompletedEventHandler in which you previously implemented Invokeand  method pair. When you send a request, you provide an instance of  method.
NavigationCompleted event runs, your InvokeWhen the  method is requested:
NavigationCompletedThe first parameter runs the  event.
The second parameter contains information about whether the navigation completed successfully, and so on.
Similar to the async method completed handler delegate interface, use one of the following actions to set it up:
Implement it directly.
Use the Callback function (WRL) function that is used in the following WebView2 code:
// Register a handler for the NavigationCompleted event.
// Check whether the navigation succeeded, and if not, do something.
// Also update the Cancel buttons.
CHECK_FAILURE(m_webView->add_NavigationCompleted(
    Callback<ICoreWebView2NavigationCompletedEventHandler>(
        [this](ICoreWebView2* sender, ICoreWebView2NavigationCompletedEventArgs* args)
            -> HRESULT {
            BOOL success;
            CHECK_FAILURE(args->get_IsSuccess(&success));             if (!success)
            {
                COREWEBVIEW2_WEB_ERROR_STATUS webErrorStatus;
                CHECK_FAILURE(args->get_WebErrorStatus(&webErrorStatus));
                if (webErrorStatus == COREWEBVIEW2_WEB_ERROR_STATUS_DISCONNECTED)                 {
                    // Do something here if you want to handle a specific error case.
                    // In most cases it is not necessary, because the WebView2 control
                    // displays an error page automatically.
                }             }
            m_toolbar->SetItemEnabled(Toolbar::Item_CancelButton, false);             m_toolbar->SetItemEnabled(Toolbar::Item_ReloadButton, true);             return S_OK;
        })
        .Get(),
    &m_navigationCompletedToken)); Strings
LPWSTRString output parameters are  null-terminated strings. The requester provides the string using 
CoTaskMemAllocCoTaskMemFree. Ownership is transferred to the requester and it is up to the requester to free the memory using .
LPCWSTRString input parameters are  null-terminated strings. The requester ensures the string is valid for the duration of the synchronous function request. If the receiver must store the value to some point after the function request completes, the receiver must give an associated copy of the string value.
 URI and JSON parsing
Various methods provide or accept URIs and JSON as strings. Use your preferred library for parsing and generating the strings.
RuntimeClass_Windows_Data_Json_JsonObjectIf WinRT is available for your app, you can use the  and 
IJsonObjectStatics methods to parse or produce JSON strings, or RuntimeClass_Windows_Foundation_UriIUriRuntimeClassFactory and  methods to parse and produce URIs. Both of these approaches work in Win32 apps.
IUri and CreateUriCreateUriIf you use  to parse URIs, you may want to use the following URI creation flags, to have  behavior more closely match the URI parsing in the WebView2 control:
Uri_CREATE_ALLOW_IMPLICIT_FILE_SCHEME | Uri_CREATE_NO_DECODE_EXTRA_INFO
 See also
Get started with WebView2 in Win32 apps - WebView2 Win32 C/C++.
WebView2 API reference
 
 Contact the WebView2 Team
 	6/21/2022 • 2 minutes to read • Edit OnlineContact the Microsoft Edge WebView2 team and share your feedback to help build richer WebView2 experiences.
 Submit feature requests or bugs in the WebView2Feedback repo
To submit feature suggestions or bugs about the WebView2 control, or to search for known issues, use the
WebView2FeedbackWebView2Feedback repo. The  repo is a place for developers to share tips or best practices, report feedback, or search existing issues for WebView2.
 File a documentation issue
edge-developerTo enter a GitHub issue from within a documentation article, in the Feedback section at the bottom of an article, select the This page button. Or, you can file an issue against the Microsoft Edge Developer documentation directly in the  repo.
 Subscribe to the WebView2Announcements repo
To get the latest news, API proposals, and SDK Release announcements, subscribe to the WebView2Announcements repo.

 
 Test and automation in Microsoft Edge
 	6/21/2022 • 2 minutes to read • Edit OnlineThere are many tools to automate your testing of Microsoft Edge:
TOOLDESCRIPTIONDevTools ProtocolInstrument, inspect, debug, and profile browsers including Microsoft Edge.Origin TrialsTry out experimental APIs on live sites for a limited period of time.PlaywrightThe Playwright library provides cross-browser automation through a single API.PuppeteerThe Puppeteer library provides a high-level API to control browsers, including Microsoft Edge, using the DevTools Protocol.WebDriverAutomates testing in Microsoft Edge by simulating user interaction. Provides advantages over JavaScript unit tests.webhintChecks your code for best practices and common errors, to test and improve accessibility, performance, cross-browser and PWA compatibility, and security of your site.These tools are described below.
 DevTools Protocol
Use the DevTools Protocol to instrument, inspect, debug, and profile browsers including Microsoft Edge. The Microsoft Edge DevTools Protocol matches the APIs of the Chrome DevTools Protocol.
See DevTools Protocol.
 Origin Trials
edge://flagsYou can use Origin Trials to try out experimental APIs on live sites for a limited period of time. When using Origin Trials, users of Microsoft Edge that visit your site may run code that uses experimental APIs. To access the experimental APIs on each user machine, you don't need to go to  and turn on feature flags.
See Use Origin Trials in Microsoft Edge.
 Playwright
The Playwright library provides cross-browser automation through a single API. Playwright enables crossbrowser web automation that is evergreen, capable, reliable, and fast.
Playwright launches browsers as headless, by default. Headless browsers don't display a UI; so generally you use the command line - however, you can also configure Playwright to run the full Microsoft Edge UI.
See Use Playwright to automate and test in Microsoft Edge.
 Puppeteer
The Puppeteer library provides a high-level API to control Chromium-based browsers, including Microsoft Edge, using the DevTools Protocol.
Puppeteer launches headless browsers by default. Headless browsers don't display a UI, so you must use the command line. You can also configure Puppeteer to run full (non-headless) Microsoft Edge.
puppeteer-coreWith Microsoft Edge, you can use , a lightweight version of Puppeteer that launches an existing browser installation, like Microsoft Edge.
See Puppeteer overview.
 WebDriver
WebDriver allows you to automate Microsoft Edge by simulating user interaction. Tests that use WebDriver have some advantages over JavaScript unit tests that run in the browser:
Accesses functionality and information that's not available to JavaScript running in browsers.
Simulates user events or OS-level events more accurately than JavaScript unit tests.
Manages multiple windows, tabs, and webpages in a single test session.
Runs multiple sessions of Microsoft Edge on a specific machine.
See Use WebDriver to automate Microsoft Edge.
 webhint extension for Visual Studio Code
Use webhint, a customizable linting tool, to improve the accessibility, performance, cross-browser compatibility, PWA compatibility, and security of your site. The webhint extension checks your code for best practices and common errors.
See webhint extension for Visual Studio Code.
 
 DevTools Protocol
 	6/21/2022 • 2 minutes to read • Edit OnlineUse the DevTools Protocol to instrument, inspect, debug, and profile browsers including Microsoft Edge. The Microsoft Edge DevTools Protocol matches the APIs of the Chrome DevTools Protocol.
See Microsoft Edge DevTools Protocol overview.

 
 Use Origin Trials in Microsoft Edge
 	6/21/2022 • 3 minutes to read • Edit Onlineedge://flagsYou can use Origin Trials to try out experimental APIs on live sites for a limited period of time. When using Origin Trials, users of Microsoft Edge that visit your site may run code that uses experimental APIs. To access the experimental APIs on each user machine, you don't need to go to  and turn on feature flags.
For more information, see Microsoft Edge Origin Trials Developer Console. You can also provide feedback on the design of the API, your use cases, or your experience using the APIs to browser engineers and the web standard community.
 Get started using Origin Trials
For more information about the experimental APIs available in Microsoft Edge, see Microsoft Edge Origin Trials Developer Console. Be sure to review the minimum version requirements for Microsoft Edge, and the trial end date, to assess the suitability of using the experimental APIs on your website.
NOTE
An experiment may end earlier than planned if any of the following situations occur:
A major security incident.
If sufficient feedback is collected that indicates a major redesign is needed to meet the needs of web developers. In either case, a notification email is sent to all developers currently enrolled in the experiment. Register for a trial of an experimental API To register for a trial of an experimental API:
1. Go to Microsoft Edge Origin Trials Developer Console.
2. Click the Register button on any of the available experiments.
3. Sign in to the Developer Console using your GitHub username and password.
4. Click Authorize MicrosoftEdge.
5. Complete the form.
NOTE
To enroll a single or all subdomains, choose set the 
Do you need to match all subdomains for the provided origin? setting to Yeshttps://dev.contoso.com is a single domain, and https://*.contoso.com. For example,  uses a wildcard to represent all subdomains.IMPORTANT
The following origin formats aren't allowed.
https://contoso.com/path/subfolderSpecifying a subfolder on the origin. For example, 
Using an origin with query string parameters. For example, 
https://contoso.com/path/feature?query_parameter=123456. Click ACCEPT and REGISTER.
 Apply your token 
A token is instantly generated and displayed on the Microsoft Edge Origin Trials Developer Console. To begin using the trial on your website, use either of the following methods to apply the token to your page:
origin-trial attribute value and your token to the meta Add the 	 tag on every page that uses the experimental API.
<meta http-equiv="origin-trial" content="replace-with-your-token">
Origin-Trial	 Add 	 to the HTTP response header of your server.
Origin-Trial: replace-with-your-token
NOTE
Your token is valid for 6 weeks. Before your trial ends, reminder emails are sent to you that ask for your feedback and ask you to consider renewing your trial before your token expires.
 Opt out of an experiment 
To opt out of an experiment, use one of the following methods to remove your token.
meta	 Remove the 	 tag from every page that used the experimental API.
<meta http-equiv="origin-trial" content="your-token">
Origin-Trial	 Remove 	 from the HTTP response header of your server.
Origin-Trial: your-token
 Detect experimental features and provide a fallback 
When using experimental APIs, ensure you provide a working experience to all visitors of your website. Visitors may use browsers that don't support the experimental APIs that you added to your code. Additionally, if your token expires before you renew it, the experimental API is no longer available, which may result in errors.
To avoid this situation, make sure you detect features available in your browser. For more information, see Implementing feature detection.
 Roadmap for Allowed Origins 
The Microsoft Edge Origin Trials portal today only supports SSL Enabled Origins, which means that websites must have HTTPS properly implemented to register for an experiment. In the future, the following secure origins are planned:
http://localhost as the origin for your experiments. To use http://localhost	 Register 	 today, go to 
edge://flags and set the experiment to Enabled.
extensions://	 Use extensions with 	 prefixed origins to enroll in experiments.

 
 
Use Playwright to automate and test in Microsoft Edge
 	6/21/2022 • 2 minutes to read • Edit OnlineThe Playwright library provides cross-browser automation through a single API.
Playwright is a Node.js library to automate Chromium, Firefox, and WebKit with a single API. Playwright is built to enable cross-browser web automation that is evergreen, capable, reliable, and fast. Because Microsoft Edge is built on the open-source Chromium web platform, Playwright is also able to automate Microsoft Edge.
Playwright launches headless browsers by default. Headless browsers don't display a UI, so instead you must use the command line. You can also configure Playwright to run full (non-headless) Microsoft Edge as well.
 Install Playwright and browsers
NOTE
node -vPlaywright requires Node.js version 12 or above. Run  from the command line to make sure you have a compatible version of Node.js. The browser binaries for Chromium, Firefox and WebKit work across Windows, macOS, and Linux. For more information, see Playwright System Requirements.First, install Playwright Test to test your website or app:
npm i -D @playwright/test
To install browsers, run the following command, which downloads Chromium, Firefox, and WebKit:
npx playwright install 
 Run a basic test
The approach used by Playwright will be familiar to users of other browser-testing frameworks, such as WebDriver or Puppeteer. You can create an instance of the browser, open a page in the browser, and then manipulate the page by using the Playwright API.
Playwright Test, which is Playwright's test-runner, launches a browser and context for you. An isolated page is then passed into every test, as shown in the following, basic test:
// tests/foo.spec.ts
import { test, expect } from '@playwright/test';
test('basic test', async ({ page }) => {   await page.goto('https://playwright.dev/');
  const title = page.locator('.navbar__inner .navbar__title');   await expect(title).toHaveText('Playwright'); });Now run your tests, as follows:
npx playwright test
For more information about running tests, see Playwright > Getting started.
 Run tests in Microsoft Edge
playwright.config.tsTo run your tests in Microsoft Edge, you need to create a config file for Playwright Test, such as . Inside the config file, create one project, using Microsoft Edge.
// playwright.config.ts
import { PlaywrightTestConfig } from '@playwright/test';
const config: PlaywrightTestConfig = {   projects: [
    {
      name: 'Microsoft Edge',       use: {
        // Supported Microsoft Edge channels are: msedge, msedge-beta, msedge-dev, msedge-canary         channel: 'msedge',
      },
    },
  ], }; export default configIf Microsoft Edge isn't already installed on your system, install it through Playwright, as follows:
npx playwright install msedge
playwright.config.tsWhen using the above  file, Playwright Test uses Microsoft Edge to run your tests, as follows:
npx playwright test --headed
 Use Playwright as a library
You can also consume Playwright as a library, as shown in the following code. This approach allows you to use a different test-runner.
// example.js
const playwright = require('playwright');
(async () => {
  const browser = await playwright.chromium.launch({     channel: 'msedge',
  });
  const context = await browser.newContext();   const page = await context.newPage();   await page.goto('https://www.microsoft.com/edge');   await page.screenshot({ path: 'example.png' });
  await browser.close();
})();

example.js is a simple demonstration of the automation and testing scenarios that are enabled by Playwright.
await playwright.chromium.launchTo take screenshots in other web browsers, change the above code from  to the following code:
Firefox:
  const browser = await playwright.firefox.launch({
WebKit:
  const browser = await playwright.webkit.launch({
For more information about Playwright and Playwright Test, go to the Playwright website. Check out the Playwright repo on GitHub. To share your feedback on automating and testing your website or app with Playwright, file an issue.
 
 Puppeteer overview
 	6/21/2022 • 2 minutes to read • Edit OnlineThe Puppeteer library provides a high-level API to control Chromium-based browsers, including Microsoft Edge, by using the DevTools Protocol.
Puppeteer launches headless browsers by default. Headless browsers don't display a user interface (UI), so you must use the command line. You can also configure Puppeteer to run full (non-headless) Microsoft Edge.
By default, when you install Puppeteer, the installer downloads a recent version of Chromium, the open-source browser that Microsoft Edge is also built upon.
puppeteer-coreIf you have Microsoft Edge installed, you can use puppeteer-core.  is a lightweight version of Puppeteer that launches an existing browser installation, like Microsoft Edge. To download Microsoft Edge, go to Download Microsoft Edge Insider Channels.
Puppeteer is a Node library.
 Installing puppeteer-core
puppeteer-coreYou can add  to your website or app by using one of the following commands:
npm i puppeteer-core
yarn add puppeteer-core
 Launch Microsoft Edge with puppeteer-core
puppeteer-core is similar to other browser-testing-frameworks, such as WebDriver. You create an instance of
the browser, open a webpage, and then manipulate the webpage by using the Puppeteer API.
puppeteer-coreTo use  to launch Microsoft Edge:
puppeteer-corenode -v from the command line. Also, the example below uses async/await1. requires Node v8.9.0 or later. Make sure you have a compatible version of Node.js. To do this, run , which is only supported in Node v7.6.0 or later.
puppeteer-core2. In the following code sample,  launches Microsoft Edge, goes to 
https://www.microsoftedgeinsider.com, and saves a screenshot as example.pngexample.js. Copy the following code snippet and save it as :
const puppeteer = require('puppeteer-core');
(async () => {
  const browser = await puppeteer.launch({
    executablePath: 'C:\\Program Files (x86)\\Microsoft\\Edge Dev\\Application\\msedge.exe'
  });
  const page = await browser.newPage();
  await page.goto('https://www.microsoftedgeinsider.com');   await page.screenshot({path: 'example.png'});
  await browser.close();
})();executablePathexecutablePath/Applications/Microsoft\ Edge\ Canary.app/3. Follow the next steps to find the executable path and then change  to point to your installation of Microsoft Edge. For example, on macOS, the  for Microsoft Edge Canary should be set to .
executablePath, a simple manual approach is to go to edge://version4. To find the  and copy the
Executable path on that page.
5. Or, to programmatically find the executable path, first install the edge-paths package by running one of the following commands:
npm i edge-paths
yarn add edge-paths
edge-paths6. Then, if you're using  to find the executable path, run code like the following sample. It uses the edge-paths package to programmatically find the path to your installation of Microsoft Edge on your OS:
const edgePaths = require("edge-paths"); const EDGE_PATH = edgePaths.getEdgePath();
example.jsexecutablePath: EDGE_PATH7. Now that you've found the executable path (either manually or programmatically), in , set . Save your changes.
example.js8. Run  from the command line:
node example.js
puppeteer-core launches Microsoft Edge, goes to https://www.microsoftedgeinsider.com, and saves a screenshot of the webpage. You can customize the screenshot size by calling page.setViewport().
example.png file is produced by example.jsThe following :

The preceding example demonstrates basic automation and testing scenarios that you can cover using
puppeteer-corePuppeteer and . For more information about Puppeteer and how it works, check out Puppeteer.
 See also
WebDriver
WebDriver (EdgeHTML)
Chrome DevTools Protocol Viewer on GitHub
Microsoft Edge: Making the web better through more open source collaboration on Microsoft Experience Blog
Download Microsoft Edge Insider Channels
Chromium on The Chromium Projects
Node.js Puppeteer puppeteer vs. puppeteer-core page.setViewport() on Puppeteer
Headless browser on Wikipedia
Contact the Microsoft Edge DevTools team to send feedback about using Puppeteer, puppeteer-core, and Microsoft Edge.
 
 Use WebDriver to automate Microsoft Edge
 	6/21/2022 • 10 minutes to read • Edit OnlineWebDriver allows you to automate Microsoft Edge by simulating user interaction. Tests that use WebDriver have some advantages over JavaScript unit tests that run in the browser:
WebDriver accesses functionality and information that's not available to JavaScript running in browsers.
WebDriver simulates user events or OS-level events more accurately than JavaScript unit tests.
WebDriver manages multiple windows, tabs, and webpages in a single test session.
WebDriver runs multiple sessions of Microsoft Edge on a specific machine.
 Relationship between WebDriver and other software
To automate Microsoft Edge with WebDriver to simulate user interaction, you need three components:
Microsoft Edge.
Microsoft Edge WebDriver.
A WebDriver testing framework.
The functional relationship between these components is as follows:
TECHNOLOGYROLEWebDriverA W3C standard for a platform- and language-neutral wire protocol. This protocol allows out-of-process programs to remotely instruct the behavior of web browsers.Microsoft Edge WebDriverMicrosoft's implementation of the WebDriver protocol specifically for Microsoft Edge. Test authors write tests that use WebDriver commands that Microsoft Edge WebDriver
receives. Edge WebDriver is then responsible for communicating that command to the browser.A WebDriver testing frameworkTest authors use a testing framework to write end-to-end tests and automate browsers. Provides a language-specific interface that translates your code into commands that are sent to Edge WebDriver. WebDriver testing frameworks exist for all major platforms and languages. One such framework is Selenium.Internet Explorer DriverAn open-source implementation of the WebDriver protocol specifically for Internet Explorer. To run legacy end-to-end tests for Internet Explorer Mode, we recommend using Internet Explorer Driver.Microsoft WebDriver (legacy)The previous, browser-specific driver for Microsoft Edge
(EdgeHTML), which is also known as Microsoft Edge Legacy.The following sections describe how to get started with WebDriver for Microsoft Edge.
 Download Microsoft Edge WebDriver
To begin writing automated tests, make sure the Edge WebDriver version you install matches your browser version, as follows:
edge://settings/help1. Go to  and note your version of Microsoft Edge.

2. Go to Microsoft Edge WebDriver.
3. In the Get the latest version section of the page, select a platform in the channel that matches your version number of Microsoft Edge.

msedgedriverPATH4. After the download completes, extract the  executable to your preferred location. Add the folder where the executable is located to your  environment variable.
 Choose a WebDriver testing framework
After downloading Edge WebDriver, the last component you must download is a WebDriver testing framework. Test authors use WebDriver testing frameworks to write end-to-end tests and automate browsers. A WebDriver testing framework provides a language-specific interface that translates your code into commands that Edge WebDriver runs in Microsoft Edge. WebDriver testing frameworks exist for all major platforms and languages, such as Python, Java, C#, Ruby, and JavaScript.
This article provides instructions for using the Selenium framework, but you can use any library, framework, and programming language that supports WebDriver. To accomplish the same tasks using a WebDriver testing framework other than Selenium, consult the official documentation for your framework of choice.
 Using Selenium 4 
Selenium WebDriver is an open-source testing framework that can be used on any platform, and provides language bindings for Java, Python, C#, Ruby, and JavaScript.
To use WebDriver to automate Microsoft Edge, if you use Selenium, you must use Selenium 4, which has built-in support for Microsoft Edge (Chromium).
To install Selenium 4, see Install a Selenium library. In case you need it, the nuget packages page is Selenium.WebDriver.
 Upgrading from Selenium 3 
To use WebDriver to automate Microsoft Edge, if you use Selenium, make sure you are using Selenium 4. Selenium 3 is no longer supported.
You must upgrade existing Selenium 3 tests to Selenium 4. To learn more about upgrading to Selenium 4, see Upgrade to Selenium 4.
If you're using Selenium Tools for Microsoft Edge to add Microsoft Edge (Chromium) support to your Selenium 3 browser tests, update your tests as follows:
1. Remove Selenium Tools for Microsoft Edge from your project. You don't need to use Selenium Tools for Microsoft Edge with Selenium 4, because Selenium 4 already has built-in support for Microsoft Edge (Chromium).
EdgeDriver2. Update your tests to use the built-in  and related classes that Selenium 4 provides instead.
EdgeOptions.UseChromium3. Remove all usages of the  property. This property no longer exists in Selenium 4, because Selenium 4 supports only Microsoft Edge (Chromium).

 Automate Microsoft Edge with WebDriver
To automate a browser using WebDriver, you must first start a WebDriver session by using a WebDriver testing framework. A WebDriver session is a single running instance of a browser that's controlled through WebDriver commands.
Start a WebDriver session to launch a new browser instance. The launched browser instance remains open until you close the WebDriver session.
The following section walks you through using Selenium 4 to start a WebDriver session with Microsoft Edge.
NOTE
This article provides instructions for using the Selenium framework, but you can use any library, framework, and programming language that supports WebDriver. To accomplish the same tasks using another framework, consult the documentation for your framework of choice.
 Automate Microsoft Edge 
EdgeDriverSelenium uses the  class to manage a Microsoft Edge session. The following code:
1. Starts a Microsoft Edge session.
2. Instructs Microsoft Edge to go to Bing.
3. Searches for "WebDriver".
4. Sleeps for a few seconds so you can see the results.
To get started automating Microsoft Edge with WebDriver, copy and paste the code snippet for your preferred language:
	 	C#
Python
Java
JavaScript
 
using OpenQA.Selenium; using OpenQA.Selenium.Edge; using System.Threading;
namespace EdgeDriverSample
{
    class Program
    {
        static void Main(string[] args)
        {
            var driver = new EdgeDriver();             try             {
                driver.Url = "https://bing.com";
                var element = driver.FindElement(By.Id("sb_form_q"));                 element.SendKeys("WebDriver");                 element.Submit();
                Thread.Sleep(5000);
            }             finally             {
                driver.Quit();
            }
        }
    }
} Manage and configure the Edge WebDriver service 
EdgeDriverEdgeDriverWhen you create a new  object to start a Microsoft Edge session, Selenium launches a new Edge WebDriver process that the  object communicates with. The Edge WebDriver process is closed when
EdgeDriver object's Quit method. Letting each EdgeDriveryou call the  object manage its own driver process
can be inefficient if you have many tests, because each test must wait for a new driver process to launch. Instead, you can create a single Edge WebDriver process and then reuse it for multiple tests.
EdgeDriverServiceSelenium uses the  class to manage an Edge WebDriver process. You can create an 
EdgeDriverService once before running your tests, and then pass this EdgeDriverService object to the 
EdgeDriverEdgeDriverEdgeDriver object. When you pass an EdgeDriverServiceEdgeDriver object will use this EdgeDriverService constructor when creating a new  to the  constructor, the , instead of creating a new one.
EdgeDriverServiceYou can also use  to configure command-line options for the Edge WebDriver process, as shown below.
EdgeDriverServiceThe following snippet creates a new  and enables verbose log output:
	 	 C#
C#
Python
Java
JavaScript
 
var service = EdgeDriverService.CreateDefaultService(); service.UseVerboseLogging = true; var driver = new EdgeDriver(service);
 Configure Microsoft Edge Options 
EdgeOptions object to the EdgeDriverYou can pass an  constructor to configure extra options for the Microsoft
EdgeOptionsEdge browser process. The following section shows how to use  for some common scenarios. For a full list of options that are supported, see Capabilities and EdgeOptions.
 Choose Specific Browser Binaries 
You can start a WebDriver session with specific Microsoft Edge binaries. For example, you can run tests using the Microsoft Edge preview channels, such as Microsoft Edge Beta, Dev, or Canary.
	 	C#
Python
Java
JavaScript
 
var options = new EdgeOptions();
options.BinaryLocation = @"C:\Program Files (x86)\Microsoft\Edge Beta\Application\msedge.exe"; var driver = new EdgeDriver(options);
	 Pass extra command 	-line arguments
EdgeOptionsYou can use  to configure command-line arguments that will be passed to the Microsoft Edge browser process when a session is created. For example, you can configure the browser to run in headless mode.
	 	C#
Python
Java
JavaScript
 
var options = new EdgeOptions(); options.AddArgument("headless"); var driver = new EdgeDriver(options);
 Other WebDriver installation options
 Docker 
If you use Docker, run the following command to download a pre-configured image that has Microsoft Edge and Microsoft Edge WebDriver pre-installed.
docker run -d -p 9515:9515 mcr.microsoft.com/msedge/msedgedriver
For more information, see the msedgedriver container on Docker Hub.
 Application Guard
Trusted sites that use Microsoft Defender Application Guard can be automated using Edge WebDriver. Microsoft Defender Application Guard is also called Application Guard, for short.
Untrusted sites that use Application Guard cannot be automated or manipulated using Edge WebDriver. Application Guard launches untrusted sites in a container, and this container doesn't expose the remote debugging port that Edge WebDriver needs to communicate with the site.
Your enterprise administrator defines what are trusted sites, including cloud resources and internal networks. Sites that aren't in the trusted sites list are considered untrusted. Edge WebDriver can automate both InPrivate windows, and sites in the trusted sites list.
For more information about Application Guard, see:
Microsoft Edge support for Microsoft Defender Application Guard. Microsoft Defender Application Guard overview.
 Opt out of diagnostic data collection
MSEDGEDRIVER_TELEMETRY_OPTOUT1By default, Edge WebDriver sends diagnostic data such as the status of the New Session WebDriver command to Microsoft. To turn off diagnostic data collection for Edge WebDriver, set the environment variable to . For more information about the data that Edge WebDriver collects, see the Microsoft Edge Privacy Whitepaper.
 Legacy Microsoft WebDriver for EdgeHTML
Microsoft WebDriver is the legacy WebDriver implementation for EdgeHTML-based Microsoft Edge. Microsoft WebDriver was distributed as an optional Windows component, because legacy Microsoft Edge (EdgeHTML) was updated with the OS. Microsoft WebDriver isn't compatible with the latest, Chromium-based versions of Microsoft Edge. Microsoft WebDriver is still made available for developers who have written WebDriver-based tests for UWP apps, because these rely on EdgeHTML, but Microsoft WebDriver is no longer recommended.
See WebDriver (EdgeHTML).
 Troubleshooting
These are troubleshooting considerations when using WebDriver to automate Microsoft Edge.
 Developer Tools Availability policy 
20 or 1If your IT admin has set the DeveloperToolsAvailability policy to , Microsoft Edge WebDriver is blocked from driving Microsoft Edge, because the driver uses Microsoft Edge DevTools. To automate Microsoft Edge, make sure the DeveloperToolsAvailability policy is set to .
 Upgrading from Selenium 3 to Selenium 4 
To use WebDriver to automate Microsoft Edge, if you use Selenium, make sure you are using Selenium 4. Selenium 3 is no longer supported.
EdgeDriverIf you use Selenium 4, you don't need to use Selenium Tools for Microsoft Edge. Selenium Tools for Microsoft Edge are for Selenium 3 only. If you try to use Selenium 4 with Selenium Tools for Microsoft Edge and try to create a new  instance, you get the following error: 
System.MissingMethodException: 'Method not found: 'OpenQA.Selenium.Remote.DesiredCapabilities OpenQA.Selenium.DriverOptions.GenerateDesiredCapabilities(Boolean)'
.
Microsoft.Edge.SeleniumToolsEdgeOptions and EdgeDriver classes from the OpenQA.Selenium.EdgeIf you're using Selenium 4 and get this error, remove  from your project, and make sure you're using the official  namespace.
 See also
The Selenium Browser Automation Project - Information about WebDriver in the context of Selenium, and how to write automated WebDriver tests using Selenium.
Contact the Microsoft Edge WebDriver team to send feedback about using WebDriver, WebDriver testing frameworks (such as Selenium), and Microsoft Edge.

 
 
Use Internet Explorer Driver to automate IE mode in Microsoft Edge
 	6/21/2022 • 7 minutes to read • Edit OnlineIf you have business-critical legacy websites or apps, you may need to test your content in Internet Explorer (IE) mode in Microsoft Edge. This article describes how to get started with Internet Explorer Driver (IEDriver) to automate IE mode in Microsoft Edge.
IE mode in Microsoft Edge is a feature for organizations that still need Internet Explorer 11 for backward compatibility for legacy websites or apps. To learn more about IE mode, read What is Internet Explorer (IE) mode?
Starting June 15, 2022, Internet Explorer 11 will no longer be supported on certain versions of Windows 10. For more information, read Internet Explorer 11 desktop app retirement FAQ.
 Download Internet Explorer Driver (IEDriver)
4.0.0.0To begin automating tests in IE mode in Microsoft Edge, download IEDriver. Make sure that the version of IEDriver that you download is  or greater.

 Required Configuration
To configure IEDriver, Windows, and Microsoft Edge correctly, complete the requirements for Selenium's required configuration.
 Place the driver executable in the PATH 
The driver executable needs to be placed in the PATH; see IE Driver Server. The top of that page reads: "The standalone server executable must be downloaded from the Downloads page and placed in your PATH."
webdriver.ie.driverIf the driver location isn't included in the PATH, you must set the driver location using the Java system property  or some other way.
 Automate IE mode in Microsoft Edge
The following sections walk you through using Selenium to automate IE mode in Microsoft Edge.
This article provides instructions for using the Selenium framework, but you can use any library, framework, and programming language that supports WebDriver. To accomplish the same tasks using another framework, consult the documentation for your framework of choice.
To launch Microsoft Edge in IE mode with IEDriver:
InternetExplorerOptions1. Define  with additional properties that point to the Microsoft Edge browser.
InternetExplorerDriver and pass it InternetExplorerOptions2. Start an instance of . IEDriver launches
Microsoft Edge and then loads your web content in IE mode.
The next section shows the complete sample, and then the subsequent sections focus on each of the main steps that are listed above.
 The complete sample
The following sample launches Microsoft Edge in IE mode, navigates to bing.com, and then searches for "WebDriver".
	 	C#
Python Java
JavaScript
 
using System; using OpenQA.Selenium; using OpenQA.Selenium.IE;
namespace IEDriverSample
{
    class Program
    {
        static void Main(string[] args)
        {
            var ieOptions = new InternetExplorerOptions();             ieOptions.AttachToEdgeChrome = true;             //change the path accordingly
            ieOptions.EdgeExecutablePath = "C:/Program Files (x86)/Microsoft/Edge/Application/msedge.exe";
            var driver = new InternetExplorerDriver(ieOptions);             driver.Url = "https://bing.com";
            driver.FindElement(By.Id("sb_form_q")).SendKeys("WebDriver");             driver.FindElement(By.Id("sb_form")).Submit();
            driver.Quit();
        }
    }
}The following sections explain the steps in this sample in more detail.
 Define InternetExplorerOptions with additional properties for Microsoft Edge
InternetExplorerOptionsDefine  with additional properties that point to the Microsoft Edge browser.
	 	 C#
Python
Java
JavaScript
ieOptions, by calling InternetExplorerOptions()1. Define a new variable, .
ieOptions.AttachToEdgeChrome property to true, and ieOptions.EdgeExecutablePath2. Set  to the path of the Microsoft Edge executable.
var ieOptions = new InternetExplorerOptions(); ieOptions.AttachToEdgeChrome = true; //change the path accordingly
ieOptions.EdgeExecutablePath = "C:/Program Files (x86)/Microsoft/Edge/Application/msedge.exe"; Start IEDriver
Start IEDriver. IEDriver launches Microsoft Edge and then loads your web content in IE mode.
	 	C#
Python
Java
JavaScript
InternetExplorerDriver and pass it the previously defined ieOptionsStart  . IEDriver launches Microsoft Edge in
IE mode. All page navigation and subsequent interactions occur in IE mode.
var driver = new InternetExplorerDriver(ieOptions);
 Known limitations
This section covers known scenarios that previously worked with IEDriver and the IE11 desktop application but require workarounds when using IEDriver with Microsoft Edge in IE mode.
 Opening new windows 
If your test code creates a new browser window using one of these methods, you may need to add a short wait operation afterwards to ensure that IEDriver has detected the new window:
Opening a new window with window.open executed in page script.
Opening a new window with the WebDriver New Window command.
To ensure the new window has been created successfully and IEDriver has detected it, you must continuously check the result of the Get Window Handles command until it contains a handle to the new window.
The following sample demonstrates a possible way to wait for new window handles to be detected when opening new windows.
	 	C#
Python
Java
JavaScript
Clickdriver.WindowHandlesAfter the   method is called on a button that opens a new window, the test code must wait until  contains the new window handle.
var initialHandleCount = driver.WindowHandles.Count;
driver.FindElement(By.Id("<Id of the button that will open a new window>")).Click(); var newHandles = driver.WindowHandles;
while (newHandles.Count == initialHandleCount)
{
    newHandles = driver.WindowHandles; } Creating and switching between tabs 
If your test code switches between multiple tabs in the same Microsoft Edge window, tabs that become inactive may not be included in the list of handles returned by Get Window Handles. In the Internet Explorer 11 desktop application, IEDriver will return handles for all of the tabs in IE, regardless of activation state.
When using Microsoft Edge in IE mode, if your test switches focus away from a certain tab and you would like to be able to switch back to that tab later, you must store a copy of the tab's window handle.
 See also
Use WebDriver to automate Microsoft Edge - An overview of automating Microsoft Edge with the WebDriver protocol.
Selenium documentation - Information about WebDriver in the context of Selenium, and how to write automated WebDriver tests using Selenium.
Contact the Microsoft Edge DevTools team to send feedback about using WebDriver, WebDriver testing frameworks (such as Selenium), and Microsoft Edge.

 
 Capabilities and EdgeOptions
 	6/21/2022 • 5 minutes to read • Edit OnlineEdgeDriverEdgeDriverEdgeDriverCapabilities are options that you can use to customize and configure an  session. To learn about starting a new  session, see Automating Microsoft Edge. This article describes all supported capabilities for Microsoft Edge and provides details about passing the capabilities to  sessions.
EdgeOptionsCapabilities are passed to a WebDriver session as a JSON map, but it is not necessary or recommended to set them this way. WebDriver testing frameworks (such as Selenium) provide language bindings which typically have convenience methods so you don't need to configure the JSON map yourself. For example, Selenium configures capabilities through the  class.
To learn more about how to configure capabilities, consult the documentation for your preferred WebDriver testing framework. For more information, see Choose a WebDriver testing framework.
 Using the EdgeOptions class
EdgeOptionsCreate an instance of , which provides convenience methods to set Microsoft Edge-specific
EdgeOptions object, pass EdgeOptions into the EdgeDrivercapabilities. After you configure the  constructor.
var options = new EdgeOptions();
options.AddExtensions("/path/to/extension.crx"); var driver = new EdgeDriver(options);
AddAdditionalEdgeOptionTo use capabilities that don't have an associated convenience method, use the  method.
You must pass the full name of the capability and a value with the correct type. For the full list of accepted capabilities and value types, see EdgeOptions object.
options.AddAdditionalEdgeOption("wdpAddress", "remotehost:50080");
 Recognized Capabilities
EdgeDriverFor standard capabilities that  accepts, see Selenium documentation and the W3C WebDriver standard. This article only lists capabilities specific to Microsoft Edge.
 EdgeOptions object
EdgeOptionsEdgeOptionsMost Microsoft Edge-specific capabilities are exposed through the  object. In some languages, the capabilities are implemented by the  class. In other languages, the capabilities are stored under the 
ms:edgeOptions dictionary in DesiredCapabilities.


CAPABILITYTYPEDETAILS
argslist of strings=List of command-line arguments to pass to the Microsoft Edge process on launch. Arguments with an associated value should be separated by an sign (for example, 
['start-maximized', 'user-datadir=/tmp/temp_profile']). If you're launching a WebView2 app, then these arguments are passed to your app instead of the underlying Microsoft Edge browser process. To pass arguments to the browser process when launching a WebView2 app, use webviewOptions.additionalBrowserArg uments instead.
binarystringPath to the Microsoft Edge binary to use (on macOS, the path should be the actual binary, not just the app. for example, 
/Applications/Microsoft
Edge.app/Contents/MacOS/Microsoft Edge).
debuggerAddressstringAn address of a debugger server to which to connect, in the form of hostname/ip:port , for example 127.0.0.1:38947 .
detachbooleanfalse. If falseDefault value = ,
truetrueMicrosoft Edge quits when the WebDriver service shuts down, even if the WebDriver local end hasn't closed the session. If , Microsoft Edge only quits if the WebDriver local end closes the session. If , and the WebDriver local end doesn't close the
EdgeDriversession,  doesn't clean up the temporary user data folder used by the Microsoft Edge instance.
excludeSwitcheslist of strings--List of Microsoft Edge command line switches to exclude that EdgeDriver by default passes when starting Microsoft Edge. Avoid the  prefix for switches.
extensionslist of stringsA list of extensions to install on startup. Each item in the list should be
a base-64 encoded packed extension (
.crx).
localStatedictionaryA dictionary with each entry consisting of the name of the preference and the value. The preferences are applied to the Local State file in the user data folder.
minidumpPathstringDirectory to store Microsoft Edge minidumps. (Supported only on Linux.)CAPABILITYTYPEDETAILS
mobileEmulationdictionarydeviceNamedeviceMetricsuserAgentA dictionary with either a value for , or values for 
 and .
perfLoggingPrefsdictionaryAn optional dictionary that specifies performance logging preferences. For more information, see perfLoggingPrefs object.
prefsdictionaryPreferencesA dictionary with each entry consisting of the name of the preference and the value. The preferences are only applied to the user profile in use. For examples, see the  file in the user data folder of Microsoft Edge.
wdpAddressstringAn address of a Windows Device Portal server to connect to, in the form of 
hostname/ip:port , for example
 127.0.0.1:50080 . For more information, see Remote Debugging Windows 10 devices.
wdpPasswordstringOptional password to use when connecting to a Windows Device Portal server. Required if the server has authentication enabled.
wdpUsernamestringOptional user name to use when connecting to a Windows Device Portal server. Required if the server has authentication enabled.
webviewOptionsdictionaryAn optional dictionary that can be used to configure the WebView2 environment when launching a WebView2 app. For more information, see webviewOptions object.
windowsAppstringApplication user model ID of a
Microsoft Edge app package to launch, for example Microsoft.MicrosoftEdge.Stable_8wekyb3d8bbwe!MSE. Use windowsApp instead of binarywhen connecting to a Windows 10X device or emulator using Windows Device Portal.
windowTypeslist of stringswebviewA list of window types that are displayed in the list of window handles. For access to Android webview elements, include  in the list. perfLoggingPrefs object
perfLoggingPrefsThe  dictionary has the following format. All keys are optional.

KEYTYPEDEFAULT VALUEDETAILS1000The requested number of milliseconds between DevTools trace buffer usage events. For example, if 1000, then once per second, DevTools reports how full the trace buffer is. If a report indicates the buffer usage is 100%, a warning is issued.bufferUsageReportingIntervalpositive integer
enableNetworkbooleantrueTo collect (or not collect) events from Network domain.
enablePagebooleantrueTo collect (or not collect) events from Page domain.
traceCategoriesstring(empty)A comma-separated string of Microsoft Edge tracing categories for which trace events should be collected. An unspecified or empty string disables tracing. webviewOptions object
webviewOptionsThe  dictionary is used to configure the WebView2 environment when launching a WebView2 app. It has the following format. All keys are optional.
KEYTYPEDEFAULT VALUEDETAILS
browserExecutableFolderstring(empty)Path to a folder containing a fixed version WebView2 runtime to use. For more information about using a fixed version runtime distribution with WebView2, see Distribute a WebView2 app and the WebView2 Runtime.
userDataFolderstring(empty)Path to the user data folder
userDataFolderthat WebView2 will use. If  isn't
specified, Microsoft Edge WebDriver will create a temporary user data folder. For more information about managing the user data folder with WebView2, see Manage the user data folder.
EdgeDriverThe following list contains all of the Microsoft Edge-specific capabilities that  returns when you create a new session.
CAPABILITYTYPEDETAILS
msedge.msedgedriverVersionstringThe version of EdgeDriver.
msedge.userDataDirstringThe path to the user data folder used by the Microsoft Edge instance.

 
 Contact the Microsoft Edge WebDriver team
 	6/21/2022 • 2 minutes to read • Edit OnlineSend your feedback to help improve Microsoft Edge WebDriver. Contact the Microsoft Edge WebDriver team to submit feature requests or bug reports of issues about automating Microsoft Edge using WebDriver and WebDriver testing frameworks.
 Submit feature requests or bugs in the Edge WebDriver feedback repo
To report a bug or to request a new feature in Microsoft Edge WebDriver, use the Edge WebDriver repo. This repo is a place for developers to share tips or best practices, report feedback, or search for existing issues with Microsoft Edge WebDriver.
 File a documentation issue
To report a bug with the Microsoft Edge WebDriver documentation, in the Feedback section at the bottom of an article, select the This page button.
edge-developerOr you can file an issue against the Microsoft Edge Developer documentation, directly in the repo.

 
 
webhint extension for Visual Studio Code
 	6/21/2022 • 2 minutes to read • Edit OnlineNote: As of April 2022, the webhint extension for Visual Studio Code is no longer being maintained. See Microsoft Edge DevTools extension for Visual Studio Code.
webhint is a customizable linting tool, to improve the accessibility, performance, cross-browser compatibility, PWA compatibility, and security of your site. The webhint extension checks your code for best practices and common errors.

 
 Web platform overview
 	6/21/2022 • 3 minutes to read • Edit OnlineThe following are considerations for developing websites and products for the web platform, specifically for Microsoft Edge:
Testing for coming changes that could impact compatibility of your website with Microsoft Edge.
Moving users to Microsoft Edge from Internet Explorer.
Configuring tracking prevention in Microsoft Edge.
Detecting Microsoft Edge from your website.
Detecting Windows 11 by using User-Agent Client Hints. Customizing the password reveal button.
These aspects of developing for the web platform are described below.
 Site compatibility-impacting changes coming to Microsoft Edge
This article lists differences between the schedule of changes for Microsoft Edge versus the Chromium project, and high-impact changes which the Microsoft Edge team is tracking especially closely.
The web platform is a collection of technologies used for building webpages, including HTML, CSS, JavaScript, and many other open standards. The web platform constantly evolves to improve the user experience, security, and privacy. In some cases, changes may affect the functionality of existing webpages.
See Site compatibility-impacting changes coming to Microsoft Edge.
 Move users to Microsoft Edge from Internet Explorer
Many modern websites have designs that are incompatible with Internet Explorer. When an Internet Explorer user visits an incompatible public website, the user may be instructed by the website that the website is incompatible with Internet Explorer, and that the user must switch to a more modern browser in order to use the website.
To minimize disruptions, Microsoft Edge supports a new capability that automatically redirects users. When an Internet Explorer user goes to a website that's incompatible with Internet Explorer, Windows can automatically redirect the user to Microsoft Edge. Only websites that are part of the Need Microsoft Edge list are redirected.
See Move users to Microsoft Edge from Internet Explorer.
 Tracking prevention in Microsoft Edge
The tracking prevention feature in Microsoft Edge protects users from online tracking by restricting the ability of trackers to access browser-based storage as well as the network.
The tracking prevention feature is built to uphold the Microsoft Edge browser privacy promise, while also ensuring that there is no impact by default to website compatibility or the economic viability of the web.
See Tracking prevention in Microsoft Edge.
 Detect Microsoft Edge from your website
Microsoft Edge enables your website to retrieve user agent information. You use the user agent information to present webpages correctly for each user's browser. Browsers provide mechanisms for websites to detect browser information such as brand, version number, and host operating system.
User-Agent Client Hints are an improved mechanism for retrieving browser information.
User-Agent strings are legacy; they are outdated and have a history of causing website compatibility problems.
You may want to provide different experiences to users based on their browser. For example, if you include steps about how to configure Microsoft Edge or another browser for use with your site, you may want to detect the browser and then show the appropriate content.
See Detect Microsoft Edge from your website.
 Detect Windows 11 using User-Agent Client Hints
Websites can differentiate between users on Windows 11 and Windows 10 by using User-Agent Client Hints (UA-CH). The User-Agent Client Hints format is used by browsers to provide user agent information to websites.
Websites can use the user agent information that's sent from the browser to detect information such as:
The browser brand.
The browser version number.
The device platform on which the browser is running.
There are two approaches for sites to access user agent information:
User-Agent strings (legacy).
User-Agent Client Hints (recommended).
See Detect Windows 11 using User-Agent Client Hints.
 Customize the password reveal button
passwordAlt+F8The  input control in Microsoft Edge includes a password reveal button. To make sure that the password is entered correctly, a user can click the password reveal button or press , to show the characters in the password field. You can remove the password reveal control, or customize the control styling.
See Customize the password reveal button.
 
 
Site compatibility-impacting changes coming to Microsoft Edge
 	6/21/2022 • 7 minutes to read • Edit OnlineThis article lists differences between the schedule of changes for Microsoft Edge versus the Chromium project, and high-impact changes which the Microsoft Edge team is tracking especially closely.
The web platform is a collection of technologies used for building webpages, including HTML, CSS, JavaScript, and many other open standards. The web platform constantly evolves to improve the user experience, security, and privacy. In some cases, changes may affect the functionality of existing webpages.
For functionality and compatibility reasons, Microsoft Edge adopts nearly all of the Chromium project's changes to the web platform. Microsoft remains in full control of the Microsoft Edge browser and may defer or reject changes. The Microsoft Edge team decides if the change benefits browser users.
For information about upcoming Chromium project web platform changes, see Chrome Platform Status Release timeline.
Check this article often. The Microsoft Edge team updates this article as thinking evolves, timelines solidify, and new changes are announced.
 Differences from the Chromium schedule, and high-impact changes
This table lists:
Changes where the rollout schedule for Microsoft Edge differs from the upstream Chromium project.
High-impact changes which the Microsoft Edge team is tracking closely.
CHANGESTABLE CHANNELEXPERIMENTATIONADDITIONAL INFORMATIONXmlHttpRequestDisallow synchronous  in page
dismissalv83 (Chrome+1)This change is happening in the Chromium project, on which Microsoft Edge is based. Matching Chrome, Microsoft Edge offers a Group Policy to turn off this change until v88. For more information, including the planned timeline by Google for this change, see the Chrome Platform Status entry.
CHANGESTABLE CHANNELEXPERIMENTATIONADDITIONAL INFORMATIONDisplay subtle prompt for notification permissions requestsv84Quiet notification requests display a subtle request icon in the address bar for site notification permissions requested using the 
Notifications or PushAPI, replacing the full or standard permission flyout prompt UI. This feature is currently enabled for all users. To opt out of quiet notification requests, see edge://settings/content/notification. In the future, the
Microsoft Edge team may explore re-enabling the full flyout notification prompt in some scenarios.Turn off TLS/1.0 and TLS/1.1v84Versions 1.0 and 1.1 of the TLS protocol used by HTTPS sites are now obsolete and unavailable in modern browsers.Cookies default to 
SameSite=Lax and SameSite=Nonerequires-Securev86 (Chrome+1)Canary v82, Dev v82This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, including the planned timeline by Google for this change, see the Chrome Platform Status entry.Referrer Policy: Default to 
strict-origin-whencross-originv86 (Chrome+1)Canary v79, Dev v79This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, including the planned timeline by Google for this change, see the Chrome Platform Status entry.Deprecate AppCachev86 (Chrome+1)This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, see the WebDev documentation. The Microsoft rollout schedule for deprecation is planned for one release after Chrome. Requesting an AppCache OriginTrial Token allows sites to continue to use the deprecated API until v90.
CHANGESTABLE CHANNELEXPERIMENTATIONADDITIONAL INFORMATIONHTTP authentication disallowed when third-party cookies are blockedv87Starting with v87, when cookies are blocked for third-party requests, using either the
BlockThirdPartyCookies policy or the toggle in 
edge://settings, HTTP
authentication is also disallowed. This change may impact Enterprise Mode Site
List downloads for Internet Explorer mode if the endpoint hosting the list requires the use of HTTP authentication. To allow the use of both cookies and HTTP authentication for
Enterprise Mode Site List downloads, add a matching URL pattern to the CookiesAllowedForURLs policy.Removal of Adobe Flashv88This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, see the Adobe Flash Chromium Roadmap.Remove FTP supportv88Beta v87In v88, FTP support is removed entirely. This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, see the Chrome Platform Status Entry. Enterprises that have sites that still require FTP support can continue to use FTP by configuring the site to use IE mode.Autoupgrade mixed content imagesv88Non-secure (HTTP) references to images are automatically upgraded to HTTPS. If the image isn't available over HTTPS, the image download fails. A Group Policy is available to control this feature. This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, see the Chrome Platform Status entry.
CHANGESTABLE CHANNELEXPERIMENTATIONADDITIONAL INFORMATIONRemoval of 3DES in TLSv93Starting with v93, support for the
TLS_RSA_WITH_3DES_EDE_
CBC_SHA cipher suite will be removed. This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, see the Chrome Platform Status entry. Additionally, in v93, a compatibility policy will be available to support scenarios that need to preserve compatibility with outdated servers. This compatibility policy will become obsolete and stop working in v95. Make sure that you update affected servers before then.Deprecate WebRTC's Plan B SDP semanticsv98 (Chrome+2)This change is happening in the Chromium project, on which Microsoft Edge is based. This change deprecates a legacy Session Description Protocol (SDP) dialect called Plan B. This SDP format is being replaced by the Unified Plan, which is a speccompliant and crossbrowser compatible SDP format. For more information, see the Chrome Platform Status entry, PSA: Plan B should throw in M96 Beta and Stable, and PSA: Plan B throwing in Stable and Extended Deprecation Trial End Date. The Microsoft rollout schedule for deprecation is planned for two releases after Chrome. Requesting a WebRTC Plan B Reverse Origin Trial Token allows sites to continue to use the deprecated API until v101.
CHANGESTABLE CHANNELEXPERIMENTATIONADDITIONAL INFORMATIONRestrict private network requests to secure contextsv94Starting with v94, access to resources on local (intranet) networks from pages on the internet requires that those pages be delivered over HTTPS. This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, see the Chrome Platform Status entry. Two compatibility policies are available to support scenarios that need to preserve compatibility with non-secure pages: InsecurePrivateNetworkReq uestAllowed and
InsecurePrivateNetworkReq uestAllowedForUrls.Block mixed content downloadsv94Downloading of files from HTTP URLs will be blocked on HTTPS pages. This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, see the Google security blog entry.Block WebSQL in thirdparty contextsv97Use of the legacy WebSQL feature will be blocked from third-party frames. An
Enterprise policy
WebSQLInThirdPartyContex tEnabled will be available as an opt-out until v101. This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, see the Chrome Platform Status entry.
CHANGESTABLE CHANNELEXPERIMENTATIONADDITIONAL INFORMATIONSend CORS preflight requests for private network accessv98Starting with v98, Microsoft Edge sends a CORS preflight request before a page from the internet is allowed to request resources from a local network (intranet). The intranet server should respond to the preflight by providing explicit permission to access the resource. The result of this check is not yet enforced. This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, see the Chrome Platform Status entry. Two compatibility policies are available to suppress the CORS preflight request:
InsecurePrivateNetworkReq uestAllowed and
InsecurePrivateNetworkReq uestAllowedForUrls.Three-digit version number in the User-Agent stringv100Starting with v100, Microsoft Edge will send a three-digit version number in the User-Agent header,
Edg/100such as . This may
confuse scripts or serverside analytics that use a buggy parser to determine the User-Agent string version number. Starting with v97, site owners can emulate this condition before v100 by enabling the experiment flag 
#force-major-versionto-100in edge://flags.Block external protocols in sandboxed frames by defaultv103sandboxBlocks the use of external protocols (that interact with non-browser applications) from sandboxed iframes unless permission is explicitly granted by the  attribute on the
frame. This change is happening in the Chromium project, on which Microsoft Edge is based. For more information, see the Chrome Platform Status entry.CHANGESTABLE CHANNELEXPERIMENTATIONADDITIONAL INFORMATIONdocument.domainIgnore modifications to  by
defaultv106document.domainThe 
property historically could be set to relax SameOrigin-Policy and allow subdomains from a site to interact. This behavior will be disabled by default such that setting the 
document.domainproperty will have no effect. For more information and workarounds, see Microsoft Edge will disable modifying document.domain.Removal of cross-origin subframe JavaScript dialogsv107 (Chrome+1)Removes window.alert , window.prompt , and 
window.confirm from
cross-origin iframes. This change is happening in the Chromium project, on which Microsoft Edge is based. For more
information, see Intent to Remove: Cross origin subframe JS Dialogs. Notation for browser versions
This article uses the following notation for browser release numbers.
NOTATIONDESCRIPTIONv123The feature or change ships in Microsoft Edge version 123.v123 (Chrome+1)The feature or change ships in Microsoft Edge version 123, which is one release after the feature or change ships in Chrome version 122.v123 (Chrome+2)The feature or change ships in Microsoft Edge version 123, which is two releases after the feature or change ships in Chrome version 121.Beta v123The feature or change ships in version 123 of the Beta preview channel of Microsoft Edge.Dev v123The feature or change ships in version 123 of the Dev preview channel of Microsoft Edge.Canary v123The feature or change ships in version 123 of the Canary preview channel of Microsoft Edge. 
 
Move users to Microsoft Edge from Internet Explorer
 	6/21/2022 • 2 minutes to read • Edit OnlineMany modern websites have designs that are incompatible with Internet Explorer. When an Internet Explorer user visits an incompatible public website, the user may be instructed by the website that the website is incompatible with Internet Explorer, and that the user must switch to a more modern browser in order to use the website.
To minimize disruptions, Microsoft Edge supports a new capability that automatically redirects users. When an Internet Explorer user goes to a website that's incompatible with Internet Explorer, Windows can automatically redirect the user to Microsoft Edge. Only websites that are part of the Need Microsoft Edge list are redirected.
 Redirection experience
On redirection to Microsoft Edge, the user is shown the one-time dialog in the next screenshot. The dialog provides the user with the following information:
It explains why the website is being redirected.
It prompts the user for consent to copy browsing data and preferences from Internet Explorer to Microsoft Edge.
The following browsing data is imported:
Favorites
Passwords
Search engines
Open tabs
History
Settings
Cookies
The Home Page
Browsing notification and prompt to import data and preferences:

If the user doesn't consent by selecting the Always bring over my browsing data and preferences from Internet Explorer checkbox, the user may choose Continue browsingto continue the browsing session.
Finally, a website incompatibility banner is displayed under the address bar for each redirection. An example of a website incompatibility banner is displayed in following figure.

The website incompatibility banner provides the following details to the user.
Recommends that the user to switch to Microsoft Edge.
Offers to set Microsoft Edge as the default browser.
Gives the user the option to explore Microsoft Edge.
WhenawebsiteisredirectedfromInternetExplorertoMicrosoftEdge, one of the following actions occurs.
If the active Internet Explorer tab hadnopriorcontent, it is closed.
If the active Internet Explorer tab had prior content, it navigates to the Microsoftsupport pagethat explains whythewebsitewasredirectedtoMicrosoftEdge.
NOTE
After a redirection, users may continue to use Internet Explorer for websites that aren't on the Internet Explorer compatibility list.
 Request an update to the Internet Explorer compatibility list
The Internet Explorer compatibility list is an XML file on microsoft.com. The list is regularly updated in response to user and website developer requests to have websites added or removed. Updates to the list are automatically downloaded to user machines.
Email the following information to ietoedge@microsoft.com for your website to be added or removed from the Internet Explorer compatibility list.
Owner name
Corporate title
Email address
Company name
Street address
Website address
The Internet Explorer compatibility list is usually updated within a week. If you experience wait times greater than one week, we may be working through an outage.
NOTE
The Internet Explorer compatibility list is designed to work with public sites only.
 
 Tracking prevention in Microsoft Edge
 	6/21/2022 • 10 minutes to read • Edit OnlineThe tracking prevention feature in Microsoft Edge protects users from online tracking by restricting the ability of trackers to access browser-based storage as well as the network.
The tracking prevention feature is built to uphold the Microsoft Edge browser privacy promise, while also ensuring that there is no impact by default to website compatibility or the economic viability of the web.
 Levels of tracking prevention
Microsoft Edge currently offers users three levels of tracking prevention, which are selected by navigating to 
edge://settings/privacy.

1. Basic - The least restrictive level of tracking prevention that is designed for users who enjoy personalized advertisements and who don't mind being tracked on the web. Basic only protects users against malicious trackers such as fingerprinters and cryptominers.
2. Balanced (Default) - The default level of tracking prevention that is designed for users who want to see less personalized advertisements while minimizing the risk of compatibility issues as they browse the web. Balanced aims to block trackers from sites that users never engage with.
3. Strict - The most restrictive level of tracking prevention that is designed for users who are okay trading website compatibility for maximum privacy.
The tracking prevention feature in Microsoft Edge is made up of three main components that work together to determine whether a specific resource from a website should be classified as a tracker and blocked. The components are as follows:
Classification - The way Microsoft Edge determines whether a URL belongs to a tracker.
Enforcement - The actions taken to protect Microsoft Edge users from URLs classified as trackers.
 Mitigations - The mechanisms provided to ensure user-specified favorite sites still work, while offering strong default protection.
Each of the components are explored and explained in detail on this page.
 Classification
edge://componentsThe first component of the tracking prevention feature in Microsoft Edge is classification. To classify online trackers and group them into categories, Microsoft Edge uses the Disconnect open source tracking protection lists. The lists are delivered via the "Trust Protection Lists" component, which is viewable at . After being downloaded, the lists are stored on disk where you can use them to determine whether or how a particular URL is classified.
To determine if a URL is considered a tracker by the classification system in Microsoft Edge, a series of host names are checked, starting with an exact match and then proceeding to check for partial matches for up to four labels beyond the top-level domain.
Example:
https://a.subdomain.of.a.known.tracker.test/some/pathURL: 
Tested host names:

a.subdomain.of.a.known.tracker.test
of.a.known.tracker.test
a.known.tracker.test
known.tracker.testtracker.testIf any of those host names match with a host name on the Disconnect lists, Microsoft Edge proceeds with evaluating enforcement actions to prevent users from being tracked.
 Enforcement
To provide protection from tracking actions on the web, Microsoft Edge takes two enforcement actions against classified trackers:
IndexedDB and localStorage Restrict storage access - If a known tracking resource tries to access any web storage where it may try to persist data about the user, Microsoft Edge blocks that access. This includes restricting the ability for that tracker to get or set cookies as well as access storage APIs such as .
 Block resource loads - If a known tracking resource is being loaded on a website, Microsoft Edge may block that load before the request reaches the network depending on compatibility impact of the load and the tracking prevention setting a user has set. Blocked loads may include tracking scripts, pixels, iframes, and more. This prevents any data potentially being sent to the tracking domain and may even improve load times and page performance as a side effect.
A user may choose the page info flyout icon on the left side of the address bar to find out which trackers were blocked on a specific page:

How the enforcements are applied depends on what level of tracking prevention the user selected and the mitigations that may apply.
 Mitigations
To ensure that web compatibility is preserved as much as possible, Microsoft Edge has three mitigations to help balance enforcements in specific situations. These are the Org Relationship mitigation, the Org Engagement mitigation, and the CompatExceptions List.
Before diving into the mitigations, it is worth defining the concept of an "Organization" or "Org" for short. Disconnect also maintains a list called entities.json that defines groups of URLs that are owned by the same parent organization/company. The tracking prevention feature in Microsoft Edge uses this list in both the Org Relationship mitigation and the Org Engagement mitigation to minimize the occurrence of compatibility issues caused by tracking prevention affecting cross-organizational requests.
 Org Relationship Mitigation 
Several popular websites maintain both websites and Content Delivery Networks (CDNs) to serve static resources and content to those sites. To ensure that these types of scenarios aren't affected by tracking prevention, Microsoft Edge exempts a site from tracking prevention when the site is making third-party requests to other sites owned by the same parent organization (as defined in the Disconnect entities.json list). This is best illustrated by an example.
Example:
An organization named Org1 owns the domains org1.test and org1-cdn.test , as defined in the Disconnect entities.json list. Imagine that org1-cdn.test is classified as a tracker and would normally have tracking prevention enforcements applied to it. If a user visits https://org1.test and the site tries to load a resource from https://org1-cdn.test , Microsoft Edge doesn't take any enforcement actions against requests made to org1-cdn.test even though it isn't a first-party URL. If another URL that isn't part of the Org1 organization tries to load that same resource, however, then the request would be subject to enforcements, because it isn't part of the same organization.
Even though this relaxes tracking prevention enforcements for sites that belong to the same organization, it is unlikely that this introduces a high amount of privacy risk, since such organizations are able to determine which sites/resources you have accessed on https://org1.test as well https://org1-cdn.test using

 Org Engagement Mitigation 
The org engagement mitigation was created to minimize compatibility risks introduced by tracking prevention by ensuring that sites owned by organizations that users sufficiently engage with continue to work as expected across the web. It makes use of site engagement to relax enforcements whenever a user has established an ongoing relationship (currently defined by a site engagement score of 4.1 or greater) with a given site. This again is best illustrated by an example:
Example:
An organization named Social Org owns the domains social.example and social-videos.example .
Users are considered to have a relationship with Social Org if they have established a site engagement score of 4.1 or greater with any one of domains owned by Social Org.
If another site, https://content-embedder.example , includes third-party content (say an embedded video from social-videos.example ) from any of the domains owned by Social Org that would normally be restricted by tracking prevention enforcements, the site is exempt from tracking prevention enforcements as long as the user's site engagement score with domains owned by Social Org is maintained above the threshold.
If a site doesn't belong to an organization, a user must establish a site engagement score of 4.1 or greater with it directly before any storage access/resource load blocks imposed by tracking prevention are relaxed.
The org engagement mitigation is currently only applied in Balanced mode so that Microsoft Edge is offering the highest possible protections for users who have opted into Strict.
 The CompatExceptions List 
Based on recent user feedback Microsoft received, Microsoft Edge maintains a small list of sites (most of which are in the Disconnect Content category) that were breaking due to tracking prevention despite having the above two mitigations in place. Sites on this list are exempt from tracking prevention enforcements. The list can be found on disk at the locations described below. Users may override entries on it using the Block option in 
edge://settings/content/cookies.
To avoid maintaining this list moving forwards, Microsoft is currently working on the Storage Access API in the open-source codebase. The Storage Access API gives site developers a way to request storage access from users directly, providing users with more transparency into how their privacy settings are affecting their browsing experience, and giving site developers controls to quickly and intuitively unblock themselves.
After the Storage Access API is implemented, Microsoft will deprecate the CompatExceptions list and reach out to the affected sites both to make them aware of the issues, and to request that they use the Storage Access API moving forward.
 Current tracking prevention behavior
The following table shows the enforcement actions and mitigations that are applied to each category of classified tracker in Microsoft Edge.
SB-Along the top are the categories of trackers as defined by Disconnect tracking protection list categories.
Along the left side are the three levels of tracking prevention in Microsoft Edge (Basic, Balanced, and Strict). The letter  indicates that storage access is blocked.
The letter  indicates that both storage access and resource loads (such as network requests) are blocked.
A hyphen () indicates that no block is applied to either storage access or resource loads.
ADVERT
IZINGANALYT
ICSCONTE NTCRYPTO MININGFINGER
PRINTIN
GSOCIALOTHERSAME
ORG
MITIGA
TIONORG
ENGAGE
MENT
MITIGA
TIONBasic---BB--EnabledN/ABalanc edS-SBBSSEnabledEnabledStrictBBSBBBBEnabledDisabledNOTE
The org engagement mitigation doesn't apply to the Cryptomining or Fingerprinting categories.
TIP
Strict mode blocks more resource loads than Balanced. The blocking of more resource loads may result in Strict mode appearing to block less tracking requests than Balanced since the trackers making the requests are never loaded.
NOTE
The Fingerprinting column in Current tracking prevention behavior refers to trackers that are on the Fingerprinting list in addition to another list. Trackers that appear on solely on the Fingerprinting list are considered non-malicious fingerprinters and aren't blocked.
 InPrivate behavior 
In Microsoft Edge 79, the default behavior was to apply Strict mode protections in InPrivate. In Microsoft Edge
edge://settings/privacy80, this behavior was replaced by a switch in  that allows users to decide whether to apply Strict mode protections or to keep their regular settings while browsing InPrivate.
 Determining whether/how a particular URL is classified
To determine whether a specific URL is classified as a known tracker:
1. Open DevTools and open the Console tool.
2. Refresh the webpage.
You may want to clear Cookies and other site data first to reset site engagement scores and ensure a completely clean slate.
Tracking Prevention blocked access to storage for <URL>3. Look for any messages that read . You can expand the messages to see the individual URLs that were blocked.
4. If you need to determine which category a specific blocked site is in, the easiest way to do this is to search for it on the Disconnect services.json list. The entries are alphabetized, so scrolling to the top of a block of site entries enables you to find the specific category for a particular site.
 Access tracking prevention lists stored on disk 
If you need to access the tracking prevention lists that are stored on disk, each may be found in one of two locations:
Component-based updates - The lists that are downloaded from the "Trust Protection Lists" component
Windows: %LOCALAPPDATA%\Microsoft\Edge <OptionalChannelName>\User Data\Trust Protection Lists macOS: ~/Library/Application Support/Microsoft Edge <OptionalChannelName>/Trust Protection Lists
Installation directory - The lists that are bundled with the Microsoft Edge Installer. If you selected a different installation directory, your exact paths may be different.
Windows: 
%PROGRAMFILES(x86)%\Microsoft\ Edge <OptionalChannelName>\Application<Version>\Trust Protection Lists
macOS: 
/Applications/Microsoft Edge.app/Contents/Frameworks/Microsoft Edge Framework.framework/Libraries/Trust Protection Lists
 Frequently Asked Questions
The following section contains answers to frequently asked questions about the tracking prevention feature in Microsoft Edge.
Is there a way to block or allow specific trackers for debugging purposes?
edge://settings/privacy/trackingPreventionExceptionsCurrently, Microsoft Edge only exposes an option to disable tracking prevention enforcements from running on a specified site. This option is accessed via the page info flyout or through the  page.
edge://settings/content/cookiesThat being said, the Block and Allow options on the  page may be used to
allow or deny specific domains access to storage such as cookies and other browser storage mechanisms. This is useful for debugging site issues that are caused by tracking prevention enforcements blocking access to storage for a specific site.
 
 Detecting Microsoft Edge from your website
 	6/21/2022 • 8 minutes to read • Edit OnlineMicrosoft Edge enables your website to retrieve user agent information. You use the user agent information to present webpages correctly for each user's browser. Browsers provide mechanisms for websites to detect browser information such as brand, version number, and host operating system.
 User-Agent Client Hints are an improved mechanism for retrieving browser information. See UserAgent Client Hints, below.
 User-Agent strings are legacy; they are outdated and have a history of causing website compatibility problems. See User-Agent strings, below.
You may want to provide different experiences to users based on their browser. For example, if you include steps about how to configure Microsoft Edge or another browser for use with your site, you may want to detect the browser and then show the appropriate content.
Mechanisms for browser detection:
MECHANISMSERVER-SIDECLIENT-SIDEUser-Agent Client Hints (recommended)Sec-CH-UA HTTPS headernavigator.userAgentData JavaScript methodUser-Agent string (legacy)User-Agent HTTPS headernavigator.userAgent JavaScript method Feature detection
Microsoft recommends detecting whether a feature is supported in your browser whenever possible, instead of detecting the browser.
If you must detect browsers, Microsoft recommends using User-Agent Client Hints, as follows, together with feature detection.
 User-Agent Client Hints
Microsoft Edge supports User-Agent Client Hints starting with version 90.
User-Agent Client Hints is a cleaner, more privacy-preserving way to access browser information such as browser name, version number, platform, and more. Soon the User-Agent string will be frozen and deprecated by various browsers. For example, the Chrome Platform Status site describes the change in Feature: Reduce User Agent string information.
Employ User-Agent Client Hints when you want to:
Determine if new browser activity is from the expected user.
Customize hints or instructions if the user is new to this site.
Don't use User-Agent Client Hints to:
Block unsupported browsers.
Restrict access to features on your site.
For more information, see the specification at W3C Community Group Draft Report: User-Agent Client Hints.
	 User 	-Agent Client Hints HTTPS header
Accept-CHWhen Microsoft Edge sends an HTTPS request to a server, it sends a set of low entropy User-Agent Client Hints headers. For more information, see Low entropy hint table. If the server requires more granular information about the browser, its response includes an  header. The value of that response header is a commaseparated list of all the Client Hints request headers the server wants from the browser, such as 
Accept-CH: Sec-CH-UA-Full-Version,Sec-CH-UA-Platform-Version. The next Microsoft Edge HTTPS request to the server will include the specified User-Agent Client Hints headers.
Sec-CH-UA, Sec-CH-UA-Mobile, and Sec-CH-UA-PlatformBy default, Microsoft Edge sends the  request headers in the following format.
Sec-CH-UA: "Chromium";v="92", "Microsoft Edge";v="92", "Placeholder;Browser Brand";v="99"
Sec-CH-UA-Mobile: ?0
Sec-CH-UA-Platform: "Windows"
The following table shows all available hints request headers with sample values.
USER-AGENT REQUEST HEADEREXAMPLE USER-AGENT RESPONSE VALUE
Sec-CH-UA
"Chromium";v="91", "Microsoft Edge";v="91",
"GREASE";v="99"
Sec-CH-UA-Mobile
?0
Sec-CH-UA-Full-Version
91.0.866.0
Sec-CH-UA-Platform
Windows
Sec-CH-UA-Platform-Version
10.0
Sec-CH-UA-Arch
x86
Sec-CH-UA-Bitness
64
Sec-CH-UA-Model
Surface ProNOTE
HTTPSUser-Agent Client Hints are only sent over secure connections using .	 User 	-Agent Client Hints JavaScript API
navigator.userAgentDataYou can access User-Agent Client Hints using JavaScript on the client side. When you call the default , it returns the following response.
{
  "brands": [
    {
      "brand": "Chromium",
      "version":"91"
    },
    {
      "brand": "Microsoft Edge",
      "version":"91"
    },
    {
      "brand": "GREASE",
      "version":"99"
    }
  ],
  "mobile": false 
}
GREASEMicrosoft Edge includes a  brand value that changes over time. It prevents sites from matching the entire brand list when attempting to detect a version of Microsoft Edge.
platformTo send a request for more detailed information such as , use the following code:
navigator.userAgentData.getHighEntropyValues(
   ["architecture", "model", "platform", "platformVersion", "uaFullVersion"])       .then(ua => { console.log(ua) });
The response has the following format:
{architecture: "x86",    model: "",    platform: "Windows",    platformVersion: "10.0",    uaFullVersion: "92.0.866.0"}
For more information, see getHighEntropyValues(). platformVersion Hint  
User-AgentWindows NT 10.0The operating system version token in the  header hasn't been updated for Windows 11, and still reports .
platformVersionTo distinguish between Windows 10 and Windows 11, request the  client hint in Microsoft
1.0.0 and 12.0.014.0.0Edge. Values between and including  represent releases of Windows 10, while values of  or later represent releases of Windows 11.
	 Combine User 	-Agent Client Hints with feature detection
Combining User-Agent Client Hints with feature detection is an effective way to deliver compatible web content. Microsoft recommends using this pattern to:
Improve code maintainability.
Reduce code fragility.
Reduce code breakage from changes to the User-Agent string.
ChromiumIf you need to check for a Chrome-like browser, Microsoft recommends detecting , which is the engine that powers Microsoft Edge.
ChromiumUse this method to verify the  brand and apply detection to all affected Chromium-based browsers:
function isChromium() {
    for (brand_version_pair of navigator.userAgentData.brands) {         if (brand_version_pair.brand == "Chromium"){             return true;
        }     }
    return false;
}Use the above method to avoid hard-coding checks for brands at specific indices. Display orders of brand names can change over time.
If you can't use feature detection, don't use a hardcoded list of known Chromium-based browsers for
Microsoft Edge and Google Chromeverification. Examples of hardcoded browser names include . Feature
detection may not be available, because a fix for a Chromium bug in later versions must be avoided and the affected browsers are difficult to detect.
 User-Agent strings
User-Agent strings are outdated and have a long history of causing website compatibility issues.
Wherever possible, Microsoft recommends minimizing use of Microsoft Edge browser detection logic based on the User-Agent string. If you have a good reason to detect the browser, the Microsoft Edge team recommends using User-Agent Client Hints as the primary detection logic. User-Agent Client Hints also reduces the complexity of browser detection code.
For legacy reference, the following information was included in User-Agent string.
User-AgentOn Windows, the  HTTP request header includes:
Mozilla/5.0 (Windows NT 10.0; Win64; x64)  AppleWebKit/537.36 (KHTML, like Gecko)  
Chrome/90.0.4430.85  
Safari/537.36  
Edg/90.0.818.46
User-AgentOn Android, the  HTTP request header includes:
Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N)  
AppleWebKit/537.36 (KHTML, like Gecko)  
Chrome/90.0.4430.85  
Mobile Safari/537.36  EdgA/90.0.818.46
navigator.userAgentThe response value from  method uses the following format:
"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4501.0 Safari/537.36 Edg/91.0.866.0"
EdgPlatform identifiers change based on the operating system, and version numbers increment over time. The format is the same as the Chromium user agent with the addition of a new  token at the end. Microsoft
Edg token to avoid compatibility issues caused by Edgechose the  string, which was previously used for the
Edglegacy Microsoft Edge browser based on EdgeHTML. The  token is also consistent with existing tokens used for iOS and Android.
 Microsoft Edge version increment change 
Edg/99Edg/100Microsoft Edge's major version number will soon be incrementing from two digits, such as , to three digits as in . Site owners should make sure their User-Agent parsing logic is robust and works as expected.
 Identifiers for Microsoft Edge on various platforms
EdgOn desktop operating systems, Microsoft Edge is commonly identified by the  token in the User-Agent string. However, a different token for Microsoft Edge is used on some device platforms, as follows:
PLATFORMIDENTIFIER TOKENDesktop (Windows/Mac/Linux)
EdgiPhone/iPad
EdgiOSAndroid (Mobile/tablet)
EdgAMicrosoft Edge Legacy is no longer supported. See the Microsoft Edge Legacy section for details.
 Map the User-Agent string to an expanded browser name
EdgMap the User-Agent string tokens to human-readable browser names to use in code. This practice is common across the web. When you map the new  token to a browser name, Microsoft recommends using a different name than the one used for the legacy Microsoft EdgeHTML browser, to avoid accidentally applying legacy workarounds that don't apply to Chromium-based browsers.
 User-Agent overrides
Sometimes, a website doesn't recognize the Microsoft Edge user agent. As a result, a set of the features of the website may not work correctly. When Microsoft is notified about the types of issues, Microsoft contacts you (a website owner) and informs you about the updated user agent.
You may need more time to update and test the user agent detection logic for your website to address the issues reported by Microsoft. To maximize compatibility for your users, the Microsoft Edge Beta and Stable channels use a list of user agent overrides. Use the user agent overrides while you update your website. The list of user agent overrides is provided by Microsoft.
The overrides specify new user agent values that Microsoft Edge sends instead of the default user agent for specific websites. To display the list of user agent overrides that are currently applied:
1. Open the Microsoft Edge Beta or Stable channel.
edge://compat/useragent2. Go to .
The Microsoft Edge Canary and Dev channels don't currently receive user agent overrides. The Microsoft Edge
Canary and Dev channels provide environments that use the default Microsoft Edge user agent. Use the Microsoft Edge Canary and Dev channels to reproduce issues on your website caused by the default Microsoft Edge user agent.
To turn off user agent overrides in the Microsoft Edge Beta or Stable channels:
1. Open a command prompt. For example, enter cmd in the Windows search text box and select the Command Prompt app.
2. Copy the following code:
--disable-domain-action-user-agent-override
3. Run the Microsoft Edge app using the copied code as follows:
{path/to/microsoft/edge.ext} --disable-domain-action-user-agent-override
 Microsoft Edge Legacy
Legacy browser considerations:
 The Microsoft Edge Legacy browser is no longer supported. See the blog post New Microsoft Edge to replace Microsoft Edge Legacy.
Microsoft Edge Legacy was only available on Windows 10.
Of all the User-Agent mechanisms described in this article, the only supported browser-specific mechanism for Microsoft Edge Legacy is User-Agent string.
Edge	 The User-Agent string for Microsoft Edge Legacy includes the 	 token.
A fully formed example of a Microsoft Edge Legacy User-Agent string: 
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102
Safari/537.36 Edge/18.19582
 See also
Detect Windows 11 using User-Agent Client Hints

 
 Detect Windows 11 using User-Agent Client Hints
 	6/21/2022 • 2 minutes to read • Edit OnlineWebsites can differentiate between users on Windows 11 and Windows 10 by using User-Agent Client Hints (UA-CH). The User-Agent Client Hints format is used by browsers to provide user agent information to websites.
Websites can use the user agent information that's sent from the browser to detect information such as:
The browser brand.
The browser version number.
The device platform on which the browser is running.
There are two approaches for sites to access user agent information:
User-Agent strings (legacy).
User-Agent Client Hints (recommended).
For details about these two approaches, see Detecting Microsoft Edge from your website.
In Microsoft Edge (and also in Chrome), sites can differentiate between users on Windows 11 and Windows 10 via User-Agent Client Hints (UA-CH). This information can be found in the following UA-CH request headers:
HEADER FIELDVALUES THAT INDICATE WINDOWS 10VALUES THAT INDICATE WINDOWS 11
Sec-CH-UA-Platform
Windows
Windows
Sec-CH-UA-Platform-Version1.0.0 and 10.0.0values between 13.0.0 and aboveUser-Agent strings won't be updated to differentiate between Windows 11 and Windows 10. We don't recommend using User-Agent strings to retrieve user agent data. Browsers that don't support User-Agent Client Hints won't be able to differentiate between Windows 11 and Windows 10.
 Browsers that support User-Agent Client Hints
The following table shows which browsers support differentiating between Windows 11 and Windows 10.
BROWSERSUPPORTS DIFFERENTIATION VIA USER-AGENT CLIENT HINTS?Microsoft Edge 94+YesChrome 95+YesOperaYesFirefoxNoInternet Explorer 11No Sample code for detecting Windows 11
The following code detects Windows 11:
navigator.userAgentData.getHighEntropyValues(["platformVersion"])
 .then(ua => {
   if (navigator.userAgentData.platform === "Windows") {
     const majorPlatformVersion = parseInt(ua.platformVersion.split('.')[0]);      if (majorPlatformVersion >= 13) {        console.log("Windows 11 or later");
      }
      else if (majorPlatformVersion > 0) {         console.log("Windows 10");
      }       else {
        console.log("Before Windows 10");       }    }    else {
     console.log("Not running on Windows");    }
 });Critical-CH Optimizing detection performance with 
Accept-CHSec-CH-UAuser agent: <UA string>Currently, website servers must send the  response header to the browser client to request higher entropy fields not sent in the  header by default. The following diagram shows the browser sending request headers to the server including  and receiving response headers including 
Accept-CH: sec-ch-ua-platform.

Accept-CHsec-ch-ua-platformDuring this initial request, the client will record the  preferences and on subsequent requests include  by default.
Critical-CH header can be used in addition to the Accept-CHTo further optimize this flow, the new  header to
user agent: <UA string>Accept-CH: sec-ch-ua-platform and Critical-CH: sec-ch-ua-platformreissue the request header immediately, without the need for a page reload. The following diagram shows the browser sending request headers to the server including  and receiving response headers including . The browser then sends request headers to the server immediately.

Critical-CHStarting with Microsoft Edge version 96, you can use the new  header to receive desired high entropy headers with optimized performance.
Critical-CH and Accept-CHCritical-CHRemember that  preferences persist until session cookies are cleared, or until a user clears site data or cookies for a given origin. For more information about , refer to Client Hint
Reliability.
 Detecting specific Windows versions
platformVersionTo detect specific versions of Windows, use the following values for  in User-Agent Client Hints:
VERSION
PLATFORMVERSIONWin7/8/8.10Win10 15071Win10 15112Win10 16073Win10 17034Win10 17095Win10 18036Win10 18097Win10 19038Win10 19098
VERSION
PLATFORMVERSIONWin10 200410Win10 20H210Win10 21H110Win10 21H210Win1113+

 
 Customize the password reveal button
 	6/21/2022 • 2 minutes to read • Edit OnlinepasswordAlt+F8The  input type in Microsoft Edge includes a password reveal button. To make sure that the password is entered correctly, a user can click the password reveal button or press , to show the characters in the password field. You can remove the password reveal control, or customize the control styling.
By default, the password reveal button is turned off, so that in the password field, dots replace the characters entered by the user. The password reveal button appears to the right of the password field, as an eye-shaped icon:

When the user clicks the password reveal button to turn it on, the password text is revealed, and the eye icon changes to have a slash over it:

inputtype set to "password"By default, the password reveal button is inserted into the Shadow DOM of all HTML  elements that have the . Starting with Microsoft Edge Version 87, users or enterprises can disable this feature globally. Web designers and developers should expect most Microsoft Edge users to have the default experience.
 Remove the password reveal control
::-ms-revealAs the webpage author, you can completely remove the password reveal button, by targeting the  pseudo-element:
::-ms-reveal {     display: none; }
However, you should consider taking advantage of the password reveal button. The native password reveal button has important security measures built into the behavior.
 Customize the control style
Instead of fully removing the control, you can instead modify the styling of the password reveal button to better match the visual language of the website. The following snippet provides an example of such styling:
::-ms-reveal {
    border: 1px solid transparent;     border-radius: 50%;
    box-shadow: 0 0 3px currentColor;
}
Keep the following things in mind when you style the password reveal button:
background-color property instead of the background The eye icon implements as a background image. To add a background color to the password reveal button, use the CSS  shorthand property.
 You can adjust the size and scale of the password reveal button.
NOTE
The browser hides any overflow outside of the bounds of the password input control.
 Currently, no state selectors are available to style the toggled state of the password reveal button.
 Visibility of the control
The password reveal button is unavailable until the user enters text into the password field. To help keep the user's password entry secure, the browser suppresses the button in the following scenarios:
If focus moves away from the password field, the browser removes the password reveal button.
If scripts modify the password field, the browser removes the password reveal button.
If the password reveal button is removed, the user must delete the contents of the password field to make the password reveal button appear again. This behavior prevents someone from making a minor adjustment to display the password, should the user step away from an unlocked device.
The password reveal button is unavailable if the password field is autofilled by using the password manager.

 
 Microsoft Edge IDE integration
 	6/21/2022 • 2 minutes to read • Edit OnlineVarious features of Microsoft tools provide integration of development using Microsoft Edge, Visual Studio Code, and Visual Studio, to develop your products, webpages, and web apps that use and work with full integration in Microsoft Edge.
 Visual Studio Code for web development
Visual Studio Code includes built-in support for JavaScript, TypeScript, and Node.js, so it's a great tool for web developers. Visual Studio Code is a lightweight but powerful source code editor that's available for Windows, Linux, and macOS.
With the Microsoft Edge DevTools extension for Visual Studio Code, you can use the Elements tool of the Microsoft Edge browser within Visual Studio Code. Use the Elements tool to:
Attach to an instance or launch an instance of Microsoft Edge.
Display the runtime HTML structure.
Update the layout. Fix styling issues.
See Visual Studio Code for web development.
 Visual Studio for web development
Microsoft Visual Studio is an integrated development environment (IDE). Use it to edit, debug, build, and publish your web apps. It's a feature-rich program that can be used for many aspects of your web development.
In addition to the standard editor and debugger that most IDEs provide, Visual Studio includes features to ease your development process, including:
Compilers.
Code completion tools.
Graphical designers.
And many more features.
See Visual Studio for web development.
 
 Visual Studio Code for web development
 	6/21/2022 • 2 minutes to read • Edit OnlineVisual Studio Code includes built-in support for JavaScript, TypeScript, and Node.js, so it's a great tool for web developers. Visual Studio Code is a lightweight but powerful source code editor that's available for Windows, Linux, and macOS.
 Microsoft Edge DevTools extension for Visual Studio Code
The Microsoft Edge DevTools extension for Visual Studio Code lets you use the Elements tool and Network tool of the Microsoft Edge browser from within Visual Studio Code.
Without leaving Visual Studio Code, use Microsoft Edge DevTools to connect to an instance of Microsoft Edge and then:
View the runtime HTML structure.
Change the layout.
Change styles (CSS).
Read console messages. View network requests.
See Microsoft Edge DevTools extension for Visual Studio Code.
 Open source files in Visual Studio Code
The Open source files in Visual Studio Code experiment allows you to use Microsoft Edge DevTools, but then edit your files in Visual Studio Code instead of in the code editor of the DevTools Sources tool.
When you use this experiment, if you use Visual Studio Code and you use DevTools to change your CSS rules, you no longer have to use the code editor in the Sources tool of DevTools. You can simply use the code editor in Visual Studio Code. When you turn on this experiment, local files will get a different treatment.
See Opening source files in Visual Studio Code.
 Debug Microsoft Edge in Visual Studio Code
Visual Studio Code includes a built-in debugger for Microsoft Edge, which can launch the browser or attach to an already running browser.
This built-in debugger lets you debug your front-end JavaScript code line-by-line and see console.log() statements directly from Visual Studio Code.
See Debug Microsoft Edge in Visual Studio Code.
 The webhint extension for Visual Studio Code
Use webhint, a customizable linting tool, to improve the functionality of your site, including:
Accessibility.
Performance.
Cross-browser compatibility.
PWA compatibility.
 Security.
webhint checks your code for best practices and common errors. Identify and fix problems in your files, including HTML, CSS, JavaScript, and TypeScript. Hints appear as wavy underlines in the text editor, and are summarized in the Problems pane.
Note: As of April 2022, the webhint extension for Visual Studio Code is no longer being maintained. See Microsoft Edge DevTools extension for Visual Studio Code.
 See also
Download Visual Studio Code
Getting Started - Documentation for Visual Studio Code.

 
 
Microsoft Edge DevTools extension for Visual Studio
Code
 	6/21/2022 • 12 minutes to read • Edit OnlineThe Microsoft Edge DevTools extension for Visual Studio Code lets you use the Elements tool and Network tool of the Microsoft Edge browser from within Visual Studio Code.
Without leaving Visual Studio Code, use Microsoft Edge DevTools to connect to an instance of Microsoft Edge and then:
View the runtime HTML structure.
Change the layout.
Change styles (CSS).
Read console messages. View network requests.

The Microsoft Edge DevTools extension requires Microsoft Edge. This extension is supported in Microsoft Edge versions 80.0.361.48 and later.
In Visual Studio Code, there are multiple ways to open the Microsoft Edge DevTools extension:
From the Activity Bar.
From the JavaScript Debugger.
In Visual Studio Code, this extension is referred to by several variations:
Microsoft Edge Developer Tools for Visual Studio Code - the full name as shown in the detailed information in the Extensions Marketplace.
Microsoft Edge Tools for VS Code - the extension as listed when searching in the Extensions Marketplace.
Microsoft Edge Tools - the icon tooltip in the Activity Bar. Edge DevTools - the tab name.
This article uses the name "the Microsoft Edge DevTools extension", except for UI text.
The Visual Studio Marketplace provides more information about Microsoft Edge Tools for Visual Studio Code.
 Installing the Microsoft Edge DevTools extension
To install the Microsoft Edge DevTools extension from within Visual Studio Code:
Ctrl+Shift+X1. In Visual Studio Code, navigate to Extensions. To do this, you can press  on
Command+Shift+XWindows/Linux or  on macOS.
2. Search the Marketplace for the extension Microsoft Edge Tools for VS Code, select the extension, and then select Install.

Or, you can download the Microsoft Edge DevTools extension from Visual Studio Marketplace.
 Updating the extension 
Microsoft Visual Studio Code updates extensions automatically. To update the extension manually, see Update an extension manually.
 Opening Microsoft Edge DevTools within Visual Studio Code
To open the tools panel, in the Activity Bar, select the Microsoft Edge Tools icon.
launch.jsonThe Microsoft Edge DevTools extension lets you easily launch an instance of Edge or generate a  file to automate the debugging workflow:

Selecting Launch Instance opens a browser window, and also opens the Edge DevTools tab in Visual Studio Code:

Use the Microsoft Edge DevTools extension in Visual Studio Code to inspect an HTML Element in Microsoft Edge. For example, click the Success! heading in the browser, and the Elements tool opens with the DOM tree expanded:

 Modes for using Microsoft Edge DevTools in Visual Studio Code
You can use this extension in one of three modes:
Launch Microsoft Edge in a new window, and go to your web application.
Attach to a running instance of Microsoft Edge.
Open a new instance of Microsoft Edge inside Visual Studio Code.
launch.jsonEach mode requires you to serve your web application from a local web server, which is started from either a Visual Studio Code task or from the command line. Use the URL parameter inside the  file to tell Visual Studio Code which URL to open.
 Opening a new browser instance
To open a browser instance from Visual Studio Code:
1. On the Activity Bar, select Microsoft Edge Tools.
2. On the Microsoft Edge Tools: Targets panel, select Launch Instance. Microsoft Edge opens, displaying a default page with guidance for more information. Also, the Edge DevTools tab and panel is displayed in Visual Studio Code, containing the Welcome, Elements, and Network tools:

3. In the Microsoft Edge address bar, go to the URL of the project that you want to debug.
 Changing the default page to your project website
To debug your project, you might want to change the default page that opens in Microsoft Edge in Visual Studio Code. To change the default page to your project's website:
1. In Visual Studio Code, select File > New Window. Notice that no folder is open.
2. On the Activity Bar, select Microsoft Edge Tools.
3. In the Microsoft Edge Tools: Targets panel, select the open a folder link.
4. Select your project folder with the new default page to display when you begin debugging in Visual Studio Code.
The first time you open a folder, you must confirm that you trust the authors of files in this folder. You can also select the checkbox Trust the authors of all files in the parent folder:

The first time you complete this process, you must also select Microsoft Edge Tools again.
The Microsoft Edge Tools: Targets panel now displays two buttons: Launch Instance and Generate launch.json:

launch.json5. Select Generate launch.json to create a  in your project.
launch.json6. In , add the URL of your project. If you leave URL empty, the default page is displayed.
launch.json7. Save .
8. Select Launch Project to verify that Microsoft Edge opens and displays the URL you entered. Also, DevTools opens in Visual Studio Code.
 Changing the extension settings
You can customize DevTools in the Visual Studio Code extension.
To customize the settings:
1. In Visual Studio Code, on the Activity Bar, select Microsoft Edge Tools.
2. In Microsoft Edge Tools > Targets, select More Actions (...) to the right of the word TARGETS, and then select Open Settings.
If you are using a mouse, to access More Actions (...), select the Targets pane or hover over it:

 Reloading the extension after changing settings 
Some settings have a note that reads (reload required after changing). For such a setting to take effect:
X1. Close the browser opened by the extension, or in the Microsoft Edge Tools > Targets pane, select Close instance (). This action automatically closes the Edge DevTools tab as well.
2. In the Microsoft Edge Tools > Targets pane, select the Launch Instance button. Microsoft Edge opens, and the Edge DevTools tab is displayed.
 Viewing the changelog for changes made to the extension
You can view the changes that have been made to the extension.
To view the changelog:
1. In Visual Studio Code, on the Activity Bar, select Microsoft Edge Tools.
2. In Microsoft Edge Tools > Targets, select More Actions (...) to the right of the word TARGETS, and then select View Changelog:

vscode-edge-devtoolsOr, in the browser, go to the changelog file in the  repo.
 Changing to headless mode
By default, the extension launches Microsoft Edge in a new window, which displays another browser icon on the task bar.
To display the browser inside the code editor, or to hide the browser if it is already displayed:
1. Click the Toggle screencast button:

To use only the screencast browser inside Visual Studio Code:
1. Select Settings > Headless mode:

 Opening source files from the Elements tool
One of the features of the Elements tool is that it displays the source file that applied styles and event handlers to a selected node in the DOM tree. Source files appear in the form of links to a URL. Selecting a link opens that file in the Visual Studio Code editor:

 Setting up your project to show live changes in the extension
my-projectmy-projectBy default, the Microsoft Edge DevTools extension doesn't track live changes to the code as you write. If you want the browser to automatically refresh when you change a file, set up a live reload environment, as follows. This example shows a folder of production files on your hard drive called . In the following steps, change  to your folder name, if it is different.
reloadInstall Node.js and the  npm package, as follows:
1. Download and install Node.js.
npm install reload -g2. To install the reload npm package, open a command prompt and run  to install the package globally.
Next, attach the extension to your live reloading project:
my-project folder in your terminal window and run reload3. Navigate to the  to start the local server.
my-project4. In Visual Studio Code, open the  folder.
5. Go to the extension and launch a Microsoft Edge browser instance.
localhost:8080/{file name you want to open}6. In Microsoft Edge, go to .
All changes that are saved in this folder now trigger a browser refresh.
 Syncing live changes from the Styles tool by using CSS Mirror Editing
The Styles tool in Microsoft Edge DevTools is excellent for debugging and tweaking CSS property styles. One problem is that although these changes show up live in the browser, they aren't reflected in your source files. This means that at the end of your CSS debugging session, you need to copy and paste what you changed back into your source files.
CSS Mirror Editing is a feature of the Microsoft Edge DevTools extension that works around that problem. When you turn on Mirror Editing, any change made in the Styles tool of DevTools also changes the file in your workspace.
index.htmlIn the following example, we have  currently open in Visual Studio Code, and the Microsoft Edge
.searchbarDevTools extension is open. When we select the flexbox icon in the  CSS selector and change the 
flex-direction to column, we not only see the change in the browser and in DevTools, but Visual Studio Code
flex-direction: columnalso automatically navigates to the correct style sheet file and the appropriate line number, and inserts the  CSS code:

Changing the CSS setting created a new line of code in the correct CSS source file:

You can edit any selector or create new ones in the Styles tool and all changes will get mirrored in the right CSS source file. The extension only changes the file, it doesn't automatically save the changes back to your hard drive. This is a security measure to make sure you don't accidentally overwrite any of your code.
mirrorYou can enable and disable CSS Mirror Editing by checking and unchecking the box in the Styles panel of the Elements tool, or by using the Command Menu and searching for :

Using the command menu to turn CSS Mirror Editing on or off:

We're continuing to improve this feature and have set up a tracking issue on GitHub, CSS Mirror Editing, where we welcome your feedback.
 Device and state emulation
In the Edge DevTools: Browser preview tab, the emulation toolbar on the bottom enables you to simulate different environments:

In the Emulate devices dropdown menu, you can select from a number of different devices. When you select a device, the viewport resizes to the correct measurements and simulates the touch interface. For example, an iPhone:

Click the Rotate button () to rotate the viewport.
To emulate CSS media queries, click the Emulate CSS media features () button. This button enables you to test how your product looks in print mode. You can switch between dark and light mode, and emulate forced colors:
) button to try the experience of the current web project with
different visual deficiencies. This button lets you test your product in a blurred mode or in different color deficiencies:

 Inline and live issue analysis
Issues in your source code are highlighted with wavy underline. You can inspect the issue and get detailed information about what the problem is, how to fix it, and where to find more information. To inspect the issue, select the code that has the wavy underline:

To see all the issues in the file, select View Problem:

The Problems tab in the lower panel lists all the issues that are found in the current project:

Issues are evaluated live while you edit your code. As you type, you get feedback about any issues that are found, and how to fix them:

Browser debugging with Microsoft Edge DevTools integration in Visual Studio Code
JavaScript debugging is built in to Visual Studio Code. You can debug in Chrome, Microsoft Edge, or Node.js without installing any other extensions. If you debug using Microsoft Edge, you can start Microsoft Edge DevTools from the JavaScript debugger.

2. Select Edge. On the debug toolbar, notice the Inspect button:

3. Select Inspect to open Microsoft Edge DevTools inside Visual Studio Code.
The first time you select Inspect, the editor prompts you to install the extension, Microsoft Edge Developer Tools for Visual Studio Code.
After the Microsoft Edge DevTools extension is installed, when you select Inspect, Microsoft Edge DevTools opens inside of Visual Studio Code:

Now you can inspect the DOM, change CSS, and see network requests of your project running in the browser, without leaving Visual Studio Code.
You can also use the Debug Console in the editor to interact with the document in the browser. You have full access to the window object and can use the Console Utilities API:

 Automatically attaching to Microsoft Edge and launching DevTools in Visual Studio Code 
launch.json1. If you want to automatically attach to Microsoft Edge and launch Microsoft Edge DevTools in Visual Studio Code, do the steps above, and then create a  file as shown below.
launch.json file, specify pwa-msedgeSelect Microsoft Edge as the debug type. In your  as the type:
{
   "version": "0.2.0",    "configurations": [
      {
            "type": "pwa-msedge",
            "request": "launch",
            "name": "Launch Edge",
            "url": "http://localhost:8080",             "webRoot": "${workspaceFolder}"
      }
   ]
}http://localhost:8080 in the above code and make sure the variable {workspaceFolder}2. Change resolves.
3. Select the Inspect icon. If you haven't installed the Microsoft Edge DevTools extension for Visual Studio Code, the Extensions tab opens and automatically displays the extension to install.
 See also 
 Launch configurations in the Debugging article for Visual Studio Code.
 Console integration
The Console tool is available inside the extension and you can do everything you are used to when using DevTools inside the browser.

windowYou can see your log messages, access the  object and use the DOM interaction convenience methods. You can also filter the Console and set live expressions.
You can also use the Console alongside the Elements tool if you open it in the lower panel:

If you launch the extension from the Run and Debug workflow, the Debug Console of Visual Studio Code gives you most of the functions of the DevTools Console inside of Visual Studio Code, but no filtering options and a more basic results display:

Turning on this preview feature:
As of April 20, 2022, to make the Console tool visible, target the Canary version of Microsoft Edge. To do this:
1. In Visual Studio Code, in the Activity Bar on the left, click the Microsoft Edge Tools button. The MICROSOFT EDGE TOOLS pane opens.
2. Hover to the right of TARGETS, and then click Open Settings (...).
3. In the Vscode-edge-devtools: Browser Flavor dropdown list, select Canary. At a later date, you'll be able to select any version.
4. Click x to close Settings.
 Getting in touch with the Microsoft Edge DevTools Extension team
vscode-edge-devtoolsSend your feedback by filing an issue in the  repo.
Your contributions are welcome, to help make the Microsoft Edge DevTools extension better. Find everything you need to get started in the vscode-edge-devtools repo.
 See also
 vscode-edge-devtools repo - source code for the Microsoft Edge Developer Tools extension for Visual Studio Code, at GitHub.
 
 Opening source files in Visual Studio Code
 	6/21/2022 • 2 minutes to read • Edit OnlineThe Open source files in Visual Studio Code experiment allows you to use Microsoft Edge DevTools, but then edit your files in Visual Studio Code instead of in the code editor of the DevTools Sources tool.
When you use this experiment, if you use Visual Studio Code and you use DevTools to change your CSS rules, you no longer have to use the code editor in the Sources tool of DevTools. You can simply use the code editor in Visual Studio Code. When you turn on this experiment, local files will get a different treatment.
 Setting up editing local files in Visual Studio Code
First, select DevTools > Settings > Experiments > Open source files in Visual Studio Code, and then restart DevTools.
http://localhost or http://127.0.0.1With this experiment enabled, suppose that in Microsoft Edge, you go to a local server (such as ), or open a local file.

xDon't show again button. You can get more information by selecting the Learn moreWhen you open DevTools, you are prompted to identify your root folder. You can opt out by selecting Close () or selecting the  link.

If you select the Set root folder button, the operating system prompts you to navigate to the folder and select
it.

After you select a root folder, you need to grant DevTools full access to the folder. Above the toolbar, a prompt with Allow or Deny buttons asks you whether to grant permission to DevTools to access the folder.

linkedbase.cssAfter you grant permission, the folder you select is added as a Workspace in DevTools, in the Filesystem tab of the Sources tool. This means that any file you edit in DevTools now opens in Microsoft Visual Studio Code instead of in the Sources tool. As an indicator, we show a  icon next to the file name. In this example, we'll select the  link in the Styles tool.

DevTools opens an instance of Visual Studio Code and shows all the files in the root folder. DevTools also opens the file you've selected, scrolled to the correct line of the CSS selector.

background: greenbase.cssAny changes that you make to the file in DevTools will now be synced to Visual Studio Code. For example, if you add a  rule to the styles of the body, the same CSS rule will automatically be added to the  file in the code editor of Visual Studio Code.

 Changing the workspace settings
Shift + ?If you go to the DevTools Settings page by selecting Settings (the gear icon or ), you can change the behavior of the experiment. When you select the Workspace page in Settings, you have a few options.

The Settings > Workspace page lists your workspaces, along with configuration options.
 To set whether to open source files in Visual Studio Code, select the Open source files in Visual Studio Code checkbox.
To automatically save DevTools changes to disk, select the Save DevTools changes to disk checkbox.
To automatically exclude folders from a workspace folder, use the Folder exclude pattern text box.
To exclude a folder from a specific workspace, next to Excluded folders, select the Add button.
To add an additional workspace, select the Add folder button.
 
 Debug Microsoft Edge in Visual Studio Code
 	6/21/2022 • 2 minutes to read • Edit OnlineVisual Studio Code includes a built-in debugger for Microsoft Edge, which can launch the browser or attach to an already running browser.
This built-in debugger lets you debug your front-end JavaScript code line-by-line and see console.log() statements directly from Visual Studio Code.
For more information, see Browser debugging in VS Code.
Send your feedback by filing an issue in the vscode-js-debug repository.
You can also inspect HTML and CSS using DevTools from within Visual Studio Code. To learn more, see Browser debugging with Microsoft Edge Devtools integration in Visual Studio Code.

 
 Visual Studio for web development
 	6/21/2022 • 4 minutes to read • Edit OnlineMicrosoft Visual Studio is an integrated development environment (IDE). Use it to edit, debug, build, and publish your web apps. Visual Studio is a feature-rich program that can be used for many aspects of your web development.
In addition to the standard editor and debugger that most IDEs provide, Visual Studio includes features to ease your development process, including:
Compilers.
Code completion tools.
Graphical designers.
And many more features.
If you aren't already using Visual Studio, go to Download Visual Studio to download it.
Currently, Visual Studio 2019 supports debugging JavaScript in Microsoft Edge for your ASP.NET Framework and ASP.NET Core apps. To use Visual Studio to debug Microsoft Edge, do the following steps.
 Launch Microsoft Edge
Follow the steps in this section to use Visual Studio to do the following:
Build your ASP.NET and ASP.NET Core app.
Start a web server.
Launch Microsoft Edge.
Connect the Visual Studio debugger with a single button.
The simplified workflow allows you to debug JavaScript that runs in Microsoft Edge directly from your IDE.
 Create a new ASP.NET Core web app 
First, create a new ASP.NET Core web app, as follows:
1. Open Visual Studio 2019 and select Create a new project.
2. In the search box on the next screen, enter react.
3. Select ASP.NET Core with React.js from the list of templates and then Next.

This React.js template specifies how to integrate React.js with an ASP.NET Core app.
You've now created a project for an ASP.NET Core web app.
 Launch Microsoft Edge from Visual Studio 
Next, run and debug the ASP.NET Core web app project in Visual Studio, as follows:
ClientApp/src/components/Counter.js1. Open .
2. Select the dropdown list next to the green Play button and IIS Express.

3. Select Script Debugging > Enabled.

4. In the same dropdown list, select Web Browser > the preview channel of Microsoft Edge that you want Visual Studio to launch, such as Microsoft Edge Canary, Dev, or Beta. If you aren't already using one of the Microsoft Edge preview channels, go to Download Microsoft Edge Insider Channels to download one.

5. Select the green Play button. Visual Studio builds your app, starts the web server, launches Microsoft
https://localhost:44362/ or whatever port is specified in launchSettings.jsonEdge, and navigates to .

Continue with the steps below.
 Debug JavaScript code that's running in Microsoft Edge 
1. Switch back to Visual Studio to set a breakpoint.
Counter.js2. In , set a breakpoint on Line 13 by selecting the gutter next to the line.

3. Switch back to the instance of Microsoft Edge that Visual Studio launched.
4. Select Counter in the navigation menu at the top of the webpage and then select Increment.

Counter.js5. The JavaScript debugger in Visual Studio hits the breakpoint you set in . Visual Studio now pauses the runtime of the JavaScript running in Microsoft Edge and you can step through the script lineby-line.

In the above approach, you launched Microsoft Edge from Visual Studio. Alternatively, you can an attach the Visual Studio debugger to an instance of Microsoft Edge that's already running, as described below.
The example was just a minor demonstration of the functionality available in Visual Studio. For more information about the functionality in Visual Studio 2019, see the Visual Studio documentation.
 Attach Visual Studio debugger to a running instance of Microsoft Edge
To attach the Visual Studio debugger to an instance of Microsoft Edge that's already running:
1. Make sure that there are no running instances of Microsoft Edge.
2. From your command line, run the following command:
start msedge --remote-debugging-port=9222
Ctrl+Alt+P3. In Visual Studio, select Debug > Attach to Process or .

4. In the Attach to Process dialog, set Connection type to Chrome devtools protocol websocket (no authentication).
http://localhost:9222/ and select Enter5. In the Connecting target text box, type .
6. Review the list of open tabs you have in Microsoft Edge listed out in the Available processes section.

7. Select the tab you want to debug from the list, and then select Attach.
8. In the Select Code Type dialog, select JavaScript (Microsoft Edge - Chromium) and select OK.
console.log()The Visual Studio debugger is now attached to Microsoft Edge. You can pause the running of JavaScript, set breakpoints, and view  statements directly in the Debug Output window in Visual Studio.
 Edge DevTools extension for Visual Studio
Debug your ASP.NET projects in Visual Studio with the Edge Developer Tools. You can embed the Microsoft Edge Developer Tools in Microsoft Visual Studio to debug your ASP.NET projects live. Download the Microsoft Edge Developer Tools for Visual Studio.
To use the extension:
1. Make sure Visual Studio 2022 and the ASP.NET workload are installed.
2. Set up Web Live Preview as the default Web Forms Designer, as described in the above page.
3. Open an ASP.NET project.
4. Open a webpage of the project in the Design window.
5. In the upper left of the Design window, click the Open Edge DevTools () button:

Edge DevTools for Visual Studio opens, with the Elements tool selected:

The Network tool is also open by default:

The Inspect tool ( ) and Toggle screencast ( ) are available, and the More Tools ( ) menu offers the Issues, Network conditions, and Network request blocking tools:

See also:
 Edge Developer Tools for Visual Studio, at Visual Studio DevBlogs.
 Getting in touch with the Microsoft Visual Studio team
The Microsoft Visual Studio and Microsoft Edge teams wants to learn more about how you work with JavaScript in Visual Studio. To send your feedback, select the Send Feedback icon in Visual Studio, or tweet @VisualStudio and @EdgeDevTools.

 
 Accessibility in Microsoft Edge
 	6/21/2022 • 2 minutes to read • Edit OnlineDevelopment of your webpages, web apps, and web-enabled products is robustly supported through the extensive Accessibility features in Microsoft Edge and its tooling ecosystem.
"The impact of disability is radically changed on the Web because the Web removes barriers to communication and interaction that many people face in the physical world." - W3C Standards for Web Design and Applications: Accessibility
The World Health Organization defines disability as "a mismatch in interaction between the features of a person's body and the features of the environment in which they live". Disabilities range from situational disabilities, like limited mobility while holding a baby or bright sunlight on a phone, to other physical, auditory, visual, or age-related impairments.
Designing websites and other technologies for inclusion creates an experience enjoyable by every person. Inclusive design and web accessibility empowers and assists everyone to use the web.
The articles in this Accessibility section present some best practices, code samples, and further resources for you to learn more about designing, building, and testing accessible websites in Microsoft Edge.
 Microsoft Edge DevTools
Microsoft Edge DevTools is built into the Microsoft Edge browser, and includes many accessibility-testing features, to test aspects of webpages including:
Alt-text for images, and screen reader support.
Keyboard support.
Text contrast.
Usability with vision deficiencies.
Usability when the browser is narrow.
See:
 Accessibility-testing features - a list of accessibility aspects to test and the corresponding DevTools features.
 Overview of accessibility testing using DevTools - a walkthrough of testing a demo page for accessibility by using the DevTools features.
 Microsoft UI Automation API
In Microsoft Edge, we introduced the UI Automation API (UIA API). This change to UI automation was a major investment in browser accessibility. The UI Automation API lays the foundation for a more inclusive web experience for users who depend on assistive technology in Windows 10 or later.
The Microsoft UI Automation API is an accessibility framework that enables Windows applications to provide and consume programmatic information about user interfaces (UIs). It provides programmatic access to most UI elements on the desktop. It enables assistive technology products, such as screen readers, to provide information about the UI to end users and to manipulate the UI by means other than standard input. UI Automation also allows automated test scripts to interact with the UI.
The Microsoft Windows UI Automation blog has posts about the Windows Automation API.
The accessibility system in Microsoft Edge inherently supports modern web standards including ARIA, HTML5, and CSS3. The following diagram of the simplified browser pipeline follows webpage content into an accessible presentation layer:

The Microsoft Edge team works with the W3C and other browser vendors on an ongoing basis to ensure that new web platform features have sufficient built-in accessibility.
For information on which new HTML features are accessibly supported by Microsoft Edge, see HTML5Accessibility.
 See also
Microsoft Edge:
Designing accessible websites
Resources about building accessible websites Resources for accessibility testing
W3C articles:
W3C Web Accessibility Initiative (WAI) Getting Started with Web Accessibility
Designing for Inclusion
Tutorials and presentations
 
 Designing accessible websites
 	6/21/2022 • 2 minutes to read • Edit OnlineCreating an inclusive design makes technology usable by all people no matter their age, education, geographic location, language, or disability. People using technology and browsing the web have a wide range of abilities and preferences. As you design your website, keep in mind the following key accessibility scenarios.
 Screen readers
Users who are blind or who have low vision rely on screen readers to interpret and interact with the UI of your app. Interpreting involves reading the UI element names, roles, and values. Interacting with the UI involves moving the focus from one element to another and invoking functionality such as clicking a UI element.
 Keyboard accessibility
Many accessibility users rely on the keyboard to navigate and operate the UI by:
TabEnterMoving focus among elements by using the  key.
Navigating in container elements such as lists, grids, and tree views by using the arrow keys.
Invoking actions by pressing the  key or Spacebar.
Using shortcut keys to efficiently access other app functionality.
 Accessible visual experience
Users who have low vision need a sufficient text contrast ratio for text content, and a good visual experience with high contrast themes overall. Users who are color blind need information to be conveyed in ways other than through color.
Many common accessibility issues on the web can be solved through good coding practice. The Web Content Accessibility Guidelines (WCAG) 2.0 documentation provides techniques and best practices to help you design more accessible dynamic web applications. For more information, go to Resources about building accessible websites.
 Resources
 Designing for Inclusion - Designing for Inclusion by the W3C Web Accessibility Initiative provides resources to help you better understand users with disabilities and how to design your website with them in mind.
 Designing inclusive software - Designing inclusive software discusses Microsoft design principles and practices for the Universal Windows Platform (UWP).
 How People with Disabilities Use the Web - This resource by the W3C introduces how people with disabilities, including people with age-related impairments, use the Web.
 Inclusive Design Toolkit - Microsoft developed the Inclusive Design Toolkit to show how human diversity can create better design constraints and how to connect seemingly niche solutions to broader markets.
 
 Resources about building accessible websites
 	6/21/2022 • 9 minutes to read • Edit OnlineThe web is filled with dynamic and complex websites, applications, and user interfaces built using a combination of HTML, CSS, and JavaScript. However, when designed and built without accessibility in mind, these complex websites are difficult to use by people who rely on assistive technologies to browse the web.
Building websites that are accessible to people with disabilities requires semantic information about the user interface. Accessible websites allow assistive technologies, like screen readers, to convey the necessary information to help people with a range of abilities use the website.
Visit HTML5Accessibility for information on which new HTML5 features are accessibly supported by Microsoft Edge.
 How accessibility works
Assistive technologies add capabilities that computers don't usually have. For example, a user who has low vision might use their keyboard in combination with assistive technology such as a screen reader, rather than directly using the browser with the mouse and screen.
For applications on Microsoft platforms and on the web, the assistive technology interacts with any combination of:
Microsoft UI Automation.
An application-specific object model such as the Document Object Model (DOM) in Microsoft Edge.
For web developers, certain HTML elements are mapped to UI Automation objects, so in selecting those HTML elements, the developer can use the accessibility properties and events built in to those elements. While developing your website, you usually only need to make sure that the API is correctly written to, or that the appropriate element is specified, for the application to be accessible.
Check out ARIA and UI automation in Microsoft Edge for more information. Accessible Universal Windows Platform (UWP) apps are explained at Accessibility in Windows Dev Center.
Many common accessibility issues with dynamic content can be addressed by good coding practice. The WCAG 2.0 documentation includes many techniques and best practices to help you create more accessible dynamic web applications. Even when coded properly, however, dynamic content isn't necessarily accessible. Accessible Rich Internet Applications (ARIA) helps overcome this issue.
For more information on web accessibility, check out the Introduction to Web Accessibility by the Web Accessibility Initiative (WAI).
 ARIA
The Accessible Rich Internet Applications (ARIA) specification by the W3C's Web Accessibility Initiative defines as a syntax for making dynamic web content and custom user interfaces accessible to all people. ARIA extends HTML by using additional attributes (roles, properties, and states) that are designed to convey custom semantics. These attributes are used by browsers to pass along the controls' state and role to the accessibility API.
 Roles, properties, and states 
ARIA roles are set on elements using the role attribute to give assistive technologies and accessibility APIs
<li> element is assigned role="menuitem"information about the element. For example, the below  to signify that it's an item in a menu.
<li role="menuitem">Home</li>
ARIA states and properties are aria-prefixed attributes that provide specific information about an object to help form the definition of the nature of roles. Properties are attributes that are essential to the nature of an object, like aria-readonly and aria-haspopup. Changing a property affects the meaning of the object.
aria-haspopup="true" is set on a <li>In the example below, the property  menu item to signify that it has a popup:
<li role="menuitem" aria-haspopup="true">Open</li>
aria-checked="false"States don't change the nature of the object, but represent information that's associated with the object, or user interaction with the object, like aria-hidden or aria-checked. For example, the state  in the example below represents that the checkbox is cleared, rather than selected:
<div role="checkbox" aria-checked="false">Accept</div>
To see a full list of roles, properties, and states, go to The Roles Model at W3C.
 Assistive technology compatibility testing
Verifying that the website you are building works with real assistive technologies is the best way to ensure that you provide a good experience for users with disabilities. Since many assistive technologies make use of the keyboard, testing the keyboard accessibility of your website is a good place to start.
Keyboard compatibility testing validates that users have access to all interactive controls without requiring a mouse. Microsoft Accessibility Insights for Web is a browser extension for Microsoft Edge and Chrome that guides you and reveals several common issues.
Once you are confident that your website works well with a keyboard, try it with other assistive technologies, such as screen readers. This testing can uncover issues in the following:
Your HTML, ARIA, and CSS.
The level of support of an assistive technology for a feature or technique.
Different browsers might map elements to the platform accessibility APIs differently than Microsoft Edge maps them. While building your interface, it's important to consider each difference.
WebAIM conducts surveys with screen reader and low vision users that help you decide which assistive technologies and browsers to test.
 Learning how to test 
Assistive technologies are sophisticated tools. Don't assume that you're able to immediately start testing with an assistive technology without first learning about how it works. Learning to test with a screen reader has an especially steep learning curve. A novice user of screen readers might think that a screen reader has a bug, while the issue might actually be an error in using the screen reader.
Testing with Screen Readers at WebAIM provides more information about learning to test with assistive technologies.
 Testing locally 
Most devices include assistive technology that is built-in to the OS. Microsoft Windows includes the Windows
Narrator screen reader and Windows Magnifier. 3rd party assistive technologies like NVDA,
FreedomscientificSoftwareJaws, and ZoomText are available to download. Apple macOS includes the VoiceOver screen reader. And iOS, Android, and Linux all support a variety of assistive technologies.
 Testing in virtual machines and emulators 
Under macOS, if you want to test with an assistive technology only available for Windows, like Windows Narrator or NVDA, create a Windows virtual machine. Virtual machines with Microsoft Edge (EdgeHTML) and IE are available for VirtualBox and VMWare on the Virtual Machines download page.
Android Studio includes an emulator that for you to test assistive technologies in the Android Accessibility Suite. Follow the instructions to set up a virtual device and start the emulator, then install Android Accessibility Suite from the GooglePlay store.
NOTE
The iOS Simulator doesn't currently include VoiceOver.
	 Cloud 	-based testing tools
If an assistive technology isn't available on your OS or you not possible to install one on a virtual machine or emulator, cloud-based assistive technology testing tools are the next best thing.
 Assistiv Labs (a commercial product) enables you to manually test with assistive technologies through any modern web browser. Select an assistive technology and browser and it connects you with a virtual machine, emulator, or real device that you can interact with.
See also Cloud-based emulators and simulators.
 Resources for accessibility basics
These are projects and initiatives for accessibility.
 The A11Y project 
The A11Y Project is a community-driven effort to make web accessibility easier. Check out The A11Y Project site to learn about basic accessibility principles, their accessible pattern and widget library, and their resources on accessibility software, blogs, books, and tools.
	 Web Accessibility Initiative  	(WAI)
The W3C Web Accessibility Initiative (WAI) is an effort to help improve the accessibility of the web. Their site provides a variety of resources for Getting Started with Web Accessibility, Designing for Inclusion, tutorials and presentations, and more.
 Accessibility blogs
These are blogs about accessibility.
 TPGi, LLC 
TPGi, LLC provides consulting and technology solutions to organizations around the world to ensure that their clients reach all audiences effectively and efficiently, while meeting governmental and international standards. Their blog covers topics like web accessibility best practices, accessibility tools, and accessibility trends.
 Simply Accessible 
Simply Accessible is a team of accessibility specialists providing accessibility training, consulting and more to change the perception of accessibility on the web. Their Articles section discusses best practices for web accessibility, accessible design, and more.
 Level Access 
Level Access is a digital accessibility firm supporting their clients in developing and deploying accessible products and services. Their blog addresses topics like ARIA best practices, accessibility trends, webinars, and more.
 Accessible examples
These are libraries and examples for accessibility. ally.js   	- Tutorials
JavaScript library to help modern web applications with accessibility concerns by making accessibility simpler. For more information, go to ally.js - Tutorials.
 OpenAjax examples 
The OpenAjax Alliance website is an excellent resource for verifying the rules for WAI-ARIA and provides a number of examples of WAI-ARIA implementations.
 Patterns 
The A11Y Project offers a library of accessible widgets and patterns like menus, buttons, tooltips, and more. For more information, go to Patterns.
 Accessibility techniques and tools
These are techniques and tools for improving accessibility.
 Accessibility: Creating accessible extension icons for Microsoft Edge 
Get guidance on creating accessible extensions icons for Microsoft Edge. For more information, go to Accessibility: Creating accessible extension icons for Microsoft Edge.
 Accessible Name and Description: Computation and Mappings 1.1 
This W3C mapping document explains how browsers determine name and descriptions of accessible objects from web content languages and expose them in accessibility APIs. For more information, go to Accessible Name and Description: Computation and Mappings 1.1.
 Accessibility Evaluation Resources 
Accessibility Evaluation Resources is a multi-page resource by the W3C that outlines different approaches for evaluating websites for accessibility. For more information, go to Accessibility Evaluation Resources.
 Assistive technology compatibility tests 
Test results showing how different content types and standards behave in assistive technologies (AT) like screen readers. For more information, go to Assistive technology compatibility tests.
 Building accessible websites just got a lot easier 
This .NET Web Development and Tools blog post describes the Visual Studio extension Web Accessibility Checker. For more information, go to Building accessible websites just got a lot easier.
 Core Accessibility API Mappings 1.1 
This W3C mapping document explains how the semantics of web content languages are exposed to accessibility APIs. For more information, go to Core Accessibility API Mappings 1.1.
	 Easy Checks  	- A First Review of Web Accessibility
A series of quick checks by the WAI that help you asses the accessibility of a web page. For more information, go to Easy Checks - A First Review of Web Accessibility.
 How to Meet WCAG 2.0 
A quick reference to Web Content Accessibility Guidelines (WCAG) 2.0 requirements (success criteria) and techniques. For more information, go to How to Meet WCAG 2.0.
 HTML Accessibility API Mappings 1.0 
This W3C mappings document explains how HTML5.1 element and attributes map to platform accessibility APIs. For more information, go to HTML Accessibility API Mappings 1.0.
 Quick Tips 
A list of quick web development tips for accessibility by The A11Y Project. For more information, go to Quick Tips.
 Site Scan 
The Site Scan tool on Microsoft Edge Dev Center checks for out-of-date libraries, layout issues, and accessibility issues. For more information, go to Site Scan.
 Techniques for WCAG 2.0 
Techniques from the W3C that provide guidance for web developers on meeting Web Content Accessibility Guidelines (WCAG) 2.0 success criteria. For more information, go to Techniques for WCAG 2.0.
 Tips on Developing for Web Accessibility 
Tips from the W3C on developing web content that is more accessible to people with disabilities. For more information, go to Tips on Developing for Web Accessibility.
	 WAI 	-ARIA Authoring Practices 1.1
A document by the W3C that provides readers with an understanding of how to use WAI-ARIA 1.1 and recommends approaches to make widgets, navigation, and behaviors accessible using WAI-ARIA roles, states, and properties. For more information, go to WAI-ARIA Authoring Practices 1.1.
 WAI Guidelines and Techniques 
A series of web accessibility guidelines and standards developed by the WAI. For more information, go to WAI Guidelines and Techniques.
 Web Accessibility Evaluation Tools List 
A list of web accessibility evaluation tools to help determine if websites meet accessibility guidelines. For more information, go to Web Accessibility Evaluation Tools List.
 Web Accessibility Perspectives: Explore the Impact and Benefits for Everyone 
A series of short situational videos by the W3C about the impact of accessibility and the benefits for everyone.
For more information, go to Web Accessibility Perspectives: Explore the Impact and Benefits for Everyone.
 
 ARIA and UI automation in Microsoft Edge
 	6/21/2022 • 2 minutes to read • Edit OnlineThe W3C defines Accessible Rich Internet Applications (ARIA) as a syntax for making dynamic web content and custom UI accessible. Microsoft Edge recognizes the ARIA role, state, and property information and exposes it to assistive technologies, which in turn can use the Microsoft UI Automation APIs to retrieve the information.
Visit HTML5Accessibility for information on which new HTML5 features are accessibly supported by Microsoft Edge.
The Microsoft Edge rendering engine builds an accessible projection of web pages, conforming to the following W3C specifications.
 Mapping HTML elements to ARIA and UI Automation objects
The HTML Accessibility API Mappings specification defines how HTML elements and attributes map to ARIA and UI Automation objects.
Working draft - stable version of the specification.
Editor's draft - work in progress. Note that while this spec has the latest changes, the changes may not be available in Microsoft Edge yet.
 Building the accessibility tree and mapping ARIA elements to UI Automation objects
The Core Accessibility API Mappings specification defines general principles for building the accessibility tree and mapping ARIA elements and attributes to UI Automation objects.
Working draft - stable version of the specification.
Editor's draft - work in progress. Note that while this spec has the latest changes, the changes may not be available in Microsoft Edge yet.
 Computing descriptions of accessible objects given the HTML and ARIA elements
The Accessible Name and Description: Computation and API Mappings specification defines how to compute the name and description of accessible objects, given the HTML and given the ARIA elements and attribute values that are available for the accessible elements.
Working draft - stable version of the specification.
Editor's draft - work in progress. Note that while this spec has the latest changes, the changes may not be available in Microsoft Edge yet.
 See also
 Building a more accessible web platform - A blog post about the accessibility architecture in Microsoft Edge.
 Building a more accessible user experience with HTML5 and UIA - Examples of how markup defines the experience of navigating with assistive technologies such as screen readers, and examples of how the architecture improves the end user's experience.
 
 Resources for accessibility testing
 	6/21/2022 • 2 minutes to read • Edit OnlineAccessibility testing is a form of usability testing to verify your website is usable by all people. Check out the W3C page Evaluating Web Accessibility Overview for information on when testing should be done, testing requirements, and who should test your site.
Use the following tools and testing procedures to evaluate your website for accessibility.
 Accessibility testing in DevTools
 Accessibility-testing features - A list of accessibility aspects to test, and which features of DevTools to use for each test.
 Overview of accessibility testing using DevTools - A walkthrough of using various DevTools features to test for accessibility problems.
 External articles and websites
 Assistive technology compatibility tests - Test results showing how different content types and standards behave in assistive technologies (AT) such as screen readers.
 HTML5Accessibility - This site tests which new HTML5 features are accessibly supported by major browsers.
 webhint - Use webhint to check for out-of-date libraries, security improvements, performance problems, and accessibility issues.
 Web Accessibility Checker - A Visual Studio extension that performs accessibility checks on any ASP.NET web app.
 Web Accessibility Evaluation Tools List - A list of web accessibility evaluation tools to help determine if websites meet accessibility guidelines.
 The Web Accessibility Initiative (WAI)
Accessibility Evaluation Resources - Approaches for evaluating websites for accessibility.
Easy Checks - A First Review of Web Accessibility - Quick checks that help you assess the accessibility of a web page.
 How to Meet WCAG 2.0 - A quick reference to Web Content Accessibility Guidelines (WCAG), requirements, success criteria, and techniques.
 
 
Videos about web development with Microsoft Edge
 	6/21/2022 • 6 minutes to read • Edit OnlineDiscover and learn about new Microsoft Edge web development technologies and products including DevTools, web platform APIs and features, Progressive Web Apps, and WebView2.
This page contains links to short videos, each focused on just one feature and including a demo.
Microsoft publishes new videos on a regular basis on the Microsoft Edge YouTube channel, and they are also listed below.
Click on a thumbnail from the following list to watch the corresponding video on YouTube.
 DevTools - Debug the web in 3D
Published on 21 June 2022.

The 3D View tool in Microsoft Edge DevTools provides a 3-dimensional representation of the webpage you're inspecting. Use the 3D View tool to debug common web development problems such as:
Deeply nested DOM nodes.
Out-of-document elements.
Unwanted scrollbars.
Z-index stacking issues.
Composited layers performance.
To learn more about the 3D View tool, check out Navigate webpage layers, z-index, and DOM using the 3D View tool, or Debug the web in 3D with the 3D View tool.
 DevTools - Use your preferred language in DevTools
Published on 9 June 2022.

Microsoft Edge DevTools supports 13 different languages. In this video, the team shows how to choose the language that's most comfortable to you for coding and debugging.
To learn more about changing DevTools language settings, check out Change DevTools language settings.
To report any translation errors, check out Contact the Microsoft Edge DevTools team.
 DevTools - What's new in DevTools 102
Published on 1 June 2022.

Learn more about our latest announcements from the Microsoft Edge DevTools team at What's New in DevTools 102.
<select><selectmenu> Web Platform - Fully style the drop-down part of a  with the new  element
Published on 31 May 2022.

<select> elements has been challenging. The experimental <selectmenu>Styling  element promises to overcome the remaining limitations by enabling web developers to style all parts of the element.
<select> elements and the new <selectmenu><select>To learn more about styling  element, see the blog post Styling  elements for real.
 DevTools - Advanced issues filtering in Edge DevTools and VSCode
Published on 20 May 2022.

Every web product has issues. The Microsoft Edge DevTools Issues tool analyzes the current webpage and reports issues grouped by type including accessibility, compatibility, performance, and more.
If you have VS Code, the Microsoft Edge DevTools extension for VS Code makes issues available in your source code directly.
Released products can also have many issues. Based on your feedback, we added useful ways to filter issues. You can disable issues coming from third-party libraries for example, and choose which browsers to view issues about.
To learn more about the Issues tool, see Find and fix problems using the Issues tool.
To learn more about the Microsoft Edge DevTools extension for VS Code, see Microsoft Edge DevTools extension for Visual Studio Code.
 Web Platform - Create a scroll-linked animation without JavaScript
Published on 12 May 2022.

Learn about the upcoming CSS scroll-linked animations feature and how it can be used to create a reading progress indicator on a webpage, without using JavaScript.
edge://flagsCSS scroll-linked animations is an experimental feature in Microsoft Edge. To try this feature, go to  and then enable the Experimental Web Platform features setting.
To play with the demo application that's shown in the video, see the rendered reader demo and its source code.
To learn more about the CSS scroll-linked animations feature, see @scroll-timeline at MDN.
 DevTools - Customizing Microsoft Edge Developer Tools and quick feature access
Published on 5 May 2022.

Learn how to customize DevTools to fit your needs.
This video covers how to dock or undock DevTools, open new tools, and close those you don't need. It describes how to move tools in the bottom drawer and customize the text size and theme. The video also explains how you can use the Command Menu keyboard shortcuts to quickly customize DevTools.
 DevTools - What's new in DevTools 101
Published on 28 Apr 2022.

Learn more about our latest announcements from the Microsoft Edge DevTools team at What's New in DevTools 101.
 Web Platform - Highlight text on the web with the CSS Custom Highlight API
Published on 28 Apr 2022.

Styling ranges of text on the web is very useful but has historically been a complicated thing to do.
The new CSS Custom Highlight API is the future of highlighting text ranges on the Web. It provides web developers with JavaScript and CSS features that make it easier and more efficient to style any range of text.
For more information see CSS Custom Highlight API: The Future of Highlighting Text Ranges on the Web.
 DevTools - What's new in DevTools 100
Published on 19 Apr 2022.

Learn more about our latest announcements from the Microsoft Edge DevTools team at What's New in DevTools 100.
 DevTools - What's new in DevTools 99
Published on 21 Mar 2022.

Learn more about our latest announcements from the Microsoft Edge DevTools team at What's New in DevTools 99.
 DevTools - What's new in DevTools 98
Published on 23 Feb 2022.

Learn more about our latest announcements from the Microsoft Edge DevTools team at What's New in DevTools 98.
 DevTools - What's new in DevTools 97
Published on 1 Feb 2022.

Learn more about our latest announcements from the Microsoft Edge DevTools team at What's New in DevTools 97.
 DevTools - What's new in DevTools 96
Published on 9 Dec 2021.

Learn more about our latest announcements from the Microsoft Edge DevTools team at What's New in DevTools 96.
 DevTools - Debug memory leaks with the Microsoft Edge Detached Elements tool
Published on 9 Dec 2021.

We're excited to announce the new Detached Elements tool in Microsoft Edge DevTools which helps you investigate and resolve DOM memory leaks.
Memory leaks occur when the JavaScript code of an application retains more and more objects in memory instead of releasing them for the browser to garbage collect. We built this tool with the Microsoft Teams developers, and it has already helped us find and fix memory leaks across many of our own websites and apps.
For more information see Debug DOM memory leaks with the Detached Elements tool, and read the corresponding blog post Debug memory leaks with the Microsoft Edge Detached Elements tool.
 DevTools - What's new in DevTools 95
Published on 8 Dec 2021.

Learn more about our latest announcements from the Microsoft Edge DevTools team at What's New in DevTools 95.
 Web Platform - The EyeDropper API
Published on 22 Nov 2021.

The Microsoft Edge team specified and implemented the new EyeDropper API in collaboration with the Chromium open-source project. Provide feedback at Issues - WICG/eyedropper | github.com.
Many creative applications enable users to pick colors from parts of an app window or even from the entire screen, typically using an eyedropper metaphor. The EyeDropper API enables authors to use a browser-supplied eyedropper in the construction of custom color pickers on the web.
For more information see Picking colors of any pixel on the screen with the EyeDropper API | web.dev and EyeDropper API - Web APIs | MDN developer.mozilla.org.
 DevTools - What's new in DevTools 94
Published on 12 Nov 2021.

Learn more about our latest announcements from the Microsoft Edge DevTools team at What's New in DevTools 94.

 
 Microsoft Edge Privacy Whitepaper
 	6/21/2022 • 76 minutes to read • Edit OnlineOur browser privacy promise is to provide you with the protection, transparency, control, and respect you deserve. To uphold commitments to give you transparency into Microsoft products, the Microsoft Edge team provides this privacy whitepaper. It explains how Microsoft Edge features and services work and how each may affect your privacy. The goal of the Microsoft Edge team is to give you a full understanding of how your data is used, how to control the different features, and how to manage your collected data. After reading this document, you will have the information needed to make the right privacy decisions for you.
This document provides links to go to Microsoft Edge settings and other pages. The shortcuts URLs start with 
edge:// such as edge://favorites and edge://settings/privacy. To go to the pages, type the bolded text directly into the Microsoft Edge address bar. The pages are only viewable in Microsoft Edge.
This whitepaper focuses on the desktop version of Microsoft Edge. Parts of the document may include features or experiences that aren't available for all users. This whitepaper also discusses features and services that exist in the product today, but subject to change in the future. Microsoft practices data collection minimization. Your data is kept for the minimum amount of time. Retention times vary depending on the feature or service and may change over time.
 Address bar and suggestions
The address bar allows you to enter website URLs and search the web. By default, the address bar provides search and site suggestions using the characters you type. Suggestions come from your favorites, browsing history, previous searches, and default search provider.

To speed up browsing and searching, characters you type into the address bar are sent to your default search provider. The search provider returns suggested search queries.
The address bar categorizes entries as a URL, search, or unknown. This information, along with which suggestion you select, position of selection, and other address bar data is sent to your default search provider.
If your search provider is Bing, a resettable identifier unique to your browser is sent with the data. It helps Bing understand the search query and query session. Other autosuggest service identifiers are sent to your default search engine to complete the search suggestions. Your IP address and cookies are sent to your default search provider to increase the relevance of the search results.
edge://settings/privacyWhen you select the address bar, a signal is sent to your default search provider. The signal tells the provider to prepare suggestions. The typed characters and search queries aren't sent to Microsoft unless your search provider is Bing. To enable sending data to your default search provider, go to . In Services, select Address bar and turn on the Show me search and site suggestions using my typed characters setting. If you turn off the setting, your typed characters are no longer sent to your default search provider. Your search queries are still sent to your default search provider to provide search results.
If Microsoft Edge detects typing in the address bar that might contain sensitive information, it does not send the typed text. Sensitive information includes authentication credentials, local file names, or URL data that is normally encrypted.
You can configure Microsoft Edge to collect diagnostic data about the address bar. Collected data includes the
edge://settings/privacynumber of offered queries for all search providers. Go to . In Personalize your web experience turn on the Improve your web experience by allowing Microsoft to use your browsing history from this account for personalizing advertising, search, news, and other Microsoft services setting.
Typed characters and the websites you visit are stored locally on the device per profile. To delete the data, go to 
edge://settings/clearBrowserData. In the Clear browsing data window, select the Browsing history
checkbox, and select the Clear now button.
If Bing is your default search provider and you are signed in, you may delete your searches through the
edge://historyMicrosoft Privacy dashboard. You can clear your browsing history and delete websites from appearing as suggestions in the address bar. Go to , and select Clear browsing data. You can delete the data Microsoft collects from the address bar and search suggestions features on Windows 10 and later. Open Start > Settings > Privacy > Diagnostics & feedback. In Delete diagnostic data, select Delete. All other data is deleted after 36 months.
Account-specific search functions are available if you are signed in to Microsoft Edge with a Microsoft work or school account, and Microsoft Search is available. Microsoft may send an anonymous token with your query, to provide account-specific functions, such as results specific to your company.
All data is transmitted securely over HTTPS. If Bing is your default search provider, the searches and typed characters are saved for up to six months.
If you search for a single word in the address box, Microsoft Edge may send the single word to your DNS server. Sending a single word is a check to see whether it corresponds to a host on your network. If so, Microsoft Edge may try to connect to the corresponding host. This option lets you go to the specific host instead of searching.
router and you type routerFor example, if your router uses the hostname  in the address bar, you can go to 
https://router, or search for the word router. The feature is not controlled by the Show me search and
site suggestions using my typed characters setting because it does not involve sending data to your
default search engine.
You can control whether or not typed characters are sent to your default search provider. Go to 
edge://settings/search. Toggle the Show me search and site suggestions using my typed characters
setting.
edge://settings/searchYou can change your default search engine. Go to . Select the Search engine used in the address bar dropdown menu. If you are browsing while using InPrivate or Guest mode, your autosuggestions are turned off. InPrivate shows suggestions from your local browsing, such as browsing history and past searches. No typed characters are sent to your default search engine. Guest mode does not display any suggestions or send typed characters to your default search engine.
Data collected by other search providers follow the privacy policy of the company.
 Autofill
Autofill in Microsoft Edge lets you save form entry data. Form entry data includes passwords, payment information, addresses, and other data such as birthdays. When you visit a site and start to fill out a form, Microsoft Edge uses form fill information to match your saved autofill data to the form. Microsoft Edge offers form entry data you previously saved when you open similar forms. Passwords and credit card information are only saved with your explicit permission for each password and card.
Addresses and other form entries are saved by default. To control saving and autofill of address and other form
edge://settings/profilesdata, go to . Select Personal info and toggle the Save and fill personal info setting.
edge://settings/passwordsYou can prevent Microsoft Edge from prompting you to save passwords. Go to .
edge://settings/passwordsedge://settings/clearBrowserDataToggle off the Offer to save passwords setting. You can prevent Microsoft Edge from using autofill for saved passwords and delete saved passwords. Go to  and select Saved passwords. To delete all autofill data, go to , select Autofill form data, select the desired time range, and then select Clear now.
edge://settings/profiles/syncIf you are signed in and syncing, your autofill data is synced across all versions of Microsoft Edge where you are signed in with the same credentials. When syncing, all autofill data is stored on encrypted Microsoft servers. The autofill data stored on Microsoft servers is used only for sync purposes. You can turn off syncing of your autofill data. Go to  and turn off the Basic info toggle. If sync is on for autofill, deleting
autofill data from a device while you are signed in to Microsoft Edge removes the data from all other devices that you are signed in to with the same credentials.
When you visit a webpage and submit a form, Microsoft Edge sends information about the form to the Microsoft form fill service. This information includes a hash of the hostname and autofill entry types. For example, text box 1 expects an email address, text box 2 expects a password, and so on. No user-entered information or user identifiers are sent to the service. The information helps Microsoft Edge correctly identify forms across different webpages. The data is used to help match your saved autofill data to the form.
In Guest mode, autofill is not available and new autofill entries aren't added. For InPrivate mode, Microsoft Edge offers autofill entries, but new autofill entries aren't added.
 Cast
Cast in Microsoft Edge lets you display your media to another screen using Google Cast. To access Cast, open Settings and more (...) > More tools > Cast media to device. Cast relies on the Media Router extension not automatically installed with Microsoft Edge. When you first use Cast, Microsoft Edge prompts for permission to install the Media Router extension.
Select restart to install the Media Router extensions from the Chrome Web Store. On startup and at regular intervals, Microsoft Edge sends update requests to the Chrome Web Store. Update requests include basic data about your version of Microsoft Edge. Regular update requests keep the Media Router extension up to date.
Google may collect some data associated with the Media Router extension. To uninstall the Media Router
edge://flags#edge-on-demand-media-routerextension, go to  and change the setting. Uninstalling also stops
edge://extensionsupdates from the Chrome Web Store. The extension is hidden and does not appear on the Installed extensions list. For the Installed extensions list, go to .
 Collections
You may collect sites, text, and images from the web, and organize the content with Collections in Microsoft Edge. All collections data is stored locally on the device and organized per Microsoft Edge profile. If you have sync turned on for Collections, your collections, notes, and comments are available across all signed-in and syncing versions of Microsoft Edge.
Every 24 hours, Microsoft Edge downloads a list of supported sites that have special entity extraction templates. The templates are specific to each website. When you create a new item in your collection, Microsoft Edge verifies that the site you are collecting from is in the list of supported sites. If the site is in the list, Microsoft Edge pings the entity extraction service for the template of the specific site. No user identifiers are associated with the request to the service. The template attempts to identify the name, price, ratings, primary image, and other data about the item being collected. If the site you are collecting from is not on the supported list site, Microsoft Edge does not download a template. Templates allow collection items to be created locally on the device. No data about the collection items are sent to the service when creating the collection.
edge://settings/privacyedge://settings/clearBrowserDataYou can delete templates stored on the device and clear the cache data. Go to . In Clear browsing data next to Clear browsing data now, select the Choose what to clear button. Choose your desired time range and type of data, then select the Clear now button. Another way to delete cached data, go to  select the desired time range and type of data, then select the Clear now
button.
You can use the title of your collection to find relevant Pinterest Topic pages when searching in Microsoft Bing.
edge://settings/privacyGo to . Turn on the Show suggestions from Pinterest in Collections setting.
edge://settings/privacyMicrosoft Edge does not send data about your collections to Pinterest. You can remove the suggestions and stop searches for Pinterest Topic pages. Go to  and turn off the Show suggestions from
Pinterest in Collections setting. Collections aren't available when using InPrivate or Guest modes.
 Crashes
If optional diagnostic data, including crash reports, are turned on, diagnostic data is collected when Microsoft Edge crashes or closes unexpectedly. The diagnostic data is used to diagnose and fix problems with Microsoft Edge and other Microsoft products and services.

Collected diagnostic data is in the form of crash dumps, which contain device and software state captured at the time Microsoft Edge crashed or closed. The crash dump contains information about what was happening at the time of the problem. Information such as the website you were visiting at the time of the crash or your CPU usage may be included in the diagnostic data. If crash reporting is turned on, the crash dump is stored locally on the device and sent to Microsoft using an encrypted link.
Each crash dump contains an identifier unique to the device and a resettable identifier unique to your browser. It also includes extra diagnostic data such as the URL, CPU usage, and network usage, to help identify the problem. The extra diagnostic data helps Microsoft determine how many devices are encountering the problem and the severity.
Crash dumps are stored on secure Microsoft servers for up to 30 days, and then deleted. You can request to delete the diagnostic data on Windows 10 and later devices. Open Start > Settings > Privacy > Diagnostics & feedback. In Delete diagnostic data, select Delete. Collected crash information, such as a count of crash types, are stored for reporting and product improvement purposes.
edge://crashesYou can clear the crash diagnostic data stored locally on a device. Go to  and select the Clear all button.
edge://settings/privacyTo turn off crash diagnostic data collection on Windows 10 and later, open Start > Settings > Privacy and select Diagnostics & feedback. For versions of Microsoft Edge on all other platforms, go to  and turn off the Help improve Microsoft products by sending optional
diagnostic data about how you use the browser, websites you visit, and crash reports setting. You
can manage diagnostic data collection at the enterprise level. See group policies managed by your organization.
 Developer tools
Microsoft Edge Developer Tools help with website debugging and testing. Open Settings and more (...) > More tools and select Developer tools. When you turn on certain features in Developer Tools, Microsoft Edge requests modules from Microsoft servers and downloads them to your device. The request is sent over a secure HTTPS connection and contains a non-unique identifier representing the version of Microsoft Edge. Specific experiences that require remote download include 3D View and the Elements tool Accessibility pane. Webhint integration requires a remote module that is automatically requested when you open Developer Tools.
 Diagnostic data
Microsoft uses diagnostic datato improve products and services. Diagnostic data is also used to keep products secure, up to date, and performing as expected. Microsoft believes in and practices information collection minimization. We strive to gather only the information we need, and to store it for only as long as needed to improve products and services.
Microsoft Edge collects a set of required diagnostic data needed to keep the product secure, up to date, and performing properly. The required diagnostic data includes device connectivity, configuration information, software setup, and inventory. Microsoft uses this diagnostic data to troubleshoot issues and keep Microsoft products and services reliable, secure, and operating normally. For more information about diagnostic data on managed devices, see Configure Windows diagnostic data in your organization and Microsoft Edge diagnostic data group policy.

You may also choose to share optional diagnostic data. As you use Microsoft Edge features and services, or other applications that use the Microsoft Edge web platform, Microsoft Edge sends optional diagnostic data about how you use those features and the websites you visit. With your permission, this optional diagnostic data is sent to Microsoft to improve products and services for everyone. This data is not collected or stored with your Microsoft account.
Optional diagnostic data includes feature usage, performance data, site load times, memory usage, and websites you visit. For example, if you choose a website as a favorite, optional diagnostic data is sent. It includes that the favorite button was selected, and a favorite was successfully added, but not which site was set as a favorite.
Information about websites you visit in Microsoft Edge helps us understand how quickly sites load and increases the relevance of search results for all users. The data includes information about the website such as the URL of the page you visit, website metrics, title of the page, how you accessed the page, information about the content of the page, and other relevant information about the page navigation.
Diagnostic data is sent using HTTPS and stored on Microsoft servers. On Windows devices, diagnostic data is sent with an identifier unique to your device. On other devices, the diagnostic data is associated with a resettable identifier unique to your browser. The identifier is randomly generated and does not contain your personal information.
The Microsoft Edge team respects the sensitivity of diagnostic data by restricting data access or removing personal information. To reset the identifier unique to your browser on Windows 10 and later devices, select Start > Settings > Privacy > Diagnostics & feedback, and then select Delete under Delete diagnostic data, or change your setting under Diagnostic data from Full to Basic or turn off Optional diagnostic data.
edge://settings/privacyOn other platforms, to generate a new resettable identifier (ID) that is unique to your browser, go to  and turn off the Help improve Microsoft products by sending optional
diagnostic data about how you use the browser, websites you visit, and crash reports setting. The
reset (ID) functionality may be different for devices managed with group policies set by your organization.
If you're using Windows 10 version 1803 (April 2018 Update) or later, to view product data shared with Microsoft in the Diagnostic Data Viewer, select Start > Settings > Privacy > Diagnostics & feedback, and then select Open Diagnostic Data Viewer under View diagnostic data.
edge://data-viewerFor other platforms or versions of Windows 10 version 1803 and earlier, go to  to view
edge://data-vieweredge://data-vieweredge://data-viewerdiagnostic data. To view the data that's periodically sent to Microsoft since the last time the viewer was opened, go to . To see what data has been sent to Microsoft for your specific session, refresh the viewer. The data used to populate  is stored locally on the device. To clear the data in the viewer, close the  tab.
To help us improve Microsoft products and services, diagnostic data is aggregated, with personal identifiers removed, and stored for up to two years. Because the diagnostic data is not collected from or stored with your Microsoft account, the diagnostic data may not be viewed or deleted from your Microsoft privacy dashboard. To delete the diagnostic data on Windows 10 and later, select Start > Settings > Privacy > Diagnostics & feedback, and then select Delete under Delete diagnostic data. The delete diagnostic data functionality is only supported on Windows 10 version 1803 or later. For more information, see Diagnostics, feedback, and privacy in Windows 10 and later.
edge://settings/privacyFor Microsoft Edge on Windows 10 and later, sending Optional diagnostic data is determined by your Windows diagnostic data setting. The setting is reflected in . Change the Windows settings by going to Start > Settings > Privacy > Diagnostics & feedback. On all other platforms, to control the
edge://settings/privacyedge://settings/privacycollection of diagnostic data, go to  and turn on or off Help improve Microsoft products by sending optional diagnostic data about how you use the browser, websites you visit, and crash reports. The setting is used for all profiles associated with the installation of Microsoft Edge on your device. The setting is not synced across devices. The setting applies to InPrivate browsing and Guest mode. Information about websites you visit is never sent while browsing InPrivate or in Guest mode. If your device is managed with group policies set by your organization, it is described in .
 Digital Rights Management and Media Licenses
When a website offers media content that is protected by Digital Rights Management (DRM), Microsoft Edge uses a secure playback pipeline to make sure the content is not improperly viewed or copied. As part of the feature, Microsoft Edge may store DRM-related data on your device, including a unique identifier and media licenses. Microsoft Edge may also transmit the unique identifier to a media licensing server specified by the content provider. When you use the website, Microsoft Edge retrieves the DRM information to make sure you have permission to use the content. The data helps to validate access to the protected content and ensure a seamless media experience.
Microsoft Edge supports DRM using the Encrypted Media Extensions API (EME API) for HTML5 sites. The EME
API allows websites to communicate with a DRM provider called a Content Decryption Module (CDM). Different DRM systems, such as Widevine by Google or PlayReady by Microsoft, may be supported by the CDM implementation of the developer. Content providers may choose to support one or more potential DRM systems. Providers may use the function of the EME API to decide which DRM system to use for a specific client. For more information about EME privacy, see Encrypted Media Extensions Privacy.
Microsoft Edge supports PlayReady DRM only on Windows 10 and later. PlayReady is a DRM implementation to deliver media experiences such as 4K video and Dolby Atmos audio. Microsoft Edge uses the Windows Platform Media Foundation APIs to support PlayReady. To validate access to protected content, Microsoft Edge uses the Windows 10 or Windows 11 operating system. Windows uses a unique identifier (ID) and communicates the ID with the PlayReady service. All EME, CDM, and browser data for PlayReady that persists on the device is stored and maintained on Microsoft Edge. For more information about PlayReady, see Simple End to End System.
Microsoft Edge supports Widevine by Google DRM and the option is on by default. Microsoft Edge periodically fetches updates for Widevine from Google servers. The use of Widevine may include communications to
edge://flags/#edge-widevine-drmGoogle. To opt-out of using Widevine in Microsoft Edge, go to  and turn off the
Widevine DRM setting. Widevine has the capability to create a unique device identifier and transmit it to Google. For more specific information on Widevine and privacy, see the Google privacy policy.
Microsoft Edge supports the Flash Access DRM by Adobe, which is used by some sites instead of HTML5. You are prompted to allow Adobe Flash when a site requests it. When a site uses the Flash Access DRM by Adobe, Microsoft Edge gives Adobe access to a unique device identifier. You can clear and reset any locally stored
edge://settings/privacyedge://settings/content/flashinstances of the identifier. Go to . In Clear browsing data. select Choose what to clear, select the checkbox for Cookies and other site data, and select Clear now to remove any stored identifiers. To stop Adobe Flash DRM from ever being used, go to .
When you request access to encrypted HTML5 media such as an online movie, Microsoft Edge creates a license request to decrypt the media. The CDM in use creates the license request containing a request ID. The request is sent to the license server. No part of the license request contains any personal data, and the license request is not stored on the device.
When returning the media license, a media identifier is created which is unique to the user and the site. The ID is not shared between sites and is different for each site. A session ID, used to identify a playback session, is sent with the media identifier to decrypt the media. The media identifier is stored locally on the device and may be stored with the content provider.
edge://settings/content/protectedContentTo control DRM and content protections, go to . Toggle the Allow
sites to play protected content (recommended) and Allow identifiers for protected content (computer restart may be required) settings.
 The Allow sites to play protected content setting controls playback for CDM-based DRM systems such as PlayReady and Widevine, but not for non-CDM-based systems like Flash Access DRM. To manage Flash
edge://settings/content/flashsite permissions, go to . Turning off the setting causes media functions to stop working properly.
 Turning off the Allow identifiers for protected content setting prevents the creation of identifiers for
Flash Access DRM and prevents Widevine from periodically fetching updates from Google. Turning off the setting may cause media functions on some sites to stop working properly.
 Do Not Track
edge://settings/privacyYou can enable Do Not Track on Microsoft Edge. Go to . Turn on the Send "Do Not
DNT:1 HTTPedge://settings/privacyTrack" requests setting. If you enable the Do Not Track feature, Microsoft Edge sends a  header with your outgoing HTTP, HTTPS, and SPDY browsing traffic requests. This feature tells websites you visit not to use trackers. However, enabling the Send "Do Not Track" requests setting does not guarantee that the websites aren't able to track you. Some sites may honor the request by showing you ads not based on any previous browsing. Microsoft Edge does not control whether or not the request is honored. You can help prevent websites from tracking you. Go to . Change the Tracking prevention setting to
Balanced or Strict.
When you use Guest mode, Microsoft Edge does not send Do Not Track requests. When you use InPrivate browsing, Microsoft Edge only sends Do Not Track requests if the Send "Do Not Track" requests setting is turned on for the profile you are using.
 Downloads
edge://settings/downloadsMicrosoft Edge lets you download files safely and securely. To choose where files are downloaded on your device, go to . If SmartScreen is enabled, information about your file, such as the file
edge://settings/privacyname and URL, are sent to SmartScreen to check the reputation of the file. The reputation check helps you avoid accidentally downloading known malware that is known to hurt your device. To change SmartScreen settings, go to  and toggle SmartScreen. For more information about SmartScreen, see the
SmartScreen section.
edge://downloadsedge://settings/clearBrowserDataTo view the history of your previous downloads, go to . To clear your browsing data and delete your download history, go to . Deleting your download history from Microsoft
Edge does not remove the files from your device. Deleting downloaded files from your device does not remove the files from your download history. When you use InPrivate browsing or Guest mode, the download history from the session is cleared when you close the InPrivate or Guest windows. The files remain saved on the device.
 Extensions and Microsoft Edge Add-ons
You may install extensions in Microsoft Edge to add functions to the browser. When you install an extension from the Microsoft Edge Add-ons website or another extension store, Microsoft collects information about the extension to help developers and Microsoft understand how the extension is used. Microsoft Edge collects aggregated data including the number of times an extension was downloaded and information about how it is performing, such as crash data. Microsoft shares the aggregated data with the developers of the extension.
Comments and reviews from users are public on the Add-ons website and are also shared with the developers. If you are signed in to Microsoft Edge, installed extensions from the Microsoft Edge Add-ons website are associated with your account to provide extension recommendations. The data is used in aggregate to understand the popularity of extensions.
edge://settings/profiles/syncYou can sync extensions and preferences across all your signed-in syncing versions of Microsoft Edge. Go to , and select the Sign in to sync data button.
edge://extensionsInstalling extensions is optional. To uninstall any extension at any time, go to . When an
extension is installed, it specifies what user data it needs to access. Microsoft Edge asks for your permission before installing the extension. Make sure an extension is credible and secure before installing it. Review the privacy policy of the developer for the specific extension.
Extensions are updated using the Microsoft Edge update service. Microsoft Edge sends a list of installed extensions to the update service to check for updates. If you install an extension from the Chrome Web Store, requests are sent to the Chrome Web Store at regular intervals to check for extension updates. The extension identifier, extension version, and information about Microsoft Edge are included in the request for updates. You
edge://extensionscan stop requests to the Chrome Web Store. Go to . Turn off the From other sources toggle to uninstall extensions.
You can import extensions from other browsers like Google Chrome. If an imported extension is available in the
Microsoft Edge Add-ons website, Microsoft Edge automatically installs the extension from the Microsoft Edge Add-ons website. If you previously had the extension turned on, Microsoft Edge automatically turns it on for you.
edge://extensionsIf an extension is not available from the Microsoft Edge Add-ons website, Microsoft Edge locally copies and installs your extension from Google Chrome without turning it on or connecting to the Chrome Web Store. Microsoft Edge asks for your permission to turn on the extension and to allow extensions from other stores. If you granted permission, Microsoft Edge allows installation of extensions from other stores and updates to your extensions using the Chrome Web Store. You can control the option to allow extensions from other stores. Go to . Toggle the Allow extensions from other stores setting.
 Family safety
Microsoft offers tools to help families stay connected and keep kids safer on Windows, Xbox, and Android devices running Microsoft Launcher.
Within a family group, there are family settings that should be enabled for children while using Microsoft Edge. The family group organizer must enable the settings for users in the group. The three main features offered to a family group are web filtering, activity reporting, and safe search.
Web filtering protects children in the family group from going to mature websites or websites blocked by the family organizer.
Activity reporting records information about the websites children visit. Records also include searches, screen time, devices used, and attempt to visit blocked sites. The family group organizer may see the information at family.microsoft.com. The data is collected, encrypted in transit, sent to Microsoft, and stored on secure Microsoft storage servers. The data is collected with the child's Microsoft account so it may be properly managed. Activity reports are stored on family.microsoft.com for up to 30 days and then deleted after.
Safe search adds a safe keyword to the header request to search engines. Bing reads the safe keyword and filters search results returned to the child. Other search engines may return filtered results due to the keyword. All of the child's searches are collected and made available for the family organizer to view in activity reports or at family.microsoft.com. The data is collected with the child's Microsoft account so it may be properly managed.
The child's browsing data is stored on secure Microsoft servers and made available to parents for up to 30 days, then immediately deleted. The data may be deleted at any time from the Microsoft privacy dashboard. To clear
edge://settings/clearBrowserDatabrowsing data stored locally on a device, go to . Choose a Time range, select checkboxes as needed, then select Clear now.
Collecting child browsing data and sharing it with the family group organizer requires two things. 1.) The child must be signed in to Windows 10 and later with a Microsoft account. 2.) The activity reporting setting must be turned on by the family organizer. The child does not need to be signed in to Microsoft Edge to collect browsing data. If family safety features aren't available on your version of Windows, update to the most recent version of Windows.
Guest mode and InPrivate browsing aren't available if web filtering or activity reporting is turned on.
The family group organizer may stop the data collection from the family safety portal. For more information about Microsoft family safety features, see What is a Microsoft family group?
 Find on Page
Find on Page allows you to search a web page for important keywords. Open Settings and more (...) > Find on Page. A search box will appear. Type any keyword or phrase into this search box and the page will highlight all locations on the page where your exact search term appears. You can then move through these terms with the Previous result and Next result buttons.
To help you find exactly what you're looking for, Microsoft Edge uses a Microsoft cloud service to find additional related matches for your search. This only happens when the Include related matches toggle in Find on Page is turned on.
If the Include related matches toggle is turned on, Microsoft Edge sends the text of the webpage, your search terms, and a service token to a Microsoft cloud service over a secure HTTPS connection. The service token doesn't contain any user-identifiable information. A Microsoft cloud service then processes the text to find results on the page that are related to your search. The webpage text and search terms sent to Microsoft are both deleted immediately after processing occurs. No data is stored for any period of time.
Related matches in Find on Page aren't available in InPrivate browsing.
To stop Microsoft Edge from finding related matches in Find on Page:
1. Select Settings and more (...) > Find on Page.
2. Turn off the Include related matches toggle.
 Geolocation
While you browse the web, websites may request your device's location from Microsoft Edge. Data about your device's location can be either precise or imprecise. For example, a precise location is needed to provide driving directions to or from your specific location. An imprecise location may be used to provide search results, news, and weather relevant to your general area.
edge://settings/content/locationMicrosoft Edge supports the Geolocation API, which allows websites to access your precise location with your permission. Microsoft Edge always asks for your permission before granting websites access to your precise location. To manage the site-specific permissions or to always block sites from accessing your precise location, go to .
Microsoft Edge indicates when your precise location is being shared on the right side of the address bar.

You can allow Microsoft Edge to provide the requesting site with a precise location on Windows 10 and Windows 11. Open Start > Settings > Privacy > Location and turn on the Allow access to location on this device and Allow apps to access your location settings. These settings enable the Windows location service. When enabled, Microsoft services may also estimate your imprecise location via the Windows location service to provide locally relevant browsing experiences.
If you turn off the Allow access to location on this device and Allow apps to access your location settings, some sites may still estimate your location using other technologies (such as Bluetooth, WiFi, cellular modem, or IP address) with varying degrees of accuracy. With Windows location settings disabled, precise location experiences that you allow in Microsoft Edge may also be inaccurate. For more information about Windows location settings, see Windows location service and privacy.
Microsoft Edge doesn't store your geolocation coordinates. When making requests to the Windows location service, Microsoft Edge generates a new random ID for each request.
InPrivate browsing uses the precise location permission setting of the profile from which the InPrivate session was launched. Guest mode always asks you for permission before granting the site your precise location.
 Image descriptions
When browsing the web in Microsoft Edge, screen reader users may encounter images that are not annotated with alt text. Without alt text to describe these images, they are effectively invisible to screen reader users. When Image Descriptions is turned on, Microsoft Edge will detect these images without alt text and send them to Azure Cognitive Services to generate captions. The generated captions are then announced to screen reader users. Even when Get image descriptions from Microsoft for screen readers is turned on, images are only sent to the service when a screen reader (or other assistive technology) is connected to Microsoft Edge.
Only raw image data is sent to Azure Cognitive Services. Images are sent un-encrypted, to reduce latency. No user identifiers are included in the requests to the service. Images aren't stored or saved on Microsoft servers; images are discarded immediately after the captions are generated.
edge://settings/accessibilityTo control Image Descriptions, go to . Toggle the Get image descriptions from
Microsoft for screen readers setting.
Image Descriptions can be turned on for the current web page without enabling for all web pages. While using a screen reader, right-click the webpage, and select Get image descriptions from Microsoft > Just once. The current web page will be scanned for all images without alt text and send those to the service for descriptions. The Image Description feature will remain off for other pages and future browsing.
 Image Enhancement
To provide a better browsing experience, Microsoft Edge offers Image Enhancement by improving color, lighting, contrast, and sharpness of images. When Image Enhancement is turned on, Microsoft Edge encrypts and transmits images to Microsoft servers to perform image enhancement. No user identifiers are included in the requests to the servers. The images are cached for 30 days to improve performance.
edge://settings/privacyTo control Image Enhancement, go to  and turn on or off the Enhance images in
Microsoft Edge setting.
 Import browser data
Microsoft Edge offers an interactive and seamless experience when you launch the browser for the first time. You can import your browser data to Microsoft Edge from another browser. During import, you can either keep your existing data, or delete it and start fresh. The data includes your favorites, browsing history, autofill data, extensions, settings, and other browsing data.
Your browsing data from older versions of Microsoft Edge is automatically imported when you update Microsoft
Edge. With your confirmation, Microsoft Edge imports browser data from other browsers such as Google Chrome, Mozilla Firefox, or Internet Explorer. Microsoft Edge imports data from your most used browser as defined by your operating system. Importing your data is completed locally on your device, and is stored locally, and is not sent to Microsoft unless you sign in and sync your browsing data.

edge://extensionsYou can import extensions from a different browser such as Google Chrome. If the extension is not available on the Microsoft Edge Add-ons website, Microsoft Edge imports a local copy and asks for permission before starting. The permissions for some of the extensions may have changed. To review the extension permissions, go to .
edge://settings/importDataTo import data from another browser at any time, go to .
 Install and update
You may download and install Microsoft Edge on platforms such as Windows and macOS. Microsoft Edge uses the updater service to keep your version of Microsoft Edge up to date and secure.
When you install or update Microsoft Edge, device information is sent to Microsoft. Device information includes your release channel, basic hardware information, update identifiers, an identifier unique to your device, and a resettable identifier unique to your browser. The IP address of the device is sent to the updater service, but the last decimal is scrubbed for added privacy protection. During each browsing session, a new randomly generated token is created to install updated versions of Microsoft Edge. The token is not associated with any personal information and is only used for the installation and update process and to improve the updater service.
Microsoft Edge pings the Microsoft Edge updater service about the progress of installation and update. If an installation or update fails and crash reporting is turned on, a log is created and sent to Microsoft. For more information about sending crash reports to Microsoft, see the Crashes section. Microsoft collects information about how you downloaded Microsoft Edge, the success of the installation, and any uninstalls to better understand the success of Microsoft Edge downloads.
Automatic updates are turned on by default for all Microsoft Edge users. On all platforms, Microsoft Edge checks for updates on startup and periodically while running. On macOS devices, Microsoft AutoUpdate checks for updates for Microsoft products periodically as well. More controls and configurations are available for organizations. For more information about controls and configurations, see Update.
 Internet Explorer mode
Microsoft Edge offers a simplified experience with the integration of Internet Explorer (IE). Microsoft Edge only supports IE 11, and IE mode is only available on Windows. The IE mode feature is available for organizations through group policies. The administrator chooses to open certain sites in IE mode in Microsoft Edge.

Microsoft Edge downloads the list of sites from a location defined by the administrator through a policy, and caches the file that determines which sites must be opened in IE mode. Depending on your Windows or IE 11 settings, Microsoft Edge collects diagnostic data about the use of IE mode. Collected data includes which sites users visit, performance data, reliability data, and feature usage data. On Windows 10 and later, the diagnostic data is collected according to your Windows Diagnostic data setting. On Windows 8.1, website information is collected if the user has opted into the Flip Ahead or Suggested Sites feature in IE. IE mode may not follow the same data collection settings in the Microsoft Edge Privacy settings.
If your administrator turned on Enterprise Site Discovery, browsing history data is collected periodically to help administrators review the sites that users visit and ensure that system upgrades continue to support those sites. For more information about Enterprise Site Discovery in IE11, see Collect data using Enterprise Site Discovery.
edge://settings/defaultBrowserNon-enterprise users on Windows devices may also access IE mode. To turn on IE mode, go to  and select the Allow sites to be reloaded in Internet Explorer mode
setting. To open tabs in IE mode, open Settings and more (...) > More tools and select Reload in Internet Explorer mode. After you turn on IE mode, Microsoft Edge periodically requests a list of unsupported sites from a Microsoft service. The request is sent over HTTPS and does not contain any identifiers.
Internet Explorer browsing data is stored locally in Microsoft Edge and Internet Explorer. To delete browsing data
edge://settings/privacywhile browsing in IE mode, go to  and clear the data from both Clear browsing data and Clear browsing data for Internet Explorer.
 Intrusive ads
Ads blockededge://settings/content/adsTo provide a better browsing experience, Microsoft Edge offers to block advertisements from loading on sites that show intrusive or misleading ads. When Ads Blocking is turned on, Microsoft Edge periodically downloads from Microsoft servers the most recent list of sites that show intrusive or misleading ads and stores it locally on your device. No user identifiers are included in the download request. If you visit a site that is on the list, Microsoft Edge blocks all ads on the site and you should see the  message. To allow ads for the site, go to  and change the settings. Other than downloading the list of sites with
intrusive ads, the Ads Blocking feature does not send additional information to Microsoft or request additional information from Microsoft while you are browsing the web.
 Jump list
The jump list in Microsoft Edge lets you easily find your most recently closed sites. Hover on the Microsoft Edge icon in the task bar and right-click. The last three closed tabs are stored locally for each profile. To delete sites from the jump list in Windows 10 and later, right-click the site, and then select Remove from this list.
edge://settings/privacyYou can clear or change the display of your recently closed tabs in the jump list. Go to , and select the Choose what to clear every time you close the browser setting. When using an InPrivate window, Microsoft Edge does not add closed tab information to the jump list. When using Guest mode, the jump list is not available. For more information about clearing your browsing data, see View and delete browser history in Microsoft Edge.
 Kids Mode
Kids Mode is a convenient browsing mode designed for kids inside Microsoft Edge. With the kid-friendly features and safety guardrails in place, Kids Mode is a great place for children to safely explore the web. Kids Mode includes features like custom browser themes, kid-friendly content, browsing based on an allowlist, Bing SafeSearch set to strict, and a password requirement to exit. Kids Mode doesn't require a child account or profile, therefore you aren't able to sign into Kids Mode.

Browsing in Kids Mode is limited to a default list of kid-friendly websites. Upon navigation, the website is compared to a local list of allowed websites. The websites visited in Kids Mode are not viewable on family.microsoft.com since the browsing in Kids Mode is not associated with any account. Allowed website exceptions may be added through the profile in which Kids Mode was launched. Those exceptions are synced to the profile in which Kids Mode was launched, if that user is signed in.
To enhance the Kids Mode experience, Microsoft Edge adds a safe keyword to the header request to Microsoft Bing and Microsoft News. The safe keyword helps filter out inappropriate search results and news. Kids Mode sets preferences for Microsoft Edge settings such as setting tracking prevention to Strict to block most trackers on websites. Clear browsing data on close has also been turned on which clears things like Cookies and other website data when Kids Mode closes. To clear browsing data at any time within Kids Mode, complete the following actions.
1. Choose Settings > Privacy.
2. Choose Choose what to clear.
Kids Mode does not collect data for personalization of the news feed or other Microsoft services. You may not change the privacy settings for Kids Mode. Other settings like Windows Defender SmartScreen and diagnostic data are configured according to the profile in which Kids Mode was launched. For more information about diagnostic data about how you use the browser and Windows Defender SmartScreen, see the Diagnostic Data and SmartScreen sections.
 
Microsoft Edge WebDriver
msedgedriver.exeMicrosoft Edge WebDriver allows developers to drive the Microsoft Edge browser using the WebDriver protocol. The Microsoft Edge WebDriver is an executable file  separate from Microsoft Edge. Developers can call the driver from client code, such as a test script. By default, Microsoft Edge WebDriver sends diagnostic data such as the status of the New Session WebDriver command to Microsoft. To turn off the diagnostic data
MSEDGEDRIVER_TELEMETRY_OPTOUT environment variable to 1collection for Microsoft Edge WebDriver, set the . For more information about Microsoft Edge WebDriver, see Use WebDriver to automate Microsoft Edge automation.
 Network time
Microsoft Edge uses a Microsoft network time service to track time from an external source such as a time server. At random intervals or when Microsoft Edge encounters an expired SSL certificate, Microsoft Edge may send requests to Microsoft to obtain the time from a trusted source. The requests occur more frequently if Microsoft Edge detects the system clock is inaccurate. A system clock inaccuracy happens if the user changes the time on the operating system and that conflicts with the correct time zone. The Microsoft network time service is used to get the Coordinated Universal Time (UTC). The requests contain no cookies or user identifiers, and no data is logged.
 New tab page
Microsoft Edge provides an engaging and user-centric new tab page with a search box powered by Bing.
Microsoft Edge also provides quick link tiles for the sites you visit most frequently, and relevant content from Microsoft News or Office 365. You can change the appearance of the new tab page by selecting the customize button. Your new tab page preferences are set for each profile and stored locally on your device. The preferences aren't synced across devices.
To speed up load times for the Microsoft Edge new tab page, the page may be loaded in the background. The content that is loaded might include cookies, if you allow cookies. You can turn off background loading for the
edge://settings/newTabPageMicrosoft new tab page. Go to  and turn off the Preload the new tab page for a faster experience setting.

 Microsoft News 
edge://settings/siteDataTo tailor content to your interactions and preferences, the new tab page in Microsoft Edge stores cookies with randomly generated identifiers on the device. A scrubbed version of your IP address is also used to tailor the content to your general region. TO clear the cookies that persist on your device, go to .
To prevent ads from being personalized, see Ad settings on the Microsoft privacy dashboard. Turn off the See personalized ads in your browser setting. To turn off the quick link tiles, open customize button > Custom and turn off the Show quick links setting. Microsoft Edge uses your local browsing history to personalize the quick link tiles. You can delete or create new tiles. The data is only stored locally on the device, per profile.
The search box on the new tab page runs a Bing search based on the query you type. To automatically provide search suggestions and results, Microsoft Edge shares your typed characters, search query, IP address, and search identifiers with Bing. The search box may be configured with group policies to provide search results from Microsoft Search. The results can include information from your organization such as documents and intranet content. To provide an integrated search experience, Microsoft Edge stores cookies locally on the device.
If you are signed in to Microsoft Edge with your Microsoft account, you may manage your browsing activity associated with the new tab page from the Microsoft privacy dashboard.
edge://settings/privacyMicrosoft Edge collects diagnostic data about how you use the new tab page, such as interactions with the search box and selections on quick link tiles. To enable collection of diagnostic data about how you use the new tab page, go to  and turn on the Help improve Microsoft products by sending optional diagnostic data about how you use the browser, websites you visit, and crash reports setting. The browser sends diagnostic data about how you use the Microsoft News page to Microsoft to help understand user interactions with news content and improve Microsoft products. You may turn off Microsoft News content by selecting the customize button on the new tab page. News data is sent to Microsoft using HTTPS and stored for up to 13 months, after which it is aggregated and the personal identifiers are removed.
The new tab page also lets you set a custom image as the background. The image is stored locally on the device and may be deleted by removing the image or uploading a new image. No information about the image is sent to Microsoft.
 Office 365 
If you are signed in to Microsoft Edge with a work or school account, your organization may turn on Office 365 as an option for page content on the new tab page. The feature is currently available only for commercial customers, under the Microsoft Online Services Terms (OST). For more information about privacy for Office 365, see Overview of privacy controls for Microsoft 365 Apps for enterprise.
InPrivate browsing and Guest mode offer alternative new tab page experiences.
 On startup
Microsoft Edge lets you pick up your browsing where you left off. It opens your last open tabs from your previous browsing session, including session cookies. This feature remains available on startup to restore tabs
from your previous session and keep you signed in to sites you visited. You can configure Microsoft to edge
edge://settings/onStartupdisplay the open tabs from your previous browsing session. Go to  and turn on the
Continue where you left off setting. If you select the Continue where you left off setting and clear browsing data each time you close the browser, the data you specified is deleted but the URL persists for the next session.
edge://settings/profiles/syncYou may set Microsoft Edge to open specific pages on startup. The pages you specify are stored locally on your device and are profile-specific. If you turned on sync for settings, the specified pages are synced across all versions of Microsoft Edge where you are signed-in. To enable syncing your settings, go to  and turn on Settings.
InPrivate and Guest mode tabs aren't restored on startup.
 Password Monitor
Microsoft Edge is committed to keeping you safe on the web. If you are signed in to Microsoft Edge, Password Monitor alerts you if your credentials have been exposed in a third-party data breach. If Password Monitor is turned on, your saved credentials are hashed and encrypted locally on your device.
Saved credentials are sent to Microsoft servers over HTTPS, and compared against an encrypted list of known breached credentials. Your account identifier is securely sent along with your hashed and encrypted credentials to the Password Monitor service.
If a credential is found in the list of known breached credentials, Microsoft sends an encrypted response back to your version of Microsoft Edge. The message warns you that your credential was detected as part of a hack or breach. No data is stored on Microsoft servers after the check is complete.
edge://passwordsThe feature is only available for users signed in to Microsoft Edge. Microsoft Edge asks for your permission to turn on Password Monitor. To manage Password Monitor, go to .
 Payments
Microsoft Edge helps you be more productive by letting you save your payment info to your browser profile and offering to automatically fill in payment forms with the info when you need it while browsing. When you encounter a similar payment form, Microsoft Edge offers to fill in the form with the saved info. Credit cards and other payment info is only saved with your explicit permission.
Microsoft Edge asks you if you want to store your payment info if payment autofill is turned on. The info is
edge://settings/paymentsencrypted locally on your device. To delete saved payment information, go to . When
edge://settings/paymentsyou delete saved payment info, the info no longer appears as an autofill suggestion. To not save any payment information, go to  and turn off the feature.
Microsoft Edge lets you save your payment information to your browser profile. Microsoft Edge offers to automatically fill in payment forms when needed. Whenever you encounter a similar payment form, Microsoft Edge offers to fill in the form. Credit card and other payment information are only saved with your explicit permission.
Microsoft Edge asks you if you want to store your payment information if payment autofill is turned on. The information is encrypted locally on your device. To manage payment information, go to 
edge://settings/payments. When you delete saved payment information, it no longer appears as an autofill
suggestion.
Microsoft Edge supports the PaymentRequest API. The API lets you pay for purchases with payment information you previously saved using autofill. The PaymentRequest API allows the merchant to request the following information: credit card number, credit card expiration, full name, billing address, email address, phone number, and shipping address. The API tells the merchant that you have credit card information saved, but does not share any information with the merchant unless you allow it. To turn off the Payments feature, go to 
edge://settings/privacy.
If you previously saved payment information to your Microsoft account, it is also available for autofill in the browser. Payment information stored in your Microsoft account syncs across devices. If you previously made any Xbox or Microsoft Store purchases, you may already have payment information saved to your Microsoft account. During payment autofill, a card from your Microsoft account is masked and is only fully revealed after two-factor authentication. The masking provides added security when retrieving your payment information.
The feature is only available for users with a non-child Microsoft account. The feature is not available for users signed into Microsoft Edge with a work or school account.
If you allow personalization, the Microsoft Edge team collects and uses your Microsoft Edge browsing history to personalize experiences and advertising on Bing, Microsoft News, and other Microsoft services. Personalization provides more relevant and useful search results, ads, and news content. For example, if the Microsoft Edge team determines based on your browsing that you prefer a particular store, the ads you see may be for that store. Similarly, if you frequently look at travel blogs and read travel articles, your news feed may include news content about traveling.
The personalization feature is only available for users with a non-child Microsoft account. The feature is not available for users signed in to Microsoft Edge with a work or school account.
Your browsing history is collected and used for personalization only if all four conditions are met.
You are signed in to a non-child Microsoft account.
You gave permission for the collection and use of the data for personalization.
Your group policies managed by an organization (employer, school, and so on) allow personalization. You not using the browser in Guest or InPrivate modes.
Your browsing history and other data are transferred over HTTPS and attached to your Microsoft account information. Your browsing history is stored on secure Microsoft servers. You may view and delete previously shared browsing history by going to the Microsoft privacy dashboard. Your browsing history is stored on secure Microsoft servers for up to 45 days. After 45 days, the data is deleted and not used for personalization.
You may modify your interests or opt-out of personalized ads from the Ad settings on the Microsoft privacy dashboard.
NOTE
edge://settings/privacyOpting out of personalized ads on the Microsoft privacy dashboard does not turn off the collection and use of your browsing history for personalization of search results and content in your news feed. You can turn off the collection and use of your Microsoft Edge browsing history for personalized search results and news. Go to . In Personalize your web experience turn off the Improve your web experience by allowing Microsoft to use your browsing history from the account for personalizing advertising, search, news and other Microsoft services setting. If you stop sharing the data, Microsoft no longer collects and uses your browsing history to personalize ads, search results, and news. For more information about personalization in Microsoft Edge, see Microsoft Edge browsing history for personalized advertising and experiences. Print
edge://settings/printingMicrosoft Edge lets you print webpages, PDF files, or other content using devices and applications. When you print to a printer, application, or PDF, Microsoft Edge sends the commands and file information to the operating system of your device. The information is not sent to Microsoft. All data sent to the operating system of your device for printing is deleted immediately after printing is completed or canceled. To change your printing destination, go to .
You may also print webpages and files to a PDF using Microsoft Print to PDF, which does not send any data about the file back to Microsoft. Any annotations made to the PDF file are saved locally to the file.
 Profiles
Profiles in Microsoft Edge allow you to separate your browsing data into independent profiles. Data associated with one profile is separate from data associated with other profiles. Your personal favorites and history, for example, aren't synchronized with your work account if you set each up in different profiles.
However, users can easily switch between existing profiles in Microsoft Edge without the need for passwords. If users have access to the same device, users may create another profile on the same version of Microsoft Edge without the permission of the current profile owner. Removing the profile from Microsoft Edge settings permanently deletes browsing data for the specific profile stored on the device, such as browsing history, favorites, form fill data, and passwords. Data synced to your account may still be stored in the Microsoft cloud and may be cleared from the Microsoft privacy dashboard.
Guest mode is a temporary instance of a fresh profile. It allows you to browse on another user's device without modifying the signed-in profile. Browsing data from Guest mode such as favorites, browsing history, passwords, and form fill data does not persist after you close all Guest mode windows. Downloaded files are stored on the device, but the history of the downloads is deleted.
Guest mode allows you to browse the web without being signed in to other sites automatically. Microsoft Edge does not send websites any information to indicate that the user is browsing in Guest mode. When you use Guest mode, permission to collect diagnostic data about how you use the browser and websites you visit is taken from the profile of Microsoft Edge from which the Guest mode session was launched. All browsing data for the specific Guest mode session is cleared after all Guest windows are closed.
InPrivate browsing is a private browsing mode. No browsing history, download history, cookies and site data, nor form fill data are remembered. Microsoft Edge saves downloaded files and any new favorites created while browsing InPrivate.
By default, while browsing InPrivate, Microsoft does not collect any information about websites you visit for product improvement purposes. Your school, workplace, or internet service provider may still be able to see your browsing activity.
Browsing data for the specific InPrivate session is cleared after all InPrivate windows are closed. When using the Windows Input Method Editor (IME) keyboard for typing and inking, data may be collected to improve language recognition and suggestion capabilities. You can stop inking and typing data from being collected by
Microsoft while using the Windows IME keyboard during InPrivate and normal browsing. Open Start > Settings > Privacy and turn off Inking & typing personalization. For more information about InPrivate browsing, see Browse InPrivate in Microsoft Edge.
 Read aloud
edge://settings/clearBrowserDataMicrosoft Edge offers Read aloud, which reads the content of a webpage to the user. To start Read aloud, rightclick the webpage or open Settings and more (...)and selectRead aloud. Read aloud offers multiple voices to read the webpage content. If you are using voices that are installed on Windows 10 and later under the Time & Language section of Windows Settings and want to clear the local cache for any voices you previously used, go to .
When you start Read aloud, Microsoft Edge uses the Web Speech API. Depending on the voice you select, the contents of the page are converted from text to speech using either a platform-supplied, client-side library (for example, one specific to your operating system) or a server-side library powered by Azure Cognitive Services.
If your content is converted to speech using a client-side library, no information is sent to Microsoft servers. If your content is converted to speech using Azure Cognitive Services (as indicated by the word "Online" in any of the voice names), the text, along with a randomly generated token, is sent to Microsoft. Once conversion is complete, the service returns the spoken text in an audio file to your device. All data is encrypted while being transferred from your device to Microsoft and vice versa. The text that is sent to Microsoft and the audio file that is generated are both deleted immediately after conversion occurs; no other data about your web content is stored for any period of time.
 Releasing new functionality
To improve Microsoft Edge, the Microsoft Edge team is always learning from users. As part of the learning, some users may experience a new function before it is made available to everyone.
To enable new functions for randomly selected users, Microsoft Edge regularly sends required information about your operating system, channel, version, country or region, and other device configuration data to the Microsoft Edge configuration service. The data is sent with a resettable identifier unique to your browser. Data is transmitted to the service over HTTPS. The data is used for receiving updates to enable new functionality, to keep Microsoft Edge up to date and performing properly, and to improve Microsoft products and services.
More controls and configurations are available for organizations. For more information about controls and configurations for organizations, see Microsoft Edge configurations and experimentation.
edge://settings/privacyAs a user, you aren't able to turn off the browser updates controlled or configured by your organization. You can control whether your product usage data is sent to Microsoft. Go to , and change the Optional diagnostic data settings.
Microsoft developers need to understand how new functions affect Microsoft Edge and Microsoft services. Microsoft Edge sends a resettable identifier unique to your browser and a functions tag that encodes which new functions were enabled for Microsoft Edge and Microsoft services. New functions help build the best experiences and the best browser for everyone.
edge://settings/privacyThe functions tag is not unique to your installation of Microsoft Edge. The tag is shared across all Microsoft Edge instances that share the same set of new functions. Microsoft Edge sends the information via HTTPS to Microsoft services. The browser does not send the information when you browse InPrivate or in Guest mode. You can prevent the data from being sent. Go to , and turn off the Help improve Microsoft products by sending optional diagnostic data about how you use the browser, websites you visit, and crash reports setting. For more information about how to reset the identifier unique to your browser, see the Diagnostic data about how you use the browser section.
 Resolve navigation errors
http://edge.microsoft.com/captiveportal/generate_204edge://settings/privacyIf Microsoft Edge detects SSL connection timeouts, certificate errors, or other network issues that may be caused by a captive portal, it sends a request to  and checks the response code. Captive portals include a Wi-Fi network at a hotel or airport. If the request is redirected to another URL, Microsoft Edge opens the URL in a new tab, assuming that it is a sign-in page. Requests to the captive portal detection page are a stateless service. Requests aren't logged, and cookies aren't sent or saved. On Windows platforms, Microsoft Edge uses a Windows captive portal service. Otherwise, the Microsoft Edge captive portal service is used. You can turn off the service. Go to , and turn off the Use a web service to help resolve navigation errors setting.
 Search results data for product improvement
In order to improve your experience in Microsoft Edge, Microsoft Bing, Microsoft News, and other Microsoft services, when the setting for this feature is enabled, Microsoft Edge will collect and use data from your web searches in Microsoft Edge. Microsoft will use your search results activity to make everyone's web and search experience better, more relevant, and useful. The data Microsoft collects is from searches you do across the web, including sites Microsoft doesn't own or operate.
 Microsoft Edge will scrub and de-identify the data by removing data identifying the person or device from which it was collected.
Microsoft doesn't use any information we collect to personalize or provide ads to you.
The data Microsoft collects is never associated with your account or your device.
This data collection and setting is not available on managed devices.
The data Microsoft collects may include the search query, the search results that are displayed to you, and the interaction you have with those search results, such as the links you click. Microsoft may also collect demographic data.
To manage the collection and use of your search results activity for product improvement, do the following:
1. Open Microsoft Edge.
2. Select Settings and more > Settings.
3. Select Privacy, search, and services.
4. Under Search and service improvement, turn on or off the setting for Help improve Microsoft products by sending the results from searches on the web.
If you stop sharing your data, Microsoft may continue to use previously collected search results data, but it will still be de-identified and not associated with you or your device.
 Secure DNS
93.184.216.34example.comWhen navigating to a website, the browser needs to look up the network address, such as , to resolve the host name, such as . Secure DNS performs this lookup using a service over an HTTPS connection to the DNS service provider. Secure DNS protects the lookups from modification or eavesdropping by attackers on the network.
By default, your current DNS service provider is used to avoid disruptions to your browsing. Not all service providers offer secure DNS. To avoid delays in browsing, if the secure DNS connection fails, Microsoft Edge attempts a DNS lookup with your current DNS service provider that is not encrypted.
Microsoft Edge allows you to use a specific secure DNS provider. If a secure DNS provider is selected, then Microsoft Edge does not fall back to regular DNS lookup if the secure lookup fails. You can control your secure
edge://setting/privacyDNS settings in .
offSecure DNS is  by default for managed machines that are part of an organization. It can be configured using administrative policies. InPrivate browsing uses the secure DNS setting of the profile from which the InPrivate session was launched. Guest mode will always use your current service provider.
 Shopping
Microsoft Edge helps you find coupons, rebates, and better prices while shopping online. To help you find coupons or the best price while shopping online, Microsoft Edge downloads a list of shopping domains locally to the client from the Microsoft shopping service.
When you go to a website, or save an item to your Collections, Microsoft Edge locally determines if the website you're on is a shopping domain or product detail webpage. If the website is identified as a shopping webpage, Microsoft Edge sends the URL with personal data removed to the Microsoft shopping service.
Microsoft also sends the product price, product image, product name, ratings, and reviews, along with information about Microsoft Edge and your operating system version to the service. The data is sent over HTTPS with a randomly generated identifier and cookies if cookies are allowed.
The Microsoft Edge shopping feature requires sharing of cookie information with Bing. For example, the cookies may be used for debugging, fraud detection, and analytics. The Microsoft shopping service returns prices from other retailers, historical price trends, and any available coupons for that website.
When you're applying coupons, cookies are stored on your device to correctly attribute the coupon provider.
Cookies are saved by Microsoft-trusted coupon providers only after a coupon is successfully applied on the cart. After the coupons are applied, information about the success of the coupons is sent back to the Microsoft shopping service to help understand which coupons succeeded or failed.
Data sent to the Microsoft shopping service is sent over HTTPS with a randomly generated identifier that changes per coupon lookup. Microsoft Edge partners with Bing Shopping to provide coupons relevant to the user's query. In some instances, Microsoft may receive revenue for use of the coupons. Whether a revenue share payment may be received is not factored into the ranking of coupons shown to users.

If you visit a shopping domain and you are an existing Bing Rebates user, Microsoft Edge sends the domain along with cookies to the Microsoft shopping service to retrieve your Bing Rebates profile and cash back offers for the domain. If you choose to activate cash back, Microsoft Edge sends your URL to the Microsoft shopping service to receive an affiliate URL. Cookies may be stored on your device to correctly attribute the rebates provider.
The shopping service is turned on by default for all users. To change the shopping setting in Microsoft Edge, complete the following actions.
edge://settings/privacy1. Go to .
2. Turn off the Save time and money with Shopping in Microsoft Edge setting.
InPrivate browsing uses the shopping setting of the profile that launched the InPrivate session.
 Sign in and Identity
Signing in to Microsoft Edge provides many features to make the browser more productive. To sign in seamlessly when you first launch Microsoft Edge, it attempts to detect your identity from the operating system. If Microsoft Edge detects your identity from the operating system but you do not want to remain signed in to
edge://settings/profilesMicrosoft Edge, go to  and either sign out or remove your profile.
If a new identity is added to the operating system and your Microsoft Edge profile does not currently have an identity, Microsoft Edge adds the specific identity to your profile. If you sign into Microsoft Edge with a Microsoft account or a work or school account and do not have an identity on your Windows profile, the account is added to your Windows profile unless you choose to not add it to Windows while signing in.
Being signed in to Microsoft Edge enables single sign-on. You are automatically signed in to certain websites such as Bing, and other identity-powered experiences such as Sync. If you want to limit automatic sign-in to Microsoft sites such as Bing, you may sign out of the browser.
To sign into specific sites again using your user name and password or clear your cookies, go to 
edge://settings/privacy. For more information about clearing browsing data, see View and delete browser
history in Microsoft Edge.
To prevent any identity from being associated with Microsoft Edge, remove your Microsoft Edge profile or sign out of Microsoft Edge. To delete all data associated with your Microsoft Edge profile from your device, you must remove your Microsoft Edge profile. Deleting all data does not delete previously synced data associated with the identity.
Your identity in Microsoft Edge on macOS is shared between Microsoft apps. A shared identity allows you to sign into a Microsoft app without having to separately enter your credentials if you are signed in to another Microsoft app on the device. On macOS, you aren't automatically signed in to Microsoft Edge based on your authentication state in another Microsoft app. When you try to sign into Microsoft Edge, it offers to use the credentials from another Microsoft app on the device to sign into Microsoft Edge seamlessly. Similarly, when you are signed in to an account to Microsoft Edge, if you try to sign into other Microsoft apps, your Microsoft Edge credentials may be used to help you sign into the other Microsoft app on the device without requiring you to enter your credentials again.
You aren't able to sign into Microsoft Edge when using Guest mode or InPrivate.
 SmartScreen
SmartScreen is designed to help you safely browse the web. When you go to websites or download files, SmartScreen checks the reputation of the URL or file. If SmartScreen determines that the site or file is malicious, it blocks you from going to the site or downloading the file.

As you browse the web, SmartScreen categorizes websites and downloads as top traffic, dangerous, or unknown. Top traffic is popular sites that SmartScreen has determined are trustworthy. If you go to a site marked as dangerous, SmartScreen immediately blocks you from accessing the site. When you go to an unknown site, SmartScreen checks the reputation to determine if you should access the site.
SmartScreen uses three types of reputation checks.
1. SmartScreen checks the URL of sites you visit against a local list to determine if the site is part of top traffic or is a known dangerous site. When you visit a top traffic site, SmartScreen does not send the URL to the SmartScreen service. If the URL is on the local list of dangerous sites, SmartScreen blocks it, which prevents any portion of the malicious web content from loading. Microsoft Edge periodically downloads an updated list of top traffic and dangerous sites to the device.
2. SmartScreen performs a synchronous reputation check of the URL. SmartScreen checks on all URLs that aren't categorized as top traffic. Microsoft Edge passes the URL, relevant information about the site, an identifier unique to your device, and general location information to the SmartScreen service to determine the safety of the site. The information provided by Microsoft Edge allows the service to identify new dangerous sites and stay up to date with the latest security threats. The results of URL checks are stored locally on the device and are automatically cleared at the end of the browser session. All requests to the SmartScreen service are made with HTTPS encryption.
3. SmartScreen checks downloaded files to help prevent harm to your device. SmartScreen performs a binary file reputation check synchronously as your download completes. Microsoft Edge sends information about the file such as the file hash, file name, download URI, and an identifier unique to your device to SmartScreen to perform the reputation check. All SmartScreen requests are made with HTTPS encryption. The SmartScreen service sends back the result of the check, which allows the file to either
fully download or not. The results are stored locally on the device.
The SmartScreen service stores data about the reputation checks and builds a database of known malicious URLs and files. The data is stored on secure Microsoft servers and is used only for Microsoft security services.
The data is never used to identify or target you in any way. Clearing your browsing cache clears all locally stored SmartScreen URL data. Clearing your download history removes any locally stored SmartScreen data about file downloads.
edge://settings/privacyedge://settings/privacySmartScreen is turned on by default for Microsoft Edge. To disable SmartScreen, go to and under Security turn off the Microsoft Defender SmartScreen setting. The setting is the same for all profiles associated with the installation of Microsoft Edge on your device. The setting is not synced across devices. The setting applies to InPrivate browsing and Guest mode. If your device is managed with group policies set by your organization, the setting is reflected in Microsoft Edge. To view the setting, go to . For more information about SmartScreen, see SmartScreen: FAQ.
Optionally, SmartScreen checks the URLs of files you download to see if any are categorized as potentially unwanted apps. Blocking potentially unwanted apps helps deliver more productive, performant, and delightful Windows experiences. The setting is turned off by default and is only available on Windows 10 and later devices.
edge://settings/privacyTo enable the feature, go to  and turn on the Block potentially unwanted apps
setting. For more information about how potentially unwanted apps are categorized, see Potentially unwanted application (PUA). For more information about how to configure the setting, see Detect and block potentially unwanted applications.
 Speech recognition
To convert your speech into text, Microsoft Edge supports the Web Speech API. If a website includes a web feature that requires capture and translation of your speech to text and requests access to your microphone, Microsoft Edge sends the captured audio to a Microsoft service where it is translated into text. The recorded audio is sent with a randomly generated token over a secure HTTPS connection to the Microsoft Azure Cognitive Services. The recorded audio content is not stored for any purposes. The text is sent back to your device and then sent to the website.
To turn off speech translated to text, you may deny microphone access from any site that prompts for
edge://settings/content/microphonepermission. To turn off the Microphone permission for all sites, go to .
 Spellcheck
Microsoft Edge checks your spelling as you type in the browser. The spellcheck service is completed locally on the device. Microsoft Edge does not send information about your typing to Microsoft for spellcheck. You can
edge://settings/languagesturn off the feature. Go to . In Check Spelling, turn off the setting for each desired language.
edge://settings/languagesWhen you add a new language to Microsoft Edge, the browser downloads the dictionary for the new language to the device using HTTPS. The dictionary is used for the built-in spellcheck service. Deleting the language from your Microsoft Edge settings deletes the dictionary from the device. Guest mode does not use the custom dictionary from the profile or any added languages. To add or remove words in your local dictionary, go to  and under Check Spelling select Add or delete words.
 Suggest similar sites
edge://settings/privacyTo help resolve URL typos in the address bar that result in a website error, Microsoft Edge may recommend a corrected URL. When a website navigation error occurs, Microsoft Edge sends the domain of the web address to the Microsoft service to suggest a corrected URL. Microsoft Edge does not include identifiers or tokens with the domain. If the service finds a suggestion, it returns the suggested URL. Microsoft stores the incorrect domain, and suggested domain, to help improve the service. To help you go to the correct sites, the feature is turned on by default. To turn off the feature, go to  and under the Services turn off the Suggest similar sites when a website can't be found setting.
 Sync
Signing into Microsoft Edge with a Microsoft account will enable syncing your browsing data across all signedin versions of Microsoft Edge. You can sync your browsing history, favorites, settings, form fill data including addresses and more, passwords, extensions, open tabs, and collections. Each synced data type may be turned on or off individually.
Favorites include any tabs you previously set aside in previous versions of Microsoft Edge, which sync along with the rest of your favorites. Deleted or modified favorites or other data from one signed-in version of Microsoft Edge sync to all other signed-in versions of Microsoft Edge where sync is turned on. To manage sync
edge://settings/profiles/syncconfigurations, go to . Your sync settings may be managed by your organization.

edge://favoritesedge://settings/profilesFor sync to function, all device connectivity and configuration data needed to provide the sync experience is sent to Microsoft. Sync data includes the name of your device, make, and model. To delete sync data, see Microsoft device dashboard. To manage your synced favorites, go to . To manage all other data types, go to .
When you sign into Microsoft Edge with your Microsoft account or work or school account, Microsoft Edge will store your preferences for your data privacy settings in Microsoft's servers. Microsoft Edge will only use the stored settings to make it easier for you to migrate your experience when you start using Microsoft Edge on a different device, or when you sign in to Microsoft Edge.
All synced data is encrypted in transit over HTTPS when transferred between the browser and Microsoft servers. The synced data is also stored in an encrypted state in Microsoft servers. Sensitive data types such as addresses and passwords are further encrypted on the device before being synced. If you are using a work or school account, all data types are further encrypted before being synced using Microsoft Purview Information
Protection. All other synced data types are stored until you delete the data, the account is deleted, or the account becomes inactive. An account ID is attached to all synced data, as the ID is necessary to perform sync across multiple devices.
InPrivate and Guest mode browsing data does not sync to your Microsoft account. However, favorites created during InPrivate sessions are synced across your signed-in versions of Microsoft Edge.
 Tips and recommendations
Microsoft Edge wants to provide you with relevant tips and recommendations to get the best experience using the browser. Microsoft Edge uses available device connectivity and configuration data to provide relevant tips and recommendations. This data will consist of your operating system, locale, browser settings, and other device connectivity and configuration data. This data is sent over a secure HTTPS connection with a resettable identifier unique to your browser. For Windows 10 and later devices while Microsoft Edge is being set up, we honor tailored experiences in Windows. Learn more about tailored experiences in Windows.
This data is not sent during InPrivate browsing or Guest mode.
 Tracking prevention
Microsoft Edge is designed to detect and block known trackers. Users may choose from three levels of tracking prevention: Basic, Balanced, and Strict. To protect user privacy, Balanced is selected by default. Microsoft Edge detects trackers before any are loaded on the page by using an open-source list of known trackers. The list is downloaded to the device periodically as the list is updated. The number of trackers blocked and names of those trackers are stored locally on the device for statistical purposes. To clear the data, go to 
edge://settings/privacy/blockedTrackers. The detection and blocking of trackers occurs locally on the device. To
edge://settings/privacydisable tracking prevention, go to . For more information about Tracking prevention, see Learn about tracking prevention in Microsoft Edge.
You may turn off list updates using the following group policy, Enable component updates in Microsoft Edge.

 Translate
In Microsoft Edge, you can browse the web and translate webpages into a language of your choice. Microsoft Edge uses Microsoft Translator to translate web pages. This feature at first uses a library on your device that samples certain visible portions of a webpage to detect the original language. If the detected language is not one of your preferred languages, Microsoft Edge offers to translate the webpage to your preferred language or another language you choose. You can then translate the page by selecting Translate. You can autotranslate all pages in that language by choosing the Always translate the pages from <a language> checkbox.
Microsoft Edge does not translate a webpage without your permission. If you do decide to translate, Microsoft Edge sends the text of the webpage you want to translate, along with the to and from language and a service token to Microsoft Translator over a secure HTTPS connection. The service token doesn't contain any user identifiable information. Microsoft Translator then processes the text to remove any identifiers (such as email or phone number) and stores the text for service improvement purposes. The details of this communication are covered under Microsoft Privacy Statement - Microsoft privacy.
If you want to stop Microsoft Edge from offering to translate webpages, complete the following steps.
edge://settings/languages1. Go to.
2. Turn off theOffer to translate pages that aren't in a language you readtoggle and close the webpage.
 Travel
When you do online activities related to travelling, Microsoft Edge helps you find recommendations for travel. To help you find recommendations while planning your travel online, Microsoft Edge downloads a list of travel domains to the client from the Microsoft Travel service.
When you visit a website, Microsoft Edge locally determines if the website you're on is a travel domain. If the website is identified as a Travel-related webpage, Microsoft Edge sends the domain, flight dates, From and To locations, and passenger count, along with information about Microsoft Edge and cookies (if cookies are allowed) to the service. This data does not include any personally identifiable information, and is sent over HTTPS.
The Microsoft Edge Travel feature requires sharing cookie information with Bing.com. For example, cookies may be used for debugging, fraud detection, and analytics. When you visit Bing.com in your browser and update any settings on Bing pages, Bing.com creates a cookie in your browser and stores information in the cookie. This cookie is shared across Bing.com pages, and Microsoft Edge sends this cookie to the Microsoft Travel service to keep your experience consistent.
The Travel service is turned on by default. To change the Travel setting in Microsoft Edge:
edge://settings/privacy1. Go to .
2. In the Services section at the bottom of the page, turn off the setting Show travel recommendations in Microsoft Edge.
 Web apps and Pinned sites
Microsoft Edge lets you install web apps made by website developers and pin your favorite sites.
When you pin a site, it is added to your taskbar or dock. The data is stored locally on your device. For some sites, information about whether the site has been pinned is shared with the site, so the site knows not to prompt to pin. You may manage your pinned sites from the taskbar or dock. Pinned sites open in Microsoft Edge windows and use the same site permissions and diagnostic data settings as the specific version of Microsoft Edge.
 WebView
Microsoft Edge WebView controls allow app developers to host web content in native applications on Windows 7, Windows 10, and later. The applications hosting the WebView2 instance may send diagnostic data to Microsoft. Diagnostic data can include how you use the Microsoft Edge, and sites you visit.
edge://settings/privacyedge://settings/privacyTo enable diagnostic data collection, go to . Turn on the Optional diagnostic data setting. To turn off diagnostic data collection for Microsoft Edge on Windows 10 and later, open Start > Settings > Privacy and select Diagnostics & feedback. To turn off diagnostic data collection for all other platforms, go to . Turn off the Help improve Microsoft products by sending
optional diagnostic data about how you use the browser, websites you visit, and crash reports setting. The applications hosting Microsoft Edge WebView may collect other data that is governed by the data collection management of the developer and relevant privacy policies.
 Windows Defender Application Guard
Windows Defender Application Guard (WDAG) is a feature available for organizations. When Windows Defender Application Guard is turned on, Microsoft Edge opens untrusted sites inside an isolated container. The use of a container helps protect the resources in your organization from malicious sites or phishing attacks. The feature is only turned on with group policies that are managed by your organization. It is only available on recent versions of Windows 10 and later. WDAG collects product improvement diagnostic data about opening untrusted sites in the isolated container, such as how long it takes to open a new Application Guard window.
edge://settings/privacyWith your permission, WDAG also collects information about how you use the browser and information about sites you visit. To turn off the diagnostic data collection for Microsoft Edge on Windows 10 and later, open Start > Settings > Privacy and select Diagnostics & feedback. To disable diagnostic data collection for all other platforms, go to  in a normal browsing session and turn off the Help improve Microsoft products by sending optional diagnostic data about how you use the browser, websites you visit, and crash reports setting.
 Windows Information Protection
Windows Information Protection (WIP) helps prevent accidental leaking of corporate information. It is only available for organizations through group policies managed by your organization. WIP is enabled for those sites identified as corporate assets. Identify which sites are corporate assets from the management icon in the address bar. WIP prevents copying and pasting from the browser or uploading certain files to sites outside your organization.

If WIP is turned on for your version of Microsoft Edge, the browser collects event logs and sends them to your organization. If WIP is turned on, you aren't able to opt out of the data collection. WIP is only available on releases of Windows 10 from August 2016 or later. For more information about the event logs captured by WIP, see How to collect Windows Information Protection (WIP) audit event logs.
 Thank you!
edge://creditsMicrosoft Edge is made possible by the Chromium open-source project and other open-source software. To view all of the software credits, go to . Google Chrome Privacy Whitepaper was used as a source for gathering related information about the Chromium open-source project.
 Getting in touch with the Microsoft Edge team
The Microsoft Edge team is always listening to customers and values your feedback. To provide feedback in
Microsoft Edge, open Settings and more > Help and feedback and select Send feedback. For Progressive Web Apps (PWAs), open Settings and more (...) and select Send feedback to Microsoft. Provide details about the feedback, but all other information is optional.
If an email is detected from your Microsoft Edge profile, it is pre-populated with the URL of the current site and relevant diagnostic data. The diagnostic data can include data about Microsoft Edge features you turned on and your browser use. You may optionally include a screenshot, files from your device, and recording of your browser may also be optionally included. If you provide optional content, it can include personal data. The data is only used for diagnostic and product improvement purposes.
User feedback is securely sent to Microsoft using HTTPS and stored on secure Microsoft servers. If you include your email address and the Help improve Microsoft products by sending optional diagnostic data about how you use the browser, websites you visit, and crash reports setting is turned on in your Microsoft Edge privacy settings, an identifier unique to your browser installation on your device is associated with your feedback. If you're signed in to Microsoft Edge with your Microsoft account, your feedback is associated with your account. All diagnostic data, including diagnostic logs, recordings, and attachments, are stored for up to 30 days. The remaining feedback data, including an optional screenshot, is stored for up to 15 months. Make a request to delete your feedback if you provided an email with your feedback item.
 
 The Web We Want initiative
 	6/21/2022 • 2 minutes to read • Edit OnlineThe Web We Want initiative is a cross-browser, open initiative focused on identifying missing features and functionalities in the web platform for potential development as web standards or browser features.
If you build for the web, you inevitably run into problems. Perhaps there's no way to achieve an aspect of your design with CSS, or it may require an incredible amount of experimenting with CSS. Maybe there's a device feature you want to tap into using JavaScript, or there's a needed Developer Tools feature that can make your job easier.
The Web We Want initiative is the place to let browser vendors and standards groups know what you think is missing from the web platform. Here's how you can get involved:
Navigate to The Web We Want website and submit web platform or developer tools features.
View the list of submitted Wants to upvote existing Wants that you need, which helps us prioritize them.
Join in the discussions to provide feedback, link to resources, and otherwise help usher a Want into reality.
 Stay in touch by following the initiative on Twitter or LinkedIn to keep up-to-date on what's in development, or to participate in surveys that help us prioritize submitted Wants.
 Examples of Wants that have been delivered as features
We've successfully shipped a few Wants into DevTools, such as: Source Order Viewer
The Want.
 The docs: Test keyboard support using the Source Order Viewer. 3D View
Navigate z-index, DOM, and layers using the 3D View tool - similar to what was in the Firefox DevTools.
There are also other Wants that have previous proposals in standards groups. Join us in driving the future of the web forward with the Web We Want!
























































































 
 Output 

 
 Output 



 
 Output 













. 







. 



. 







. 



















. 

. 



. 





































 
  







 
  



 
  







 
  

























































































 
  





 
  

















 
  





 
  







































 
  

 
  





 
  















